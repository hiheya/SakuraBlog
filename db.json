{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Sakura/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/warn.html","path":"warn.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/sakura-app.js","path":"sakura-app.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/font-awesome-min.css.bak","path":"live2d-widget/font-awesome-min.css.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/hititle.js.bak","path":"js/hititle.js.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/noSomeKey.js.bak","path":"js/noSomeKey.js.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/sakura.js.bak","path":"js/sakura.js.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/shehuizhuyi.js.bak","path":"js/shehuizhuyi.js.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/index.html","path":"assets/index.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/font-awesome-min.css","path":"live2d-widget/font-awesome-min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/InsightSearch.js","path":"js/InsightSearch.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/autoload.js","path":"js/autoload.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/APlayer.min.js","path":"js/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/autoload.js.bak","path":"js/autoload.js.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/hititle.js","path":"js/hititle.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/noSomeKey.js","path":"js/noSomeKey.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/shehuizhuyi.js","path":"js/shehuizhuyi.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/zoom.min.js","path":"js/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/README.md","path":"live2d_api/README.md","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/LICENSE","path":"live2d_api/LICENSE","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model_list.json","path":"live2d_api/model_list.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/APlayer.min.css","path":"css/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/bangumi.css","path":"css/bangumi.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/font.css","path":"css/font.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/sharejs.css","path":"css/sharejs.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/insight.styl","path":"css/insight.styl","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/jquery.fancybox.min.css","path":"css/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/zoom.css","path":"css/zoom.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/jquery.min.js","path":"live2d-widget/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/botui.js","path":"js/botui.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/botui.js.bak","path":"js/botui.js.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/jquery.fancybox.min.js","path":"js/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/sakura-app.js","path":"js/sakura-app.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/sakura.js","path":"js/sakura.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/lib.min.css","path":"css/lib.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/css/index.html","path":"assets/css/index.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/css/frontend.css","path":"assets/css/frontend.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/css/general.css","path":"assets/css/general.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/sql/index.html","path":"assets/sql/index.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/sql/data.sql","path":"assets/sql/data.sql","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/css/backend.css","path":"assets/css/backend.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/sql/structure.sql","path":"assets/sql/structure.sql","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/index.html","path":"assets/ext/index.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/favicon.ico","path":"assets/img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/error.png","path":"assets/img/error.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/index.html","path":"assets/img/index.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/glyphicons-halflings-white.png","path":"assets/img/glyphicons-halflings-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/logo.png","path":"assets/img/logo.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/success.png","path":"assets/img/success.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/glyphicons-halflings.png","path":"assets/img/glyphicons-halflings.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/installation-banner.png","path":"assets/img/installation-banner.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend.js","path":"assets/js/backend.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar.js","path":"assets/js/backend_calendar.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar_api.js","path":"assets/js/backend_calendar_api.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar_appointments_modal.js","path":"assets/js/backend_calendar_appointments_modal.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/loading.gif","path":"assets/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar_google_sync.js","path":"assets/js/backend_calendar_google_sync.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar_default_view.js","path":"assets/js/backend_calendar_default_view.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar_unavailabilities_modal.js","path":"assets/js/backend_calendar_unavailabilities_modal.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_calendar_table_view.js","path":"assets/js/backend_calendar_table_view.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_customers.js","path":"assets/js/backend_customers.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_categories_helper.js","path":"assets/js/backend_categories_helper.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_services.js","path":"assets/js/backend_services.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_services_helper.js","path":"assets/js/backend_services_helper.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_customers_helper.js","path":"assets/js/backend_customers_helper.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_settings_system.js","path":"assets/js/backend_settings_system.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_settings_user.js","path":"assets/js/backend_settings_user.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_users.js","path":"assets/js/backend_users.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_settings.js","path":"assets/js/backend_settings.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_users_admins.js","path":"assets/js/backend_users_admins.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_users_providers.js","path":"assets/js/backend_users_providers.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/frontend_book_api.js","path":"assets/js/frontend_book_api.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/frontend_book_success.js","path":"assets/js/frontend_book_success.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/index.html","path":"assets/js/index.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/backend_users_secretaries.js","path":"assets/js/backend_users_secretaries.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/frontend_book.js","path":"assets/js/frontend_book.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/general_functions.js","path":"assets/js/general_functions.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/working_plan.js","path":"assets/js/working_plan.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/js/installation.js","path":"assets/js/installation.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/BTCQR.png","path":"images/donate/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/alipay.svg","path":"images/donate/alipay.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/bitcoin.svg","path":"images/donate/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/github.svg","path":"images/donate/github.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/paypal.svg","path":"images/donate/paypal.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/avatar.jpg","path":"img/custom/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/like.svg","path":"images/donate/like.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/wechat.svg","path":"images/donate/wechat.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/wechat.jpg","path":"img/custom/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/sakura.svg","path":"img/custom/sakura.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/loader/orange.progress-bar-stripe-loader.svg","path":"img/loader/orange.progress-bar-stripe-loader.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/loader/orange.ajax-spinner-preloader.svg","path":"img/loader/orange.ajax-spinner-preloader.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/loader/orange.square-circle-preloader.svg","path":"img/loader/orange.square-circle-preloader.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/loader/trans.ajax-spinner-preloader.svg","path":"img/loader/trans.ajax-spinner-preloader.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/add@32x32.png","path":"img/other/add@32x32.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/default_avatar.jpg","path":"img/other/default_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/dot.gif","path":"img/other/dot.gif","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/default_gavatar.png","path":"img/other/default_gavatar.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/disqus-preloader.svg","path":"img/other/disqus-preloader.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/grid.png","path":"img/other/grid.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/gravatar.jpg","path":"img/other/gravatar.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/orange.progress-bar-stripe-loader.svg","path":"img/other/orange.progress-bar-stripe-loader.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/pause@32x32.png","path":"img/other/pause@32x32.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/image-404.png","path":"img/other/image-404.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/next-b.svg","path":"img/other/next-b.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/play@32x32.png","path":"img/other/play@32x32.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/scroll.png","path":"img/other/scroll.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/wave1.png","path":"img/other/wave1.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/wordpress-rotating-ball-o.svg","path":"img/other/wordpress-rotating-ball-o.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/wave2.png","path":"img/other/wave2.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/Alternative.cur","path":"img/cursor/Alternative.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/Escritura a Mano.cur","path":"img/cursor/Escritura a Mano.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/Move.cur","path":"img/cursor/Move.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/Ocupado.cur","path":"img/cursor/Ocupado.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/No_Disponible.cur","path":"img/cursor/No_Disponible.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/ayuda.cur","path":"img/cursor/ayuda.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/diagonal resize 1.cur","path":"img/cursor/diagonal resize 1.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/diagonal resize 2.cur","path":"img/cursor/diagonal resize 2.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/horizontal.cur","path":"img/cursor/horizontal.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/normal.cur","path":"img/cursor/normal.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/link.ani","path":"img/cursor/link.ani","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/precision.cur","path":"img/cursor/precision.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/texto.cur","path":"img/cursor/texto.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/vertical.cur","path":"img/cursor/vertical.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cursor/work.cur","path":"img/cursor/work.cur","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/themebg/point.png","path":"img/themebg/point.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/themebg/plaid.jpg","path":"img/themebg/plaid.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/themebg/star.png","path":"img/themebg/star.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/JsDelivr_Logo.svg","path":"img/logo/JsDelivr_Logo.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/cf-logo-h.svg","path":"img/logo/cf-logo-h.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/Google.svg","path":"img/logo/Google.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/cf-logo-v.svg","path":"img/logo/cf-logo-v.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/bilibili.png","path":"img/social/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/mashiro-logo.png","path":"img/logo/mashiro-logo.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/logo_onwhite.png","path":"img/logo/logo_onwhite.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/csdn.png","path":"img/social/csdn.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/logo/upyun.png","path":"img/logo/upyun.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/douban.png","path":"img/social/douban.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/facebook.png","path":"img/social/facebook.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/github.png","path":"img/social/github.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/jianshu.png","path":"img/social/jianshu.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/googleplus.png","path":"img/social/googleplus.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/heart.png","path":"img/social/heart.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/lofter.png","path":"img/social/lofter.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/qq.png","path":"img/social/qq.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/qzone.png","path":"img/social/qzone.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/sina.png","path":"img/social/sina.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/email.svg","path":"img/social/email.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/stackoverflow.svg","path":"img/social/stackoverflow.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/twitter.png","path":"img/social/twitter.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/wangyiyun.png","path":"img/social/wangyiyun.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/wechat.png","path":"img/social/wechat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/zhihu.png","path":"img/social/zhihu.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/youku.png","path":"img/social/youku.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/social/telegram.svg","path":"img/social/telegram.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/add/index.php","path":"live2d_api/add/index.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/get/index.php","path":"live2d_api/get/index.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/rand/index.php","path":"live2d_api/rand/index.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/switch/index.php","path":"live2d_api/switch/index.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/tools/modelList.php","path":"live2d_api/tools/modelList.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/rand_textures/index.php","path":"live2d_api/rand_textures/index.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/tools/name-to-lower.php","path":"live2d_api/tools/name-to-lower.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/switch_textures/index.php","path":"live2d_api/switch_textures/index.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/tools/modelTextures.php","path":"live2d_api/tools/modelTextures.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/tools/jsonCompatible.php","path":"live2d_api/tools/jsonCompatible.php","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/icon.css","path":"fonts/SAKURASO.old/icon.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso-symbol.svg","path":"fonts/SAKURASO.old/sakuraso-symbol.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.eot","path":"fonts/SAKURASO.old/sakuraso.eot","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.svg","path":"fonts/SAKURASO.old/sakuraso.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.ttf","path":"fonts/SAKURASO.old/sakuraso.ttf","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.woff","path":"fonts/SAKURASO.old/sakuraso.woff","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.eot","path":"fonts/sharejs/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.svg","path":"fonts/sharejs/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.ttf","path":"fonts/sharejs/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.woff","path":"fonts/sharejs/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/style.css.bak","path":"css/style.css.bak","modified":0,"renderable":1},{"_id":"themes/Sakura/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/unavailable.jpg","path":"assets/img/unavailable.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(3).jpg.webp","path":"images/cover/(3).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(7).jpg.webp","path":"images/cover/(7).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(8).jpg.webp","path":"images/cover/(8).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/about.jpg","path":"img/banner/about.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/writing.jpg","path":"img/banner/writing.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/WeChanSQ.jpg","path":"images/donate/WeChanSQ.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/comment-bg.png","path":"img/other/comment-bg.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(0).jpg.webp","path":"img/cover/(0).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(3).jpg.webp","path":"img/cover/(3).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(1).jpg.webp","path":"img/cover/(1).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(8).jpg.webp","path":"img/cover/(8).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(7).jpg.webp","path":"img/cover/(7).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/cookieconsent/cookieconsent.min.css","path":"assets/ext/cookieconsent/cookieconsent.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/cookieconsent/cookieconsent.min.js","path":"assets/ext/cookieconsent/cookieconsent.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/datejs/date.js","path":"assets/ext/datejs/date.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/gcal/gcal.js","path":"assets/ext/gcal/gcal.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-datatables/jquery.datatables.css","path":"assets/ext/jquery-datatables/jquery.datatables.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/fullcalendar.css","path":"assets/ext/jquery-fullcalendar/fullcalendar.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/fullcalendar.print.css","path":"assets/ext/jquery-fullcalendar/fullcalendar.print.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/gcal.js","path":"assets/ext/jquery-fullcalendar/gcal.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-mousewheel/jquery.mousewheel.js","path":"assets/ext/jquery-mousewheel/jquery.mousewheel.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-jeditable/jquery.jeditable.min.js","path":"assets/ext/jquery-jeditable/jquery.jeditable.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-qtip/jquery.qtip.min.css","path":"assets/ext/jquery-qtip/jquery.qtip.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-sticky-table-headers/jquery.stickytableheaders.min.js","path":"assets/ext/jquery-sticky-table-headers/jquery.stickytableheaders.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-qtip/jquery.qtip.min.js","path":"assets/ext/jquery-qtip/jquery.qtip.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/moment/moment.min.js","path":"assets/ext/moment/moment.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/trumbowyg.min.js","path":"assets/ext/trumbowyg/trumbowyg.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/trumbowyg.js","path":"assets/ext/trumbowyg/trumbowyg.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/break.jpg","path":"assets/img/break.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.css","path":"assets/ext/jquery-ui/jquery-ui.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.min.css","path":"assets/ext/jquery-ui/jquery-ui.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.structure.css","path":"assets/ext/jquery-ui/jquery-ui.structure.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.structure.min.css","path":"assets/ext/jquery-ui/jquery-ui.structure.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/img/custom.jpg","path":"assets/img/custom.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.theme.min.css","path":"assets/ext/jquery-ui/jquery-ui.theme.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.theme.css","path":"assets/ext/jquery-ui/jquery-ui.theme.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(0).jpg.webp","path":"images/cover/(0).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(2).jpg.webp","path":"images/cover/(2).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(1).jpg.webp","path":"images/cover/(1).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(4).jpg.webp","path":"images/cover/(4).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(5).jpg.webp","path":"images/cover/(5).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/AliPayQR.jpg","path":"images/donate/AliPayQR.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/donate/WeChanQR.jpg","path":"images/donate/WeChanQR.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/alipay.svg","path":"img/custom/donate/alipay.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/github.svg","path":"img/custom/donate/github.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/like.svg","path":"img/custom/donate/like.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/paypal.svg","path":"img/custom/donate/paypal.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/wechat.svg","path":"img/custom/donate/wechat.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/sakura.md.png","path":"img/other/sakura.md.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(4).jpg.webp","path":"img/cover/(4).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(2).jpg.webp","path":"img/cover/(2).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(5).jpg.webp","path":"img/cover/(5).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/cover/(6).jpg.webp","path":"img/cover/(6).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/startdash/sakura.md.png","path":"img/startdash/sakura.md.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-datatables/jquery.datatables.min.js","path":"assets/ext/jquery-datatables/jquery.datatables.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui-timepicker-addon.js","path":"assets/ext/jquery-ui/jquery-ui-timepicker-addon.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/images/cover/(6).jpg.webp","path":"images/cover/(6).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/lab.jpg","path":"img/banner/lab.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/music.jpg","path":"img/banner/music.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(3).jpg.webp","path":"img/custom/cover/(3).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(8).jpg.webp","path":"img/custom/cover/(8).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/bitcoin.svg","path":"img/custom/donate/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/startdash/wangshiwu.jpg","path":"img/startdash/wangshiwu.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap-theme.css","path":"assets/ext/bootstrap/css/bootstrap-theme.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/js/npm.js","path":"assets/ext/bootstrap/js/npm.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap-theme.min.css","path":"assets/ext/bootstrap/css/bootstrap-theme.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/js/bootstrap.min.js","path":"assets/ext/bootstrap/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.eot","path":"assets/ext/bootstrap/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.ttf","path":"assets/ext/bootstrap/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery/jquery.min.js","path":"assets/ext/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff","path":"assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff2","path":"assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/trumbowyg.css","path":"assets/ext/trumbowyg/ui/trumbowyg.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ar.min.js","path":"assets/ext/trumbowyg/langs/ar.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ca.min.js","path":"assets/ext/trumbowyg/langs/ca.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/bg.min.js","path":"assets/ext/trumbowyg/langs/bg.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/by.min.js","path":"assets/ext/trumbowyg/langs/by.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/cs.min.js","path":"assets/ext/trumbowyg/langs/cs.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/da.min.js","path":"assets/ext/trumbowyg/langs/da.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/de.min.js","path":"assets/ext/trumbowyg/langs/de.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/es_ar.min.js","path":"assets/ext/trumbowyg/langs/es_ar.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/el.min.js","path":"assets/ext/trumbowyg/langs/el.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/fa.min.js","path":"assets/ext/trumbowyg/langs/fa.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/fi.min.js","path":"assets/ext/trumbowyg/langs/fi.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/es.min.js","path":"assets/ext/trumbowyg/langs/es.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/fr.min.js","path":"assets/ext/trumbowyg/langs/fr.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/he.min.js","path":"assets/ext/trumbowyg/langs/he.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/hr.min.js","path":"assets/ext/trumbowyg/langs/hr.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ja.min.js","path":"assets/ext/trumbowyg/langs/ja.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/hu.min.js","path":"assets/ext/trumbowyg/langs/hu.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/it.min.js","path":"assets/ext/trumbowyg/langs/it.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/id.min.js","path":"assets/ext/trumbowyg/langs/id.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ko.min.js","path":"assets/ext/trumbowyg/langs/ko.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/lt.min.js","path":"assets/ext/trumbowyg/langs/lt.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/mn.min.js","path":"assets/ext/trumbowyg/langs/mn.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/my.min.js","path":"assets/ext/trumbowyg/langs/my.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/no_nb.min.js","path":"assets/ext/trumbowyg/langs/no_nb.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/nl.min.js","path":"assets/ext/trumbowyg/langs/nl.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ph.min.js","path":"assets/ext/trumbowyg/langs/ph.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/pl.min.js","path":"assets/ext/trumbowyg/langs/pl.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ro.min.js","path":"assets/ext/trumbowyg/langs/ro.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/pt.min.js","path":"assets/ext/trumbowyg/langs/pt.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/pt_br.min.js","path":"assets/ext/trumbowyg/langs/pt_br.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/rs_latin.min.js","path":"assets/ext/trumbowyg/langs/rs_latin.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ru.min.js","path":"assets/ext/trumbowyg/langs/ru.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/sk.min.js","path":"assets/ext/trumbowyg/langs/sk.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/sq.min.js","path":"assets/ext/trumbowyg/langs/sq.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/rs.min.js","path":"assets/ext/trumbowyg/langs/rs.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/tr.min.js","path":"assets/ext/trumbowyg/langs/tr.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/sv.min.js","path":"assets/ext/trumbowyg/langs/sv.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ua.min.js","path":"assets/ext/trumbowyg/langs/ua.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/vi.min.js","path":"assets/ext/trumbowyg/langs/vi.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_65_80e1ac_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_65_80e1ac_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_0_aaaaaa_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_0_aaaaaa_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_75_3DD481_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_75_3DD481_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_75_80e1ac_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_75_80e1ac_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_75_ffffff_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_75_ffffff_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_80_fcefa1_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_80_fcefa1_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/zh_tw.min.js","path":"assets/ext/trumbowyg/langs/zh_tw.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/zh_cn.min.js","path":"assets/ext/trumbowyg/langs/zh_cn.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_95_f42727_40x100.png","path":"assets/ext/jquery-ui/images/ui-bg_flat_95_f42727_40x100.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-icons_222222_256x240.png","path":"assets/ext/jquery-ui/images/ui-icons_222222_256x240.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-icons_062126_256x240.png","path":"assets/ext/jquery-ui/images/ui-icons_062126_256x240.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-icons_ffffff_256x240.png","path":"assets/ext/jquery-ui/images/ui-icons_ffffff_256x240.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/links.jpg","path":"img/banner/links.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(1).jpg.webp","path":"img/custom/cover/(1).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(6).jpg.webp","path":"img/custom/cover/(6).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(7).jpg.webp","path":"img/custom/cover/(7).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(5).jpg.webp","path":"img/custom/cover/(5).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(4).jpg.webp","path":"img/custom/cover/(4).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/AliPayQRsmall.jpg","path":"img/custom/donate/AliPayQRsmall.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/AliPayQR.jpg","path":"img/custom/donate/AliPayQR.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/WeChanQR.jpg","path":"img/custom/donate/WeChanQR.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/404.jpg","path":"img/other/404.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/startdash/bilibili.jpg","path":"img/startdash/bilibili.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/themebg/sakura.png","path":"img/themebg/sakura.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/index.json","path":"live2d_api/model/Potion-Maker/Pio/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures.cache","path":"live2d_api/model/Potion-Maker/Pio/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures.cache","path":"live2d_api/model/Potion-Maker/Tia/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/index.json","path":"live2d_api/model/Potion-Maker/Tia/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/physics.json","path":"live2d_api/model/KantaiCollection/murakumo/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/textures.cache","path":"live2d_api/model/KantaiCollection/murakumo/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/index.json","path":"live2d_api/model/KantaiCollection/murakumo/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/index.json","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/index.json","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/index.json","path":"live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/pose.json","path":"live2d_api/model/HyperdimensionNeptunia/general/pose.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/index.json","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/index.json","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/index.json","path":"live2d_api/model/HyperdimensionNeptunia/histoire/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/index.json","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/histoire/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/index.json","path":"live2d_api/model/HyperdimensionNeptunia/nepmaid/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/index.json","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/nepmaid/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/index.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/index.json","path":"live2d_api/model/HyperdimensionNeptunia/nepswim/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/nepswim/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/index.json","path":"live2d_api/model/HyperdimensionNeptunia/neptune_classic/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/index.json","path":"live2d_api/model/HyperdimensionNeptunia/noir_classic/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/noir_classic/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/index.json","path":"live2d_api/model/HyperdimensionNeptunia/neptune_santa/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/index.json","path":"live2d_api/model/HyperdimensionNeptunia/noir/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/noir/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/noir_santa/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/index.json","path":"live2d_api/model/HyperdimensionNeptunia/noir_santa/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/index.json","path":"live2d_api/model/HyperdimensionNeptunia/noireswim/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/noireswim/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/index.json","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/index.json","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/index.json","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/physics.json","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/pose.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/pose.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.cache","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/index.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/physics.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/index.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/physics.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/physics.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/pose.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/pose.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.cache","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/index.json","path":"live2d_api/model/bilibili-live/22/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/textures_order.json","path":"live2d_api/model/bilibili-live/22/textures_order.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/index.json","path":"live2d_api/model/bilibili-live/33/index.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/textures.cache","path":"live2d_api/model/bilibili-live/22/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/textures_order.json","path":"live2d_api/model/bilibili-live/33/textures_order.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/textures.cache","path":"live2d_api/model/bilibili-live/33/textures.cache","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap-theme.css.map","path":"assets/ext/bootstrap/css/bootstrap-theme.css.map","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.svg","path":"assets/ext/bootstrap/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/js/bootstrap.js","path":"assets/ext/bootstrap/js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/locale-all.js","path":"assets/ext/jquery-fullcalendar/locale-all.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/icons.svg","path":"assets/ext/trumbowyg/ui/icons.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/trumbowyg.min.css","path":"assets/ext/trumbowyg/ui/trumbowyg.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/donate.jpg","path":"img/banner/donate.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/client.jpg","path":"img/banner/client.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(0).jpg.webp","path":"img/custom/cover/(0).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/BTCQR.png","path":"img/custom/donate/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/WeChanSQsmall.jpg","path":"img/custom/donate/WeChanSQsmall.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/model.moc","path":"live2d_api/model/Potion-Maker/Tia/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/model.moc","path":"live2d_api/model/bilibili-live/33/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.min.js","path":"assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.js","path":"assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.js","path":"assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/sass/trumbowyg.scss","path":"assets/ext/trumbowyg/ui/sass/trumbowyg.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.min.js","path":"assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.js","path":"assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.min.js","path":"assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.min.js","path":"assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.js","path":"assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.js","path":"assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.min.js","path":"assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.js","path":"assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.min.js","path":"assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.min.js","path":"assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.js","path":"assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.js","path":"assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.min.js","path":"assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/history/trumbowyg.history.js","path":"assets/ext/trumbowyg/plugins/history/trumbowyg.history.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/history/trumbowyg.history.min.js","path":"assets/ext/trumbowyg/plugins/history/trumbowyg.history.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.min.js","path":"assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.min.js","path":"assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.js","path":"assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.min.js","path":"assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.js","path":"assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.js","path":"assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.min.js","path":"assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.js","path":"assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.js","path":"assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.min.js","path":"assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.min.js","path":"assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.js","path":"assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.min.js","path":"assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.js","path":"assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.js","path":"assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.min.js","path":"assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.js","path":"assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.js","path":"assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.min.js","path":"assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.min.js","path":"assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/template/trumbowyg.template.min.js","path":"assets/ext/trumbowyg/plugins/template/trumbowyg.template.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/trumbowyg.table.min.js","path":"assets/ext/trumbowyg/plugins/table/trumbowyg.table.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.js","path":"assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/template/trumbowyg.template.js","path":"assets/ext/trumbowyg/plugins/template/trumbowyg.template.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/trumbowyg.table.js","path":"assets/ext/trumbowyg/plugins/table/trumbowyg.table.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.min.js","path":"assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere2.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere3.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath2.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath1.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath4.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath3.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath6.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath6.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath8.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath8.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath7.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath7.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Fail.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Fail.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sleeping.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Sleeping.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sukebei1.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Sukebei1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/model.moc","path":"live2d_api/model/Potion-Maker/Pio/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sukebei2.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Sukebei2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sukebei3.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Sukebei3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Success.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Success.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere1.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere2.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere5.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch Dere5.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere4.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch Dere4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere3.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere6.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch Dere6.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch1.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch4.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch2.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch5.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch5.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch3.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch6.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Touch6.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/WakeUp.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/WakeUp.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere1.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere2.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere3.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath1.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath4.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath2.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath3.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath5.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath5.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath6.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath6.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath7.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath7.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath8.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath8.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath9.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Breath9.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Fail.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Fail.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sukebei1.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Sukebei1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Success.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Success.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sukebei2.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Sukebei2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sleeping.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Sleeping.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sukebei3.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Sukebei3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere2.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere3.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere1.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere4.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch Dere4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere6.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch Dere6.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch1.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch2.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch4.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/WakeUp.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/WakeUp.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch3.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch5.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch5.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch6.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch6.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f01.exp.json","path":"live2d_api/model/KantaiCollection/murakumo/expressions/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f03.exp.json","path":"live2d_api/model/KantaiCollection/murakumo/expressions/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f04.exp.json","path":"live2d_api/model/KantaiCollection/murakumo/expressions/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/model.moc","path":"live2d_api/model/KantaiCollection/murakumo/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f02.exp.json","path":"live2d_api/model/KantaiCollection/murakumo/expressions/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_01.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_03.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_02.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_02.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_01.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_01.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_02.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_ear_01.mtn","path":"live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_ear_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_00.mtn","path":"live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_01.mtn","path":"live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_02.mtn","path":"live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/pose.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/pose.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f01.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/expressions/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f03.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/expressions/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f04.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/expressions/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f01.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f01.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f02.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-48/expressions/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f03.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f03.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f04.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f04.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f02.exp.json","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f02.exp.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap1.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap3.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_00.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_00.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap4.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_01.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_02.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_03.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_05.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_05.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_04.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_04.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_01.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_02.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_04.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_05.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_05.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_06.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_06.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_03.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_07.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_07.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_08.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_08.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_09.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_09.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura1.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2_copy.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2_copy.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura3.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch1.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/touch1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/touch2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch3.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/touch3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_01.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch4.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/touch4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_03.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_02.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_04.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_04.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_05.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_05.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap1.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap3.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap4.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_00.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_00.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_02.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_01.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_03.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_04.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_04.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_05.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_05.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_02.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_01.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_04.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_04.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_03.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_05.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_05.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_07.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_07.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_08.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_08.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_09.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_09.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_06.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_06.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura1.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2_copy.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2_copy.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura3.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch1.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch3.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch3.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch2.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_01.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_03.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch4.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch4.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_04.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_04.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_02.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_05.mtn","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_05.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/idle-01.mtn","path":"live2d_api/model/bilibili-live/22/motions/idle-01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/idle-02.mtn","path":"live2d_api/model/bilibili-live/22/motions/idle-02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/thanking.mtn","path":"live2d_api/model/bilibili-live/22/motions/thanking.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/touch.mtn","path":"live2d_api/model/bilibili-live/22/motions/touch.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/idle-03.mtn","path":"live2d_api/model/bilibili-live/22/motions/idle-03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/model.moc","path":"live2d_api/model/bilibili-live/22/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_00/closet-default-v2.png","path":"live2d_api/model/bilibili-live/22/texture_00/closet-default-v2.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/cba-normal-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/cba-normal-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/default-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/default-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/newyear-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/newyear-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/summer2017-high-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/summer2017-high-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/summer2017-low-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/summer2017-low-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/tomo-high-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/tomo-high-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/tomo-low-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/tomo-low-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/valley2017-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/valley2017-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/vdays-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/vdays-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/xmas-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/xmas-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/cba-normal-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/cba-normal-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/default-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/default-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/cba-super-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/cba-super-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/summer2017-high-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/summer2017-high-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/newyear-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/newyear-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/summer2017-low-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/summer2017-low-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/tomo-high-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/tomo-high-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/tomo-low-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/tomo-low-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/vdays-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/vdays-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/valley2017-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/valley2017-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/xmas-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/xmas-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/default-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/default-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/idle-01.mtn","path":"live2d_api/model/bilibili-live/33/motions/idle-01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/idle-02.mtn","path":"live2d_api/model/bilibili-live/33/motions/idle-02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/touch.mtn","path":"live2d_api/model/bilibili-live/33/motions/touch.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/idle-03.mtn","path":"live2d_api/model/bilibili-live/33/motions/idle-03.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/thanking.mtn","path":"live2d_api/model/bilibili-live/33/motions/thanking.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_00/closet-default-v2.png","path":"live2d_api/model/bilibili-live/33/texture_00/closet-default-v2.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/cba-normal-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/cba-normal-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/default-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/default-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/newyear-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/newyear-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/cba-super-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/cba-super-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/summer2017-high-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/summer2017-high-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/spring-2018-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/spring-2018-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/summer2017-low-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/summer2017-low-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/tomo-high-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/tomo-high-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/tomo-low-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/tomo-low-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/valley2017-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/valley2017-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/xmas-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/xmas-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/vdays-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/vdays-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/cba-super-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/cba-super-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/cba-normal-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/cba-normal-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/newyear-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/newyear-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/default-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/default-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/summer2017-high-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/summer2017-high-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/summer2017-low-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/summer2017-low-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/valley2017-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/valley2017-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/tomo-high-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/tomo-high-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/vdays-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/vdays-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/tomo-low-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/tomo-low-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/xmas-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/xmas-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/default-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/default-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/tomo-high-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/tomo-high-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/tomo-low-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/tomo-low-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/valley2017-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/valley2017-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/xmas-headwear.png","path":"live2d_api/model/bilibili-live/33/texture_03/xmas-headwear.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap.css","path":"assets/ext/bootstrap/css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap.min.css","path":"assets/ext/bootstrap/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/moment/locales.min.js","path":"assets/ext/moment/locales.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/vdays-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/vdays-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/xmas-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/xmas-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.min.js","path":"assets/ext/jquery-ui/jquery-ui.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/coding.jpg","path":"img/banner/coding.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/cover/(2).jpg.webp","path":"img/custom/cover/(2).jpg.webp","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere1.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath5.mtn","path":"live2d_api/model/Potion-Maker/Pio/motions/Breath5.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere5.mtn","path":"live2d_api/model/Potion-Maker/Tia/motions/Touch Dere5.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/03.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/cba-super-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/cba-super-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/school2017-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/school2017-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/school2017-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/school2017-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/spring-2018-lower.png","path":"live2d_api/model/bilibili-live/22/texture_02/spring-2018-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/newyear-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/newyear-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/cba-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/cba-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/summer2017-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/summer2017-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/valley2017-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/valley2017-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/vdays-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/vdays-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/xmas-headwear.png","path":"live2d_api/model/bilibili-live/22/texture_03/xmas-headwear.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/xmas-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/xmas-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/school2017-lower.png","path":"live2d_api/model/bilibili-live/33/texture_02/school2017-lower.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/school2017-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/school2017-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/cba-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/cba-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/newyear-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/newyear-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/school2017-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/school2017-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/summer2017-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/summer2017-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.min.css","path":"assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.css","path":"assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.css","path":"assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.min.css","path":"assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.min.css","path":"assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.css","path":"assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.min.css","path":"assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.min.css","path":"assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.css","path":"assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.css","path":"assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.min.css","path":"assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.min.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.css","path":"assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.css","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/custom/donate/WeChanSQ.jpg","path":"img/custom/donate/WeChanSQ.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/013.ogg","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/013.ogg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/deformed.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/deformed.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/001.ogg","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/001.ogg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/enjoy.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/enjoy.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/kira.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/kira.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/happy.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/happy.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/normal.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/normal.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/101.ogg","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/101.ogg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/unhappy.json","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/unhappy.json","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_00.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_00.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_02.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_02.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_01.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_01.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_slide_head_2.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_slide_head_2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_1.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_2.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_2.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_head_1.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_head_1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_boobs_1.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_boobs_1.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/nepswim/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/refuse.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/refuse.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/shake.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/shake.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/smile.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/smile.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/neptune_classic/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/tilt_head.mtn","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/tilt_head.mtn","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/noireswim/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/00.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/05.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/05.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/07.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/07.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/06.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/06.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/00.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/04.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/04.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/06.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/06.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/05.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/05.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/07.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/07.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/08.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/08.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/tomo-low-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/tomo-low-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/comment.jpg","path":"img/banner/comment.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/007.ogg","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/007.ogg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/014.ogg","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/014.ogg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/noir_classic/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/neptune_santa/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/noir/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/noir_santa/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/01.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/04.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/04.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/02.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/03.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/tomo-high-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/tomo-high-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/spring-2018-upper.png","path":"live2d_api/model/bilibili-live/33/texture_01/spring-2018-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/ui/sass/trumbowyg.highlight.scss","path":"assets/ext/trumbowyg/plugins/highlight/ui/sass/trumbowyg.highlight.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/ui/sass/trumbowyg.mathml.scss","path":"assets/ext/trumbowyg/plugins/mathml/ui/sass/trumbowyg.mathml.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/ui/sass/trumbowyg.emoji.scss","path":"assets/ext/trumbowyg/plugins/emoji/ui/sass/trumbowyg.emoji.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/ui/sass/trumbowyg.colors.scss","path":"assets/ext/trumbowyg/plugins/colors/ui/sass/trumbowyg.colors.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/ui/sass/trumbowyg.mention.scss","path":"assets/ext/trumbowyg/plugins/mention/ui/sass/trumbowyg.mention.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/js/lib.min.js","path":"js/lib.min.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/ui/sass/trumbowyg.table.scss","path":"assets/ext/trumbowyg/plugins/table/ui/sass/trumbowyg.table.scss","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/model.moc","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/01.png","path":"live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/spring-2018-upper.png","path":"live2d_api/model/bilibili-live/22/texture_01/spring-2018-upper.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap.css.map","path":"assets/ext/bootstrap/css/bootstrap.css.map","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.js","path":"assets/ext/jquery-ui/jquery-ui.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-blue.png","path":"live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-red.png","path":"live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-costume-black.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sailor-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume-white.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/histoire/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/spring-2018-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/spring-2018-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/healer-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/healer-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-pink.png","path":"live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-yellow.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-yellow.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-junior.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-junior.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-navy.png","path":"live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-blue.png","path":"live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-pink.png","path":"live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-black.png","path":"live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-brown.png","path":"live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/cami-dress-costume-pink.png","path":"live2d_api/model/Potion-Maker/Tia/textures/cami-dress-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hood-costume-gray.png","path":"live2d_api/model/Potion-Maker/Tia/textures/hood-costume-gray.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume-gorgeous.png","path":"live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume-gorgeous.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/maid-costume-black.png","path":"live2d_api/model/Potion-Maker/Tia/textures/maid-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sabori-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sabori-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-black.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-white.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sailor-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sakura-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sakura-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sakura-costume-navy.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sakura-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-brown.png","path":"live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-green.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-navy.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-navy.png","path":"live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-rainbow.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-rainbow.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-blue.png","path":"live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-green.png","path":"live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/thief-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/thief-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/vampire-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/vampire-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/vampire-costume-real.png","path":"live2d_api/model/Potion-Maker/Tia/textures/vampire-costume-real.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/02.png","path":"live2d_api/model/ShizukuTalk/shizuku-48/textures.512/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/school2017-hat.png","path":"live2d_api/model/bilibili-live/22/texture_03/school2017-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/spring-2018-hat.png","path":"live2d_api/model/bilibili-live/33/texture_03/spring-2018-hat.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/themebg/little-monster.png","path":"img/themebg/little-monster.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/animal-costume-racoon.png","path":"live2d_api/model/Potion-Maker/Pio/textures/animal-costume-racoon.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume-navy.png","path":"live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-green.png","path":"live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-purple.png","path":"live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-purple.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-green.png","path":"live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-yellow.png","path":"live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-yellow.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/kids-costume-navy.png","path":"live2d_api/model/Potion-Maker/Pio/textures/kids-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/kids-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/kids-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/maid-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/maid-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/new2015-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/new2015-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/maid-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/maid-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/new2015-costume-pajamas.png","path":"live2d_api/model/Potion-Maker/Pio/textures/new2015-costume-pajamas.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/overalls-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/overalls-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/overalls-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/overalls-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-brown.png","path":"live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-purple.png","path":"live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-purple.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-yellow.png","path":"live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-yellow.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sailor-costume-black.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sailor-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sailor-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sailor-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-gray.png","path":"live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-gray.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sarori-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sarori-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-yellow.png","path":"live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-yellow.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-senior.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-senior.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sorceress-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sorceress-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-black.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-blue.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-black.png","path":"live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-blue.png","path":"live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/tirami1-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/tirami1-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-brown.png","path":"live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blackcat-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/blackcat-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blueround-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/blueround-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume-red.png","path":"live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-purple.png","path":"live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-purple.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-green.png","path":"live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-skyblue.png","path":"live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-skyblue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-red.png","path":"live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hood-costume-red.png","path":"live2d_api/model/Potion-Maker/Tia/textures/hood-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/default-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/default-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/magical-girl-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/magical-girl-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-green.png","path":"live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/maid-costume-blue.png","path":"live2d_api/model/Potion-Maker/Tia/textures/maid-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/marine-costume-navy.png","path":"live2d_api/model/Potion-Maker/Tia/textures/marine-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-beige.png","path":"live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-beige.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/marine-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/marine-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nurse-costume-red.png","path":"live2d_api/model/Potion-Maker/Tia/textures/nurse-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-navy.png","path":"live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-blue.png","path":"live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nurse-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/nurse-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-green.png","path":"live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/pushcat-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/pushcat-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/santa-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/santa-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-snowflake.png","path":"live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-snowflake.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-white.png","path":"live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/warrior-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/warrior-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-red.png","path":"live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-purple.png","path":"live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-purple.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/nepmaid/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/animal-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/animal-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-brown.png","path":"live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-beige.png","path":"live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-beige.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/furisode-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/furisode-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-pink.png","path":"live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-skyblue.png","path":"live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-skyblue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-black.png","path":"live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/nightsky-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/nightsky-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume-pink.png","path":"live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/santa-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/santa-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume-brown.png","path":"live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-pink.png","path":"live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-pink.png","path":"live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/winter-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/winter-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/witch-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/witch-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/witch-costume-white.png","path":"live2d_api/model/Potion-Maker/Pio/textures/witch-costume-white.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-brown.png","path":"live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/model.moc","path":"live2d_api/model/ShizukuTalk/shizuku-48/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/cake-costume-cream.png","path":"live2d_api/model/Potion-Maker/Pio/textures/cake-costume-cream.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/dress-costume-brown.png","path":"live2d_api/model/Potion-Maker/Pio/textures/dress-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/dress-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/dress-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-gray.png","path":"live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-gray.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sakura-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sakura-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/santa-costume-green.png","path":"live2d_api/model/Potion-Maker/Pio/textures/santa-costume-green.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-brown.png","path":"live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-brown.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/halloween-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/halloween-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/knight-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/knight-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-pink.png","path":"live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-pink.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/fullcalendar.js","path":"assets/ext/jquery-fullcalendar/fullcalendar.js","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/cake-costume-choco.png","path":"live2d_api/model/Potion-Maker/Pio/textures/cake-costume-choco.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/halloween-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/halloween-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sakura-costume-navy.png","path":"live2d_api/model/Potion-Maker/Pio/textures/sakura-costume-navy.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/school-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/santa2016-costume.png","path":"live2d_api/model/Potion-Maker/Tia/textures/santa2016-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-black.png","path":"live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-black.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/default-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/default-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-costume-red.png","path":"live2d_api/model/Potion-Maker/Pio/textures/school-costume-red.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/other/starry_sky.png","path":"img/other/starry_sky.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume.png","path":"live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-blue.png","path":"live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/img/banner/reading.jpg","path":"img/banner/reading.jpg","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/01.png","path":"live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/01.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/00.png","path":"live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/03.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/03.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/02.png","path":"live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/02.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/textures.1024/00.png","path":"live2d_api/model/KantaiCollection/murakumo/textures.1024/00.png","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/nepgear_extra/model.moc","modified":0,"renderable":1},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/model.moc","path":"live2d_api/model/HyperdimensionNeptunia/nepgearswim/model.moc","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Sakura/README.zhCN.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/.travis.yml","hash":"59da7c4691ba01d4c05bd64e058551171fe649b6","modified":1661272270000},{"_id":"themes/Sakura/CNAME","hash":"6b332d1ef5947dadc6e394dd1445eb3596eddfe6","modified":1661272270000},{"_id":"themes/Sakura/LICENSE","hash":"e84291eaaeb4a02004d4aa6a504cbf9475f5c562","modified":1661272270000},{"_id":"themes/Sakura/.gitignore","hash":"8a27dbc2899378d9b63a768d2b15be8e1b65887d","modified":1661272270000},{"_id":"themes/Sakura/_config.yml.bak","hash":"fadc1ee430bbd899b99b8383c6b1781789fc5ef0","modified":1661272270000},{"_id":"themes/Sakura/_config.yml","hash":"0878bcb28c73431208cb60a5c865466b98f07603","modified":1661444165948},{"_id":"themes/Sakura/package.json","hash":"ec5fa23203039ece9acda53dfac3710b371bd401","modified":1661272270000},{"_id":"source/_posts/Hexo-Theme-Sakura.md","hash":"71cc7eb9a85ee242e821402dfe68a057bcfd1e12","modified":1661267715777},{"_id":"source/_posts/Java基础语法01.md","hash":"da35c58ad673c1471947e458d8facd6c4cc6be43","modified":1661439849409},{"_id":"source/_posts/Java基础小结.md","hash":"a33aaea284b2b53e2f6b2bc34832026f19f18f9d","modified":1661439866063},{"_id":"source/_posts/Java基础语法02.md","hash":"097bb2c77c6a67b2fee7d50155f8ded2d104d102","modified":1661439854634},{"_id":"source/_posts/Java基础语法03.md","hash":"b067f991e798813a0221b414ca40fe08f5221af3","modified":1661439857682},{"_id":"source/_posts/Java基础语法04.md","hash":"110563a0ef7617826eaa25cc5bb15f0cb202ae88","modified":1661439860806},{"_id":"source/_posts/Java异常01.md","hash":"232303fb7e890d046ce2db6bc0dcd4ec8b011c2f","modified":1661439727903},{"_id":"source/_posts/Java数组01.md","hash":"a150348b6d5fd5036ad8b8def6417a7be19008d9","modified":1661439755415},{"_id":"source/_posts/Java异常02.md","hash":"767b7d7021ded78eabd7dae088cfd2d49e1d7ae3","modified":1661439738233},{"_id":"source/_posts/Java数组02.md","hash":"59c0a081dd4e23ea182c653689ffda669ec0e077","modified":1661439762322},{"_id":"source/_posts/Java数组03.md","hash":"aa7e9c1de55545eeee03bcd10399c6286a1015bf","modified":1661439769895},{"_id":"source/_posts/Java方法.md","hash":"60f667044ceb3a43d36415721bd4b25061b6c552","modified":1661439872722},{"_id":"source/_posts/Java流程控制02.md","hash":"f41578fd82c1ab3a616262decc6f8edb6b29ac18","modified":1661439830824},{"_id":"source/_posts/Java流程控制01.md","hash":"260e0b0bd69ca55010ced6c5cd7628bc6dc2b701","modified":1661439827752},{"_id":"source/_posts/Java的特性与优势.md","hash":"7038bf366695635a8ebd0fde885c7ab5897ab16c","modified":1661439882468},{"_id":"source/_posts/Java运行机制及IDEA安装教程.md","hash":"e6fc873fb8e96700177b752dc1837bebfb054083","modified":1661439684754},{"_id":"source/_posts/Java流程控制03.md","hash":"5ecaf01036277d138329d2ae91e5fcad6f53737b","modified":1661439834064},{"_id":"source/_posts/Java面向对象01.md","hash":"d3c53d840a075e73e1d6c2f36a1e5498502a2fdc","modified":1661439788479},{"_id":"source/_posts/Java面向对象02.md","hash":"4ff2118cec8c7d0f2dc445b90ee2888c7433c193","modified":1661439791082},{"_id":"source/_posts/Java面向对象03.md","hash":"64798b1b5005d5bf7604104ae2bd3d0a5af82a35","modified":1661439794353},{"_id":"source/_posts/Java面向对象04.md","hash":"67d0e3e92aef0172fcd7cdcbec4e66608a85df78","modified":1661439798064},{"_id":"source/_posts/Markdown基本语法.md","hash":"ddc5047319b6e2de9f0da9437cdf6a5da442bab5","modified":1661439661864},{"_id":"source/_posts/WP备份.md","hash":"dbbd985457be975266279c94e7148c8e2bace1ca","modified":1661440176478},{"_id":"source/_posts/常见dos命令.md","hash":"633c3d5e71c5d0fe14eef555d562adbbb90be4ce","modified":1661440003872},{"_id":"source/_posts/排序算法.md","hash":"a5a8fbc801fb28293a3371885707fd1bd1cd0e96","modified":1661439937578},{"_id":"source/_posts/记一次office无法联网解决方法.md","hash":"f6f14e2fce0b59afd25a96c9df2f91ae9d009678","modified":1661439956583},{"_id":"source/_posts/计算机硬件知识.md","hash":"b56e2fd2206eb721a758691561383aa6dae1a9d9","modified":1661439967163},{"_id":"source/_posts/设计模式之创建者模式.md","hash":"08fb3cebcbae4b9cc59397f366d40b037075ebe6","modified":1661439924933},{"_id":"source/_posts/设计模式之结构型模式.md","hash":"0f5317fd5200ab5d3eadf8cd61db2f4e35c42f99","modified":1661439910907},{"_id":"source/archive/index.md","hash":"8add4eb55e18262c14317572cc80a0a1ee15d1ab","modified":1661270437652},{"_id":"source/comment/index.md","hash":"a685503f8485f7959ea00f6db0ec94e4081af962","modified":1661267650688},{"_id":"source/lab/index.md","hash":"15a8dee0753689f7fce3bca8265cc6bc15064aff","modified":1636467198000},{"_id":"source/client/index.md","hash":"3f1803e810d91a6a9badd8e407d451b8204c2037","modified":1636467198000},{"_id":"source/bangumi/index.md","hash":"e4b6ff1e87f9aa3294dcdd6dfa600405c41669b0","modified":1661267556277},{"_id":"source/about/index.md","hash":"c0559760d14794864e7c3c84a713fd0f596659e3","modified":1661269508809},{"_id":"source/donate/index.md","hash":"e6fb88d7e70526a5faff8151f8c1e8a459f2f2c8","modified":1661270792203},{"_id":"source/links/index.md","hash":"3cbbe1fb815336641ffc5ed4a6f231c8b08bd68e","modified":1661268958250},{"_id":"source/tags/index.md","hash":"965de38e0cc0dc836bf023ca4852868f724c16e0","modified":1661440311559},{"_id":"source/rss/index.md","hash":"9743b6bf5f76c0edc68cd6d6bc5d368f8499905d","modified":1636467198000},{"_id":"source/theme-sakura/index.md","hash":"79398f2bd5c1d03d605327de81b5d82ef51f67eb","modified":1636467198000},{"_id":"source/music/index.md","hash":"2da93f1ea358b5e6771e88ff25fcdfdf6b59d079","modified":1661269467431},{"_id":"source/video/index.md","hash":"e387a6a406eec70998293846d371072a1c5a60cb","modified":1636467198000},{"_id":"themes/Sakura/languages/en.yml","hash":"38044728f53054310a9061bdd385d6b524f46e78","modified":1661272270000},{"_id":"themes/Sakura/layout/archive.ejs","hash":"1dbe23a56cdc8969b1d5456230f4041709fe208a","modified":1661441220910},{"_id":"themes/Sakura/languages/zh-cn.yml","hash":"121362767e385672c771e5a35a5c75e9ab8efe49","modified":1661444155357},{"_id":"themes/Sakura/layout/bangumi.ejs","hash":"075b0fd65cbe113c15610d6632018b7bd6f5d2a3","modified":1661272270000},{"_id":"themes/Sakura/layout/index.ejs.bak","hash":"4746cbd731c7c6e3cbd135b9bb4b9fa69b27acba","modified":1661272270000},{"_id":"themes/Sakura/layout/index.ejs","hash":"2620e6e62ff35b2a81dba9b8f8a31773da6caacf","modified":1661272270000},{"_id":"themes/Sakura/layout/category.ejs","hash":"b76d8c1db402ea875c24898ef35f797e75e2b20c","modified":1661442775005},{"_id":"themes/Sakura/layout/layout.ejs","hash":"b06c4b8713d49cb568a2ef898ebf5603e3a60150","modified":1661272270000},{"_id":"themes/Sakura/layout/layout.ejs.bak","hash":"1857cfc6d35fb539a0f71b287ca8c98e371b0399","modified":1661272270000},{"_id":"themes/Sakura/layout/donate.ejs","hash":"9fc4f8f60f4a7686f39306bd7198035040ae25af","modified":1661272270000},{"_id":"themes/Sakura/layout/post.ejs","hash":"32457bc480205dd9be7c3bebbd9b04beb2a60992","modified":1661272270000},{"_id":"themes/Sakura/layout/links.ejs.bak","hash":"115bbad19484fa5b02e9d9ac222f8f69f78ff72d","modified":1661272270000},{"_id":"themes/Sakura/layout/page.ejs","hash":"4a2ddc7c5868279d368a527a340a7d7fddeb975c","modified":1661272270000},{"_id":"themes/Sakura/source/404.html","hash":"2b2a26a5b513906f6f22e1518fd31f66db923ad0","modified":1661359624625},{"_id":"themes/Sakura/layout/tag.ejs","hash":"f94312eb08582a4ebe21f18b0240c902fc09933b","modified":1661442428045},{"_id":"themes/Sakura/layout/links.ejs","hash":"8cd56b866bc4ab19857b91141ca87f6fd26ab082","modified":1661272270000},{"_id":"themes/Sakura/source/warn.html","hash":"1a2e9b6013fdf6b22f3790feffcc72533be385dd","modified":1661272270000},{"_id":"themes/Sakura/source/sakura-app.js","hash":"46dc2e5334ac8b5a556382b0705e1a99ca97b857","modified":1661266290546},{"_id":"themes/Sakura/layout/_partial/skin-btn.ejs.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/skin-list.ejs.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/source/live2d-widget/font-awesome-min.css.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661361661477},{"_id":"themes/Sakura/source/js/hititle.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/source/js/noSomeKey.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/source/js/sakura.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/source/js/shehuizhuyi.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/archive.ejs","hash":"280bf7a2996d71dafc62e4fe9ee2defb57ed8b12","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/_page.ejs","hash":"c438ab0fb6d3310e3c568e3944a770af746e6d59","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/_post.ejs","hash":"ba480fd3b4c6997acf10c14f489c55f5ccc6da22","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/category-archive.ejs","hash":"6c18fb5641fd12d9ebc56814bbfae0d075aa0cd2","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/footer.ejs.bak","hash":"c0649e8e2dd6fe1d6c6bf99a66a2264aa85b64fc","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/aplayer.ejs","hash":"0e5f026debe67f3b991a0d9b103f296ccda505ba","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/headertop.ejs","hash":"3682a748e49a67e554a57ec888be1cba811db4d4","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/skin-btn.ejs","hash":"9293fba9ff202d63baa41c1d17c58624c47b2d93","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/comment.ejs","hash":"7df1c88bf771efb2bae719c9acbf3141d61f12da","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/mheader.ejs","hash":"de10fa51ddd773d469e36bbb6ea21b583708e5b4","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/footer.ejs","hash":"728af876fccdc16860c0e269211026d0c685ff68","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/skin-list.ejs","hash":"3114af94a4cf685f3e436faa978723e85af040b7","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/startdash.ejs","hash":"701503a5948d429afeb3f91e1ea79ca1244298eb","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/startdash.ejs.bak","hash":"368bad667a219956a128de785f584dd15a7ec3da","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/head.ejs","hash":"2384a22d4445b555368118f9c48500efd3b76f79","modified":1661361718114},{"_id":"themes/Sakura/layout/_widget/category-items.ejs","hash":"4b19b5c40c8558307e091716539303013feb9fda","modified":1661272270000},{"_id":"themes/Sakura/layout/_partial/header.ejs","hash":"66943be8bf726c5215120a744f451579a540d439","modified":1661272270000},{"_id":"themes/Sakura/layout/_widget/index-items.ejs","hash":"f848f5f1680cf1645795d931522af4ea80f89c02","modified":1661272270000},{"_id":"themes/Sakura/layout/_widget/common-article.ejs","hash":"0a283a8a0ed516d3282c268ca2a87e53fdd1a3be","modified":1661272270000},{"_id":"themes/Sakura/layout/_widget/common-page.ejs","hash":"dc295e2b3bed26b89b0cfc21e3498d6c9e5adf71","modified":1661272270000},{"_id":"themes/Sakura/source/assets/index.html","hash":"7f3c810f643e9c100b82520a7c11aed6131f7674","modified":1661272270000},{"_id":"themes/Sakura/source/images/favicon.ico","hash":"124582ab19fd5de72b6f96f1faaeef3fe5e6926e","modified":1661272270000},{"_id":"themes/Sakura/source/live2d-widget/README.md","hash":"b80677d7fbab5245c6849b99184e67b0e905abee","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/autoload.js","hash":"388adecc34a53c50061252241f58e2a77707eb9e","modified":1661361953834},{"_id":"themes/Sakura/source/live2d-widget/font-awesome-min.css","hash":"84dceb26861254989c3af1b57179432ad0513f9a","modified":1661361683213},{"_id":"themes/Sakura/source/live2d-widget/waifu-tips.js","hash":"61efcb42681f7b777a89b6d3d1b563472c7226a3","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/waifu-tips.json","hash":"e0c159ebcaa0f729f15a86f4712d3296246bb2e8","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/waifu.css","hash":"419e5c1eb38eb7a477a32cc62b48d701fcee930d","modified":1653072056000},{"_id":"themes/Sakura/source/js/InsightSearch.js","hash":"3acae0bd3b55b16b93006466942de81b2a27b011","modified":1661272270000},{"_id":"themes/Sakura/source/js/autoload.js","hash":"7febdab69db39fd4a183390487adc72e324bb5e3","modified":1661272270000},{"_id":"themes/Sakura/source/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1661272270000},{"_id":"themes/Sakura/source/js/autoload.js.bak","hash":"c0b6d345969d8a0aac8872be545bb98ecdffee57","modified":1661272270000},{"_id":"themes/Sakura/source/js/hititle.js","hash":"699cfa6d1031defdba5fe77c29dd2d67aa1b076d","modified":1661272270000},{"_id":"themes/Sakura/source/js/noSomeKey.js","hash":"5bb70a36bb26126c2821b65f6cba73ffcf772ab9","modified":1661272270000},{"_id":"themes/Sakura/source/js/shehuizhuyi.js","hash":"ad4a1b7dff35fbd9effe2b6e7348298477401532","modified":1661272270000},{"_id":"themes/Sakura/source/js/zoom.min.js","hash":"0b377c432d448cfc09c9e451128a48810a250926","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/README.md","hash":"52359fcd01c5e2cfed48708bc3957c8bbef4167e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/LICENSE","hash":"cf03f884b32c8e1145f6efe1bb87bab927ced6c3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model_list.json","hash":"e57f66d6630e53e34afc3c1220391d262bec50ad","modified":1589856335000},{"_id":"themes/Sakura/source/fonts/iconfont.eot","hash":"a6d4a6cbd2e7e0ece89973f4c848c7209b062120","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/iconfont.ttf","hash":"5454ae941eeeda1fee8a1b9ef608dae39f58288e","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/iconfont.svg","hash":"f469a7fe346fc3665d70dde9e4eb81331f504b5f","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/iconfont.woff","hash":"7222cdc09d819e340fd8cea8498d36270b0400b1","modified":1661272270000},{"_id":"themes/Sakura/source/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1661272270000},{"_id":"themes/Sakura/source/css/bangumi.css","hash":"4d30d793a8813b14c55cee12d4a5adbb1cc7c535","modified":1661272270000},{"_id":"themes/Sakura/source/css/archive.css","hash":"fb5b21bae281772ea4e1df250d1d118edd8fe3ec","modified":1661272270000},{"_id":"themes/Sakura/source/css/donate.css","hash":"fb5b21bae281772ea4e1df250d1d118edd8fe3ec","modified":1661272270000},{"_id":"themes/Sakura/source/css/font.css","hash":"714d3b9fbd98fdc398ce9aa60ec1d60d50628933","modified":1661272270000},{"_id":"themes/Sakura/source/css/sharejs.css","hash":"62b3ea2384cdf4f9dbce34e17f660856d51a605c","modified":1661272270000},{"_id":"themes/Sakura/source/css/insight.styl","hash":"5c330fa26c0c2c7326f3093f17625c7de0181795","modified":1661272270000},{"_id":"themes/Sakura/source/css/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1661272270000},{"_id":"themes/Sakura/source/css/zoom.css","hash":"e6feedd50deaf58cd27b33ed99f04f479c9fba31","modified":1661272270000},{"_id":"themes/Sakura/source/live2d-widget/jquery.min.js","hash":"156837f75f6600ccb602b4efcbd393636c33f35e","modified":1661360794237},{"_id":"themes/Sakura/source/js/botui.js","hash":"aa2db57587ad21707a4a24735a091d97241b356e","modified":1661272270000},{"_id":"themes/Sakura/source/js/botui.js.bak","hash":"45e949930e21f94ae67346b356e69da5b3758c51","modified":1661272270000},{"_id":"themes/Sakura/source/js/jquery.fancybox.min.js","hash":"9e2b205a88c949fc8e6a7550d502dabe2b1ab4c0","modified":1661272270000},{"_id":"themes/Sakura/source/js/jquery.min.js","hash":"156837f75f6600ccb602b4efcbd393636c33f35e","modified":1661360794237},{"_id":"themes/Sakura/source/js/sakura-app.js","hash":"edec71b0a1c8de625f9fffb5fde3a6389782ebc2","modified":1661365313121},{"_id":"themes/Sakura/source/js/sakura.js","hash":"776081c1b58d076efb989a5937e85d892c103e65","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1661272270000},{"_id":"themes/Sakura/source/css/lib.min.css","hash":"3c4c8e1006dcc8e57e4a02e9d735a52c2a95cc72","modified":1661272270000},{"_id":"themes/Sakura/layout/_widget/search/insight.ejs","hash":"072cc5dbd9d3c818a353cfd55ad7ec0e535155b6","modified":1661272270000},{"_id":"themes/Sakura/source/assets/css/index.html","hash":"8caa623945fc863693f04d471588a2db506f71ff","modified":1661272270000},{"_id":"themes/Sakura/source/assets/css/frontend.css","hash":"a11b8caa095e09274cddf93834e5c658b41a22b0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/css/general.css","hash":"7dc5ea30bb6bd2c2235162a0892211a0173532ae","modified":1661272270000},{"_id":"themes/Sakura/source/assets/sql/index.html","hash":"7f3c810f643e9c100b82520a7c11aed6131f7674","modified":1661272270000},{"_id":"themes/Sakura/source/assets/sql/data.sql","hash":"2114a121cdb6a2f6383b2efa6987e6d1e2eb1a23","modified":1661272270000},{"_id":"themes/Sakura/source/assets/css/backend.css","hash":"fe1f831b169b24e3d09fffadeb629c0bc091e4ec","modified":1661272270000},{"_id":"themes/Sakura/source/assets/sql/structure.sql","hash":"ced362f05d98fd25ee00f92953d088414fb3cbfe","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/index.html","hash":"7f3c810f643e9c100b82520a7c11aed6131f7674","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/favicon.ico","hash":"66fcd5004f03d3236880b2753a235d2c9e79df3e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/error.png","hash":"30b087e7433d01bb929726911e31f65e55652935","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/index.html","hash":"7f3c810f643e9c100b82520a7c11aed6131f7674","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/glyphicons-halflings-white.png","hash":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/logo.png","hash":"2eacb5002ac21d68330a4f09d11cd123429727b5","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/success.png","hash":"f7fcd0fc6dc6afcd47aaa19d46309db1743a1858","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/glyphicons-halflings.png","hash":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/installation-banner.png","hash":"40613c2cdaa21d559a04fe6ea3a9e956966ffd52","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend.js","hash":"c00ffa25033b93abafebfa8646cbf0c81cac1f81","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar.js","hash":"c192334590b41ccb0a508397cf2d4cf7f34c00e4","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar_api.js","hash":"641e71f78b766ba3583dfec63fc8e44243875b50","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar_appointments_modal.js","hash":"e6d196b73cd9630cfdeb65db8e729ba32a9ffc41","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/loading.gif","hash":"8711239a8c42b5c003d3a9e0ba9af2893205090b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar_google_sync.js","hash":"8945a5031cd35f0a939ad14a21cd81b799384457","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar_default_view.js","hash":"ded2596aafbf24d43f5ec45095372e76ed775395","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar_unavailabilities_modal.js","hash":"fd94fa127095fb157d74690a56cff17a0b1fdb10","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_calendar_table_view.js","hash":"85c1e644a75d366ede55c92014b6da1d049aec90","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_customers.js","hash":"6c006610450bff0927baf244b013b9ffc9a5ab54","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_categories_helper.js","hash":"d16bd4b40abd875c329d56b0a739a0a0018bd571","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_services.js","hash":"11762886bfc830227745206148d904330eba5c22","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_services_helper.js","hash":"bd1ce63906e02c9d8f200730fc71a3d5be72ca76","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_customers_helper.js","hash":"f0a8b0de3de3c44634c19c44dcceeeb5e1d9eb5a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_settings_system.js","hash":"daa09e3ff13a04a06aaf5c02753593a275e83396","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_settings_user.js","hash":"aac563d6a739a198e859d3cfaebeb56125a8377a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_users.js","hash":"75ab9af69752515e3da54bb3600d4327b24b159b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_settings.js","hash":"e9008feefee7ce21c488a244b18f3dd802b61003","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_users_admins.js","hash":"41dd355d32cd0bd0ebd7c0866d65d4608e297f95","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_users_providers.js","hash":"f3b97bf921503ec3af577c5a40a5733c29294380","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/frontend_book_api.js","hash":"28480aebb4d1ba23693d99125a72e4da024af680","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/frontend_book_success.js","hash":"887202241f106fd5d2fca4af57f98faf996ac9ad","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/index.html","hash":"8caa623945fc863693f04d471588a2db506f71ff","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/backend_users_secretaries.js","hash":"84522b01ab7a92681f45aa7c4994e9787844247d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/frontend_book.js","hash":"698cb31f78c73d847731629ccac5802b342b374a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/general_functions.js","hash":"cc38d14545a804baaa8aff4a3ba61a52898c7e86","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/working_plan.js","hash":"ed535ea70cc3aba62fae3cc80821180feb86f45a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/js/installation.js","hash":"a289790c8fd6a523a3bdf0b9c16d6f388b902c0d","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/BTCQR.png","hash":"1abc7fa494a5bb9765dee1004f544ad962d46c91","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/avatar.jpg","hash":"49701fd8e60873698b5b36a6e8fefa8c4be41090","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/wechat.jpg","hash":"a9e58eec32d682cb81d00465a12f4d1334bb808c","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/sakura.svg","hash":"670cf49f8da9f63905df37b163281a664be16a1c","modified":1661272270000},{"_id":"themes/Sakura/source/img/loader/orange.progress-bar-stripe-loader.svg","hash":"7ba807b2fcbb5743ac8cde544cffeaa891bdd85c","modified":1661272270000},{"_id":"themes/Sakura/source/img/loader/orange.ajax-spinner-preloader.svg","hash":"9c2744ccf3b58dc6f58d634ac3b00918bd1c23cb","modified":1661272270000},{"_id":"themes/Sakura/source/img/loader/orange.square-circle-preloader.svg","hash":"0bf61dbbc7117fc0a37446bd0c2d7d16ae5a249a","modified":1661272270000},{"_id":"themes/Sakura/source/img/loader/trans.ajax-spinner-preloader.svg","hash":"4d201862e8fcd4188784d360ef7e5e5f5105c4b9","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/add@32x32.png","hash":"38bf4417f4af235d1a10919625e67edd36c0f65c","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/default_avatar.jpg","hash":"97d151e678408e95a8ab328dc7bc20051d42d717","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/dot.gif","hash":"0a1bc9b70ab142d7b85727dcd1d96f0c4a72391c","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/default_gavatar.png","hash":"ae2c13b74a0c84a110bbccd993577de47f21ed39","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/disqus-preloader.svg","hash":"7af601df13c77d05cda5d766e19ee96ed530c045","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/grid.png","hash":"c2ef59db0838c5a17f74c0d25f9c508a6ab2a803","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/gravatar.jpg","hash":"ae65af750b06b3033ad792ab8c10215cfaa15759","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/orange.progress-bar-stripe-loader.svg","hash":"7ba807b2fcbb5743ac8cde544cffeaa891bdd85c","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/pause@32x32.png","hash":"6bdf87bf62bbf377fdac552cf8a944dafda36be0","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/image-404.png","hash":"f740b512d6e16d419ff3c8648d173b301efff104","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/next-b.svg","hash":"4891e41767d667ff040dc05855445cf1b4b53102","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/play@32x32.png","hash":"f3e0c0de2a7527e349462ba22d12c7ce09aac848","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/wave1.png","hash":"1a783993b75b10e54772b6af6afa5685505003df","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/wordpress-rotating-ball-o.svg","hash":"d44de6be491d7f0878dd8eaf295b9f9a7e98d425","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/wave2.png","hash":"b7c5e21269e225c0c9358dd7ada60747c0cdce58","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/Alternative.cur","hash":"6457b8833a802dba9916ee5dc293997d75d2f44d","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/Escritura a Mano.cur","hash":"10f53452eacbadf59135610e6b067d0398e7466e","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/Move.cur","hash":"d563bd273d45b98e7541dfe400e974577c7baa81","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/Ocupado.cur","hash":"86e4cffd07a986d8a70fcd83844e7968f1bb9227","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/No_Disponible.cur","hash":"52685e4ee4ec0aa172d99c9f1fa002f9662f47d6","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/ayuda.cur","hash":"3b2f2cc7a36b8f958a7c3672a0407a59e187f314","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/diagonal resize 1.cur","hash":"f3e2fbd7035674cbf238eff6a05538bbeb2896c5","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/diagonal resize 2.cur","hash":"940616f216302956c20ac54a3ea3b2c8586c9d93","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/horizontal.cur","hash":"cc7cbff5868ed7f08af046a0617d467c73e557ea","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/normal.cur","hash":"4e784fa1e9630f782a379667423c4886b02c5545","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/link.ani","hash":"2aaabca9c8943a7ba78bd261bd7aa8fa0b12f856","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/precision.cur","hash":"78485b5362949b1e3dc508a4a50c3a16c3e74cb1","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/texto.cur","hash":"514f4d81a9d7149912d6f217e5392a0e2606de45","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/vertical.cur","hash":"e5aefd21f4e04904f4dab43acbaa8540d93b0183","modified":1661272270000},{"_id":"themes/Sakura/source/img/cursor/work.cur","hash":"d98137bb1c2a8d844678ef660ff46fad2f66e982","modified":1661272270000},{"_id":"themes/Sakura/source/img/themebg/point.png","hash":"795be6980152e611f49075122ee97b7f168f92f5","modified":1661272270000},{"_id":"themes/Sakura/source/img/themebg/plaid.jpg","hash":"9307fb19464c9894e1100780dbfdbda403176d41","modified":1661272270000},{"_id":"themes/Sakura/source/img/themebg/star.png","hash":"6cc46563f21279ec10199a26577f892cf38c1425","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/JsDelivr_Logo.svg","hash":"498409074298bc8bc73bffe400e14e5d20a8ae85","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/cf-logo-h.svg","hash":"ac7b688c12bc70a34555db36fba8b3e53ec6246d","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/Google.svg","hash":"b5634d26e7dfe7a3350472fe43da214a4bc9855d","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/cf-logo-v.svg","hash":"e2a036810e7ce8dda92e10130047556a83da606e","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/bilibili.png","hash":"0042bb266ab70e65c96e609c44ca159002005574","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/mashiro-logo.png","hash":"3a885c3a271969749fe7e17ad5df4d397060ada7","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/logo_onwhite.png","hash":"ddbc341a5242e562eb8110231012e1aa4e736166","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/csdn.png","hash":"2601c7946bf40fe3a4a505d4dc03d5e13e5c758e","modified":1661272270000},{"_id":"themes/Sakura/source/img/logo/upyun.png","hash":"61c8033884609dbe71ba255ae43dc096d96af92d","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/douban.png","hash":"b0cd16394e3f6446324341b202419f930b2f598c","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/facebook.png","hash":"abdeff8969a97759086c66baa255818e8d733444","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/github.png","hash":"e888d386110facbb6f1b89eb8f0286a62037dcf3","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/jianshu.png","hash":"4c7ffdc2aaac333e675a04eda7feec8e889e893e","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/googleplus.png","hash":"cdda992943ac7f40493f44afdef80bf6712391cf","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/heart.png","hash":"9ec543f8e86b3f591032cc14b36de1cf7658a470","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/lofter.png","hash":"4de6f0546cc87aa8841e56f14a913695aa9a9615","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/qq.png","hash":"99196fef542df3f37fa1486d9f708e93964a7cfc","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/qzone.png","hash":"9fe39f2892e3b912a7a485298d9a080c122bc714","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/sina.png","hash":"1f93cb886fef7f088ed402f5943c0a156f77c60e","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/email.svg","hash":"739a83cd5ab70a31a46bfdf846adc9aa22411c80","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/stackoverflow.svg","hash":"f13ebeedfa9e1812d5c6f64e4f4c9330cd24a40a","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/twitter.png","hash":"284de412c3833f43a58b15b519ed926e61c10d26","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/wangyiyun.png","hash":"e9952f7ba250339c96611dfa91776e13764573c5","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/wechat.png","hash":"18e6c34722207a1e1e660abb5f1c3637bafcd559","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/zhihu.png","hash":"1d95bb3cd2c2602abd56903cd0854c68af4e403c","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/youku.png","hash":"baa5c7a8172a2f27051fe37e5430acc3caaf86a9","modified":1661272270000},{"_id":"themes/Sakura/source/img/social/telegram.svg","hash":"ac6e0b4e0bd900a68acb7bd9ee8e384830ea9fd9","modified":1661272270000},{"_id":"themes/Sakura/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/demo/demo.html","hash":"48492e824495bc2870b7160d0fa7d92b28863f11","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1653072056000},{"_id":"themes/Sakura/source/live2d-widget/demo/login.html","hash":"5df56deaeea62f81ea7f41343d91232229b87f21","modified":1653072056000},{"_id":"themes/Sakura/source/live2d_api/add/index.php","hash":"ff01ac889cc7b9a3a2c719508f49cb342f299305","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/get/index.php","hash":"6d2967c0b8cf8c8f9407030802c6420e8813eaa0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/rand/index.php","hash":"089c17de653543822d7dc0db263cf22bb842aea7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/switch/index.php","hash":"f85704670e48f98235842767bd16d186f03fe6b1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/tools/modelList.php","hash":"3d22343ad1967d605a9affa2a7ae7c503f2cf8c2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/rand_textures/index.php","hash":"102a5b37048b2107de1845211a84ef2ae0307365","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/tools/name-to-lower.php","hash":"a2aa6d2244d1f00f2624631c69764bfa19f5fb15","modified":1589856335000},{"_id":"themes/Sakura/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/switch_textures/index.php","hash":"3af6511cb07d4ca44c8da228c95aa9d13071f722","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/tools/modelTextures.php","hash":"7a5589c7eea43be577fd075d153e585313b5a766","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/tools/jsonCompatible.php","hash":"85ed8c88b1c1e91e4e99260aaaf78f6f05e3487c","modified":1589856335000},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/icon.css","hash":"cca92568d623792d63db3706a705d3c77412d025","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso-symbol.svg","hash":"dd2a3d764889d23575a33251ff64761fb4bbb317","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.eot","hash":"509315fee1cbfcbfd9beec880032f75532df38af","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.svg","hash":"6eb5c281f77452342361ed3352f62e2dec0f3b5c","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.ttf","hash":"91025ed91b9a317ddc835cc88d660c193a6c0228","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/SAKURASO.old/sakuraso.woff","hash":"00856819a670a578f78ffa2cae66717e21b24b36","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/sharejs/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1661272270000},{"_id":"themes/Sakura/source/css/style.css.bak","hash":"a793757f33429481d5595029ba4660e6b0fc8464","modified":1661272270000},{"_id":"themes/Sakura/source/css/style.css","hash":"8bf488b9059b3662ba0ecfa5e1cf19d71ac421a3","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/unavailable.jpg","hash":"a82c737fc2f187656a528f22baec4bfe7a5ab1ec","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(3).jpg.webp","hash":"96ff977ce087a71a020e4a75a7e3516ade3fee19","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(7).jpg.webp","hash":"280a5c05256dca4fbea5af1bae208c19efce73a4","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(8).jpg.webp","hash":"4ffcfb8c695294e8d84cee0e7b5be0c024e5dfa7","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/about.jpg","hash":"2ae7e74361e2c2b48f58d4505e52d57d0b66603f","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/writing.jpg","hash":"ee6b4d36c7bac7399747881a3faec0d4b22e152c","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/WeChanSQ.jpg","hash":"27a05e1012dde94e06d711d3c868ef8e1bf50af0","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/comment-bg.png","hash":"b33ee4f1de2776e6aeb362245b130181708d7f60","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(0).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(3).jpg.webp","hash":"96ff977ce087a71a020e4a75a7e3516ade3fee19","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(1).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(8).jpg.webp","hash":"4ffcfb8c695294e8d84cee0e7b5be0c024e5dfa7","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(7).jpg.webp","hash":"280a5c05256dca4fbea5af1bae208c19efce73a4","modified":1661272270000},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/cookieconsent/cookieconsent.min.css","hash":"50ad5e836bd6e905a3cdb61fa7a227e420c64556","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/cookieconsent/cookieconsent.min.js","hash":"40902a2038d378187687d6d5834569de87e338f6","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/datejs/date.js","hash":"0e33a02eadac09b76358175f4703b241b873e67a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/gcal/gcal.js","hash":"1653e962900454e15b9d21dcd309d7472c15f199","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-datatables/jquery.datatables.css","hash":"a42d95cd06d68859843197ddd03a9fc597f96070","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/fullcalendar.css","hash":"dea8fb730f7a887accd7ba3ef9fba0d4d64ae285","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/fullcalendar.print.css","hash":"ef1d759aedc7e8e070a82340ebea93fd196b8f34","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/gcal.js","hash":"3a8c4ba120a9cf4978191beef51f9dfd15bb6c85","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-mousewheel/jquery.mousewheel.js","hash":"5d099455b4ee289a8efabfad734ab90a3b93a4b8","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-jeditable/jquery.jeditable.min.js","hash":"53e8a6136fa9af4fe8b50e8068899da860657e1b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-qtip/jquery.qtip.min.css","hash":"64f8a4430bbd8425b61adba15837d839a7fe562c","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-sticky-table-headers/jquery.stickytableheaders.min.js","hash":"c164bb5893b5917a2a557f5288e6c3172c217569","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-qtip/jquery.qtip.min.js","hash":"341db5867ae263ea0ce4a4c0d8a4849d177569f5","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/moment/moment.min.js","hash":"859f0365c78d8472d8882a96781aeab35c561e88","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/trumbowyg.min.js","hash":"12126c9b07a4d5966c5e0a996db4852b9a38b25e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/trumbowyg.js","hash":"88e33e6c27f543b92116f4ecfccdf1b267e10fff","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/break.jpg","hash":"f7a6cc3287414b3a4aec024644003ebc3ec87fde","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.css","hash":"28456cf58c18bbdb5fc782101332751308c743ba","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.min.css","hash":"3745f107f04ae34a30545edb9d253754d93970d9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.structure.css","hash":"152c8e4ab99432f5ba2ebaedd51516d81e0ab43e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.structure.min.css","hash":"4340157409c937281d2b1c97b7f310c5da17cfb9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/img/custom.jpg","hash":"2057bb70e0321b7e54988504a5c4f3889441d2dc","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.theme.min.css","hash":"a5fadf3cc8eacf11fca943fe5d88cc2345db3083","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.theme.css","hash":"ec1aefaf7c78884479b7efa29d33afb6325104e4","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(0).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(2).jpg.webp","hash":"a28c79979c8a3950a8a53fec07cd1a6ff446615c","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(1).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(4).jpg.webp","hash":"22bc8dfdcba509032f270fb68f9168efb39bb373","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(5).jpg.webp","hash":"ad0f06e40504f4b86b3b12f6b2c86e9f07da01ea","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/AliPayQR.jpg","hash":"315df35efab2584bc427914865bdc31ec90eaa99","modified":1661272270000},{"_id":"themes/Sakura/source/images/donate/WeChanQR.jpg","hash":"a3d79bd57a41945603816d071b6c965146d693dc","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/sakura.md.png","hash":"5a339ba8d24ae5e3494bdcace69e3c93dc6d838b","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(4).jpg.webp","hash":"22bc8dfdcba509032f270fb68f9168efb39bb373","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(2).jpg.webp","hash":"a28c79979c8a3950a8a53fec07cd1a6ff446615c","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(5).jpg.webp","hash":"ad0f06e40504f4b86b3b12f6b2c86e9f07da01ea","modified":1661272270000},{"_id":"themes/Sakura/source/img/cover/(6).jpg.webp","hash":"25267df7614e852d8c4ba229e9c77c5453e744bb","modified":1661272270000},{"_id":"themes/Sakura/source/img/startdash/sakura.md.png","hash":"5a339ba8d24ae5e3494bdcace69e3c93dc6d838b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-datatables/jquery.datatables.min.js","hash":"dee4d8852a0358695e2a9aae4970fcfbd337d438","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui-timepicker-addon.js","hash":"76b7bb130182a7e2e2cf66caedc796d2778bf3c2","modified":1661272270000},{"_id":"themes/Sakura/source/images/cover/(6).jpg.webp","hash":"25267df7614e852d8c4ba229e9c77c5453e744bb","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/lab.jpg","hash":"da6bc6bd70aea8e819162e962e232d8cf1c48976","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/music.jpg","hash":"8ae3ecac53b96bcdc1c470f8342c20f4c2ee522b","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(3).jpg.webp","hash":"96ff977ce087a71a020e4a75a7e3516ade3fee19","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(8).jpg.webp","hash":"4ffcfb8c695294e8d84cee0e7b5be0c024e5dfa7","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1661272270000},{"_id":"themes/Sakura/source/img/startdash/wangshiwu.jpg","hash":"2cc94aaeb8548ae0d6c5a91a9fb9f5cfdea9eda4","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap-theme.css","hash":"ecf2245dd39ea3b17ccb4bea42cda46356376078","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap-theme.min.css","hash":"4c936da026b2fb2e6b63d3d4ddbc3d9beb658d17","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery/jquery.min.js","hash":"c72c1735b4d903d90dd51225ebefb8c74ebbc51f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/trumbowyg.css","hash":"c59d6e321b61a030faf32d62517e643d2e91f47e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ar.min.js","hash":"54ea4344a830047592751eaedaabffb8dfee9ada","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ca.min.js","hash":"91decf0a3a3f2ee89cee1b8f5cf23fba8f20ace1","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/bg.min.js","hash":"1d7ab9edfd5883248174f13b14eac93d6cbdac36","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/by.min.js","hash":"4134bbedded15ef619b2066acbafe7941f6a6bf9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/cs.min.js","hash":"564f7fdadc40d6b9b651962e0030ace94cdcbf7b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/da.min.js","hash":"b28fe02a941d8665959c5617a0f51eb8ae02e101","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/de.min.js","hash":"4a29da2bbc5faa6bf86b0e881ec36fc196b9c9a9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/es_ar.min.js","hash":"ffe6140b704fa2ea45e34bc5cca2bb97895fb3c9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/el.min.js","hash":"d62a9cd36246de2783b43cc3d44d8a663f5118c0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/fa.min.js","hash":"bfc84dd7838158e2b48f58d4fab798ccc956800f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/fi.min.js","hash":"bd6243774ee26ed425872ac1dd421736483a94ec","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/es.min.js","hash":"798424a20bb6c74e0234e129ebac62d27f4879d2","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/fr.min.js","hash":"839cd9219fc2723f49e48d9a5c47032d5bd2e87f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/he.min.js","hash":"a326d64e07f8eae9a4a1b69f0250918b9798c2b1","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/hr.min.js","hash":"554629564597a9d0081d10613985f71deaf35ea3","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ja.min.js","hash":"a2830f4dc7568c7c26a015b66da33407ed311ab4","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/hu.min.js","hash":"a576f98da65395d5e2b8709577592d47a283b169","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/it.min.js","hash":"a3b9a023f7a0fdb240d137e9d314b632dd422d69","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/id.min.js","hash":"3ab32d93c79c30a38293cc7fa7987aee7ff465b0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ko.min.js","hash":"ffac9d1e0921ec30b6652d3e8064e54cfca64503","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/lt.min.js","hash":"0b4ed4a0743e43cc9ff3cb898363828e332d09ef","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/mn.min.js","hash":"4915de25936a5e32a9d65f3253602950db902f76","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/my.min.js","hash":"60f4d1552b451fa02c1dd0bd88729ce26f30b352","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/no_nb.min.js","hash":"fa26f728bb6726fc97027ead69cc63695409b88c","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/nl.min.js","hash":"c6423e20bf81a46aa63c9f6ad0db163a02d39519","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ph.min.js","hash":"4188ad65cbb7157539e72d2919f3105f13551dbd","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/pl.min.js","hash":"09066603ad910ca7e9264024e4d6e141b5d9a974","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ro.min.js","hash":"448878d909c0d257e4c1551a1f9f96e70e3449b0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/pt.min.js","hash":"10bb65aec0b490c64724a3ded5b853aec78a8603","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/pt_br.min.js","hash":"4e4640c8206c9fdd8137a601c77ca71252259138","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/rs_latin.min.js","hash":"23fb0b3c9bf59721e3c0e5a6b1a0fdd3492f1f5e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ru.min.js","hash":"1b6596a0117bc78deba97c224b495ad25e7b7e46","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/sk.min.js","hash":"93f5ec0e995e1f564bbf3dbe1fda1768d22a65b1","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/sq.min.js","hash":"cfa1fff5430ba12dba9ae637ee42263aa5456aff","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/rs.min.js","hash":"b85705a33ce052863c170eca4ea0bf0e315eff7c","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/tr.min.js","hash":"f834d513c67da0d3f80edbf0c934d0ec60773cee","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/sv.min.js","hash":"a8dbb065188f858a3b074b45bee5b7a23d093468","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/ua.min.js","hash":"cf06712011e4bf666faff34e2f0af4e9b88f0c06","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/vi.min.js","hash":"ebdec1d3685c17cf7d5946816de649ab0e2bf129","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_65_80e1ac_40x100.png","hash":"3d4448972556d478cb2551833e8e19480f39c72d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_0_aaaaaa_40x100.png","hash":"cb4fd44734d4f0c4167c46eb99abe579bcb6cbb0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_75_3DD481_40x100.png","hash":"0104a577dfd0d509eab2b8c9398760c41b076fef","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_75_80e1ac_40x100.png","hash":"6e89d54a1a437e1fd46821472eb9c33e00df5487","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_75_ffffff_40x100.png","hash":"752cf46507ff8daa6f2e39fa478b68e5ec541138","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_80_fcefa1_40x100.png","hash":"b4813423d4b294eb8495997c79fda888441087a9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/zh_tw.min.js","hash":"290b8103de213f9917b507876a49592a1c6c7cb0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/langs/zh_cn.min.js","hash":"98c966afd57cdf2debe2f62fa36f985531c0ef5c","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-bg_flat_95_f42727_40x100.png","hash":"52d59ba2e9403da80ae0852f144a33277a225570","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-icons_222222_256x240.png","hash":"10af36aa842ea948ae4a7c11851b91049fa364d7","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-icons_062126_256x240.png","hash":"5ffb302624f2206cf83799aa9ac23f21625dc967","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/images/ui-icons_ffffff_256x240.png","hash":"164b3ca6bf1a3fbbf174f79438f442ddd8366d47","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/links.jpg","hash":"71cf3658c87f42a47b4583ae54cee51dfbcb94f0","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(1).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(6).jpg.webp","hash":"25267df7614e852d8c4ba229e9c77c5453e744bb","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(7).jpg.webp","hash":"280a5c05256dca4fbea5af1bae208c19efce73a4","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(5).jpg.webp","hash":"ad0f06e40504f4b86b3b12f6b2c86e9f07da01ea","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(4).jpg.webp","hash":"22bc8dfdcba509032f270fb68f9168efb39bb373","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/AliPayQRsmall.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/AliPayQR.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/WeChanQR.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/Sakura/source/img/other/404.jpg","hash":"e43e6b827d08f93d0b943acfdbf368993b210b56","modified":1661359571286},{"_id":"themes/Sakura/source/img/startdash/bilibili.jpg","hash":"b203b4fcd7882ecfc361d0d4cf6b6fbfd49ea48d","modified":1661272270000},{"_id":"themes/Sakura/source/img/themebg/sakura.png","hash":"dad9a39bc25599b1175aac661e61b23ca70bfe0d","modified":1661272270000},{"_id":"themes/Sakura/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1653072056000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/index.json","hash":"090ae1aba4463777366bc7da2f907582d60ca086","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures.cache","hash":"3b43baf188315db8c570f59a8d1c3de9ec855517","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures.cache","hash":"bff1f7bcc41ef1d3a652615772a730945f2fc5be","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/index.json","hash":"3ee48c0577f9e2491e1aeb7366b464ce795379df","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/physics.json","hash":"88398d129cad258c9e953302b0b1337f23fa1c16","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/textures.cache","hash":"2be88ca4242c76e8253ac62474851065032d6833","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/index.json","hash":"d90b7a00337e66b62c289441e73f88767b11af29","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/index.json","hash":"b29af7bcda2e07293f0402e8351fdfb97c8fabd3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/index.json","hash":"b29af7bcda2e07293f0402e8351fdfb97c8fabd3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/physics.json","hash":"34fdb8b73bb062251917f97ba2a13f999fd19c2f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/physics.json","hash":"34fdb8b73bb062251917f97ba2a13f999fd19c2f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/index.json","hash":"17224fd76b8ac971c7c6944a82946f679a0a62a3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/physics.json","hash":"34fdb8b73bb062251917f97ba2a13f999fd19c2f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/pose.json","hash":"58d66c97cdf8292a1a6efcfa1f7d06a7fadfadfa","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/index.json","hash":"a1c8e757edd2b7415ad2913f3c02ea6ae071ca63","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/physics.json","hash":"20b9fac843f18517855f8f8c2ac6ca1b08b801d8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/index.json","hash":"878e65acb2ae3e9e467ff8cf2a58d389d3aa89ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/physics.json","hash":"f6d2de97a48eb8804f9f71e240f325cbcf78962e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/index.json","hash":"a1c8e757edd2b7415ad2913f3c02ea6ae071ca63","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/index.json","hash":"878e65acb2ae3e9e467ff8cf2a58d389d3aa89ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/physics.json","hash":"20b9fac843f18517855f8f8c2ac6ca1b08b801d8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/physics.json","hash":"279f34423ddc491f2161ed31e8966ef0af131a7c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/index.json","hash":"48a7e425789b8858a564356f4ee2e6a71e4a3b97","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/index.json","hash":"878e65acb2ae3e9e467ff8cf2a58d389d3aa89ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/physics.json","hash":"f6d2de97a48eb8804f9f71e240f325cbcf78962e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/physics.json","hash":"4bd3f7dffe953cdc405edec5aa40b07959d3923d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/index.json","hash":"6c39071b67eb30b4590b33be0e3cca2ce3040c28","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/physics.json","hash":"4bd3f7dffe953cdc405edec5aa40b07959d3923d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/index.json","hash":"6c39071b67eb30b4590b33be0e3cca2ce3040c28","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/physics.json","hash":"4bd3f7dffe953cdc405edec5aa40b07959d3923d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/index.json","hash":"fd4202096f28aeda501e82d6f86bf198d809ae60","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/index.json","hash":"99cd70eb489c19f4fe2cadbf7a496e3abc291372","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/physics.json","hash":"04b406ae7b4750be181e9f4bf226c6a2d296b90d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/index.json","hash":"6a4d0a17e7f4ffa55d355746582ddc775f748419","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/index.json","hash":"99cd70eb489c19f4fe2cadbf7a496e3abc291372","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/physics.json","hash":"04b406ae7b4750be181e9f4bf226c6a2d296b90d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/physics.json","hash":"04b406ae7b4750be181e9f4bf226c6a2d296b90d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/index.json","hash":"0dcc196c310d47c01b649a86e14135c195757304","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/index.json","hash":"e7aa2646c1355f4ac0b34f094344ab471d0d046b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/physics.json","hash":"b8e0fa860a3081a991b8f4a2df60edfde9c2ad7b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/index.json","hash":"878e65acb2ae3e9e467ff8cf2a58d389d3aa89ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/physics.json","hash":"279f34423ddc491f2161ed31e8966ef0af131a7c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/index.json","hash":"878e65acb2ae3e9e467ff8cf2a58d389d3aa89ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/physics.json","hash":"279f34423ddc491f2161ed31e8966ef0af131a7c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/index.json","hash":"878e65acb2ae3e9e467ff8cf2a58d389d3aa89ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/physics.json","hash":"279f34423ddc491f2161ed31e8966ef0af131a7c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.cache","hash":"2be88ca4242c76e8253ac62474851065032d6833","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/index.json","hash":"1676f252fd06946298ea86e9aac5d40873a9aa6a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/index.json","hash":"83bb7f5bb34468e57a3fbde78b86dcc11a2dc319","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/pose.json","hash":"4decd7fc3d6a80c7f9021daee689018f9a57e83e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.cache","hash":"2be88ca4242c76e8253ac62474851065032d6833","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/index.json","hash":"70af9a8d73e8151a5016f4fa2d7f86e94206d717","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/textures_order.json","hash":"ee404f1dd7cc3768de8337a9251ce00aee639828","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/index.json","hash":"5e105582031dc9f03e66f5b471de1db3cd34313a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/textures.cache","hash":"6475122c0652b6b4186f21d360a31245a9a519ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/textures_order.json","hash":"ee404f1dd7cc3768de8337a9251ce00aee639828","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/textures.cache","hash":"6475122c0652b6b4186f21d360a31245a9a519ad","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap-theme.css.map","hash":"abc2e3a1163de52378c71bb92d007c22abb0a393","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/js/bootstrap.js","hash":"bbf55e20f1ebb6368522799f29db39830a08ef93","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/locale-all.js","hash":"884ea7be5741579c38bfd363af4067f391d11f47","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/icons.svg","hash":"ec8236b6d389bac634578c3b6e88c00bd714c386","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/trumbowyg.min.css","hash":"d25dfb7ba6517abe1588384e2cf2674ee689b02e","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/donate.jpg","hash":"dc511a54a1998040884eb6b5f2550af484505cf5","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/client.jpg","hash":"0e2782f8dc4150983c41af4f3e8cec8b8565042f","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(0).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/BTCQR.png","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/WeChanSQsmall.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/model.moc","hash":"ec4becdfb64a722a878aa69ed8429043402f7259","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/model.moc","hash":"409ab86a5e3761cb7ed3d1355c578ec94e84946a","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.min.js","hash":"9b84b777a7d9fe6bb4bfb5af9b03c72abfbf8740","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.js","hash":"eedc21d6fb2c8f7de495c2788c70462464bbe01f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.js","hash":"c6f449e6f4ed285b28bca78073701d6ae9cd6b8f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/ui/sass/trumbowyg.scss","hash":"2a4c13c29c13e6b595c1ee68518aa038f72c4e8e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.min.js","hash":"692f7dc73acc94e52bf52e7f9012bd7f93fc032d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.js","hash":"3cb0bd69f8eed39f76895134ac31167173f56fbd","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.min.js","hash":"8d235aac856100d3a69f86483789a465f163872d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.min.js","hash":"1720fdb945caaadb56f8cffe92bfa21ee11c0df7","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.js","hash":"83b1e21acfdf756800c1d88164ab7c10254c3940","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.js","hash":"0be6c223b10c925aba9f4731e384befb1849197f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.min.js","hash":"42118d935b28bcb4495fb54d2eff9e391d787f17","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.js","hash":"a6db21cb92e939223cd593a32839294b81d51e70","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.min.js","hash":"f496e6e1018f60dd1474fb7e452abfe28ad9849a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.min.js","hash":"be4a301f2d6e7002bd9d5564b2dc41f04b339c80","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.js","hash":"4783845712cdd8baa90aa08aea54891f0aed5454","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.js","hash":"e31439ab02fc6df006e7198a910d29de254d03ef","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.min.js","hash":"248723d0599672db5eef6983692d734164f41853","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/history/trumbowyg.history.js","hash":"7ba2ab8191c18c771087d48cdc24edb5ac0561ed","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/history/trumbowyg.history.min.js","hash":"2fd86ca28951949c9f63f00deff82c5a5e42008d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.min.js","hash":"9c2bcd05dbb5d168f870b3e4036fd5894893372e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.min.js","hash":"3994e1dcf842d1cf4d9a5f03fbaf6f4707f7ef8e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.js","hash":"43012e622644e257475ffba2434f557906968d9f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.min.js","hash":"af08f7024d9b16a426a7f3312d1701a76f83b3a4","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.js","hash":"eac5be99110fbc0282d29407cef72a8d41eb363b","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.js","hash":"0bd35af0bf872c1d787a042fbb1c38ed78fbff12","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.min.js","hash":"6b34f395ed35739e823d585fc047e3b6ff10c091","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.js","hash":"25b794bfc7e223822ca83d131cf2aa5815eeb621","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.js","hash":"c7122dc094d93236888cb994addd6759868a3e36","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.min.js","hash":"41d1839536cd5547c01faa15517f501a51618556","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.min.js","hash":"221ed1f2a9dff86c8c599e19d2cc5f731e230cfa","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.js","hash":"5c50d67ad747658e8289ba8e41b642ecffa5a97d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.min.js","hash":"bbe31b61b7239961f70391414b4def3914df78a8","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.js","hash":"33fe123dce5a52327790ca62dc0481426744b6d6","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.js","hash":"fdd1e776fb0176cb15cd621f98417025608ad552","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.min.js","hash":"5551de59c98c504b7705e20e4b48803a7b532d37","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.js","hash":"c7ea3c827beef4569674a5e39dbe33c83b5fc8f3","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.js","hash":"668965136aebc208f1cecf09fce6f74787ccb724","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.min.js","hash":"15bdfd92e4c048528f404d246aa7f27a67a5ffea","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.min.js","hash":"c34d3c4cf54305b5598f548c7111b011c82f9763","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/template/trumbowyg.template.min.js","hash":"0b6faf190b15c3e3c3d2e29cee6f14679bb30980","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/trumbowyg.table.min.js","hash":"7e39b5dd17b7fd5b3b3a32421f62c6e5e3ac5baf","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.js","hash":"258f4fd642303d33ea81ec0bd2ed789e4c86a288","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/template/trumbowyg.template.js","hash":"0f71a1e30dd7c4a47bdcb2addc5bded65c834ead","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/trumbowyg.table.js","hash":"54ea70119671f84d22207843a284c996d657f56e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.min.js","hash":"383beb7099b073ca84b27e69ead188c79b989ec4","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath2.mtn","hash":"2f1d687ac155865af6176d77e0ec6f4a4d29071b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath1.mtn","hash":"8b9830960269c57540f235550b662bd8bb2eb9e7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath4.mtn","hash":"e046b214762c0cf59d41c5a794aa0f48ebbfadab","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath6.mtn","hash":"222e9801e2394950398c4904897b5ad89244f429","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath8.mtn","hash":"366b357fb26bcc39ed3f6d397f280d0e6381be0c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath7.mtn","hash":"cbab9298b360f3548e2365813ec0ed95ab111135","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Fail.mtn","hash":"ee758e7fc4f7080de4576b05ad685834c995ac47","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sleeping.mtn","hash":"14371217f96d56b7920c89e8336aa19d2dc1b457","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sukebei1.mtn","hash":"7baa2802152d82bba7eb0edb31b0ddc054d85180","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/model.moc","hash":"0f883ea279bda9133028124003b11c7f3edf20bb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Success.mtn","hash":"fb2c6350010c0841598d645e354fb8f301e21593","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere5.mtn","hash":"340ee5d25c44de3d899e5d42e93a140207e820e2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere3.mtn","hash":"9f4f5ed6831fb262afbabc9536c87262fa10c471","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere6.mtn","hash":"1dbc118605f33ec4e0e82dee60499d69ef07a741","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch2.mtn","hash":"b6c6c3022aae612d4f0ce7cd59f99db1f6241a43","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/WakeUp.mtn","hash":"8778f42f1ce509ca2fc4a385db96a4976f44647e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath1.mtn","hash":"e9fe2ad68ba66ae2cbf8d2f4662bae9b3144b1cc","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath4.mtn","hash":"c291bd06b3b072fe22a790d3412358ec003e7aba","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath2.mtn","hash":"1c1b35419e237327e5d6f7187b7738d2b853fa92","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath6.mtn","hash":"4394ca06d4791c76e4fa0c913e3bf0b08883c5e9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath7.mtn","hash":"1cfccb24f92a073e9f644caaa66d4f642695d873","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath8.mtn","hash":"d2b8adfbcaf107f617cd9401cf7cbac266b921c7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Breath9.mtn","hash":"e18ba38b62b417dcb3e2df7be15ccb9c487788d6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Fail.mtn","hash":"2282256817cf3df568dc99e0b26c78e02ed6aa69","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sukebei1.mtn","hash":"c48e9d14f9e040f93d0dbd2996be2986d319da70","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Success.mtn","hash":"80bbe4a27282dfe30edf0944ddba314f8d1600ac","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sleeping.mtn","hash":"7cd4c2a961eab44f9cac8cf49de96850c5dbd20d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere3.mtn","hash":"e664a4d0dc4003bceb6c65e7df1ceecfb538da8c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere6.mtn","hash":"118498c1bad58056ac926d6533d6af68ca03f0f5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch2.mtn","hash":"2c07642b2feb01472ea5381d9256e003703b1c40","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/WakeUp.mtn","hash":"99508a5176a2d1864fa1088f46b36d39eb9cd76c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f01.exp.json","hash":"0534e546ecd2d60b27e03a91329621a311815676","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f03.exp.json","hash":"b51473e9096953ab15b8c80ab1d7eb82370f576f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f04.exp.json","hash":"b11dc636811ebddf3840b8c4cce17af2157ee4b1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/model.moc","hash":"da39c01768423f32f850f6817c85edf7e7ecd379","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/expressions/f02.exp.json","hash":"0054f4f8ea53f5720f11907e45bd7d035b0966ce","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_01.mtn","hash":"7b3093e86a69f4dcdc82a6380260758db1929018","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_03.mtn","hash":"90e4d81c8b0eaeb96a420f775d6c823fcd7480b7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_02.mtn","hash":"02acbfc05ee069982987d037fcef4ddeaf082aa4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_02.mtn","hash":"2ed36aea45df4a33c76dfa4ced52953220b37660","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_01.mtn","hash":"dee4dd5c545fa515e94a100d130f64bced3f1806","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_01.mtn","hash":"88027b81a07ad420c3da9665f174da23f5feccce","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_02.mtn","hash":"33f578b6b3ae0844f8e8b12407177ca67459e88b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_ear_01.mtn","hash":"af6e74c560000817cba400aca24c5afd348a5bca","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/03.png","hash":"e1584cd81f119d8bad793da57c5f0c0209b42807","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_00.mtn","hash":"3af96a9c289982f2289c1d0e2aa665d6f0164e82","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_01.mtn","hash":"30f70f09f5e151905748e62a67d23aef9f424164","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_02.mtn","hash":"363694f3bcf9cf09d4c858cc039d1842624d6635","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/pose.json","hash":"a1906d69f20bea7656a6d3db69a76f640524f4f0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap1.mtn","hash":"2ecd17a69b01aa647ca58bb69a941bd642a65557","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap2.mtn","hash":"9e1eeaab09d80d93507a891fbeb8ec67c09b3ce9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap3.mtn","hash":"ab0592735f66b56b05d9ce4e2825e0234d5d1b88","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_00.mtn","hash":"179e312cec4ece7d717de9055f67efa1d353bee5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap4.mtn","hash":"a24999945d9d01c7c87658c2e9549e24e785e61a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_01.mtn","hash":"dd5cf10ac3a2158278107ab4292ce924f25c493d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_02.mtn","hash":"627f07699c3e3417a1ccc72660c59cdebd6abc98","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_03.mtn","hash":"05ff45fe2e6e380972b15339da8cfb7b5e8f0298","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_05.mtn","hash":"47728a0436bdace18505aca987444d669aad08d6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_04.mtn","hash":"a2c1fbb802312ce49795aa456a90d226cd20892e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_01.mtn","hash":"1e4414b954a27e4889f11879d53d856869676bc7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_02.mtn","hash":"63cc69ab11f10268c9dc20dfc8fe1e2fb83c776d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_04.mtn","hash":"04df6e735284b7bf0f3c4631bdcd6370a6996016","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_05.mtn","hash":"044dc3a26ef61ded0d4db2e732c0c018123795f3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_06.mtn","hash":"65971b3ceb04852c0073f7d2e0365c0a359c577b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_03.mtn","hash":"a0fa275d0c33958e9514950a8bad7df5ea4eab7a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_07.mtn","hash":"90627de817458b3474e3c090f0f12d581dd1ef2c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_08.mtn","hash":"4fa8eadd376b4dfb346b56bb87d245635c1107f0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_09.mtn","hash":"c9efc956caae2b5d8756f561dd33d9c944a79f06","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A2.mtn","hash":"030c90e6fb391580b37afdbf62242b8958656db3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A.mtn","hash":"b415f31b390e7587fad434d5d89a55b8e4384f9d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B2.mtn","hash":"13ddf63ddc0dfa5599cb8ddc2a00a69abd348706","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B.mtn","hash":"daa77c3caae3db8c042175c59710443e91054181","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura1.mtn","hash":"cab13879d896913df8ae346fe64ea7cfd90b2d26","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C.mtn","hash":"8b9bedfa4e72ba5e79fba1545cb46ca0902e757d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2.mtn","hash":"3a372b6a33e1d1e099f1fa9e04bd8cf7f98ae543","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2_copy.mtn","hash":"68566f8e0f1fd24a76525802054179dac7833585","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura3.mtn","hash":"489d1ab2d4115220b8cd3f5a0d00b27d91a6882b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura2.mtn","hash":"7cd3d5cbe904941874600f38a0a38096e779f704","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch1.mtn","hash":"4efd57e3a20c4a64fde0e35ff27dab6179f80e17","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch2.mtn","hash":"ad44887390b0724042c82f29d8e7994afb08f569","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch3.mtn","hash":"95f596f1c28062d810ce663c26e621aa45d9c157","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_01.mtn","hash":"a7453cf23b7f55f4f543ccc610046e460266f421","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch4.mtn","hash":"7c82bedd5485b962e5f0b5013cc5a32ef2a03924","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_03.mtn","hash":"a13967c60504bea9f0f256ed91704f7c70f986c5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_02.mtn","hash":"b1d406bc7df877808ba9f2fb3740f2d3af58f5ba","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_04.mtn","hash":"f91fa5d0997bee64f788aadbfb2780fdefcbd7e3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_05.mtn","hash":"4a092507d21a6973aa73d472af489389190e4259","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap1.mtn","hash":"2ecd17a69b01aa647ca58bb69a941bd642a65557","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap2.mtn","hash":"9e1eeaab09d80d93507a891fbeb8ec67c09b3ce9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap3.mtn","hash":"ab0592735f66b56b05d9ce4e2825e0234d5d1b88","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap4.mtn","hash":"a24999945d9d01c7c87658c2e9549e24e785e61a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_00.mtn","hash":"179e312cec4ece7d717de9055f67efa1d353bee5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_02.mtn","hash":"627f07699c3e3417a1ccc72660c59cdebd6abc98","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_01.mtn","hash":"dd5cf10ac3a2158278107ab4292ce924f25c493d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_03.mtn","hash":"05ff45fe2e6e380972b15339da8cfb7b5e8f0298","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_04.mtn","hash":"a2c1fbb802312ce49795aa456a90d226cd20892e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_05.mtn","hash":"47728a0436bdace18505aca987444d669aad08d6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_02.mtn","hash":"63cc69ab11f10268c9dc20dfc8fe1e2fb83c776d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_01.mtn","hash":"1e4414b954a27e4889f11879d53d856869676bc7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_04.mtn","hash":"04df6e735284b7bf0f3c4631bdcd6370a6996016","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_03.mtn","hash":"a0fa275d0c33958e9514950a8bad7df5ea4eab7a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_05.mtn","hash":"044dc3a26ef61ded0d4db2e732c0c018123795f3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_07.mtn","hash":"90627de817458b3474e3c090f0f12d581dd1ef2c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_08.mtn","hash":"4fa8eadd376b4dfb346b56bb87d245635c1107f0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_09.mtn","hash":"c9efc956caae2b5d8756f561dd33d9c944a79f06","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_06.mtn","hash":"65971b3ceb04852c0073f7d2e0365c0a359c577b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A2.mtn","hash":"030c90e6fb391580b37afdbf62242b8958656db3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B.mtn","hash":"daa77c3caae3db8c042175c59710443e91054181","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B2.mtn","hash":"13ddf63ddc0dfa5599cb8ddc2a00a69abd348706","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A.mtn","hash":"b415f31b390e7587fad434d5d89a55b8e4384f9d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C.mtn","hash":"8b9bedfa4e72ba5e79fba1545cb46ca0902e757d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura1.mtn","hash":"cab13879d896913df8ae346fe64ea7cfd90b2d26","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2_copy.mtn","hash":"68566f8e0f1fd24a76525802054179dac7833585","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2.mtn","hash":"3a372b6a33e1d1e099f1fa9e04bd8cf7f98ae543","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura2.mtn","hash":"7cd3d5cbe904941874600f38a0a38096e779f704","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura3.mtn","hash":"489d1ab2d4115220b8cd3f5a0d00b27d91a6882b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch1.mtn","hash":"4efd57e3a20c4a64fde0e35ff27dab6179f80e17","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch3.mtn","hash":"95f596f1c28062d810ce663c26e621aa45d9c157","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch2.mtn","hash":"ad44887390b0724042c82f29d8e7994afb08f569","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_01.mtn","hash":"a7453cf23b7f55f4f543ccc610046e460266f421","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_03.mtn","hash":"a13967c60504bea9f0f256ed91704f7c70f986c5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch4.mtn","hash":"7c82bedd5485b962e5f0b5013cc5a32ef2a03924","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_04.mtn","hash":"f91fa5d0997bee64f788aadbfb2780fdefcbd7e3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_02.mtn","hash":"b1d406bc7df877808ba9f2fb3740f2d3af58f5ba","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_05.mtn","hash":"4a092507d21a6973aa73d472af489389190e4259","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/idle-01.mtn","hash":"7e8d1a1260e9982c425a8e7ff70ceadcd997ae35","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/idle-02.mtn","hash":"04e5e3ad7f398c113e3e859b5168637e0105ab4b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/thanking.mtn","hash":"93f2e05d2d5e57af2fa508f8f2a7744ca1f898d7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/touch.mtn","hash":"c06f43b7a0d6bf8e986c8f7222f6c24b1aa77333","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/motions/idle-03.mtn","hash":"21af6f3a397221ec170a65a49e7733cc7f0d3153","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/model.moc","hash":"01b61d7c359bc5615a2f07aed653c33e1ad56354","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_00/closet-default-v2.png","hash":"7127120e2d6e177036b62457cefe74dc8efac304","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/cba-normal-upper.png","hash":"28da557b007245731ddaac5b0a02340f205aee3a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/default-upper.png","hash":"578b64a63007a4abc99e026d5ac3af8af89e9306","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/newyear-upper.png","hash":"fea272e1cf3d803297cf91a675214ea892a34f51","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/summer2017-high-upper.png","hash":"8dad5b4a9e34a9d9504020f35eb03e6b0639ace9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/summer2017-low-upper.png","hash":"8b4e1990ef146767973e508d65721a3de9ad2d50","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/tomo-high-upper.png","hash":"217995721f1e351b2fdd1297870b621f94781669","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/tomo-low-upper.png","hash":"bb31bd108c6220c21b9b3cb304e57d5a11d74e6c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/valley2017-upper.png","hash":"4a3896496df84149f7ba3206bbc671ea1c8d87a8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/vdays-upper.png","hash":"d0dea7892c2aa5dcb5509f60b4bc4e17b5fe29c3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/xmas-upper.png","hash":"3ff7a74be98e94f49496870c07e483423887ad1f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/cba-normal-lower.png","hash":"4aa0c1bd6ff724821516c6a905ffaae197e4c959","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/default-lower.png","hash":"1c7c9e0ec0e280b87d2c4fb881e9ba065e4fec7f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/cba-super-lower.png","hash":"d09d5e8ed6d2cfe646986582332d863b2657f329","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/summer2017-high-lower.png","hash":"bb77c5b3466c205c9ac48f0df9e7c92bbe8846ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/newyear-lower.png","hash":"602c43b47370233d52af90437aac5c92519eab49","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/summer2017-low-lower.png","hash":"7ab04ed025398e4a4d9eed5797ba0f8a503930d7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/tomo-high-lower.png","hash":"2be5edc7ca483af3d81b8d53309c5e78bd92e412","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/tomo-low-lower.png","hash":"07fb8e73f03695d760576b6fe916c4a111b3495a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/vdays-lower.png","hash":"f0f370e00105350c0212764a896fc2dabea33625","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/valley2017-lower.png","hash":"c6ec814d7034b1007c06de5a51dde42a74f3fd95","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/xmas-lower.png","hash":"b8c5e2e48d749230ef65eb2cd5c4987bdaca05b3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/default-hat.png","hash":"8beaf22f366b340910f38416912737a2b8ff48a1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/idle-01.mtn","hash":"0c1767232d70bc792f2db7fc0839f10bcbf2e8b6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/idle-02.mtn","hash":"a83a1bd3a3a49734bc08a11ada7eb28a1f3ee9b1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/touch.mtn","hash":"3d7457a92e363b8e93261927d59f6d3e548fb2b0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/idle-03.mtn","hash":"914ea5b72e82b4d9c5b0fd628e2c956481cc2ba8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/motions/thanking.mtn","hash":"b448e4bfc08193ecddcf728dda74aca443b6d963","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_00/closet-default-v2.png","hash":"549d497ec8f8dddbf341ecb0fb729b3f8fd30c32","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/cba-normal-lower.png","hash":"69a1b2f1acdfc6b19537f64a410dbd738c63887b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/default-lower.png","hash":"313d126510fd23f0bc03f020ae4fb2b8e4c477ec","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/newyear-lower.png","hash":"9ff93b9d8d9e3a5d486cda80d39825869ff16ae7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/cba-super-lower.png","hash":"5d69d7185064528342ded1b03370cfc8cf503dcb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/summer2017-high-lower.png","hash":"6b722236a76fe83b59edc4180e550e950101fb14","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/spring-2018-lower.png","hash":"af7097d5cbd192d764d21f89185c09e8bc4a11e6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/summer2017-low-lower.png","hash":"1c31e2b5f2964fe29ffedf8b381c44bc2e54a212","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/tomo-high-lower.png","hash":"70025b87037c7732d744d8cf875dc87ca4aa72be","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/tomo-low-lower.png","hash":"8f74fb9c0e398f01f2a9a68a50023ef95e4bc023","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/valley2017-lower.png","hash":"cca01c7fed4df3500b20d860f7e5025a9f6faba3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/xmas-lower.png","hash":"1220b6f7cd1c0a11dea91cf970aae819abe1cac7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/vdays-lower.png","hash":"1e8850ead5a419cde77157c52b9ff84b8cbd0cf4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/cba-super-upper.png","hash":"9df0fe84852604119a4a934cda741647406fda93","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/cba-normal-upper.png","hash":"6325725e211494def22490fbc7571a04ebbe439e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/newyear-upper.png","hash":"6312c717851e5d6bd56973957d988dc3df62da91","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/default-upper.png","hash":"f8a02f5c260072748d851e5518e3be82efa98707","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/summer2017-high-upper.png","hash":"aeb9933b1b12b2942baaee075be9841fe77f5255","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/summer2017-low-upper.png","hash":"4e466aec2eb03d0076f78b8ccb7237f335071130","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/valley2017-upper.png","hash":"a9e670fb10e05812ac11e1d87cda3773cfb34107","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/tomo-high-upper.png","hash":"7316f36fe7e6c6439dd1b9bffe95d285bfe9e47b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/vdays-upper.png","hash":"a3c384c7c1e10edb6584b03a39661b6bd74e323b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/tomo-low-upper.png","hash":"8a3758cff8f29c664a4f486819061539b257cf4a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/xmas-upper.png","hash":"4ebdeaf676c834bc16798dc91748860845559ccd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/default-hat.png","hash":"2b54cda2ad772d0f707bd4bf803262c527a84493","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/tomo-high-hat.png","hash":"63eaaa7f3101555c81bb27604e08d9983c500fce","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/tomo-low-hat.png","hash":"43f5128298f5ec2aa390b07415c64f82484d95f4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/valley2017-hat.png","hash":"8ec5f7ef2f575bd27ac09fdfcfe7bfab09768442","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/xmas-headwear.png","hash":"c4fdc2d91f7bd2f874010c56c1ab848474e7f3bf","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap.css","hash":"f93f971e312d9bfaf392af3b1dcb4e18ab44e1ab","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap.min.css","hash":"aa875258a8331355d9e47877a2e97c27e0908c19","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/moment/locales.min.js","hash":"c358948fc66f6350a1a176a6f384163742d510a3","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/vdays-hat.png","hash":"360813d339d6e38cf10523089941a2fc4b760b60","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/xmas-hat.png","hash":"61094ffb9b8f0f7e287ff1a35e88b557cb4b4941","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.min.js","hash":"6c16d0906b837e37e5a924127639ab9dde1b1898","modified":1661272270000},{"_id":"themes/Sakura/source/img/banner/coding.jpg","hash":"1585d2b179dbbcc30920c4fb9889ea78c7e9a890","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/cover/(2).jpg.webp","hash":"a28c79979c8a3950a8a53fec07cd1a6ff446615c","modified":1661272270000},{"_id":"themes/Sakura/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1653072056000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere5.mtn","hash":"2195fa2b5aabe06aa110730477e307cee88333ba","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/03.png","hash":"3c53a2de33a16fb9fd32558513e14e46c008d756","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/03.png","hash":"72dcfbd6fc82361ad3ea964145f5367a5fee8b96","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/03.png","hash":"47eed95dd2089d99dddb7f12b077db40f1955d64","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/cba-super-upper.png","hash":"937a2cc9bdf76f0aa309cd0eccf8e9814ab4e753","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/school2017-upper.png","hash":"a8b7136c46931353afcba9a2dba141e584a784ab","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/school2017-lower.png","hash":"dc6907f7b1c7cc068ce6e6b55ed885169eac0eeb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_02/spring-2018-lower.png","hash":"8327dbde7f78c03e28a8c1791615448eeaedd0ea","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/newyear-hat.png","hash":"df07972dbc22862bd96ba9f365a7c0015a82ba81","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/cba-hat.png","hash":"d2d4c1153b99c15e74e081b8a6eae42de3fdeff2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/summer2017-hat.png","hash":"0aab1ba3b9fbf562840de771a6286f85856c29f7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/valley2017-hat.png","hash":"f80f4552118cd22be9d030ca80ca5e1f77d2d02d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/vdays-hat.png","hash":"1361ae5a79ede4e3e5daa9de0beae8da98a79a3d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/xmas-headwear.png","hash":"c96737de0bac6ab888c1eee5971cfd33671e0c1f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/xmas-hat.png","hash":"caed846554bb290516acf59d47ac26e3fd14b48f","modified":1589856335000},{"_id":"themes/Sakura/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_02/school2017-lower.png","hash":"34b46e3eefd2b973787215afac28b9f0c06e922e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/school2017-upper.png","hash":"178eab619c93f7d60757abcddbdd1c33b15f14dc","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/cba-hat.png","hash":"46d4aaeb87146ec0000ad45c32dea068fdecad00","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/newyear-hat.png","hash":"7c5a0755fdd6964f036524e5dee5d5ab6f9b2e8e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/school2017-hat.png","hash":"a2c09a710e80bcb0ddbf1e989bfd7ba8821097be","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/summer2017-hat.png","hash":"2424085f55f9422ecda3230cd3b93c92f81e66a7","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.min.css","hash":"c52be2cb93ee0ba8b2243043ec27c8885f90c84e","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.css","hash":"ce3198e9ee44525a2dcf9779e45d4acedb869788","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.css","hash":"d9d51a9d618184e58b6ed238576ac1714c575f6f","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.min.css","hash":"bc34ce83ce240a794fb12401d6ba06c54a9a8986","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.min.css","hash":"147aa0e020fa8f2ba1a766c66a1d63232a9828a8","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.css","hash":"d7987ea2128614403d8276719b4baa9f09c95c86","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.min.css","hash":"789afba8c8ac33cf8e1abb69fc7f485d19591f68","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.min.css","hash":"65c5919f154d2c84dd2a68caeb5417e15dad876d","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.css","hash":"7f5cd35c728304b4771147d70858dd969b9e033c","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.css","hash":"ff272a8314fd7ae4edf576594ad4a19f0ce15770","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.min.css","hash":"a17caf5e308f9ba4190c07bde421f0d13d97bd57","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.css","hash":"4f6cc0b5eb59739c4afce75aac6721d2edad759d","modified":1661272270000},{"_id":"themes/Sakura/source/img/custom/donate/WeChanSQ.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/02.png","hash":"758d46738374de646c913306b72cbe03cff5aa51","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/00.png","hash":"9f2a09d75ebf8fb23aafed5ff257b78447897ce8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/02.png","hash":"839b477086c403d3aac0b665f84e8440c90901cb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/02.png","hash":"ea4953acf66924b4912c21105eb1758788dad0b6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/013.ogg","hash":"545810ca5f58d61eebc858d457bc1d5e695a6b3f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/deformed.json","hash":"aa8727b9724d889326f2894381957a1748e7db05","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/001.ogg","hash":"cb92004eaf912ce20a5344c23e935e712b275134","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/enjoy.json","hash":"415e15fe9816a724a6571d72578445b1ac1df97f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/kira.json","hash":"5e6cc5957bed35be10818615c691fc06f35ff64f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/happy.json","hash":"ba7be3f3f3b01595ba8c427769e41f059165c625","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/normal.json","hash":"04dc56f3eea170a3194ac91b10db4761160d8045","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/101.ogg","hash":"06a8dedebdcf6fae23077e88b432ac02aa023baa","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/unhappy.json","hash":"d60d6305ace542e96dbe176c96e9c8b1b69df2e1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_00.mtn","hash":"af6d2b3827ad26523f78e6b9f536f5a0dd1c56f3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_02.mtn","hash":"22c3b9ef1a511bebf4497d0542895a6198ca8ecc","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_01.mtn","hash":"dc484375999071a7456a05d29f3497e7553f7afc","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_slide_head_2.mtn","hash":"ef91a29264b228e58282793e29b27e29cd9c53fc","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_1.mtn","hash":"6368824f2179fd9b051f4aaab18a7d8c00cb64f3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_2.mtn","hash":"0184afa7953e625d05698eedcf9eef42a3b1f878","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_head_1.mtn","hash":"d4f92811318f14aac2cbfb88bbcce3685c44bf53","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_boobs_1.mtn","hash":"fb0ccee1946bff40c057ebca50311f42153b2e1a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/model.moc","hash":"88e1c94587927f035758dbdddc8d6061f3570706","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/model.moc","hash":"62385f2c196aebcbb92d53809f2abfd2160d7839","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/refuse.mtn","hash":"103da9a7ecfce82d1dd8891ec553b1e20c758e9c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/shake.mtn","hash":"709f0d93ef9f65bdb6e89a84548d1707bcf07637","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/smile.mtn","hash":"fb2ab884e3657c2b50a58db4167f01710c87e717","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/model.moc","hash":"a2baceabbe899430e70f427efe280b32b69b4882","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/tilt_head.mtn","hash":"22a3319936060c915656b1c440a3d59d02131aad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/model.moc","hash":"84fd06184c56b7ddb53b398a4347bde5fc4a36c7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/00.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/05.png","hash":"281393a9e572a3106ff806a6e7908bf4fe6458db","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/07.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/06.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/00.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/04.png","hash":"3128341232822b8bf0310e1037a0b556305a0a35","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/06.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/05.png","hash":"281393a9e572a3106ff806a6e7908bf4fe6458db","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/07.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/08.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/tomo-low-hat.png","hash":"bb052c0713c1577c793e406de5b9c63b545e0a09","modified":1589856335000},{"_id":"themes/Sakura/source/img/banner/comment.jpg","hash":"4a0b8c0736f6349419ae70bef741561290de623b","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/007.ogg","hash":"5c23a1d5f2bbbbffc68cfd0ca28a7882d10c1641","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/014.ogg","hash":"60dc325950591ef42d05ea9f7823604565fc232b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/model.moc","hash":"d3dacd00437a5a60afd72eed728879312f950c75","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/model.moc","hash":"bc8a5a6c2af17ccb9bb0d831bddcc620d2dab4d1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/model.moc","hash":"edf3b28a464457e322b12466318a7a3fa23c709b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/model.moc","hash":"7d91e76d0dfdf8ce69281a41c37b7aa0503ec59c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/01.png","hash":"3adcc2492414984ad993e2fdb6a188f8087b01de","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/04.png","hash":"f6e89684d57a7b85216fe25e608938da0e6e0056","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/02.png","hash":"e4f54a0598ae0310271ceb9ef204609bf1f2f88d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/03.png","hash":"f6e89684d57a7b85216fe25e608938da0e6e0056","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/tomo-high-hat.png","hash":"772e340b88cba3576d8d250e39c5a332fe8e45e2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_01/spring-2018-upper.png","hash":"6fe1c6af95cc064fb6d2264615ddf48babe87e59","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/highlight/ui/sass/trumbowyg.highlight.scss","hash":"ddd2d55b3572280af0cfdf5c25ab0beb2e41cf6c","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mathml/ui/sass/trumbowyg.mathml.scss","hash":"a305efe855a7e790a28015b47dca1b567cff218a","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/emoji/ui/sass/trumbowyg.emoji.scss","hash":"361fa44d65c9d03d22f4e7717593e6d6a0498fe7","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/colors/ui/sass/trumbowyg.colors.scss","hash":"77c66873048d3203ce9b07c105da36d73ffa01c0","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/mention/ui/sass/trumbowyg.mention.scss","hash":"6cfd78c080050dda2cd3701355c13996873aadea","modified":1661272270000},{"_id":"themes/Sakura/source/js/lib.min.js","hash":"28f7ece281fef37370c561b7bca5285776ae8fd9","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/trumbowyg/plugins/table/ui/sass/trumbowyg.table.scss","hash":"9cf431eef42c13527d645e5974899874e60064e4","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/03.png","hash":"2a771f90feefd0ee645a2d10e8b6bf46d4bc26c4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/model.moc","hash":"22e883cc446e1627ee646a555fe12b7ecf16d8a1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/01.png","hash":"85bb1d569399ed2937facc25c0e48f11c5635767","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_01/spring-2018-upper.png","hash":"1eb1565f54ab5ffcd29bad00fbc0c6d6b0f7e54c","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/bootstrap/css/bootstrap.css.map","hash":"16506513c5f3d95982e73fb6820cf3c4c58d6897","modified":1661272270000},{"_id":"themes/Sakura/source/assets/ext/jquery-ui/jquery-ui.js","hash":"40112996be9f29554100f4995081a3f817398ae7","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-blue.png","hash":"55d7108d2da804ed87d61062a9182f86ba7d8ae1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-red.png","hash":"f0bfbb760bbdc0d7626e1fe945091e8241408bd1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-costume-black.png","hash":"441064357673342543dfab7f2666f86573c23a17","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume-white.png","hash":"ae3e26dffaab427440997c8f9e4e1f576f93088f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume.png","hash":"c6cdde98c13733cd882080e005002e1370783350","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/model.moc","hash":"cbed38078e8eee5184d6a555d824bcc1aad60065","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/model.moc","hash":"93ec7f0f950c0a5207d5a1453efd180b3671adb2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/spring-2018-hat.png","hash":"4b637596f93e3ec8e88db9b1da75ac34952e12b3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/healer-costume.png","hash":"276d9a76afbb6c6e97ab946e635d89923708e218","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-pink.png","hash":"34e03dd90e70743b158c442e55c0bcc73402edad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-red.png","hash":"329c0a68e490e560d5c8bed757c71f04f34f2f5f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-red.png","hash":"c8ab21dc8a8ede8a98647acd66b0f44263a6c58c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-yellow.png","hash":"405cf715661e3ca7e7e323e629fb9aa34d020947","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-junior.png","hash":"9772fecd64baa3f7c8a0184ac0ae73f519b6592c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume-white.png","hash":"9a6e361788c2bf34088c2b74dbdcbb06685ff046","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume.png","hash":"d4f208a79664addbd732815d69f45fcfcd2ebf2d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-white.png","hash":"791d97f8932b87af630124a3fb5c19ca8f898cc5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-navy.png","hash":"5afdff987892b0cd156c97c967d9a6a346e4cfee","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-blue.png","hash":"8e529bc06078d6beebbf3e1cd3f846bd05b42629","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-pink.png","hash":"5936b19304a08973e8661ac7acce2f71b0d362a0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-black.png","hash":"0221d227261619d1fee598e91289c9db4d50ab8a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-brown.png","hash":"8211a3a43dad7140142660647d10205a01b93568","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/cami-dress-costume-pink.png","hash":"9b5ceb42d92cfce4ec7041244aaaadabd6ebd5b3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume.png","hash":"70b281fe976d2b0d24956f78c93a1f5b23fd29ab","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hood-costume-gray.png","hash":"cc14372619f69b67cda285d1b4e0aef2f80a8dfc","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume-gorgeous.png","hash":"1ec8532441cb26f462ec621d099c0d0b34a6ca02","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/maid-costume-black.png","hash":"c36db6c9ce4a2cb75467cc7076dc790d3179d7ee","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sabori-costume.png","hash":"ba1a1c754098a3ac006967e83b60ef2fb56b6e2b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-black.png","hash":"13fb73c5f9b58f304c93b3c5d6ab2a49c9b46b72","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-white.png","hash":"3832428764022e666e2e6b5dd095e0c8caa49c87","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sailor-costume.png","hash":"e94e547d54f080a9c731b8a38340031f4eb0e1b2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sakura-costume.png","hash":"f91fc2999748f9ba79801f1dd7858ae2ba1e2df6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sakura-costume-navy.png","hash":"682778c7a62e0123e671acc4f9cf5dc40e67494c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-brown.png","hash":"9342c47715a1df8b47fc1ca2f4274e66609b9f17","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-green.png","hash":"3932c28c34ffefb988d5e0e2f5297748f62e0d67","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-navy.png","hash":"1ed42e31abfb55ab80d99e6a682ae9eae0d90666","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-navy.png","hash":"e1292b127d3a56eb7174859b7bcee0ef07dc3cf9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-rainbow.png","hash":"a6575e0c21342d7ac9a5bb3b4c7ca64b5afdca0a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-blue.png","hash":"db54c42dd8df5a898a2ec0fed5e7c2d9f9d62a8e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-green.png","hash":"5e9d09f6f688cfe918b5639eebedea2b82f96e89","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/thief-costume.png","hash":"df8ff4df137146d4c6b7417274abd83bd839db2d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/vampire-costume.png","hash":"3d455e280ac8bb5d7cf6b7dba535f8ef65de8ae6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/vampire-costume-real.png","hash":"f31b8be156417f722456b4a767ad7d4d08653eb9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/00.png","hash":"b76361944de2d34e1ebc79575c091dc9de768c1e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/00.png","hash":"b76361944de2d34e1ebc79575c091dc9de768c1e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/model.moc","hash":"5b13d231a642f2a5dd8a36c1c6307dbfd337bbe9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/02.png","hash":"85bb1d569399ed2937facc25c0e48f11c5635767","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/22/texture_03/school2017-hat.png","hash":"0d559b066becfb1ef64c4eaf5b16191247b17398","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/bilibili-live/33/texture_03/spring-2018-hat.png","hash":"1c35a6e9982e5b2df5a3ea468e9f2bcd780f6f62","modified":1589856335000},{"_id":"themes/Sakura/source/img/themebg/little-monster.png","hash":"681bf7eab301d8ac36833b29d7d1f34896b3db55","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/animal-costume-racoon.png","hash":"5096d5f1c509ac4313f82a5aadf57203fa70fe9b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume-navy.png","hash":"da67deda4071a19ffa849f47476615a84d180c0f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume.png","hash":"f04ec479229cda9ffd277b54ec5955d15343d3e4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-green.png","hash":"ea6146bf4d16a89ea23ad7086be60225bfaade30","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-purple.png","hash":"5067f25f60642c6463f3fdb9945550e53216bda1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-green.png","hash":"d33d6560dcaabda34d236bc951758a9e1e4f9c7b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-yellow.png","hash":"b2ea1ffa62ad7dd0a23dc2dae6d15e88dadaca51","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/kids-costume-navy.png","hash":"cc4246dae0be91da64df309d8173667539a6b839","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/kids-costume.png","hash":"aa32379106cf27bc51e23bab84e3757bc6b60421","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/maid-costume-red.png","hash":"aeca4b2b0e070567f7e2e37fd86065ec79edaa5c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/new2015-costume.png","hash":"3dcddd2da559da08324ce5f387a0dd696380c2c9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/maid-costume.png","hash":"299071e0458a4f0faa8f1f8d9f5b047464de6cfa","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/new2015-costume-pajamas.png","hash":"88627923fd9bf567d8d171079d2c8793078a8787","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/overalls-costume-white.png","hash":"30dc670181676335161083d351538ae9c003866e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/overalls-costume.png","hash":"fa87a37aae5dfbfdcc608d5cc2f2922e17bfa23c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-brown.png","hash":"8a7269e1c8b325ceabd957172c16e4fdcdd4a7df","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume.png","hash":"a0bf4a08335eeee7fb68a372c91d91372c8d08ec","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-purple.png","hash":"567bf446e6d64706400edb58ef6c85f1a75c1c7b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-red.png","hash":"57c29228e7bee4dc4825b82a4d3fc0256c0df26f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-yellow.png","hash":"bb34c5e7c6dd348e91498ed6c8275133a1b3e767","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sailor-costume-black.png","hash":"e15e726f639ff8e5bf612fa37cf6bc9e383fe1ad","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sailor-costume.png","hash":"2b62f5a3d264ceba30f756734cf49ac78631c8be","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-gray.png","hash":"aaf2cda855fa613b23ec8c81409da477721c5920","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sarori-costume.png","hash":"71016562811e3d2aa9596a0c01c0a50d40dd100e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-yellow.png","hash":"3acef24e28d5e2175291310ae1622b452e77e922","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-senior.png","hash":"148e6fd7819d71f7836c73a725a99c3446bda1eb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sorceress-costume.png","hash":"dd1d8c62fc464cb0a38bc50102a9bc4bdfadcfc0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-black.png","hash":"dbed957164dffbc8155b9128d6cf8986035eba65","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-blue.png","hash":"df863d923f5ba3da2a0ea7c3107fe8ddce13e266","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-black.png","hash":"73561bff2827efcf231979c2ccbc1fc222784f43","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-red.png","hash":"1581bc9ca9c745ccc75a51f3db936b96439b52a4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-blue.png","hash":"f3b7a8113b87a430881524a6df488d6798d2f4a9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-red.png","hash":"376059e86bce8f9762d0112ad5599b2dee7d5903","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/tirami1-costume.png","hash":"2a06cd1a53bacdb3385726f00640e922d768ffbb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume.png","hash":"5ef491b411d5755fee0a3bce16d6651a8d0684d9","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume-red.png","hash":"7192151db4649e5a230f74b1a60ea1402e3a2a86","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-white.png","hash":"93e11cbeb5903d8257323690b3596f21bb0b68ee","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-brown.png","hash":"1fafa9d43f827aedad567091a3f15a93ab4afe98","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blackcat-costume.png","hash":"28394f9acb8f06377567995fc86cad290a40f214","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/blueround-costume.png","hash":"78459c68c702748da5b08c21003d175de98076d3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume-red.png","hash":"27ed28b3c8f119e02b6ba45823307ddd35d9d026","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume.png","hash":"9a2425e6ad579c58af5352b8504545788b71af89","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-purple.png","hash":"67353a4685f3d0d81f752669e2150a4ca605e1c7","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-green.png","hash":"184c97a02d115c3152a5a7fe1bb8ae1b1566a9a0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-skyblue.png","hash":"503faa7dea20fcd8a4a4d80898bb3dc04e9e0724","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-red.png","hash":"53d486245f7bd8ce1aa96b5dd157f9d300299bbe","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/hood-costume-red.png","hash":"77e3b821e1739a1cac1a7ae85957d876a0079b14","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/default-costume.png","hash":"cdd979265d0b854dd8679119d73c2eea30e0e37d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/magical-girl-costume.png","hash":"58ac268ec2b3729bfe7a50b9b690326d4e49a960","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-green.png","hash":"ea10fe7439f6b86d56fc7e96273840ad8ec23c6d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/maid-costume-blue.png","hash":"fdee8b81568526034287fc0082578f9f4905a167","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/marine-costume-navy.png","hash":"651b74fc9f9d691fefa6ec2b29743cbeb2a9b06d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-beige.png","hash":"835553f91cc33b66b872e38bf0657d1671830b65","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/marine-costume.png","hash":"1cb6914fa1364ce9dda7a5728f225797c08347d8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nurse-costume-red.png","hash":"156c7c14d434005bfdd416a0004d406562bd2437","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-navy.png","hash":"0c4e80f5558dcb8c237567c6b1ff69544fdca503","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-blue.png","hash":"8fbabc650e97fe412609ba12f64e78adb88a0eb8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/nurse-costume.png","hash":"c12583ab11bb85c4732c552c61baaacd58718c66","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-green.png","hash":"0bf40e12faee07faff7d33c799404c6fc4c327ff","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/pushcat-costume.png","hash":"ec36dff24e74412ec6646dc470e60b0e2e256da0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/santa-costume.png","hash":"004963e1d0fcc29bb065fd9748c1d71a63344a98","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-snowflake.png","hash":"d66a5b18c95641283bc345d40fe1ad9d5248d747","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-white.png","hash":"41b8e85a1a45fb07392c7f1a8c019dcab169913f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/warrior-costume.png","hash":"620fcf91aa5da4a6f73bf38ced88c366f3cd1a5b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-red.png","hash":"d1c15c16e5af0bc2af2f348c9c6e8f612826a87b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-purple.png","hash":"5dac6f2653f196f9a5e263616894d86199957bea","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/model.moc","hash":"dfa36095d6045abd9cc87983c6e1f43272a10c6f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/model.moc","hash":"ba4b45356419330b0b35c711be29f5a1ffb98478","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/model.moc","hash":"7aadbaf179e615a2863b992d1c468d9486fcb171","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/01.png","hash":"833545a8f4d7ea4162d28ed5ecc0d953da97a66b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/model.moc","hash":"4fde92ff356618d5a93e72f51b684c5ef73e2c94","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/01.png","hash":"833545a8f4d7ea4162d28ed5ecc0d953da97a66b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/01.png","hash":"833545a8f4d7ea4162d28ed5ecc0d953da97a66b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/animal-costume.png","hash":"d0293faa6e0808549acd40dd9d002dc0c7517ffd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume-red.png","hash":"52eb6811409823133b49c6965dc6189a72cfedb2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume.png","hash":"3c4ad7e83faee6b70d3c2c5a451e30d00c1d999e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-brown.png","hash":"6f2894835498cc0ae18c40f937875451be203269","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-beige.png","hash":"7913d07f365ca98ceb82b323450f88a62cd27997","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/furisode-costume.png","hash":"fca09e50541f21d516796a9c749e101004bedf39","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-red.png","hash":"a841df2ba6b70264c0814dd5735d5490f3bac8d8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-pink.png","hash":"ea8e0f1a8984349ef672f8d250c35b41d1aee482","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-red.png","hash":"fe95eaee4c556c4343cb2e5fc509f0de0b6f4348","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-skyblue.png","hash":"98e040f80057062823f6560676c2f67664432a0a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-black.png","hash":"db938a08af28cdcc42a3abc5127cfab2bfef18ec","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/nightsky-costume.png","hash":"fc49b0004e5779652f690ebec5a67cd8d6cb233a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume-pink.png","hash":"9f9c2ba15b5f743126c962fc2594a8187ee5711f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/santa-costume.png","hash":"8e37aedc57c6d6deb200960bbc09e18ccca163a3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume-brown.png","hash":"ff2cd3dbf0cd23d8979c3d1e733db9fc5532c38a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume.png","hash":"0ccb5057d726236ecd6cc0c4ce3df5ef4a9c8f8d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-pink.png","hash":"7b241e82d6a935397b957248b9bbde5c476d0cf4","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-pink.png","hash":"8190e6216a23f34f3a9257dbaffa3043eb31fb3d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-white.png","hash":"f1119b271289ff09ba7dfbf1c2edc4c5b45e9b25","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-costume-white.png","hash":"3d4297a6a60085d06e645cf99c622355417678a1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/winter-costume.png","hash":"91c1a266c82938e9111d5657d161ab602b9e52a1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/witch-costume.png","hash":"bdf97c60ffe3593af7a02f4755d05c419beb15da","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/witch-costume-white.png","hash":"37f7f8cabf79e079fb4a612e2906654868d35602","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-brown.png","hash":"26dbe1a0d4e1f1d66ca23e50f05f3f4e9c0da01c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/ShizukuTalk/shizuku-48/model.moc","hash":"30695934566624c3997e2ef680b75cd4c6d2a5fa","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/cake-costume-cream.png","hash":"1c302029b9298d4a134de273905edb625c068590","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/dress-costume-brown.png","hash":"acfa9db3a3d6fd314b596cd820d28d56df421434","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/dress-costume.png","hash":"188dff7ed0d4c0bd16fb0a9a56b543e0d678e60b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-gray.png","hash":"5661ca8f0a14370c2485187acd84ba7e3fc85468","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sakura-costume.png","hash":"d2fcf17defa9940033c1dec92b675ce15a53da4e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/santa-costume-green.png","hash":"930ecf817be71a7d7765cf66555cd5437d2d5198","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-brown.png","hash":"a6695fb278add3be921aecb876843bb4aba5b887","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/halloween-costume.png","hash":"6f505d1442807d6b73a8bc8491c5af09a7548537","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/knight-costume.png","hash":"a5f494c19b02ba70679774a447df65426a414aeb","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-pink.png","hash":"dac14d5b425fef339fb54051dadd830e8897cec5","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/model.moc","hash":"99af0fcc22b7c7c39f177f008207b6bdd8b25563","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/01.png","hash":"4633b3e978ae1db7a36eba64c5b5ff6137e916e3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/01.png","hash":"8c52e4e4dd117f4b3f37e414c2306ba32eb3c918","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/01.png","hash":"8c52e4e4dd117f4b3f37e414c2306ba32eb3c918","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/01.png","hash":"029498848de8323b1df1768d20c998a8b4fe818f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/02.png","hash":"6e37abb40419a4a61f694f9626c4f84271e32152","modified":1589856335000},{"_id":"themes/Sakura/source/assets/ext/jquery-fullcalendar/fullcalendar.js","hash":"0ac2c87e5a8684b60bc5f353a6fb5db9b3722441","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/cake-costume-choco.png","hash":"9a3ca8e86fed9801bdf87745c54b7becfcc3ae14","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/halloween-costume.png","hash":"d403eebd9764218c1fe3772503953c8c0f360877","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/sakura-costume-navy.png","hash":"0e2037777ae5809862ac85d32466006ba34560d0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-costume.png","hash":"77f79821d879f5027c950de3adedf5b8fb4b2904","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Tia/textures/santa2016-costume.png","hash":"6e0d2a0e2117857d16fbf7d71e23f870a4c63692","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/01.png","hash":"39348df1aa1cc36ef8c1f5f6cabaec45386d9c4a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/02.png","hash":"07559d401d13838ac8bca96255003674b9e0228a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/01.png","hash":"853572eb865c6ce40dcdf3f71aee626e04b1a91e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/03.png","hash":"c015a2f68428fb97130e9c8666c2ef52486de30c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/01.png","hash":"5a39879a876aba6f9f71c3076bc4839ac14e7e1b","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/01.png","hash":"8c52e4e4dd117f4b3f37e414c2306ba32eb3c918","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/01.png","hash":"029498848de8323b1df1768d20c998a8b4fe818f","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/00.png","hash":"339192c1909176b121a2a4ba423b5f45adf3b486","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/model.moc","hash":"f59dd76d865fadb8466c70ff7fa7d390ffc19ec1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-black.png","hash":"4e257bcb6090300d4477af5acbe1e73b25f00a63","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/01.png","hash":"853572eb865c6ce40dcdf3f71aee626e04b1a91e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/02.png","hash":"bc754f8c7847d7fc36b528fe7ba58a81b0956a77","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/03.png","hash":"c015a2f68428fb97130e9c8666c2ef52486de30c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/01.png","hash":"78c91fe42bdf23c7703239e36c30aaf70880e84c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/model.moc","hash":"83fdc83db86eb55e4628a35ceb99e8bcbbfc8f05","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/02.png","hash":"bc754f8c7847d7fc36b528fe7ba58a81b0956a77","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/02.png","hash":"e4995b048effc544b0c57f7baeca6770ef9f9cbd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/00.png","hash":"339192c1909176b121a2a4ba423b5f45adf3b486","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/default-costume.png","hash":"badeb207fa62b28ae3b4cc8a3e9ad06d873f4808","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/school-costume-red.png","hash":"96f774bd5da40aece073e6bda70813c0c2aada90","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/00.png","hash":"726d1cd08ecbfd45c0947fd1604694b6c27a273c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/03.png","hash":"d82e9263e03c2c04b2ed59449efaebbd0e2f2ae0","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/01.png","hash":"4633b3e978ae1db7a36eba64c5b5ff6137e916e3","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/00.png","hash":"726d1cd08ecbfd45c0947fd1604694b6c27a273c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/00.png","hash":"726d1cd08ecbfd45c0947fd1604694b6c27a273c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/01.png","hash":"78c91fe42bdf23c7703239e36c30aaf70880e84c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/02.png","hash":"e38c69621f0cde67721c1f7477dd3442dc6e1c5e","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/00.png","hash":"339192c1909176b121a2a4ba423b5f45adf3b486","modified":1589856335000},{"_id":"themes/Sakura/source/img/other/starry_sky.png","hash":"795ce430749828520d717b933a3ce7d8ca0e63f5","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume.png","hash":"adda87d57e7e6c753f735d0140bb6d5eda71225a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/02.png","hash":"1ced944e2e7cf1c1fd9a9b8aca51a706ff460ad8","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/03.png","hash":"fc83cc83d7a4c3576bab34f636cdc9f83e39296c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-blue.png","hash":"8e20bee886093dd099a601cfc664c767e089493a","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/02.png","hash":"3b7e7cc6edfaa63f3b53ecd06997f60708bb18cf","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/02.png","hash":"0d6fb1eb2d94a1f1fc811c14bed42e4f02e90e9d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/03.png","hash":"43593e4b0b0cbe40f6099333d24f36da0948bc89","modified":1589856335000},{"_id":"themes/Sakura/source/img/banner/reading.jpg","hash":"8780e8998704cf68a7401e85153180879f1e941b","modified":1661272270000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/02.png","hash":"ac4a5fb27f4921821ddb7d02e52ef95b23211c0d","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/02.png","hash":"217ffa6562d145534eeefb9802e673cf8a22f2f6","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/00.png","hash":"4c7c011dc3509bad39bd5dea1cfa24d4f89977d2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/02.png","hash":"04031bec1abae23980992f8927fb529750e180b1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/00.png","hash":"4c7c011dc3509bad39bd5dea1cfa24d4f89977d2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/02.png","hash":"34fb9a595766e48c9d6ae9ca5469abccd2bb2298","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/02.png","hash":"d2fa9046f49e206c4c2d09065c1a46c307e930e1","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/03.png","hash":"b9897a1fff7d19fe77c2c6268075046c6af54d89","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/02.png","hash":"7b0207ddc047002e8ea91c6055f1deaceb7e07fa","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/02.png","hash":"36b800b6e58dc6b124a0fc7a7b2ab4d55450ec08","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/02.png","hash":"b943786aa97fcaaa7416e771daa345f1dcff5a7c","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/KantaiCollection/murakumo/textures.1024/00.png","hash":"3ddf1fd2c570cea511303120f852b29292a2b151","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/model.moc","hash":"138d7cc102ef372e8f9deab9d732e78a9dcd40b2","modified":1589856335000},{"_id":"themes/Sakura/source/live2d_api/model/HyperdimensionNeptunia/nepgearswim/model.moc","hash":"13051bf85c25251697f7f7fc0f9db94d52c2c931","modified":1589856335000},{"_id":"public/atom.xml","hash":"1285a35a0031d303311fc380d7651c236c15a5c9","modified":1661442730775},{"_id":"public/content.json","hash":"df810034cd1bbae2913dd57a7a53017dff437be0","modified":1661442822893},{"_id":"public/archive/index.html","hash":"7d817a16d20903a992c3de4546e518a233b7d469","modified":1661444188423},{"_id":"public/lab/index.html","hash":"8e26c716e9287c3ae2d32b77237b4129d735b352","modified":1661444188424},{"_id":"public/client/index.html","hash":"d69e01a1bbe04d838c9e344789ee5a76c4162e8b","modified":1661444188424},{"_id":"public/comment/index.html","hash":"b21ceadb1ae510220105975669a5e71c25221387","modified":1661444188423},{"_id":"public/bangumi/index.html","hash":"df71f2b3ba43f17061aa3adafb9f140898b7d07c","modified":1661444188424},{"_id":"public/about/index.html","hash":"eae2839b4879c715c6ee55f7b78186804bb8cdee","modified":1661444188424},{"_id":"public/links/index.html","hash":"5d5ab7e1194cf00a0470150a2a3fcb170fa8a6d2","modified":1661444188424},{"_id":"public/donate/index.html","hash":"77d6f9e95e3533a04e53ab4486e25d66ca62bc59","modified":1661444188424},{"_id":"public/tags/index.html","hash":"8e124b7510fbf148f49a2aa31875ca56bd2eba01","modified":1661444188424},{"_id":"public/rss/index.html","hash":"9420948702a67bec7e129015877fb902e5194a1f","modified":1661444188424},{"_id":"public/theme-sakura/index.html","hash":"58b036e4cdf1746926a00f7aafbb21d0fb7fef0a","modified":1661444188424},{"_id":"public/video/index.html","hash":"7c9865aaa270e729a3645726c6b093c9e5bb956b","modified":1661444188424},{"_id":"public/music/index.html","hash":"4a901dd691c1d7e05c7d55147e603cba13255c63","modified":1661444188424},{"_id":"public/archives/index.html","hash":"55d5a6785f7cc4fd30280cdc10f3c47cbaa9a450","modified":1661444188426},{"_id":"public/2022/08/24/jisuanjiyingjianzhishi/index.html","hash":"cfd6ff37268f55696d5cce52260053978eae588b","modified":1661444188426},{"_id":"public/archives/2022/index.html","hash":"7af60b9775ad6f74c953fc6c3e60ed38115c362d","modified":1661444188426},{"_id":"public/2022/08/22/hexothemesakura/index.html","hash":"9605ac87089e2cd2e98c084e4e4943ed135c5247","modified":1661444188426},{"_id":"public/archives/2022/08/index.html","hash":"8eb6aa28cbb9e26f990048351fd52038a9f0535e","modified":1661444188426},{"_id":"public/categories/技术/index.html","hash":"03e7e0e25857ef4280fc3eb61bbb0c8b33661cc7","modified":1661444188427},{"_id":"public/tags/web/index.html","hash":"f9d659f06f8e73db20dde52d7a4c19eb040de4c9","modified":1661444188426},{"_id":"public/tags/悦读/index.html","hash":"716b2b4dfed2a3a117dc9d0b7d10206bc71b3ea5","modified":1661444188426},{"_id":"public/index.html","hash":"e9019a568e5c4702495c54ddd1e277183e133137","modified":1661444188427},{"_id":"public/js/shehuizhuyi.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661440014373},{"_id":"public/js/hititle.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661440014373},{"_id":"public/live2d-widget/font-awesome-min.css.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661440014373},{"_id":"public/js/sakura.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661440014373},{"_id":"public/js/noSomeKey.js.bak","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661440014373},{"_id":"public/2022/08/25/wpbeifen/index.html","hash":"130dbe0c64bcc217db0034ae0f799ec29ebec93b","modified":1661444188424},{"_id":"public/2022/08/25/jiyiciofficewufalianwangjiejuefangfa/index.html","hash":"18b66337b7150f37331e3a9a3a07bd2f380e0763","modified":1661444188424},{"_id":"public/2022/08/25/shejimoshizhijiegouxingmoshi/index.html","hash":"557f9119947c77814f9f9f778d2586e133e9bd4d","modified":1661444188424},{"_id":"public/2022/08/25/paixusuanfa/index.html","hash":"4763d72faf54f0d06db7553e8bd8f3ea811fc14f","modified":1661444188424},{"_id":"public/2022/08/25/shejimoshizhichuangjianzhemoshi/index.html","hash":"a745fbd8ccac34c732f3eaa7664c109307664120","modified":1661444188425},{"_id":"public/2022/08/25/javajichuxiaojie/index.html","hash":"40b5a0abff4c20bd9eb1120864e109bd930aa316","modified":1661444188425},{"_id":"public/2022/08/25/javayichang02/index.html","hash":"8d5cbaf335b17e46c8862dd873c741da12a11b0c","modified":1661444188425},{"_id":"public/2022/08/25/javayichang01/index.html","hash":"5a211a157b8a4e037d5ec1067cb0a131c770ece5","modified":1661444188425},{"_id":"public/2022/08/25/javamianxiangduixiang04/index.html","hash":"ee246f292ed3e0aff946692485de760b3c317188","modified":1661444188425},{"_id":"public/2022/08/25/javamianxiangduixiang02/index.html","hash":"5cf5652d4226f1f308f9ea5ded5e743434691912","modified":1661444188425},{"_id":"public/2022/08/25/javamianxiangduixiang03/index.html","hash":"caae9f159271f008a20d08af0d47ae77d13ea0b3","modified":1661444188425},{"_id":"public/2022/08/25/javamianxiangduixiang01/index.html","hash":"3c18e769de20fd8e89050fd192f8a205ca2bba21","modified":1661444188425},{"_id":"public/2022/08/25/javashuzu03/index.html","hash":"1127c3b60932516bfebea0fa61bbe829ddcf1e48","modified":1661444188425},{"_id":"public/2022/08/25/javashuzu02/index.html","hash":"fdfcf22f3fdaee1be69c8d73401c88ce0704c902","modified":1661444188425},{"_id":"public/2022/08/25/javashuzu01/index.html","hash":"6aeff0383ceb4393d2146874218d7cd5f9752a03","modified":1661444188425},{"_id":"public/2022/08/25/javafangfa/index.html","hash":"e704f12020c9f71ea2cffee8d3248a5f9b35d77d","modified":1661444188425},{"_id":"public/2022/08/25/javaliuchengkongzhi03/index.html","hash":"49a85291528d6870f4ab06efc6f98de256d82503","modified":1661444188425},{"_id":"public/2022/08/25/javaliuchengkongzhi02/index.html","hash":"3a7b15f7f10074d943094dcba1cf3fbf52500a1f","modified":1661444188425},{"_id":"public/2022/08/25/javaliuchengkongzhi01/index.html","hash":"ed1f3cf1f16a508995e2fe377a21e64929941c14","modified":1661444188425},{"_id":"public/2022/08/25/javajichuyufa04/index.html","hash":"9052498732a06884b755d44e2a4e462f73c1324a","modified":1661444188425},{"_id":"public/2022/08/25/javajichuyufa03/index.html","hash":"3e0cc25b4b3e6e52b07b50c15da64d46df0df951","modified":1661444188425},{"_id":"public/2022/08/25/javajichuyufa02/index.html","hash":"e6b72d443b95373ceacf3194a91e2b863c04f973","modified":1661444188425},{"_id":"public/2022/08/25/javajichuyufa01/index.html","hash":"79985f128ca9a4745ba1964d64884d5c33bc67b1","modified":1661444188425},{"_id":"public/2022/08/25/javayunxingjizhijiideaanzhuangjiaocheng/index.html","hash":"00c7f4fefef8a0e1b16ae08e29c592b5ba00a53a","modified":1661444188425},{"_id":"public/2022/08/25/markdownjibenyufa/index.html","hash":"f867c9ec3c98a072e74fe93ed401b48f82ddbc50","modified":1661444188425},{"_id":"public/2022/08/25/javadetexingyuyoushi/index.html","hash":"8c5b29aca30e4990f22ac2762bc38add5622664f","modified":1661444188426},{"_id":"public/2022/08/25/changjiandosmingling/index.html","hash":"6372722ae3b1fc9092fbc60d88ba875165c719b8","modified":1661444188426},{"_id":"public/archives/page/2/index.html","hash":"55d5a6785f7cc4fd30280cdc10f3c47cbaa9a450","modified":1661444188426},{"_id":"public/archives/page/3/index.html","hash":"55d5a6785f7cc4fd30280cdc10f3c47cbaa9a450","modified":1661444188426},{"_id":"public/archives/2022/page/3/index.html","hash":"7af60b9775ad6f74c953fc6c3e60ed38115c362d","modified":1661444188426},{"_id":"public/archives/2022/08/page/2/index.html","hash":"8eb6aa28cbb9e26f990048351fd52038a9f0535e","modified":1661444188426},{"_id":"public/archives/2022/page/2/index.html","hash":"7af60b9775ad6f74c953fc6c3e60ed38115c362d","modified":1661444188426},{"_id":"public/archives/2022/08/page/3/index.html","hash":"8eb6aa28cbb9e26f990048351fd52038a9f0535e","modified":1661444188426},{"_id":"public/categories/随想/index.html","hash":"639044d8a5403a2d58fe1ceb91f13b3839019015","modified":1661444188427},{"_id":"public/categories/生活/index.html","hash":"f0701cc96019430b24bee637bc29a46fd4ef1e04","modified":1661444188427},{"_id":"public/categories/技术/page/2/index.html","hash":"f0409a09efd4394289b508c242e71ec602bca908","modified":1661444188427},{"_id":"public/tags/Java/index.html","hash":"cd39178a45e2fd078de8e79b92460c29e9958bb7","modified":1661444188426},{"_id":"public/categories/技术/page/3/index.html","hash":"b609096239309d6dab1cea047bc00a7b0d103deb","modified":1661444188427},{"_id":"public/tags/Java/page/2/index.html","hash":"cad48353a7d61725e2436cae837285419fd0f0b4","modified":1661444188426},{"_id":"public/tags/Java基础语法/index.html","hash":"c480ff6b262d1880305fe55e20ccce331efef33a","modified":1661444188426},{"_id":"public/tags/Java/page/3/index.html","hash":"dae64b34ecbb6251e34373b5be06c21fc0bf255f","modified":1661444188426},{"_id":"public/tags/Java异常/index.html","hash":"ea45973a81c2214a4e3b01cf3b491b9465cccde1","modified":1661444188426},{"_id":"public/tags/Java数组/index.html","hash":"ea61c45c162933d9c38b4ac0f04c2c51495bc25d","modified":1661444188426},{"_id":"public/tags/Java方法/index.html","hash":"db200bb359c92a17709a75d4ab94ffe505924f0f","modified":1661444188426},{"_id":"public/tags/Java流程控制/index.html","hash":"e97048c32df01380a9469c9adaa12638e454500a","modified":1661444188426},{"_id":"public/tags/Java面向对象/index.html","hash":"3e1fbb83b8bc8130321dc1fe3ef6bf7ba583bdd0","modified":1661444188426},{"_id":"public/tags/Java特性/index.html","hash":"6812ae47021ee8243711104cc405599003e4a10d","modified":1661444188426},{"_id":"public/tags/WP/index.html","hash":"a4829b7a20b96c85e3419a27403d444fc0841a4b","modified":1661444188426},{"_id":"public/tags/随笔/index.html","hash":"ebe11f2f79fb256545b3d60b6844e94dc4856ca5","modified":1661444188426},{"_id":"public/tags/Dos/index.html","hash":"cca4ca818f9c3615e6e53b66307df123b42b0eaa","modified":1661444188427},{"_id":"public/tags/硬件/index.html","hash":"9622e3eb84c1306865bd44a894994d04f1d52ef8","modified":1661444188427},{"_id":"public/tags/Markdown/index.html","hash":"ee17ea6bc421a42e8ad4207594c3f636a6113422","modified":1661444188427},{"_id":"public/tags/排序算法/index.html","hash":"96a2f26c8c33e35ff81486f199944bc6c1e913cf","modified":1661444188427},{"_id":"public/tags/设计模式/index.html","hash":"bd5661fdb1903879a286de73d29e73846f154760","modified":1661444188427},{"_id":"public/page/2/index.html","hash":"3229a8c340939fd9af73d249f325f750153d7197","modified":1661444188427},{"_id":"public/page/3/index.html","hash":"688cb681e08e6088f48aa1e96359ea795f5c41af","modified":1661444188427},{"_id":"public/images/favicon.ico","hash":"124582ab19fd5de72b6f96f1faaeef3fe5e6926e","modified":1661440014417},{"_id":"public/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1661440014417},{"_id":"public/js/autoload.js.bak","hash":"c0b6d345969d8a0aac8872be545bb98ecdffee57","modified":1661440014417},{"_id":"public/live2d_api/LICENSE","hash":"cf03f884b32c8e1145f6efe1bb87bab927ced6c3","modified":1661440014418},{"_id":"public/fonts/iconfont.eot","hash":"a6d4a6cbd2e7e0ece89973f4c848c7209b062120","modified":1661440014418},{"_id":"public/fonts/iconfont.ttf","hash":"5454ae941eeeda1fee8a1b9ef608dae39f58288e","modified":1661440014418},{"_id":"public/fonts/iconfont.woff","hash":"7222cdc09d819e340fd8cea8498d36270b0400b1","modified":1661440014418},{"_id":"public/fonts/iconfont.svg","hash":"f469a7fe346fc3665d70dde9e4eb81331f504b5f","modified":1661440014418},{"_id":"public/assets/sql/data.sql","hash":"2114a121cdb6a2f6383b2efa6987e6d1e2eb1a23","modified":1661440014418},{"_id":"public/assets/sql/structure.sql","hash":"ced362f05d98fd25ee00f92953d088414fb3cbfe","modified":1661440014418},{"_id":"public/assets/img/favicon.ico","hash":"66fcd5004f03d3236880b2753a235d2c9e79df3e","modified":1661440014418},{"_id":"public/assets/img/error.png","hash":"30b087e7433d01bb929726911e31f65e55652935","modified":1661440014418},{"_id":"public/assets/img/glyphicons-halflings-white.png","hash":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1661440014418},{"_id":"public/assets/img/success.png","hash":"f7fcd0fc6dc6afcd47aaa19d46309db1743a1858","modified":1661440014418},{"_id":"public/assets/img/logo.png","hash":"2eacb5002ac21d68330a4f09d11cd123429727b5","modified":1661440014418},{"_id":"public/assets/img/installation-banner.png","hash":"40613c2cdaa21d559a04fe6ea3a9e956966ffd52","modified":1661440014418},{"_id":"public/assets/img/glyphicons-halflings.png","hash":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1661440014418},{"_id":"public/assets/img/loading.gif","hash":"8711239a8c42b5c003d3a9e0ba9af2893205090b","modified":1661440014418},{"_id":"public/images/donate/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1661440014418},{"_id":"public/images/donate/BTCQR.png","hash":"1abc7fa494a5bb9765dee1004f544ad962d46c91","modified":1661440014418},{"_id":"public/images/donate/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1661440014418},{"_id":"public/images/donate/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1661440014418},{"_id":"public/images/donate/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1661440014418},{"_id":"public/images/donate/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1661440014418},{"_id":"public/img/custom/avatar.jpg","hash":"49701fd8e60873698b5b36a6e8fefa8c4be41090","modified":1661440014418},{"_id":"public/images/donate/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1661440014418},{"_id":"public/img/custom/wechat.jpg","hash":"a9e58eec32d682cb81d00465a12f4d1334bb808c","modified":1661440014418},{"_id":"public/img/custom/sakura.svg","hash":"670cf49f8da9f63905df37b163281a664be16a1c","modified":1661440014418},{"_id":"public/img/loader/orange.progress-bar-stripe-loader.svg","hash":"7ba807b2fcbb5743ac8cde544cffeaa891bdd85c","modified":1661440014418},{"_id":"public/img/loader/orange.ajax-spinner-preloader.svg","hash":"9c2744ccf3b58dc6f58d634ac3b00918bd1c23cb","modified":1661440014418},{"_id":"public/img/loader/orange.square-circle-preloader.svg","hash":"0bf61dbbc7117fc0a37446bd0c2d7d16ae5a249a","modified":1661440014418},{"_id":"public/img/other/add@32x32.png","hash":"38bf4417f4af235d1a10919625e67edd36c0f65c","modified":1661440014418},{"_id":"public/img/loader/trans.ajax-spinner-preloader.svg","hash":"4d201862e8fcd4188784d360ef7e5e5f5105c4b9","modified":1661440014418},{"_id":"public/img/other/dot.gif","hash":"0a1bc9b70ab142d7b85727dcd1d96f0c4a72391c","modified":1661440014418},{"_id":"public/img/other/grid.png","hash":"c2ef59db0838c5a17f74c0d25f9c508a6ab2a803","modified":1661440014418},{"_id":"public/img/other/disqus-preloader.svg","hash":"7af601df13c77d05cda5d766e19ee96ed530c045","modified":1661440014418},{"_id":"public/img/other/default_gavatar.png","hash":"ae2c13b74a0c84a110bbccd993577de47f21ed39","modified":1661440014418},{"_id":"public/img/other/default_avatar.jpg","hash":"97d151e678408e95a8ab328dc7bc20051d42d717","modified":1661440014418},{"_id":"public/img/other/image-404.png","hash":"f740b512d6e16d419ff3c8648d173b301efff104","modified":1661440014418},{"_id":"public/img/other/gravatar.jpg","hash":"ae65af750b06b3033ad792ab8c10215cfaa15759","modified":1661440014418},{"_id":"public/img/other/next-b.svg","hash":"4891e41767d667ff040dc05855445cf1b4b53102","modified":1661440014418},{"_id":"public/img/other/orange.progress-bar-stripe-loader.svg","hash":"7ba807b2fcbb5743ac8cde544cffeaa891bdd85c","modified":1661440014418},{"_id":"public/img/other/pause@32x32.png","hash":"6bdf87bf62bbf377fdac552cf8a944dafda36be0","modified":1661440014419},{"_id":"public/img/other/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1661440014419},{"_id":"public/img/other/play@32x32.png","hash":"f3e0c0de2a7527e349462ba22d12c7ce09aac848","modified":1661440014419},{"_id":"public/img/other/wave1.png","hash":"1a783993b75b10e54772b6af6afa5685505003df","modified":1661440014419},{"_id":"public/img/other/wordpress-rotating-ball-o.svg","hash":"d44de6be491d7f0878dd8eaf295b9f9a7e98d425","modified":1661440014419},{"_id":"public/img/other/wave2.png","hash":"b7c5e21269e225c0c9358dd7ada60747c0cdce58","modified":1661440014419},{"_id":"public/img/cursor/Alternative.cur","hash":"6457b8833a802dba9916ee5dc293997d75d2f44d","modified":1661440014419},{"_id":"public/img/cursor/Ocupado.cur","hash":"86e4cffd07a986d8a70fcd83844e7968f1bb9227","modified":1661440014419},{"_id":"public/img/cursor/Escritura a Mano.cur","hash":"10f53452eacbadf59135610e6b067d0398e7466e","modified":1661440014419},{"_id":"public/img/cursor/No_Disponible.cur","hash":"52685e4ee4ec0aa172d99c9f1fa002f9662f47d6","modified":1661440014419},{"_id":"public/img/cursor/Move.cur","hash":"d563bd273d45b98e7541dfe400e974577c7baa81","modified":1661440014419},{"_id":"public/img/cursor/diagonal resize 2.cur","hash":"940616f216302956c20ac54a3ea3b2c8586c9d93","modified":1661440014419},{"_id":"public/img/cursor/diagonal resize 1.cur","hash":"f3e2fbd7035674cbf238eff6a05538bbeb2896c5","modified":1661440014419},{"_id":"public/img/cursor/ayuda.cur","hash":"3b2f2cc7a36b8f958a7c3672a0407a59e187f314","modified":1661440014419},{"_id":"public/img/cursor/normal.cur","hash":"4e784fa1e9630f782a379667423c4886b02c5545","modified":1661440014419},{"_id":"public/img/cursor/link.ani","hash":"2aaabca9c8943a7ba78bd261bd7aa8fa0b12f856","modified":1661440014419},{"_id":"public/img/cursor/precision.cur","hash":"78485b5362949b1e3dc508a4a50c3a16c3e74cb1","modified":1661440014419},{"_id":"public/img/cursor/texto.cur","hash":"514f4d81a9d7149912d6f217e5392a0e2606de45","modified":1661440014419},{"_id":"public/img/cursor/work.cur","hash":"d98137bb1c2a8d844678ef660ff46fad2f66e982","modified":1661440014419},{"_id":"public/img/themebg/point.png","hash":"795be6980152e611f49075122ee97b7f168f92f5","modified":1661440014419},{"_id":"public/img/cursor/vertical.cur","hash":"e5aefd21f4e04904f4dab43acbaa8540d93b0183","modified":1661440014419},{"_id":"public/img/themebg/plaid.jpg","hash":"9307fb19464c9894e1100780dbfdbda403176d41","modified":1661440014419},{"_id":"public/img/themebg/star.png","hash":"6cc46563f21279ec10199a26577f892cf38c1425","modified":1661440014419},{"_id":"public/img/cursor/horizontal.cur","hash":"cc7cbff5868ed7f08af046a0617d467c73e557ea","modified":1661440014419},{"_id":"public/img/logo/Google.svg","hash":"b5634d26e7dfe7a3350472fe43da214a4bc9855d","modified":1661440014419},{"_id":"public/img/logo/JsDelivr_Logo.svg","hash":"498409074298bc8bc73bffe400e14e5d20a8ae85","modified":1661440014419},{"_id":"public/img/logo/cf-logo-v.svg","hash":"e2a036810e7ce8dda92e10130047556a83da606e","modified":1661440014419},{"_id":"public/img/logo/cf-logo-h.svg","hash":"ac7b688c12bc70a34555db36fba8b3e53ec6246d","modified":1661440014419},{"_id":"public/img/logo/logo_onwhite.png","hash":"ddbc341a5242e562eb8110231012e1aa4e736166","modified":1661440014419},{"_id":"public/img/logo/mashiro-logo.png","hash":"3a885c3a271969749fe7e17ad5df4d397060ada7","modified":1661440014419},{"_id":"public/img/logo/upyun.png","hash":"61c8033884609dbe71ba255ae43dc096d96af92d","modified":1661440014419},{"_id":"public/img/social/bilibili.png","hash":"0042bb266ab70e65c96e609c44ca159002005574","modified":1661440014419},{"_id":"public/img/social/github.png","hash":"e888d386110facbb6f1b89eb8f0286a62037dcf3","modified":1661440014419},{"_id":"public/img/social/douban.png","hash":"b0cd16394e3f6446324341b202419f930b2f598c","modified":1661440014419},{"_id":"public/img/social/csdn.png","hash":"2601c7946bf40fe3a4a505d4dc03d5e13e5c758e","modified":1661440014419},{"_id":"public/img/social/facebook.png","hash":"abdeff8969a97759086c66baa255818e8d733444","modified":1661440014419},{"_id":"public/img/social/googleplus.png","hash":"cdda992943ac7f40493f44afdef80bf6712391cf","modified":1661440014419},{"_id":"public/img/social/jianshu.png","hash":"4c7ffdc2aaac333e675a04eda7feec8e889e893e","modified":1661440014419},{"_id":"public/img/social/heart.png","hash":"9ec543f8e86b3f591032cc14b36de1cf7658a470","modified":1661440014419},{"_id":"public/img/social/qq.png","hash":"99196fef542df3f37fa1486d9f708e93964a7cfc","modified":1661440014419},{"_id":"public/img/social/qzone.png","hash":"9fe39f2892e3b912a7a485298d9a080c122bc714","modified":1661440014419},{"_id":"public/img/social/lofter.png","hash":"4de6f0546cc87aa8841e56f14a913695aa9a9615","modified":1661440014419},{"_id":"public/img/social/sina.png","hash":"1f93cb886fef7f088ed402f5943c0a156f77c60e","modified":1661440014419},{"_id":"public/img/social/stackoverflow.svg","hash":"f13ebeedfa9e1812d5c6f64e4f4c9330cd24a40a","modified":1661440014419},{"_id":"public/img/social/email.svg","hash":"739a83cd5ab70a31a46bfdf846adc9aa22411c80","modified":1661440014419},{"_id":"public/img/social/wangyiyun.png","hash":"e9952f7ba250339c96611dfa91776e13764573c5","modified":1661440014419},{"_id":"public/img/social/twitter.png","hash":"284de412c3833f43a58b15b519ed926e61c10d26","modified":1661440014419},{"_id":"public/img/social/zhihu.png","hash":"1d95bb3cd2c2602abd56903cd0854c68af4e403c","modified":1661440014419},{"_id":"public/img/social/youku.png","hash":"baa5c7a8172a2f27051fe37e5430acc3caaf86a9","modified":1661440014419},{"_id":"public/img/social/telegram.svg","hash":"ac6e0b4e0bd900a68acb7bd9ee8e384830ea9fd9","modified":1661440014419},{"_id":"public/img/social/wechat.png","hash":"18e6c34722207a1e1e660abb5f1c3637bafcd559","modified":1661440014419},{"_id":"public/live2d_api/add/index.php","hash":"ff01ac889cc7b9a3a2c719508f49cb342f299305","modified":1661440014419},{"_id":"public/live2d_api/get/index.php","hash":"6d2967c0b8cf8c8f9407030802c6420e8813eaa0","modified":1661440014419},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1661440014419},{"_id":"public/live2d_api/rand/index.php","hash":"089c17de653543822d7dc0db263cf22bb842aea7","modified":1661440014419},{"_id":"public/live2d_api/switch/index.php","hash":"f85704670e48f98235842767bd16d186f03fe6b1","modified":1661440014420},{"_id":"public/live2d_api/tools/name-to-lower.php","hash":"a2aa6d2244d1f00f2624631c69764bfa19f5fb15","modified":1661440014420},{"_id":"public/live2d_api/tools/modelList.php","hash":"3d22343ad1967d605a9affa2a7ae7c503f2cf8c2","modified":1661440014420},{"_id":"public/live2d_api/rand_textures/index.php","hash":"102a5b37048b2107de1845211a84ef2ae0307365","modified":1661440014420},{"_id":"public/live2d_api/tools/jsonCompatible.php","hash":"85ed8c88b1c1e91e4e99260aaaf78f6f05e3487c","modified":1661440014420},{"_id":"public/live2d_api/switch_textures/index.php","hash":"3af6511cb07d4ca44c8da228c95aa9d13071f722","modified":1661440014420},{"_id":"public/live2d_api/tools/modelTextures.php","hash":"7a5589c7eea43be577fd075d153e585313b5a766","modified":1661440014420},{"_id":"public/fonts/SAKURASO.old/sakuraso.svg","hash":"6eb5c281f77452342361ed3352f62e2dec0f3b5c","modified":1661440014420},{"_id":"public/fonts/SAKURASO.old/sakuraso-symbol.svg","hash":"dd2a3d764889d23575a33251ff64761fb4bbb317","modified":1661440014420},{"_id":"public/fonts/SAKURASO.old/sakuraso.woff","hash":"00856819a670a578f78ffa2cae66717e21b24b36","modified":1661440014420},{"_id":"public/fonts/SAKURASO.old/sakuraso.ttf","hash":"91025ed91b9a317ddc835cc88d660c193a6c0228","modified":1661440014420},{"_id":"public/fonts/sharejs/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1661440014420},{"_id":"public/fonts/sharejs/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1661440014420},{"_id":"public/fonts/SAKURASO.old/sakuraso.eot","hash":"509315fee1cbfcbfd9beec880032f75532df38af","modified":1661440014420},{"_id":"public/fonts/sharejs/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1661440014420},{"_id":"public/fonts/sharejs/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1661440014420},{"_id":"public/img/banner/writing.jpg","hash":"ee6b4d36c7bac7399747881a3faec0d4b22e152c","modified":1661440014420},{"_id":"public/img/custom/donate/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1661440014420},{"_id":"public/img/custom/donate/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1661440014420},{"_id":"public/img/custom/donate/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1661440014420},{"_id":"public/img/custom/donate/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1661440014420},{"_id":"public/img/custom/donate/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1661440014420},{"_id":"public/img/custom/donate/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1661440014420},{"_id":"public/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1661440014420},{"_id":"public/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1661440014420},{"_id":"public/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1661440014420},{"_id":"public/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_65_80e1ac_40x100.png","hash":"3d4448972556d478cb2551833e8e19480f39c72d","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_75_ffffff_40x100.png","hash":"752cf46507ff8daa6f2e39fa478b68e5ec541138","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_0_aaaaaa_40x100.png","hash":"cb4fd44734d4f0c4167c46eb99abe579bcb6cbb0","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_80_fcefa1_40x100.png","hash":"b4813423d4b294eb8495997c79fda888441087a9","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_75_80e1ac_40x100.png","hash":"6e89d54a1a437e1fd46821472eb9c33e00df5487","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_95_f42727_40x100.png","hash":"52d59ba2e9403da80ae0852f144a33277a225570","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-icons_222222_256x240.png","hash":"10af36aa842ea948ae4a7c11851b91049fa364d7","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-bg_flat_75_3DD481_40x100.png","hash":"0104a577dfd0d509eab2b8c9398760c41b076fef","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-icons_062126_256x240.png","hash":"5ffb302624f2206cf83799aa9ac23f21625dc967","modified":1661440014420},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures.cache","hash":"3b43baf188315db8c570f59a8d1c3de9ec855517","modified":1661440014420},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures.cache","hash":"bff1f7bcc41ef1d3a652615772a730945f2fc5be","modified":1661440014420},{"_id":"public/assets/ext/jquery-ui/images/ui-icons_ffffff_256x240.png","hash":"164b3ca6bf1a3fbbf174f79438f442ddd8366d47","modified":1661440014420},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/textures.cache","hash":"2be88ca4242c76e8253ac62474851065032d6833","modified":1661440014625},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.cache","hash":"2be88ca4242c76e8253ac62474851065032d6833","modified":1661440014631},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.cache","hash":"2be88ca4242c76e8253ac62474851065032d6833","modified":1661440014635},{"_id":"public/live2d_api/model/bilibili-live/22/textures.cache","hash":"6475122c0652b6b4186f21d360a31245a9a519ad","modified":1661440014636},{"_id":"public/assets/ext/bootstrap/css/bootstrap-theme.css.map","hash":"abc2e3a1163de52378c71bb92d007c22abb0a393","modified":1661440014636},{"_id":"public/live2d_api/model/bilibili-live/33/textures.cache","hash":"6475122c0652b6b4186f21d360a31245a9a519ad","modified":1661440014636},{"_id":"public/assets/ext/trumbowyg/ui/icons.svg","hash":"ec8236b6d389bac634578c3b6e88c00bd714c386","modified":1661440014636},{"_id":"public/assets/ext/trumbowyg/ui/sass/trumbowyg.scss","hash":"2a4c13c29c13e6b595c1ee68518aa038f72c4e8e","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath1.mtn","hash":"8b9830960269c57540f235550b662bd8bb2eb9e7","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath2.mtn","hash":"2f1d687ac155865af6176d77e0ec6f4a4d29071b","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath6.mtn","hash":"222e9801e2394950398c4904897b5ad89244f429","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath4.mtn","hash":"e046b214762c0cf59d41c5a794aa0f48ebbfadab","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath8.mtn","hash":"366b357fb26bcc39ed3f6d397f280d0e6381be0c","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath7.mtn","hash":"cbab9298b360f3548e2365813ec0ed95ab111135","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Fail.mtn","hash":"ee758e7fc4f7080de4576b05ad685834c995ac47","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Sleeping.mtn","hash":"14371217f96d56b7920c89e8336aa19d2dc1b457","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Sukebei1.mtn","hash":"7baa2802152d82bba7eb0edb31b0ddc054d85180","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Success.mtn","hash":"fb2c6350010c0841598d645e354fb8f301e21593","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere5.mtn","hash":"340ee5d25c44de3d899e5d42e93a140207e820e2","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere3.mtn","hash":"9f4f5ed6831fb262afbabc9536c87262fa10c471","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere6.mtn","hash":"1dbc118605f33ec4e0e82dee60499d69ef07a741","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch2.mtn","hash":"b6c6c3022aae612d4f0ce7cd59f99db1f6241a43","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/WakeUp.mtn","hash":"8778f42f1ce509ca2fc4a385db96a4976f44647e","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath4.mtn","hash":"c291bd06b3b072fe22a790d3412358ec003e7aba","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1661440014636},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath2.mtn","hash":"1c1b35419e237327e5d6f7187b7738d2b853fa92","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath6.mtn","hash":"4394ca06d4791c76e4fa0c913e3bf0b08883c5e9","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath9.mtn","hash":"e18ba38b62b417dcb3e2df7be15ccb9c487788d6","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath1.mtn","hash":"e9fe2ad68ba66ae2cbf8d2f4662bae9b3144b1cc","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath8.mtn","hash":"d2b8adfbcaf107f617cd9401cf7cbac266b921c7","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Breath7.mtn","hash":"1cfccb24f92a073e9f644caaa66d4f642695d873","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Fail.mtn","hash":"2282256817cf3df568dc99e0b26c78e02ed6aa69","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Sukebei1.mtn","hash":"c48e9d14f9e040f93d0dbd2996be2986d319da70","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Success.mtn","hash":"80bbe4a27282dfe30edf0944ddba314f8d1600ac","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Sleeping.mtn","hash":"7cd4c2a961eab44f9cac8cf49de96850c5dbd20d","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere3.mtn","hash":"e664a4d0dc4003bceb6c65e7df1ceecfb538da8c","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere6.mtn","hash":"118498c1bad58056ac926d6533d6af68ca03f0f5","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch2.mtn","hash":"2c07642b2feb01472ea5381d9256e003703b1c40","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/WakeUp.mtn","hash":"99508a5176a2d1864fa1088f46b36d39eb9cd76c","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1661440014637},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_01.mtn","hash":"7b3093e86a69f4dcdc82a6380260758db1929018","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_02.mtn","hash":"02acbfc05ee069982987d037fcef4ddeaf082aa4","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_02.mtn","hash":"2ed36aea45df4a33c76dfa4ced52953220b37660","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_01.mtn","hash":"88027b81a07ad420c3da9665f174da23f5feccce","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_m_01.mtn","hash":"dee4dd5c545fa515e94a100d130f64bced3f1806","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_idle_03.mtn","hash":"90e4d81c8b0eaeb96a420f775d6c823fcd7480b7","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_bust_02.mtn","hash":"33f578b6b3ae0844f8e8b12407177ca67459e88b","modified":1661440014637},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/motions/murakumo_tap_ear_01.mtn","hash":"af6e74c560000817cba400aca24c5afd348a5bca","modified":1661440014637},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/03.png","hash":"e1584cd81f119d8bad793da57c5f0c0209b42807","modified":1661440014637},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_01.mtn","hash":"30f70f09f5e151905748e62a67d23aef9f424164","modified":1661440014637},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_00.mtn","hash":"3af96a9c289982f2289c1d0e2aa665d6f0164e82","modified":1661440014637},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/general/mtn/idle_02.mtn","hash":"363694f3bcf9cf09d4c858cc039d1842624d6635","modified":1661440014637},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap1.mtn","hash":"2ecd17a69b01aa647ca58bb69a941bd642a65557","modified":1661440014637},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap2.mtn","hash":"9e1eeaab09d80d93507a891fbeb8ec67c09b3ce9","modified":1661440014637},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_00.mtn","hash":"179e312cec4ece7d717de9055f67efa1d353bee5","modified":1661440014637},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap3.mtn","hash":"ab0592735f66b56b05d9ce4e2825e0234d5d1b88","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_02.mtn","hash":"627f07699c3e3417a1ccc72660c59cdebd6abc98","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_04.mtn","hash":"a2c1fbb802312ce49795aa456a90d226cd20892e","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_01.mtn","hash":"dd5cf10ac3a2158278107ab4292ce924f25c493d","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/double_tap4.mtn","hash":"a24999945d9d01c7c87658c2e9549e24e785e61a","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_02.mtn","hash":"63cc69ab11f10268c9dc20dfc8fe1e2fb83c776d","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_05.mtn","hash":"47728a0436bdace18505aca987444d669aad08d6","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_04.mtn","hash":"04df6e735284b7bf0f3c4631bdcd6370a6996016","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idl_03.mtn","hash":"05ff45fe2e6e380972b15339da8cfb7b5e8f0298","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_01.mtn","hash":"1e4414b954a27e4889f11879d53d856869676bc7","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_05.mtn","hash":"044dc3a26ef61ded0d4db2e732c0c018123795f3","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_03.mtn","hash":"a0fa275d0c33958e9514950a8bad7df5ea4eab7a","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_06.mtn","hash":"65971b3ceb04852c0073f7d2e0365c0a359c577b","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_07.mtn","hash":"90627de817458b3474e3c090f0f12d581dd1ef2c","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_08.mtn","hash":"4fa8eadd376b4dfb346b56bb87d245635c1107f0","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_09.mtn","hash":"c9efc956caae2b5d8756f561dd33d9c944a79f06","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A.mtn","hash":"b415f31b390e7587fad434d5d89a55b8e4384f9d","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B2.mtn","hash":"13ddf63ddc0dfa5599cb8ddc2a00a69abd348706","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_A2.mtn","hash":"030c90e6fb391580b37afdbf62242b8958656db3","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura1.mtn","hash":"cab13879d896913df8ae346fe64ea7cfd90b2d26","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C.mtn","hash":"8b9bedfa4e72ba5e79fba1545cb46ca0902e757d","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_B.mtn","hash":"daa77c3caae3db8c042175c59710443e91054181","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2.mtn","hash":"3a372b6a33e1d1e099f1fa9e04bd8cf7f98ae543","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/idle_C2_copy.mtn","hash":"68566f8e0f1fd24a76525802054179dac7833585","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura2.mtn","hash":"7cd3d5cbe904941874600f38a0a38096e779f704","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/kurakura3.mtn","hash":"489d1ab2d4115220b8cd3f5a0d00b27d91a6882b","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch2.mtn","hash":"ad44887390b0724042c82f29d8e7994afb08f569","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch1.mtn","hash":"4efd57e3a20c4a64fde0e35ff27dab6179f80e17","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_01.mtn","hash":"a7453cf23b7f55f4f543ccc610046e460266f421","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch3.mtn","hash":"95f596f1c28062d810ce663c26e621aa45d9c157","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_03.mtn","hash":"a13967c60504bea9f0f256ed91704f7c70f986c5","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/touch4.mtn","hash":"7c82bedd5485b962e5f0b5013cc5a32ef2a03924","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_02.mtn","hash":"b1d406bc7df877808ba9f2fb3740f2d3af58f5ba","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_04.mtn","hash":"f91fa5d0997bee64f788aadbfb2780fdefcbd7e3","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/motions/wait_05.mtn","hash":"4a092507d21a6973aa73d472af489389190e4259","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap1.mtn","hash":"2ecd17a69b01aa647ca58bb69a941bd642a65557","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap4.mtn","hash":"a24999945d9d01c7c87658c2e9549e24e785e61a","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap2.mtn","hash":"9e1eeaab09d80d93507a891fbeb8ec67c09b3ce9","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/double_tap3.mtn","hash":"ab0592735f66b56b05d9ce4e2825e0234d5d1b88","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_00.mtn","hash":"179e312cec4ece7d717de9055f67efa1d353bee5","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_01.mtn","hash":"dd5cf10ac3a2158278107ab4292ce924f25c493d","modified":1661440014638},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_02.mtn","hash":"627f07699c3e3417a1ccc72660c59cdebd6abc98","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_05.mtn","hash":"47728a0436bdace18505aca987444d669aad08d6","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_02.mtn","hash":"63cc69ab11f10268c9dc20dfc8fe1e2fb83c776d","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_03.mtn","hash":"05ff45fe2e6e380972b15339da8cfb7b5e8f0298","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_01.mtn","hash":"1e4414b954a27e4889f11879d53d856869676bc7","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idl_04.mtn","hash":"a2c1fbb802312ce49795aa456a90d226cd20892e","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_04.mtn","hash":"04df6e735284b7bf0f3c4631bdcd6370a6996016","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_08.mtn","hash":"4fa8eadd376b4dfb346b56bb87d245635c1107f0","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_03.mtn","hash":"a0fa275d0c33958e9514950a8bad7df5ea4eab7a","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_07.mtn","hash":"90627de817458b3474e3c090f0f12d581dd1ef2c","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_05.mtn","hash":"044dc3a26ef61ded0d4db2e732c0c018123795f3","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_06.mtn","hash":"65971b3ceb04852c0073f7d2e0365c0a359c577b","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A2.mtn","hash":"030c90e6fb391580b37afdbf62242b8958656db3","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_09.mtn","hash":"c9efc956caae2b5d8756f561dd33d9c944a79f06","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B.mtn","hash":"daa77c3caae3db8c042175c59710443e91054181","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_B2.mtn","hash":"13ddf63ddc0dfa5599cb8ddc2a00a69abd348706","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura1.mtn","hash":"cab13879d896913df8ae346fe64ea7cfd90b2d26","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_A.mtn","hash":"b415f31b390e7587fad434d5d89a55b8e4384f9d","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C.mtn","hash":"8b9bedfa4e72ba5e79fba1545cb46ca0902e757d","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2_copy.mtn","hash":"68566f8e0f1fd24a76525802054179dac7833585","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura2.mtn","hash":"7cd3d5cbe904941874600f38a0a38096e779f704","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch1.mtn","hash":"4efd57e3a20c4a64fde0e35ff27dab6179f80e17","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/idle_C2.mtn","hash":"3a372b6a33e1d1e099f1fa9e04bd8cf7f98ae543","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/kurakura3.mtn","hash":"489d1ab2d4115220b8cd3f5a0d00b27d91a6882b","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch2.mtn","hash":"ad44887390b0724042c82f29d8e7994afb08f569","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_01.mtn","hash":"a7453cf23b7f55f4f543ccc610046e460266f421","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch3.mtn","hash":"95f596f1c28062d810ce663c26e621aa45d9c157","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_03.mtn","hash":"a13967c60504bea9f0f256ed91704f7c70f986c5","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_04.mtn","hash":"f91fa5d0997bee64f788aadbfb2780fdefcbd7e3","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_02.mtn","hash":"b1d406bc7df877808ba9f2fb3740f2d3af58f5ba","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/touch4.mtn","hash":"7c82bedd5485b962e5f0b5013cc5a32ef2a03924","modified":1661440014639},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/motions/wait_05.mtn","hash":"4a092507d21a6973aa73d472af489389190e4259","modified":1661440014639},{"_id":"public/live2d_api/model/bilibili-live/22/motions/idle-01.mtn","hash":"7e8d1a1260e9982c425a8e7ff70ceadcd997ae35","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/motions/touch.mtn","hash":"c06f43b7a0d6bf8e986c8f7222f6c24b1aa77333","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/motions/idle-03.mtn","hash":"21af6f3a397221ec170a65a49e7733cc7f0d3153","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/motions/thanking.mtn","hash":"93f2e05d2d5e57af2fa508f8f2a7744ca1f898d7","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/motions/idle-02.mtn","hash":"04e5e3ad7f398c113e3e859b5168637e0105ab4b","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_00/closet-default-v2.png","hash":"7127120e2d6e177036b62457cefe74dc8efac304","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/default-upper.png","hash":"578b64a63007a4abc99e026d5ac3af8af89e9306","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/summer2017-high-upper.png","hash":"8dad5b4a9e34a9d9504020f35eb03e6b0639ace9","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/tomo-high-upper.png","hash":"217995721f1e351b2fdd1297870b621f94781669","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/cba-normal-upper.png","hash":"28da557b007245731ddaac5b0a02340f205aee3a","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/summer2017-low-upper.png","hash":"8b4e1990ef146767973e508d65721a3de9ad2d50","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/newyear-upper.png","hash":"fea272e1cf3d803297cf91a675214ea892a34f51","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/tomo-low-upper.png","hash":"bb31bd108c6220c21b9b3cb304e57d5a11d74e6c","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/valley2017-upper.png","hash":"4a3896496df84149f7ba3206bbc671ea1c8d87a8","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/xmas-upper.png","hash":"3ff7a74be98e94f49496870c07e483423887ad1f","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/vdays-upper.png","hash":"d0dea7892c2aa5dcb5509f60b4bc4e17b5fe29c3","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/cba-normal-lower.png","hash":"4aa0c1bd6ff724821516c6a905ffaae197e4c959","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/cba-super-lower.png","hash":"d09d5e8ed6d2cfe646986582332d863b2657f329","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/summer2017-high-lower.png","hash":"bb77c5b3466c205c9ac48f0df9e7c92bbe8846ad","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/summer2017-low-lower.png","hash":"7ab04ed025398e4a4d9eed5797ba0f8a503930d7","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/newyear-lower.png","hash":"602c43b47370233d52af90437aac5c92519eab49","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/tomo-high-lower.png","hash":"2be5edc7ca483af3d81b8d53309c5e78bd92e412","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/default-lower.png","hash":"1c7c9e0ec0e280b87d2c4fb881e9ba065e4fec7f","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/tomo-low-lower.png","hash":"07fb8e73f03695d760576b6fe916c4a111b3495a","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/valley2017-lower.png","hash":"c6ec814d7034b1007c06de5a51dde42a74f3fd95","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/vdays-lower.png","hash":"f0f370e00105350c0212764a896fc2dabea33625","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/xmas-lower.png","hash":"b8c5e2e48d749230ef65eb2cd5c4987bdaca05b3","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/33/motions/idle-01.mtn","hash":"0c1767232d70bc792f2db7fc0839f10bcbf2e8b6","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/33/motions/idle-02.mtn","hash":"a83a1bd3a3a49734bc08a11ada7eb28a1f3ee9b1","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/33/motions/touch.mtn","hash":"3d7457a92e363b8e93261927d59f6d3e548fb2b0","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/33/motions/idle-03.mtn","hash":"914ea5b72e82b4d9c5b0fd628e2c956481cc2ba8","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/33/motions/thanking.mtn","hash":"b448e4bfc08193ecddcf728dda74aca443b6d963","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/33/texture_00/closet-default-v2.png","hash":"549d497ec8f8dddbf341ecb0fb729b3f8fd30c32","modified":1661440014640},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/default-hat.png","hash":"8beaf22f366b340910f38416912737a2b8ff48a1","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/cba-normal-lower.png","hash":"69a1b2f1acdfc6b19537f64a410dbd738c63887b","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/cba-super-lower.png","hash":"5d69d7185064528342ded1b03370cfc8cf503dcb","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/newyear-lower.png","hash":"9ff93b9d8d9e3a5d486cda80d39825869ff16ae7","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/summer2017-high-lower.png","hash":"6b722236a76fe83b59edc4180e550e950101fb14","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/default-lower.png","hash":"313d126510fd23f0bc03f020ae4fb2b8e4c477ec","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/summer2017-low-lower.png","hash":"1c31e2b5f2964fe29ffedf8b381c44bc2e54a212","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/spring-2018-lower.png","hash":"af7097d5cbd192d764d21f89185c09e8bc4a11e6","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/tomo-high-lower.png","hash":"70025b87037c7732d744d8cf875dc87ca4aa72be","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/valley2017-lower.png","hash":"cca01c7fed4df3500b20d860f7e5025a9f6faba3","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/xmas-lower.png","hash":"1220b6f7cd1c0a11dea91cf970aae819abe1cac7","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/tomo-low-lower.png","hash":"8f74fb9c0e398f01f2a9a68a50023ef95e4bc023","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/vdays-lower.png","hash":"1e8850ead5a419cde77157c52b9ff84b8cbd0cf4","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/cba-super-upper.png","hash":"9df0fe84852604119a4a934cda741647406fda93","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/cba-normal-upper.png","hash":"6325725e211494def22490fbc7571a04ebbe439e","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/summer2017-high-upper.png","hash":"aeb9933b1b12b2942baaee075be9841fe77f5255","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/default-upper.png","hash":"f8a02f5c260072748d851e5518e3be82efa98707","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/valley2017-upper.png","hash":"a9e670fb10e05812ac11e1d87cda3773cfb34107","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/summer2017-low-upper.png","hash":"4e466aec2eb03d0076f78b8ccb7237f335071130","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/vdays-upper.png","hash":"a3c384c7c1e10edb6584b03a39661b6bd74e323b","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/tomo-high-upper.png","hash":"7316f36fe7e6c6439dd1b9bffe95d285bfe9e47b","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/tomo-low-upper.png","hash":"8a3758cff8f29c664a4f486819061539b257cf4a","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/newyear-upper.png","hash":"6312c717851e5d6bd56973957d988dc3df62da91","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/xmas-upper.png","hash":"4ebdeaf676c834bc16798dc91748860845559ccd","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/valley2017-hat.png","hash":"8ec5f7ef2f575bd27ac09fdfcfe7bfab09768442","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/default-hat.png","hash":"2b54cda2ad772d0f707bd4bf803262c527a84493","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/tomo-low-hat.png","hash":"43f5128298f5ec2aa390b07415c64f82484d95f4","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/xmas-headwear.png","hash":"c4fdc2d91f7bd2f874010c56c1ab848474e7f3bf","modified":1661440014641},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/tomo-high-hat.png","hash":"63eaaa7f3101555c81bb27604e08d9983c500fce","modified":1661440014642},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/xmas-hat.png","hash":"61094ffb9b8f0f7e287ff1a35e88b557cb4b4941","modified":1661440014642},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/vdays-hat.png","hash":"360813d339d6e38cf10523089941a2fc4b760b60","modified":1661440014642},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1661440014642},{"_id":"public/live2d_api/model/Potion-Maker/Pio/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1661440014642},{"_id":"public/live2d_api/model/Potion-Maker/Tia/motions/Touch Dere5.mtn","hash":"2195fa2b5aabe06aa110730477e307cee88333ba","modified":1661440014642},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/cba-super-upper.png","hash":"937a2cc9bdf76f0aa309cd0eccf8e9814ab4e753","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/013.ogg","hash":"545810ca5f58d61eebc858d457bc1d5e695a6b3f","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/001.ogg","hash":"cb92004eaf912ce20a5344c23e935e712b275134","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/101.ogg","hash":"06a8dedebdcf6fae23077e88b432ac02aa023baa","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_00.mtn","hash":"af6d2b3827ad26523f78e6b9f536f5a0dd1c56f3","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_02.mtn","hash":"22c3b9ef1a511bebf4497d0542895a6198ca8ecc","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_slide_head_2.mtn","hash":"ef91a29264b228e58282793e29b27e29cd9c53fc","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/idle_01.mtn","hash":"dc484375999071a7456a05d29f3497e7553f7afc","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_boobs_1.mtn","hash":"fb0ccee1946bff40c057ebca50311f42153b2e1a","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_1.mtn","hash":"6368824f2179fd9b051f4aaab18a7d8c00cb64f3","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_head_1.mtn","hash":"d4f92811318f14aac2cbfb88bbcce3685c44bf53","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/nep_touch_belly_2.mtn","hash":"0184afa7953e625d05698eedcf9eef42a3b1f878","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/refuse.mtn","hash":"103da9a7ecfce82d1dd8891ec553b1e20c758e9c","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/smile.mtn","hash":"fb2ab884e3657c2b50a58db4167f01710c87e717","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/shake.mtn","hash":"709f0d93ef9f65bdb6e89a84548d1707bcf07637","modified":1661440014642},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/mtn/tilt_head.mtn","hash":"22a3319936060c915656b1c440a3d59d02131aad","modified":1661440014642},{"_id":"public/assets/ext/trumbowyg/plugins/highlight/ui/sass/trumbowyg.highlight.scss","hash":"ddd2d55b3572280af0cfdf5c25ab0beb2e41cf6c","modified":1661440014642},{"_id":"public/assets/ext/trumbowyg/plugins/mathml/ui/sass/trumbowyg.mathml.scss","hash":"a305efe855a7e790a28015b47dca1b567cff218a","modified":1661440014642},{"_id":"public/assets/ext/trumbowyg/plugins/emoji/ui/sass/trumbowyg.emoji.scss","hash":"361fa44d65c9d03d22f4e7717593e6d6a0498fe7","modified":1661440014642},{"_id":"public/assets/ext/trumbowyg/plugins/colors/ui/sass/trumbowyg.colors.scss","hash":"77c66873048d3203ce9b07c105da36d73ffa01c0","modified":1661440014642},{"_id":"public/assets/ext/trumbowyg/plugins/mention/ui/sass/trumbowyg.mention.scss","hash":"6cfd78c080050dda2cd3701355c13996873aadea","modified":1661440014642},{"_id":"public/assets/ext/trumbowyg/plugins/table/ui/sass/trumbowyg.table.scss","hash":"9cf431eef42c13527d645e5974899874e60064e4","modified":1661440014642},{"_id":"public/js/botui.js.bak","hash":"45e949930e21f94ae67346b356e69da5b3758c51","modified":1661440014642},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1661440014642},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1661440014643},{"_id":"public/assets/img/unavailable.jpg","hash":"a82c737fc2f187656a528f22baec4bfe7a5ab1ec","modified":1661440014643},{"_id":"public/images/cover/(3).jpg.webp","hash":"96ff977ce087a71a020e4a75a7e3516ade3fee19","modified":1661440014643},{"_id":"public/images/cover/(8).jpg.webp","hash":"4ffcfb8c695294e8d84cee0e7b5be0c024e5dfa7","modified":1661440014643},{"_id":"public/images/cover/(7).jpg.webp","hash":"280a5c05256dca4fbea5af1bae208c19efce73a4","modified":1661440014643},{"_id":"public/images/donate/WeChanSQ.jpg","hash":"27a05e1012dde94e06d711d3c868ef8e1bf50af0","modified":1661440014643},{"_id":"public/img/other/comment-bg.png","hash":"b33ee4f1de2776e6aeb362245b130181708d7f60","modified":1661440014643},{"_id":"public/img/banner/about.jpg","hash":"2ae7e74361e2c2b48f58d4505e52d57d0b66603f","modified":1661440014643},{"_id":"public/img/cover/(0).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661440014643},{"_id":"public/img/cover/(8).jpg.webp","hash":"4ffcfb8c695294e8d84cee0e7b5be0c024e5dfa7","modified":1661440014643},{"_id":"public/img/cover/(1).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661440014643},{"_id":"public/img/cover/(7).jpg.webp","hash":"280a5c05256dca4fbea5af1bae208c19efce73a4","modified":1661440014643},{"_id":"public/img/cover/(3).jpg.webp","hash":"96ff977ce087a71a020e4a75a7e3516ade3fee19","modified":1661440014643},{"_id":"public/images/cover/(0).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661440014643},{"_id":"public/images/cover/(1).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661440014643},{"_id":"public/img/custom/cover/(3).jpg.webp","hash":"96ff977ce087a71a020e4a75a7e3516ade3fee19","modified":1661440014643},{"_id":"public/img/custom/cover/(8).jpg.webp","hash":"4ffcfb8c695294e8d84cee0e7b5be0c024e5dfa7","modified":1661440014643},{"_id":"public/img/custom/cover/(1).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661440014644},{"_id":"public/img/custom/cover/(7).jpg.webp","hash":"280a5c05256dca4fbea5af1bae208c19efce73a4","modified":1661440014644},{"_id":"public/live2d-widget/autoload.js","hash":"388adecc34a53c50061252241f58e2a77707eb9e","modified":1661440014680},{"_id":"public/live2d-widget/waifu-tips.json","hash":"a3f9d4d832cd0948cd21385e7e8c62db377ba7d4","modified":1661440014681},{"_id":"public/live2d-widget/waifu.css","hash":"419e5c1eb38eb7a477a32cc62b48d701fcee930d","modified":1661440014686},{"_id":"public/js/autoload.js","hash":"7febdab69db39fd4a183390487adc72e324bb5e3","modified":1661440014686},{"_id":"public/live2d-widget/waifu-tips.js","hash":"61efcb42681f7b777a89b6d3d1b563472c7226a3","modified":1661440014686},{"_id":"public/js/InsightSearch.js","hash":"3acae0bd3b55b16b93006466942de81b2a27b011","modified":1661440014686},{"_id":"public/js/hititle.js","hash":"699cfa6d1031defdba5fe77c29dd2d67aa1b076d","modified":1661440014686},{"_id":"public/js/noSomeKey.js","hash":"5bb70a36bb26126c2821b65f6cba73ffcf772ab9","modified":1661440014686},{"_id":"public/js/shehuizhuyi.js","hash":"ad4a1b7dff35fbd9effe2b6e7348298477401532","modified":1661440014686},{"_id":"public/js/zoom.min.js","hash":"0b377c432d448cfc09c9e451128a48810a250926","modified":1661440014686},{"_id":"public/live2d_api/model_list.json","hash":"f9bf67a86f235e518d79f5c87886dab0a19861a0","modified":1661440014686},{"_id":"public/css/archive.css","hash":"fb5b21bae281772ea4e1df250d1d118edd8fe3ec","modified":1661440014686},{"_id":"public/css/donate.css","hash":"fb5b21bae281772ea4e1df250d1d118edd8fe3ec","modified":1661440014686},{"_id":"public/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1661440014686},{"_id":"public/css/bangumi.css","hash":"4d30d793a8813b14c55cee12d4a5adbb1cc7c535","modified":1661440014686},{"_id":"public/css/sharejs.css","hash":"62b3ea2384cdf4f9dbce34e17f660856d51a605c","modified":1661440014686},{"_id":"public/css/insight.css","hash":"e3edf9f215f8b4bf6131a781edf2634df039796c","modified":1661440014686},{"_id":"public/css/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1661440014686},{"_id":"public/css/zoom.css","hash":"e6feedd50deaf58cd27b33ed99f04f479c9fba31","modified":1661440014686},{"_id":"public/assets/css/general.css","hash":"7dc5ea30bb6bd2c2235162a0892211a0173532ae","modified":1661440014686},{"_id":"public/assets/css/frontend.css","hash":"a11b8caa095e09274cddf93834e5c658b41a22b0","modified":1661440014686},{"_id":"public/assets/css/backend.css","hash":"fe1f831b169b24e3d09fffadeb629c0bc091e4ec","modified":1661440014686},{"_id":"public/assets/js/backend.js","hash":"c00ffa25033b93abafebfa8646cbf0c81cac1f81","modified":1661440014686},{"_id":"public/assets/js/backend_calendar_api.js","hash":"641e71f78b766ba3583dfec63fc8e44243875b50","modified":1661440014686},{"_id":"public/assets/js/backend_calendar.js","hash":"c192334590b41ccb0a508397cf2d4cf7f34c00e4","modified":1661440014686},{"_id":"public/assets/js/backend_calendar_google_sync.js","hash":"8945a5031cd35f0a939ad14a21cd81b799384457","modified":1661440014686},{"_id":"public/assets/js/backend_calendar_unavailabilities_modal.js","hash":"fd94fa127095fb157d74690a56cff17a0b1fdb10","modified":1661440014686},{"_id":"public/assets/js/backend_categories_helper.js","hash":"d16bd4b40abd875c329d56b0a739a0a0018bd571","modified":1661440014686},{"_id":"public/assets/js/backend_customers.js","hash":"6c006610450bff0927baf244b013b9ffc9a5ab54","modified":1661440014686},{"_id":"public/assets/js/backend_services.js","hash":"11762886bfc830227745206148d904330eba5c22","modified":1661440014686},{"_id":"public/assets/js/backend_services_helper.js","hash":"bd1ce63906e02c9d8f200730fc71a3d5be72ca76","modified":1661440014687},{"_id":"public/assets/js/backend_customers_helper.js","hash":"f0a8b0de3de3c44634c19c44dcceeeb5e1d9eb5a","modified":1661440014687},{"_id":"public/assets/js/backend_users.js","hash":"75ab9af69752515e3da54bb3600d4327b24b159b","modified":1661440014687},{"_id":"public/assets/js/backend_settings_user.js","hash":"aac563d6a739a198e859d3cfaebeb56125a8377a","modified":1661440014687},{"_id":"public/assets/js/backend_settings_system.js","hash":"daa09e3ff13a04a06aaf5c02753593a275e83396","modified":1661440014687},{"_id":"public/assets/js/backend_users_admins.js","hash":"41dd355d32cd0bd0ebd7c0866d65d4608e297f95","modified":1661440014687},{"_id":"public/assets/js/backend_settings.js","hash":"e9008feefee7ce21c488a244b18f3dd802b61003","modified":1661440014687},{"_id":"public/assets/js/frontend_book_api.js","hash":"28480aebb4d1ba23693d99125a72e4da024af680","modified":1661440014687},{"_id":"public/assets/js/frontend_book_success.js","hash":"887202241f106fd5d2fca4af57f98faf996ac9ad","modified":1661440014687},{"_id":"public/assets/js/general_functions.js","hash":"cc38d14545a804baaa8aff4a3ba61a52898c7e86","modified":1661440014687},{"_id":"public/assets/js/installation.js","hash":"a289790c8fd6a523a3bdf0b9c16d6f388b902c0d","modified":1661440014687},{"_id":"public/fonts/SAKURASO.old/icon.css","hash":"cca92568d623792d63db3706a705d3c77412d025","modified":1661440014687},{"_id":"public/assets/ext/cookieconsent/cookieconsent.min.css","hash":"50ad5e836bd6e905a3cdb61fa7a227e420c64556","modified":1661440014687},{"_id":"public/assets/ext/gcal/gcal.js","hash":"1653e962900454e15b9d21dcd309d7472c15f199","modified":1661440014687},{"_id":"public/assets/ext/jquery-datatables/jquery.datatables.css","hash":"a42d95cd06d68859843197ddd03a9fc597f96070","modified":1661440014687},{"_id":"public/assets/ext/jquery-fullcalendar/fullcalendar.print.css","hash":"ef1d759aedc7e8e070a82340ebea93fd196b8f34","modified":1661440014687},{"_id":"public/assets/ext/jquery-mousewheel/jquery.mousewheel.js","hash":"5d099455b4ee289a8efabfad734ab90a3b93a4b8","modified":1661440014687},{"_id":"public/assets/ext/jquery-jeditable/jquery.jeditable.min.js","hash":"53e8a6136fa9af4fe8b50e8068899da860657e1b","modified":1661440014687},{"_id":"public/assets/ext/jquery-fullcalendar/gcal.js","hash":"3a8c4ba120a9cf4978191beef51f9dfd15bb6c85","modified":1661440014687},{"_id":"public/assets/ext/jquery-qtip/jquery.qtip.min.css","hash":"64f8a4430bbd8425b61adba15837d839a7fe562c","modified":1661440014687},{"_id":"public/assets/ext/jquery-sticky-table-headers/jquery.stickytableheaders.min.js","hash":"c164bb5893b5917a2a557f5288e6c3172c217569","modified":1661440014687},{"_id":"public/assets/ext/jquery-ui/jquery-ui.theme.min.css","hash":"a5fadf3cc8eacf11fca943fe5d88cc2345db3083","modified":1661440014687},{"_id":"public/assets/ext/jquery-ui/jquery-ui.structure.min.css","hash":"4340157409c937281d2b1c97b7f310c5da17cfb9","modified":1661440014687},{"_id":"public/assets/ext/bootstrap/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/ar.min.js","hash":"54ea4344a830047592751eaedaabffb8dfee9ada","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/bg.min.js","hash":"1d7ab9edfd5883248174f13b14eac93d6cbdac36","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/da.min.js","hash":"b28fe02a941d8665959c5617a0f51eb8ae02e101","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/by.min.js","hash":"4134bbedded15ef619b2066acbafe7941f6a6bf9","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/ca.min.js","hash":"91decf0a3a3f2ee89cee1b8f5cf23fba8f20ace1","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/cs.min.js","hash":"564f7fdadc40d6b9b651962e0030ace94cdcbf7b","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/es_ar.min.js","hash":"ffe6140b704fa2ea45e34bc5cca2bb97895fb3c9","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/de.min.js","hash":"4a29da2bbc5faa6bf86b0e881ec36fc196b9c9a9","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/fa.min.js","hash":"bfc84dd7838158e2b48f58d4fab798ccc956800f","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/el.min.js","hash":"d62a9cd36246de2783b43cc3d44d8a663f5118c0","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/fi.min.js","hash":"bd6243774ee26ed425872ac1dd421736483a94ec","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/es.min.js","hash":"798424a20bb6c74e0234e129ebac62d27f4879d2","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/fr.min.js","hash":"839cd9219fc2723f49e48d9a5c47032d5bd2e87f","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/he.min.js","hash":"a326d64e07f8eae9a4a1b69f0250918b9798c2b1","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/hr.min.js","hash":"554629564597a9d0081d10613985f71deaf35ea3","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/ja.min.js","hash":"a2830f4dc7568c7c26a015b66da33407ed311ab4","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/hu.min.js","hash":"a576f98da65395d5e2b8709577592d47a283b169","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/it.min.js","hash":"a3b9a023f7a0fdb240d137e9d314b632dd422d69","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/ko.min.js","hash":"ffac9d1e0921ec30b6652d3e8064e54cfca64503","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/mn.min.js","hash":"4915de25936a5e32a9d65f3253602950db902f76","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/id.min.js","hash":"3ab32d93c79c30a38293cc7fa7987aee7ff465b0","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/lt.min.js","hash":"0b4ed4a0743e43cc9ff3cb898363828e332d09ef","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/nl.min.js","hash":"c6423e20bf81a46aa63c9f6ad0db163a02d39519","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/ph.min.js","hash":"4188ad65cbb7157539e72d2919f3105f13551dbd","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/pl.min.js","hash":"09066603ad910ca7e9264024e4d6e141b5d9a974","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/ro.min.js","hash":"448878d909c0d257e4c1551a1f9f96e70e3449b0","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/pt.min.js","hash":"10bb65aec0b490c64724a3ded5b853aec78a8603","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/my.min.js","hash":"60f4d1552b451fa02c1dd0bd88729ce26f30b352","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/no_nb.min.js","hash":"fa26f728bb6726fc97027ead69cc63695409b88c","modified":1661440014687},{"_id":"public/assets/ext/trumbowyg/langs/pt_br.min.js","hash":"4e4640c8206c9fdd8137a601c77ca71252259138","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/rs_latin.min.js","hash":"23fb0b3c9bf59721e3c0e5a6b1a0fdd3492f1f5e","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/ru.min.js","hash":"1b6596a0117bc78deba97c224b495ad25e7b7e46","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/sk.min.js","hash":"93f5ec0e995e1f564bbf3dbe1fda1768d22a65b1","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/sq.min.js","hash":"cfa1fff5430ba12dba9ae637ee42263aa5456aff","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/rs.min.js","hash":"b85705a33ce052863c170eca4ea0bf0e315eff7c","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/tr.min.js","hash":"f834d513c67da0d3f80edbf0c934d0ec60773cee","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/sv.min.js","hash":"a8dbb065188f858a3b074b45bee5b7a23d093468","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/ua.min.js","hash":"cf06712011e4bf666faff34e2f0af4e9b88f0c06","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/vi.min.js","hash":"ebdec1d3685c17cf7d5946816de649ab0e2bf129","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/zh_tw.min.js","hash":"290b8103de213f9917b507876a49592a1c6c7cb0","modified":1661440014688},{"_id":"public/assets/ext/trumbowyg/langs/zh_cn.min.js","hash":"98c966afd57cdf2debe2f62fa36f985531c0ef5c","modified":1661440014688},{"_id":"public/live2d_api/model/Potion-Maker/Pio/index.json","hash":"db3175468c66e8846b0b0f1418122ed36176b3da","modified":1661440014688},{"_id":"public/live2d_api/model/Potion-Maker/Tia/index.json","hash":"91ba9473cadc9008960d05bdc8b6c0eee153bcff","modified":1661440014688},{"_id":"public/warn.html","hash":"b9e793ed41f353f85bb32612e0b44448b9feb9d5","modified":1661440014688},{"_id":"public/404.html","hash":"faff32921349a78af0ae02eb21c5ca42145cb248","modified":1661440014688},{"_id":"public/live2d-widget/README.html","hash":"c1e16e9a40e1ee25c8d6daa24064a14c04d64c87","modified":1661440014688},{"_id":"public/assets/index.html","hash":"c9a531674ecc72c37694f226d61ccc3a5fc64811","modified":1661440014688},{"_id":"public/live2d_api/README.html","hash":"0934d5233538348508c66c1157b9f6953381d0d8","modified":1661440014688},{"_id":"public/assets/css/index.html","hash":"9a44f120183a47be34bc805fa5d725036cddf93e","modified":1661440014688},{"_id":"public/assets/sql/index.html","hash":"c9a531674ecc72c37694f226d61ccc3a5fc64811","modified":1661440014688},{"_id":"public/assets/img/index.html","hash":"c9a531674ecc72c37694f226d61ccc3a5fc64811","modified":1661440014688},{"_id":"public/assets/ext/index.html","hash":"c9a531674ecc72c37694f226d61ccc3a5fc64811","modified":1661440014688},{"_id":"public/assets/js/index.html","hash":"9a44f120183a47be34bc805fa5d725036cddf93e","modified":1661440014688},{"_id":"public/live2d-widget/demo/demo.html","hash":"9426428e1b29342528ac1625e90dcef02abfa327","modified":1661440014688},{"_id":"public/live2d-widget/demo/login.html","hash":"f1aee4dd227a41d1c6b8adf9a39934242eb78f0e","modified":1661440014688},{"_id":"public/sakura-app.js","hash":"46dc2e5334ac8b5a556382b0705e1a99ca97b857","modified":1661440014688},{"_id":"public/live2d-widget/font-awesome-min.css","hash":"93897ebc560b38a1d2bff43c22dd6a3b7ee90c0c","modified":1661440014688},{"_id":"public/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1661440014688},{"_id":"public/css/font.css","hash":"714d3b9fbd98fdc398ce9aa60ec1d60d50628933","modified":1661440014688},{"_id":"public/js/sakura.js","hash":"776081c1b58d076efb989a5937e85d892c103e65","modified":1661440014688},{"_id":"public/live2d-widget/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1661440014688},{"_id":"public/js/botui.js","hash":"aa2db57587ad21707a4a24735a091d97241b356e","modified":1661440014688},{"_id":"public/js/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1661440014688},{"_id":"public/js/sakura-app.js","hash":"edec71b0a1c8de625f9fffb5fde3a6389782ebc2","modified":1661440014689},{"_id":"public/js/jquery.fancybox.min.js","hash":"9e2b205a88c949fc8e6a7550d502dabe2b1ab4c0","modified":1661440014689},{"_id":"public/css/lib.min.css","hash":"3c4c8e1006dcc8e57e4a02e9d735a52c2a95cc72","modified":1661440014689},{"_id":"public/assets/js/backend_calendar_appointments_modal.js","hash":"e6d196b73cd9630cfdeb65db8e729ba32a9ffc41","modified":1661440014689},{"_id":"public/assets/js/backend_calendar_default_view.js","hash":"ded2596aafbf24d43f5ec45095372e76ed775395","modified":1661440014689},{"_id":"public/assets/js/backend_calendar_table_view.js","hash":"85c1e644a75d366ede55c92014b6da1d049aec90","modified":1661440014689},{"_id":"public/assets/js/backend_users_providers.js","hash":"f3b97bf921503ec3af577c5a40a5733c29294380","modified":1661440014689},{"_id":"public/assets/js/backend_users_secretaries.js","hash":"84522b01ab7a92681f45aa7c4994e9787844247d","modified":1661440014689},{"_id":"public/assets/js/frontend_book.js","hash":"698cb31f78c73d847731629ccac5802b342b374a","modified":1661440014689},{"_id":"public/assets/js/working_plan.js","hash":"ed535ea70cc3aba62fae3cc80821180feb86f45a","modified":1661440014689},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1661440014689},{"_id":"public/css/style.css","hash":"8bf488b9059b3662ba0ecfa5e1cf19d71ac421a3","modified":1661440014689},{"_id":"public/assets/ext/cookieconsent/cookieconsent.min.js","hash":"40902a2038d378187687d6d5834569de87e338f6","modified":1661440014689},{"_id":"public/assets/ext/datejs/date.js","hash":"0e33a02eadac09b76358175f4703b241b873e67a","modified":1661440014689},{"_id":"public/assets/ext/jquery-fullcalendar/fullcalendar.css","hash":"dea8fb730f7a887accd7ba3ef9fba0d4d64ae285","modified":1661440014689},{"_id":"public/assets/ext/jquery-qtip/jquery.qtip.min.js","hash":"341db5867ae263ea0ce4a4c0d8a4849d177569f5","modified":1661440014689},{"_id":"public/assets/ext/trumbowyg/trumbowyg.js","hash":"88e33e6c27f543b92116f4ecfccdf1b267e10fff","modified":1661440014689},{"_id":"public/assets/ext/moment/moment.min.js","hash":"859f0365c78d8472d8882a96781aeab35c561e88","modified":1661440014689},{"_id":"public/assets/ext/jquery-ui/jquery-ui.css","hash":"28456cf58c18bbdb5fc782101332751308c743ba","modified":1661440014689},{"_id":"public/assets/ext/trumbowyg/trumbowyg.min.js","hash":"12126c9b07a4d5966c5e0a996db4852b9a38b25e","modified":1661440014689},{"_id":"public/assets/ext/jquery-ui/jquery-ui.min.css","hash":"3745f107f04ae34a30545edb9d253754d93970d9","modified":1661440014690},{"_id":"public/assets/ext/jquery-ui/jquery-ui.structure.css","hash":"152c8e4ab99432f5ba2ebaedd51516d81e0ab43e","modified":1661440014690},{"_id":"public/assets/ext/jquery-ui/jquery-ui.theme.css","hash":"ec1aefaf7c78884479b7efa29d33afb6325104e4","modified":1661440014690},{"_id":"public/assets/ext/jquery-ui/jquery-ui-timepicker-addon.js","hash":"76b7bb130182a7e2e2cf66caedc796d2778bf3c2","modified":1661440014690},{"_id":"public/assets/ext/jquery-datatables/jquery.datatables.min.js","hash":"dee4d8852a0358695e2a9aae4970fcfbd337d438","modified":1661440014690},{"_id":"public/assets/ext/bootstrap/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1661440014690},{"_id":"public/assets/ext/bootstrap/css/bootstrap-theme.css","hash":"ecf2245dd39ea3b17ccb4bea42cda46356376078","modified":1661440014690},{"_id":"public/assets/ext/bootstrap/css/bootstrap-theme.min.css","hash":"4c936da026b2fb2e6b63d3d4ddbc3d9beb658d17","modified":1661440014690},{"_id":"public/assets/ext/jquery/jquery.min.js","hash":"c72c1735b4d903d90dd51225ebefb8c74ebbc51f","modified":1661440014690},{"_id":"public/assets/ext/trumbowyg/ui/trumbowyg.css","hash":"c59d6e321b61a030faf32d62517e643d2e91f47e","modified":1661440014690},{"_id":"public/assets/ext/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1661440014690},{"_id":"public/img/custom/cover/(0).jpg.webp","hash":"007d0c26d29a48d7ce45a5dfe91b496d41f771da","modified":1661440014690},{"_id":"public/live2d_api/model/Potion-Maker/Tia/model.moc","hash":"ec4becdfb64a722a878aa69ed8429043402f7259","modified":1661440014690},{"_id":"public/live2d_api/model/bilibili-live/33/model.moc","hash":"409ab86a5e3761cb7ed3d1355c578ec94e84946a","modified":1661440014690},{"_id":"public/live2d_api/model/Potion-Maker/Pio/model.moc","hash":"0f883ea279bda9133028124003b11c7f3edf20bb","modified":1661440014690},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/03.png","hash":"3c53a2de33a16fb9fd32558513e14e46c008d756","modified":1661440014690},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/03.png","hash":"72dcfbd6fc82361ad3ea964145f5367a5fee8b96","modified":1661440014690},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/school2017-upper.png","hash":"a8b7136c46931353afcba9a2dba141e584a784ab","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/school2017-lower.png","hash":"dc6907f7b1c7cc068ce6e6b55ed885169eac0eeb","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_02/spring-2018-lower.png","hash":"8327dbde7f78c03e28a8c1791615448eeaedd0ea","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/newyear-hat.png","hash":"df07972dbc22862bd96ba9f365a7c0015a82ba81","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/cba-hat.png","hash":"d2d4c1153b99c15e74e081b8a6eae42de3fdeff2","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/summer2017-hat.png","hash":"0aab1ba3b9fbf562840de771a6286f85856c29f7","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/valley2017-hat.png","hash":"f80f4552118cd22be9d030ca80ca5e1f77d2d02d","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/vdays-hat.png","hash":"1361ae5a79ede4e3e5daa9de0beae8da98a79a3d","modified":1661440014691},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/xmas-headwear.png","hash":"c96737de0bac6ab888c1eee5971cfd33671e0c1f","modified":1661440014692},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/xmas-hat.png","hash":"caed846554bb290516acf59d47ac26e3fd14b48f","modified":1661440014692},{"_id":"public/live2d_api/model/bilibili-live/33/texture_02/school2017-lower.png","hash":"34b46e3eefd2b973787215afac28b9f0c06e922e","modified":1661440014692},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/school2017-upper.png","hash":"178eab619c93f7d60757abcddbdd1c33b15f14dc","modified":1661440014692},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/newyear-hat.png","hash":"7c5a0755fdd6964f036524e5dee5d5ab6f9b2e8e","modified":1661440014693},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/cba-hat.png","hash":"46d4aaeb87146ec0000ad45c32dea068fdecad00","modified":1661440014693},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/school2017-hat.png","hash":"a2c09a710e80bcb0ddbf1e989bfd7ba8821097be","modified":1661440014693},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/summer2017-hat.png","hash":"2424085f55f9422ecda3230cd3b93c92f81e66a7","modified":1661440014693},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/03.png","hash":"47eed95dd2089d99dddb7f12b077db40f1955d64","modified":1661440014693},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/007.ogg","hash":"5c23a1d5f2bbbbffc68cfd0ca28a7882d10c1641","modified":1661440014693},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/snd/014.ogg","hash":"60dc325950591ef42d05ea9f7823604565fc232b","modified":1661440014693},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1661440014693},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1661440014693},{"_id":"public/css/style.css.bak","hash":"a793757f33429481d5595029ba4660e6b0fc8464","modified":1661440014694},{"_id":"public/assets/img/break.jpg","hash":"f7a6cc3287414b3a4aec024644003ebc3ec87fde","modified":1661440014694},{"_id":"public/assets/img/custom.jpg","hash":"2057bb70e0321b7e54988504a5c4f3889441d2dc","modified":1661440014695},{"_id":"public/images/cover/(2).jpg.webp","hash":"a28c79979c8a3950a8a53fec07cd1a6ff446615c","modified":1661440014695},{"_id":"public/images/cover/(4).jpg.webp","hash":"22bc8dfdcba509032f270fb68f9168efb39bb373","modified":1661440014695},{"_id":"public/images/cover/(5).jpg.webp","hash":"ad0f06e40504f4b86b3b12f6b2c86e9f07da01ea","modified":1661440014695},{"_id":"public/images/donate/WeChanQR.jpg","hash":"a3d79bd57a41945603816d071b6c965146d693dc","modified":1661440014695},{"_id":"public/images/donate/AliPayQR.jpg","hash":"315df35efab2584bc427914865bdc31ec90eaa99","modified":1661440014695},{"_id":"public/img/other/sakura.md.png","hash":"5a339ba8d24ae5e3494bdcace69e3c93dc6d838b","modified":1661440014695},{"_id":"public/img/cover/(2).jpg.webp","hash":"a28c79979c8a3950a8a53fec07cd1a6ff446615c","modified":1661440014696},{"_id":"public/img/cover/(6).jpg.webp","hash":"25267df7614e852d8c4ba229e9c77c5453e744bb","modified":1661440014696},{"_id":"public/img/cover/(5).jpg.webp","hash":"ad0f06e40504f4b86b3b12f6b2c86e9f07da01ea","modified":1661440014696},{"_id":"public/img/cover/(4).jpg.webp","hash":"22bc8dfdcba509032f270fb68f9168efb39bb373","modified":1661440014696},{"_id":"public/img/startdash/sakura.md.png","hash":"5a339ba8d24ae5e3494bdcace69e3c93dc6d838b","modified":1661440014696},{"_id":"public/images/cover/(6).jpg.webp","hash":"25267df7614e852d8c4ba229e9c77c5453e744bb","modified":1661440014696},{"_id":"public/img/custom/cover/(6).jpg.webp","hash":"25267df7614e852d8c4ba229e9c77c5453e744bb","modified":1661440014696},{"_id":"public/img/custom/cover/(4).jpg.webp","hash":"22bc8dfdcba509032f270fb68f9168efb39bb373","modified":1661440014696},{"_id":"public/img/custom/cover/(5).jpg.webp","hash":"ad0f06e40504f4b86b3b12f6b2c86e9f07da01ea","modified":1661440014696},{"_id":"public/img/custom/donate/AliPayQRsmall.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661440014697},{"_id":"public/img/custom/donate/WeChanQR.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661440014697},{"_id":"public/img/custom/donate/AliPayQR.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661440014697},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/physics.json","hash":"45f87045cb6a349ade027935eadb9907598d3504","modified":1661440014723},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/index.json","hash":"a35b369dbad62c4db8871d72a962bfaafdd28b3a","modified":1661440014723},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/index.json","hash":"5234f521b78c7cffabb9b43ae1cf68a6d2c12df2","modified":1661440014725},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/physics.json","hash":"1343b2f9324d0580e3d6e4db5913edc021c03182","modified":1661440014725},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/index.json","hash":"94ca977338860d2ebe2071824c77bafd4cedea91","modified":1661440014725},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/physics.json","hash":"45f87045cb6a349ade027935eadb9907598d3504","modified":1661440014725},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/physics.json","hash":"45f87045cb6a349ade027935eadb9907598d3504","modified":1661440014725},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/index.json","hash":"a35b369dbad62c4db8871d72a962bfaafdd28b3a","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/index.json","hash":"d0b7f67fd9d09483deb10c7ae4808af5eebce0f8","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/general/pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/index.json","hash":"aab025048f65824dd322473cd3c35095c1f2a342","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/physics.json","hash":"1f4598862069d545928c8e704beb7fe16a638387","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/index.json","hash":"d0b7f67fd9d09483deb10c7ae4808af5eebce0f8","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/physics.json","hash":"bbf1a8cb496831fbf9715d8431b82fffc9f89257","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/index.json","hash":"aab025048f65824dd322473cd3c35095c1f2a342","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/physics.json","hash":"92fb336210af4dce4393b31a2064f264ce9991e5","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepmaid/index.json","hash":"10f56817c0cf8c717129499adffbc5790e96269c","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/index.json","hash":"aab025048f65824dd322473cd3c35095c1f2a342","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepmaid/physics.json","hash":"c090c2001ba424c5e0a3cdb9d376083f993c6527","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/physics.json","hash":"1f4598862069d545928c8e704beb7fe16a638387","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/index.json","hash":"cecd4fe71a5dace4714d34cb519719979052eb49","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/physics.json","hash":"c090c2001ba424c5e0a3cdb9d376083f993c6527","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepswim/physics.json","hash":"c090c2001ba424c5e0a3cdb9d376083f993c6527","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepswim/index.json","hash":"cecd4fe71a5dace4714d34cb519719979052eb49","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_classic/index.json","hash":"ea5ac4de72153a49e884d71b03d17f15407cec97","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_classic/index.json","hash":"c5be857dfcdb58976ad13729d9f32572951007f8","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_classic/physics.json","hash":"ab7f3e88662318f3e01a187950f9f5eb08c32839","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_santa/index.json","hash":"cab12962c75ae7c0d9d22b445b0965d1566537de","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir/index.json","hash":"c5be857dfcdb58976ad13729d9f32572951007f8","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir/physics.json","hash":"ab7f3e88662318f3e01a187950f9f5eb08c32839","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_santa/physics.json","hash":"ab7f3e88662318f3e01a187950f9f5eb08c32839","modified":1661440014726},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noireswim/index.json","hash":"94345ffd6a7e78afa240a2e71d4984e3617c9f75","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noireswim/physics.json","hash":"7a468e9a4d3ae32de5d2eb955fd63e9f02304623","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_santa/index.json","hash":"21ffaa5434520409116631e3e588b7ed0cf93ce4","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/index.json","hash":"aab025048f65824dd322473cd3c35095c1f2a342","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/physics.json","hash":"92fb336210af4dce4393b31a2064f264ce9991e5","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/index.json","hash":"aab025048f65824dd322473cd3c35095c1f2a342","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/physics.json","hash":"92fb336210af4dce4393b31a2064f264ce9991e5","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/index.json","hash":"aab025048f65824dd322473cd3c35095c1f2a342","modified":1661440014727},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/physics.json","hash":"92fb336210af4dce4393b31a2064f264ce9991e5","modified":1661440014728},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1661440014728},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1661440014728},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/index.json","hash":"6092abeea4d6c5b6ed864d8a9e21034b538c982d","modified":1661440014728},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/pose.json","hash":"4decd7fc3d6a80c7f9021daee689018f9a57e83e","modified":1661440014728},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/index.json","hash":"e0186454ff8e85636328bd31b5e666373d933798","modified":1661440014728},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1661440014728},{"_id":"public/live2d_api/model/bilibili-live/22/index.json","hash":"5e67b755dfbfa5a8ff1d1e5ebd294cde7a533d16","modified":1661440014728},{"_id":"public/live2d_api/model/bilibili-live/22/textures_order.json","hash":"6e5c5dd5bd82d1e64a282d2ad01673bcb648c1e1","modified":1661440014728},{"_id":"public/live2d_api/model/bilibili-live/33/index.json","hash":"26890776ef09e47a0eed360ff40567b11ee1bf41","modified":1661440014728},{"_id":"public/live2d_api/model/bilibili-live/33/textures_order.json","hash":"6e5c5dd5bd82d1e64a282d2ad01673bcb648c1e1","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/ui/trumbowyg.min.css","hash":"d25dfb7ba6517abe1588384e2cf2674ee689b02e","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.js","hash":"eedc21d6fb2c8f7de495c2788c70462464bbe01f","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/base64/trumbowyg.base64.min.js","hash":"9b84b777a7d9fe6bb4bfb5af9b03c72abfbf8740","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.min.js","hash":"8d235aac856100d3a69f86483789a465f163872d","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/colors/trumbowyg.colors.js","hash":"3cb0bd69f8eed39f76895134ac31167173f56fbd","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.min.js","hash":"692f7dc73acc94e52bf52e7f9012bd7f93fc032d","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/allowtagsfrompaste/trumbowyg.allowtagsfrompaste.js","hash":"c6f449e6f4ed285b28bca78073701d6ae9cd6b8f","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.min.js","hash":"1720fdb945caaadb56f8cffe92bfa21ee11c0df7","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.min.js","hash":"42118d935b28bcb4495fb54d2eff9e391d787f17","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/cleanpaste/trumbowyg.cleanpaste.js","hash":"83b1e21acfdf756800c1d88164ab7c10254c3940","modified":1661440014728},{"_id":"public/assets/ext/trumbowyg/plugins/fontfamily/trumbowyg.fontfamily.js","hash":"0be6c223b10c925aba9f4731e384befb1849197f","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.min.js","hash":"be4a301f2d6e7002bd9d5564b2dc41f04b339c80","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.min.js","hash":"f496e6e1018f60dd1474fb7e452abfe28ad9849a","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.min.js","hash":"248723d0599672db5eef6983692d734164f41853","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/highlight/trumbowyg.highlight.js","hash":"e31439ab02fc6df006e7198a910d29de254d03ef","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/fontsize/trumbowyg.fontsize.js","hash":"4783845712cdd8baa90aa08aea54891f0aed5454","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/history/trumbowyg.history.js","hash":"7ba2ab8191c18c771087d48cdc24edb5ac0561ed","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/history/trumbowyg.history.min.js","hash":"2fd86ca28951949c9f63f00deff82c5a5e42008d","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.min.js","hash":"3994e1dcf842d1cf4d9a5f03fbaf6f4707f7ef8e","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/lineheight/trumbowyg.lineheight.js","hash":"eac5be99110fbc0282d29407cef72a8d41eb363b","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.min.js","hash":"9c2bcd05dbb5d168f870b3e4036fd5894893372e","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.min.js","hash":"af08f7024d9b16a426a7f3312d1701a76f83b3a4","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/mathml/trumbowyg.mathml.js","hash":"0bd35af0bf872c1d787a042fbb1c38ed78fbff12","modified":1661440014729},{"_id":"public/assets/ext/trumbowyg/plugins/insertaudio/trumbowyg.insertaudio.js","hash":"43012e622644e257475ffba2434f557906968d9f","modified":1661440014731},{"_id":"public/assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.min.js","hash":"6b34f395ed35739e823d585fc047e3b6ff10c091","modified":1661440014731},{"_id":"public/assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.js","hash":"c7122dc094d93236888cb994addd6759868a3e36","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/mention/trumbowyg.mention.min.js","hash":"41d1839536cd5547c01faa15517f501a51618556","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/noembed/trumbowyg.noembed.js","hash":"25b794bfc7e223822ca83d131cf2aa5815eeb621","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.js","hash":"5c50d67ad747658e8289ba8e41b642ecffa5a97d","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/pasteembed/trumbowyg.pasteembed.min.js","hash":"bbe31b61b7239961f70391414b4def3914df78a8","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.min.js","hash":"221ed1f2a9dff86c8c599e19d2cc5f731e230cfa","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.js","hash":"fdd1e776fb0176cb15cd621f98417025608ad552","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/pasteimage/trumbowyg.pasteimage.js","hash":"33fe123dce5a52327790ca62dc0481426744b6d6","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/preformatted/trumbowyg.preformatted.min.js","hash":"5551de59c98c504b7705e20e4b48803a7b532d37","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.js","hash":"c7ea3c827beef4569674a5e39dbe33c83b5fc8f3","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/resizimg/trumbowyg.resizimg.min.js","hash":"15bdfd92e4c048528f404d246aa7f27a67a5ffea","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.min.js","hash":"c34d3c4cf54305b5598f548c7111b011c82f9763","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/ruby/trumbowyg.ruby.js","hash":"668965136aebc208f1cecf09fce6f74787ccb724","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/table/trumbowyg.table.min.js","hash":"7e39b5dd17b7fd5b3b3a32421f62c6e5e3ac5baf","modified":1661440014732},{"_id":"public/assets/ext/trumbowyg/plugins/table/trumbowyg.table.js","hash":"54ea70119671f84d22207843a284c996d657f56e","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/template/trumbowyg.template.min.js","hash":"0b6faf190b15c3e3c3d2e29cee6f14679bb30980","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/template/trumbowyg.template.js","hash":"0f71a1e30dd7c4a47bdcb2addc5bded65c834ead","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.min.js","hash":"383beb7099b073ca84b27e69ead188c79b989ec4","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/upload/trumbowyg.upload.js","hash":"258f4fd642303d33ea81ec0bd2ed789e4c86a288","modified":1661440014733},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/expressions/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1661440014733},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/expressions/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1661440014733},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/expressions/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1661440014733},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/expressions/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/pose.json","hash":"4fb902065bd3f309fa0029fe2505424851fd489f","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/expressions/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1661440014733},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/expressions/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.min.css","hash":"c52be2cb93ee0ba8b2243043ec27c8885f90c84e","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/colors/ui/trumbowyg.colors.css","hash":"ce3198e9ee44525a2dcf9779e45d4acedb869788","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.css","hash":"d7987ea2128614403d8276719b4baa9f09c95c86","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.min.css","hash":"65c5919f154d2c84dd2a68caeb5417e15dad876d","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/emoji/ui/trumbowyg.emoji.min.css","hash":"147aa0e020fa8f2ba1a766c66a1d63232a9828a8","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/mention/ui/trumbowyg.mention.css","hash":"ff272a8314fd7ae4edf576594ad4a19f0ce15770","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.css","hash":"7f5cd35c728304b4771147d70858dd969b9e033c","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/mathml/ui/trumbowyg.mathml.min.css","hash":"789afba8c8ac33cf8e1abb69fc7f485d19591f68","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.min.css","hash":"a17caf5e308f9ba4190c07bde421f0d13d97bd57","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/table/ui/trumbowyg.table.css","hash":"4f6cc0b5eb59739c4afce75aac6721d2edad759d","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/deformed.json","hash":"ccae4bde488417414baaf965d7839b1038650cc2","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/kira.json","hash":"0f4c42ae49653e244da45eacc9db8edd168e10d2","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/enjoy.json","hash":"fa5df21591916ac763af7559b656e76cec39085f","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/happy.json","hash":"2d902e3d1532882ea22e881d543312c6ad618d34","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.min.css","hash":"bc34ce83ce240a794fb12401d6ba06c54a9a8986","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/unhappy.json","hash":"6faa86ca89d6b357777df757872323a5f3593d81","modified":1661440014733},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/general/exp/normal.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1661440014733},{"_id":"public/assets/ext/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.css","hash":"d9d51a9d618184e58b6ed238576ac1714c575f6f","modified":1661440014734},{"_id":"public/assets/ext/bootstrap/js/bootstrap.js","hash":"bbf55e20f1ebb6368522799f29db39830a08ef93","modified":1661440014734},{"_id":"public/assets/ext/jquery-fullcalendar/locale-all.js","hash":"884ea7be5741579c38bfd363af4067f391d11f47","modified":1661440014734},{"_id":"public/assets/ext/trumbowyg/plugins/emoji/trumbowyg.emoji.js","hash":"a6db21cb92e939223cd593a32839294b81d51e70","modified":1661440014734},{"_id":"public/assets/ext/bootstrap/css/bootstrap.min.css","hash":"aa875258a8331355d9e47877a2e97c27e0908c19","modified":1661440014734},{"_id":"public/assets/ext/bootstrap/css/bootstrap.css","hash":"f93f971e312d9bfaf392af3b1dcb4e18ab44e1ab","modified":1661440014734},{"_id":"public/assets/ext/moment/locales.min.js","hash":"c358948fc66f6350a1a176a6f384163742d510a3","modified":1661440014734},{"_id":"public/assets/ext/jquery-ui/jquery-ui.min.js","hash":"6c16d0906b837e37e5a924127639ab9dde1b1898","modified":1661440014734},{"_id":"public/assets/ext/jquery-ui/jquery-ui.js","hash":"40112996be9f29554100f4995081a3f817398ae7","modified":1661440014734},{"_id":"public/assets/ext/jquery-fullcalendar/fullcalendar.js","hash":"0ac2c87e5a8684b60bc5f353a6fb5db9b3722441","modified":1661440014734},{"_id":"public/img/custom/donate/BTCQR.png","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661440014735},{"_id":"public/img/custom/donate/WeChanSQsmall.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661440014735},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/model.moc","hash":"da39c01768423f32f850f6817c85edf7e7ecd379","modified":1661440014735},{"_id":"public/live2d_api/model/bilibili-live/22/model.moc","hash":"01b61d7c359bc5615a2f07aed653c33e1ad56354","modified":1661440014735},{"_id":"public/img/custom/cover/(2).jpg.webp","hash":"a28c79979c8a3950a8a53fec07cd1a6ff446615c","modified":1661440014735},{"_id":"public/img/custom/donate/WeChanSQ.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661440014737},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/02.png","hash":"ea4953acf66924b4912c21105eb1758788dad0b6","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/05.png","hash":"281393a9e572a3106ff806a6e7908bf4fe6458db","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/00.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/07.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/06.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/00.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/04.png","hash":"3128341232822b8bf0310e1037a0b556305a0a35","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/07.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/tomo-low-hat.png","hash":"bb052c0713c1577c793e406de5b9c63b545e0a09","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/06.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/08.png","hash":"aba9175e29158fb1918223e1072f3221fe4a518c","modified":1661440014737},{"_id":"public/live2d_api/model/bilibili-live/33/texture_01/spring-2018-upper.png","hash":"6fe1c6af95cc064fb6d2264615ddf48babe87e59","modified":1661440014737},{"_id":"public/live2d_api/model/bilibili-live/22/texture_01/spring-2018-upper.png","hash":"1eb1565f54ab5ffcd29bad00fbc0c6d6b0f7e54c","modified":1661440014738},{"_id":"public/img/startdash/wangshiwu.jpg","hash":"2cc94aaeb8548ae0d6c5a91a9fb9f5cfdea9eda4","modified":1661440014738},{"_id":"public/js/lib.min.js","hash":"28f7ece281fef37370c561b7bca5285776ae8fd9","modified":1661440014768},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/02.png","hash":"839b477086c403d3aac0b665f84e8440c90901cb","modified":1661440014768},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/05.png","hash":"281393a9e572a3106ff806a6e7908bf4fe6458db","modified":1661440014769},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1661440014769},{"_id":"public/img/banner/lab.jpg","hash":"da6bc6bd70aea8e819162e962e232d8cf1c48976","modified":1661440014769},{"_id":"public/img/banner/links.jpg","hash":"71cf3658c87f42a47b4583ae54cee51dfbcb94f0","modified":1661440014770},{"_id":"public/img/other/404.jpg","hash":"e43e6b827d08f93d0b943acfdbf368993b210b56","modified":1661440014770},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1661440014771},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/00.png","hash":"9f2a09d75ebf8fb23aafed5ff257b78447897ce8","modified":1661440014818},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/01.png","hash":"3adcc2492414984ad993e2fdb6a188f8087b01de","modified":1661440014818},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/03.png","hash":"f6e89684d57a7b85216fe25e608938da0e6e0056","modified":1661440014818},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/04.png","hash":"f6e89684d57a7b85216fe25e608938da0e6e0056","modified":1661440014818},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/tomo-high-hat.png","hash":"772e340b88cba3576d8d250e39c5a332fe8e45e2","modified":1661440014818},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/textures.512/02.png","hash":"85bb1d569399ed2937facc25c0e48f11c5635767","modified":1661440014819},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/school2017-hat.png","hash":"0d559b066becfb1ef64c4eaf5b16191247b17398","modified":1661440014819},{"_id":"public/live2d_api/model/bilibili-live/33/texture_03/spring-2018-hat.png","hash":"1c35a6e9982e5b2df5a3ea468e9f2bcd780f6f62","modified":1661440014819},{"_id":"public/img/banner/music.jpg","hash":"8ae3ecac53b96bcdc1c470f8342c20f4c2ee522b","modified":1661440014819},{"_id":"public/img/themebg/sakura.png","hash":"dad9a39bc25599b1175aac661e61b23ca70bfe0d","modified":1661440014819},{"_id":"public/img/banner/donate.jpg","hash":"dc511a54a1998040884eb6b5f2550af484505cf5","modified":1661440014850},{"_id":"public/img/banner/client.jpg","hash":"0e2782f8dc4150983c41af4f3e8cec8b8565042f","modified":1661440014850},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/02.png","hash":"758d46738374de646c913306b72cbe03cff5aa51","modified":1661440014850},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/model.moc","hash":"88e1c94587927f035758dbdddc8d6061f3570706","modified":1661440014850},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_classic/model.moc","hash":"a2baceabbe899430e70f427efe280b32b69b4882","modified":1661440014851},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepswim/model.moc","hash":"62385f2c196aebcbb92d53809f2abfd2160d7839","modified":1661440014851},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noireswim/model.moc","hash":"84fd06184c56b7ddb53b398a4347bde5fc4a36c7","modified":1661440014851},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/02.png","hash":"e4f54a0598ae0310271ceb9ef204609bf1f2f88d","modified":1661440014851},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/03.png","hash":"2a771f90feefd0ee645a2d10e8b6bf46d4bc26c4","modified":1661440014851},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/textures.512/01.png","hash":"85bb1d569399ed2937facc25c0e48f11c5635767","modified":1661440014851},{"_id":"public/live2d_api/model/bilibili-live/22/texture_03/spring-2018-hat.png","hash":"4b637596f93e3ec8e88db9b1da75ac34952e12b3","modified":1661440014851},{"_id":"public/img/startdash/bilibili.jpg","hash":"b203b4fcd7882ecfc361d0d4cf6b6fbfd49ea48d","modified":1661440014852},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir/model.moc","hash":"edf3b28a464457e322b12466318a7a3fa23c709b","modified":1661440014864},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-red.png","hash":"f0bfbb760bbdc0d7626e1fe945091e8241408bd1","modified":1661440014864},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume.png","hash":"c6cdde98c13733cd882080e005002e1370783350","modified":1661440014864},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sukumizu-costume-white.png","hash":"ae3e26dffaab427440997c8f9e4e1f576f93088f","modified":1661440014864},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-red.png","hash":"c8ab21dc8a8ede8a98647acd66b0f44263a6c58c","modified":1661440014865},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-pink.png","hash":"34e03dd90e70743b158c442e55c0bcc73402edad","modified":1661440014865},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sfc-uniform-costume-yellow.png","hash":"405cf715661e3ca7e7e323e629fb9aa34d020947","modified":1661440014865},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume.png","hash":"d4f208a79664addbd732815d69f45fcfcd2ebf2d","modified":1661440014865},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-white.png","hash":"791d97f8932b87af630124a3fb5c19ca8f898cc5","modified":1661440014866},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-navy.png","hash":"5afdff987892b0cd156c97c967d9a6a346e4cfee","modified":1661440014866},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-pink.png","hash":"5936b19304a08973e8661ac7acce2f71b0d362a0","modified":1661440014866},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sukumizu-costume-white.png","hash":"9a6e361788c2bf34088c2b74dbdcbb06685ff046","modified":1661440014866},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-black.png","hash":"0221d227261619d1fee598e91289c9db4d50ab8a","modified":1661440014866},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/blazer-costume-brown.png","hash":"8211a3a43dad7140142660647d10205a01b93568","modified":1661440014867},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume.png","hash":"70b281fe976d2b0d24956f78c93a1f5b23fd29ab","modified":1661440014867},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/hanbok-costume-gorgeous.png","hash":"1ec8532441cb26f462ec621d099c0d0b34a6ca02","modified":1661440014867},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-black.png","hash":"13fb73c5f9b58f304c93b3c5d6ab2a49c9b46b72","modified":1661440014867},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sailor-costume.png","hash":"e94e547d54f080a9c731b8a38340031f4eb0e1b2","modified":1661440014867},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-green.png","hash":"3932c28c34ffefb988d5e0e2f5297748f62e0d67","modified":1661440014868},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sports-bikini-costume-navy.png","hash":"1ed42e31abfb55ab80d99e6a682ae9eae0d90666","modified":1661440014868},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-green.png","hash":"5e9d09f6f688cfe918b5639eebedea2b82f96e89","modified":1661440014868},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/summer-uniform-costume-blue.png","hash":"db54c42dd8df5a898a2ec0fed5e7c2d9f9d62a8e","modified":1661440014868},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/thief-costume.png","hash":"df8ff4df137146d4c6b7417274abd83bd839db2d","modified":1661440014869},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/00.png","hash":"b76361944de2d34e1ebc79575c091dc9de768c1e","modified":1661440014869},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/kids-costume-navy.png","hash":"cc4246dae0be91da64df309d8173667539a6b839","modified":1661440014869},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/swimsuit-2017-costume-red.png","hash":"376059e86bce8f9762d0112ad5599b2dee7d5903","modified":1661440014869},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-black.png","hash":"73561bff2827efcf231979c2ccbc1fc222784f43","modified":1661440014870},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-white.png","hash":"93e11cbeb5903d8257323690b3596f21bb0b68ee","modified":1661440014870},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/magical-girl-costume.png","hash":"58ac268ec2b3729bfe7a50b9b690326d4e49a960","modified":1661440014870},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/nurse-costume-red.png","hash":"156c7c14d434005bfdd416a0004d406562bd2437","modified":1661440014870},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-navy.png","hash":"0c4e80f5558dcb8c237567c6b1ff69544fdca503","modified":1661440014871},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_santa/model.moc","hash":"bc8a5a6c2af17ccb9bb0d831bddcc620d2dab4d1","modified":1661440014886},{"_id":"public/assets/ext/bootstrap/css/bootstrap.css.map","hash":"16506513c5f3d95982e73fb6820cf3c4c58d6897","modified":1661440014886},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sailor-costume-black.png","hash":"441064357673342543dfab7f2666f86573c23a17","modified":1661440014887},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/qipao-costume-red.png","hash":"329c0a68e490e560d5c8bed757c71f04f34f2f5f","modified":1661440014887},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/healer-costume.png","hash":"276d9a76afbb6c6e97ab946e635d89923708e218","modified":1661440014887},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-junior.png","hash":"9772fecd64baa3f7c8a0184ac0ae73f519b6592c","modified":1661440014887},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/bikini-costume-blue.png","hash":"8e529bc06078d6beebbf3e1cd3f846bd05b42629","modified":1661440014887},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/cami-dress-costume-pink.png","hash":"9b5ceb42d92cfce4ec7041244aaaadabd6ebd5b3","modified":1661440014888},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/hood-costume-gray.png","hash":"cc14372619f69b67cda285d1b4e0aef2f80a8dfc","modified":1661440014888},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sailor-bikini-costume-white.png","hash":"3832428764022e666e2e6b5dd095e0c8caa49c87","modified":1661440014888},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sakura-costume.png","hash":"f91fc2999748f9ba79801f1dd7858ae2ba1e2df6","modified":1661440014888},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-brown.png","hash":"9342c47715a1df8b47fc1ca2f4274e66609b9f17","modified":1661440014888},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sakura-costume-navy.png","hash":"682778c7a62e0123e671acc4f9cf5dc40e67494c","modified":1661440014889},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/spring-dress-costume-navy.png","hash":"e1292b127d3a56eb7174859b7bcee0ef07dc3cf9","modified":1661440014889},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sabori-costume.png","hash":"ba1a1c754098a3ac006967e83b60ef2fb56b6e2b","modified":1661440014889},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/vampire-costume.png","hash":"3d455e280ac8bb5d7cf6b7dba535f8ef65de8ae6","modified":1661440014890},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-rainbow.png","hash":"a6575e0c21342d7ac9a5bb3b4c7ca64b5afdca0a","modified":1661440014890},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/maid-costume-black.png","hash":"c36db6c9ce4a2cb75467cc7076dc790d3179d7ee","modified":1661440014890},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/vampire-costume-real.png","hash":"f31b8be156417f722456b4a767ad7d4d08653eb9","modified":1661440014890},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/00.png","hash":"b76361944de2d34e1ebc79575c091dc9de768c1e","modified":1661440014891},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/animal-costume-racoon.png","hash":"5096d5f1c509ac4313f82a5aadf57203fa70fe9b","modified":1661440014891},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume-navy.png","hash":"da67deda4071a19ffa849f47476615a84d180c0f","modified":1661440014891},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/elementary-school-costume.png","hash":"f04ec479229cda9ffd277b54ec5955d15343d3e4","modified":1661440014891},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-green.png","hash":"d33d6560dcaabda34d236bc951758a9e1e4f9c7b","modified":1661440014891},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-purple.png","hash":"5067f25f60642c6463f3fdb9945550e53216bda1","modified":1661440014892},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-yellow.png","hash":"b2ea1ffa62ad7dd0a23dc2dae6d15e88dadaca51","modified":1661440014892},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/kids-costume.png","hash":"aa32379106cf27bc51e23bab84e3757bc6b60421","modified":1661440014892},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/maid-costume.png","hash":"299071e0458a4f0faa8f1f8d9f5b047464de6cfa","modified":1661440014892},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/new2015-costume.png","hash":"3dcddd2da559da08324ce5f387a0dd696380c2c9","modified":1661440014893},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/frill-bikini-costume-green.png","hash":"ea6146bf4d16a89ea23ad7086be60225bfaade30","modified":1661440014893},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/overalls-costume-white.png","hash":"30dc670181676335161083d351538ae9c003866e","modified":1661440014893},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/new2015-costume-pajamas.png","hash":"88627923fd9bf567d8d171079d2c8793078a8787","modified":1661440014893},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-brown.png","hash":"8a7269e1c8b325ceabd957172c16e4fdcdd4a7df","modified":1661440014894},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/overalls-costume.png","hash":"fa87a37aae5dfbfdcc608d5cc2f2922e17bfa23c","modified":1661440014894},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume.png","hash":"a0bf4a08335eeee7fb68a372c91d91372c8d08ec","modified":1661440014894},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-red.png","hash":"57c29228e7bee4dc4825b82a4d3fc0256c0df26f","modified":1661440014894},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/party-dress-costume-purple.png","hash":"567bf446e6d64706400edb58ef6c85f1a75c1c7b","modified":1661440014895},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/ribbon-dress-costume-yellow.png","hash":"bb34c5e7c6dd348e91498ed6c8275133a1b3e767","modified":1661440014895},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sailor-costume-black.png","hash":"e15e726f639ff8e5bf612fa37cf6bc9e383fe1ad","modified":1661440014895},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sailor-costume.png","hash":"2b62f5a3d264ceba30f756734cf49ac78631c8be","modified":1661440014895},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-gray.png","hash":"aaf2cda855fa613b23ec8c81409da477721c5920","modified":1661440014895},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sarori-costume.png","hash":"71016562811e3d2aa9596a0c01c0a50d40dd100e","modified":1661440014896},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/school-2017-costume-yellow.png","hash":"3acef24e28d5e2175291310ae1622b452e77e922","modified":1661440014896},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sorceress-costume.png","hash":"dd1d8c62fc464cb0a38bc50102a9bc4bdfadcfc0","modified":1661440014896},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sinsiroad-shop-costume-senior.png","hash":"148e6fd7819d71f7836c73a725a99c3446bda1eb","modified":1661440014897},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-black.png","hash":"dbed957164dffbc8155b9128d6cf8986035eba65","modified":1661440014897},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sporty-hood-costume-blue.png","hash":"df863d923f5ba3da2a0ea7c3107fe8ddce13e266","modified":1661440014898},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/summer-dress-costume-blue.png","hash":"f3b7a8113b87a430881524a6df488d6798d2f4a9","modified":1661440014898},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/succubus-costume-red.png","hash":"1581bc9ca9c745ccc75a51f3db936b96439b52a4","modified":1661440014899},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/tirami1-costume.png","hash":"2a06cd1a53bacdb3385726f00640e922d768ffbb","modified":1661440014899},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume.png","hash":"5ef491b411d5755fee0a3bce16d6651a8d0684d9","modified":1661440014899},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/turtleneck-costume-red.png","hash":"7192151db4649e5a230f74b1a60ea1402e3a2a86","modified":1661440014900},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/blackcat-costume.png","hash":"28394f9acb8f06377567995fc86cad290a40f214","modified":1661440014900},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-2017-costume-brown.png","hash":"1fafa9d43f827aedad567091a3f15a93ab4afe98","modified":1661440014900},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/blueround-costume.png","hash":"78459c68c702748da5b08c21003d175de98076d3","modified":1661440014901},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume-red.png","hash":"27ed28b3c8f119e02b6ba45823307ddd35d9d026","modified":1661440014901},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/bunny-girl-costume.png","hash":"9a2425e6ad579c58af5352b8504545788b71af89","modified":1661440014901},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-green.png","hash":"184c97a02d115c3152a5a7fe1bb8ae1b1566a9a0","modified":1661440014901},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-purple.png","hash":"67353a4685f3d0d81f752669e2150a4ca605e1c7","modified":1661440014902},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/frill-blouse-costume-red.png","hash":"53d486245f7bd8ce1aa96b5dd157f9d300299bbe","modified":1661440014902},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/cute-pajamas-costume-skyblue.png","hash":"503faa7dea20fcd8a4a4d80898bb3dc04e9e0724","modified":1661440014902},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/hood-costume-red.png","hash":"77e3b821e1739a1cac1a7ae85957d876a0079b14","modified":1661440014903},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/default-costume.png","hash":"cdd979265d0b854dd8679119d73c2eea30e0e37d","modified":1661440014903},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-green.png","hash":"ea10fe7439f6b86d56fc7e96273840ad8ec23c6d","modified":1661440014904},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/maid-costume-blue.png","hash":"fdee8b81568526034287fc0082578f9f4905a167","modified":1661440014904},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/marine-costume-navy.png","hash":"651b74fc9f9d691fefa6ec2b29743cbeb2a9b06d","modified":1661440014905},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/marine-costume.png","hash":"1cb6914fa1364ce9dda7a5728f225797c08347d8","modified":1661440014905},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/nordic-costume-beige.png","hash":"835553f91cc33b66b872e38bf0657d1671830b65","modified":1661440014905},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-blue.png","hash":"8fbabc650e97fe412609ba12f64e78adb88a0eb8","modified":1661440014906},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/pajamas-costume-green.png","hash":"0bf40e12faee07faff7d33c799404c6fc4c327ff","modified":1661440014906},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/nurse-costume.png","hash":"c12583ab11bb85c4732c552c61baaacd58718c66","modified":1661440014906},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/pushcat-costume.png","hash":"ec36dff24e74412ec6646dc470e60b0e2e256da0","modified":1661440014907},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/santa-costume.png","hash":"004963e1d0fcc29bb065fd9748c1d71a63344a98","modified":1661440014907},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/sulbim-costume-snowflake.png","hash":"d66a5b18c95641283bc345d40fe1ad9d5248d747","modified":1661440014908},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/warrior-costume.png","hash":"620fcf91aa5da4a6f73bf38ced88c366f3cd1a5b","modified":1661440014908},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-red.png","hash":"d1c15c16e5af0bc2af2f348c9c6e8f612826a87b","modified":1661440014908},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-white.png","hash":"41b8e85a1a45fb07392c7f1a8c019dcab169913f","modified":1661440014916},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/whiteday-costume-purple.png","hash":"5dac6f2653f196f9a5e263616894d86199957bea","modified":1661440014917},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1661440014918},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/01.png","hash":"833545a8f4d7ea4162d28ed5ecc0d953da97a66b","modified":1661440014918},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/animal-costume.png","hash":"d0293faa6e0808549acd40dd9d002dc0c7517ffd","modified":1661440014918},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume-red.png","hash":"52eb6811409823133b49c6965dc6189a72cfedb2","modified":1661440014919},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/01.png","hash":"833545a8f4d7ea4162d28ed5ecc0d953da97a66b","modified":1661440014919},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/bunny-girl-costume.png","hash":"3c4ad7e83faee6b70d3c2c5a451e30d00c1d999e","modified":1661440014919},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-brown.png","hash":"6f2894835498cc0ae18c40f937875451be203269","modified":1661440014919},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/fall-dress-costume-beige.png","hash":"7913d07f365ca98ceb82b323450f88a62cd27997","modified":1661440014920},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/furisode-costume.png","hash":"fca09e50541f21d516796a9c749e101004bedf39","modified":1661440014920},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/frill-blouse-costume-red.png","hash":"a841df2ba6b70264c0814dd5735d5490f3bac8d8","modified":1661440014920},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-pink.png","hash":"ea8e0f1a8984349ef672f8d250c35b41d1aee482","modified":1661440014920},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-skyblue.png","hash":"98e040f80057062823f6560676c2f67664432a0a","modified":1661440014921},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/nightsky-costume.png","hash":"fc49b0004e5779652f690ebec5a67cd8d6cb233a","modified":1661440014921},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/pajamas-costume-pink.png","hash":"9f9c2ba15b5f743126c962fc2594a8187ee5711f","modified":1661440014921},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-pink.png","hash":"7b241e82d6a935397b957248b9bbde5c476d0cf4","modified":1661440014922},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-pink.png","hash":"8190e6216a23f34f3a9257dbaffa3043eb31fb3d","modified":1661440014922},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/winter-coat-costume-white.png","hash":"f1119b271289ff09ba7dfbf1c2edc4c5b45e9b25","modified":1661440014922},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/traveler-costume-brown.png","hash":"26dbe1a0d4e1f1d66ca23e50f05f3f4e9c0da01c","modified":1661440014922},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1661440014922},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1661440014923},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/valentine-costume-brown.png","hash":"a6695fb278add3be921aecb876843bb4aba5b887","modified":1661440014923},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/halloween-costume.png","hash":"6f505d1442807d6b73a8bc8491c5af09a7548537","modified":1661440014923},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/knight-costume.png","hash":"a5f494c19b02ba70679774a447df65426a414aeb","modified":1661440014923},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/macaron-dress-costume-pink.png","hash":"dac14d5b425fef339fb54051dadd830e8897cec5","modified":1661440014924},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1661440014934},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_classic/model.moc","hash":"d3dacd00437a5a60afd72eed728879312f950c75","modified":1661440014934},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_santa/model.moc","hash":"7d91e76d0dfdf8ce69281a41c37b7aa0503ec59c","modified":1661440014934},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/model.moc","hash":"93ec7f0f950c0a5207d5a1453efd180b3671adb2","modified":1661440014935},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/model.moc","hash":"5b13d231a642f2a5dd8a36c1c6307dbfd337bbe9","modified":1661440014935},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/winter-costume-white.png","hash":"3d4297a6a60085d06e645cf99c622355417678a1","modified":1661440014935},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/witch-costume-white.png","hash":"37f7f8cabf79e079fb4a612e2906654868d35602","modified":1661440014936},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/dress-costume-brown.png","hash":"acfa9db3a3d6fd314b596cd820d28d56df421434","modified":1661440014936},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sakura-costume.png","hash":"d2fcf17defa9940033c1dec92b675ce15a53da4e","modified":1661440014936},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/cake-costume-choco.png","hash":"9a3ca8e86fed9801bdf87745c54b7becfcc3ae14","modified":1661440014937},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/school-costume.png","hash":"77f79821d879f5027c950de3adedf5b8fb4b2904","modified":1661440014937},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/sakura-costume-navy.png","hash":"0e2037777ae5809862ac85d32466006ba34560d0","modified":1661440014937},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/santa2016-costume.png","hash":"6e0d2a0e2117857d16fbf7d71e23f870a4c63692","modified":1661440014937},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-black.png","hash":"4e257bcb6090300d4477af5acbe1e73b25f00a63","modified":1661440014938},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/school-costume-red.png","hash":"96f774bd5da40aece073e6bda70813c0c2aada90","modified":1661440014938},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume.png","hash":"adda87d57e7e6c753f735d0140bb6d5eda71225a","modified":1661440014938},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/shaman-costume-blue.png","hash":"8e20bee886093dd099a601cfc664c767e089493a","modified":1661440014939},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1661440014945},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-pajama/model.moc","hash":"22e883cc446e1627ee646a555fe12b7ecf16d8a1","modified":1661440014945},{"_id":"public/live2d_api/model/Potion-Maker/Tia/textures/jersey-costume-blue.png","hash":"55d7108d2da804ed87d61062a9182f86ba7d8ae1","modified":1661440014945},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/model.moc","hash":"cbed38078e8eee5184d6a555d824bcc1aad60065","modified":1661440014945},{"_id":"public/img/themebg/little-monster.png","hash":"681bf7eab301d8ac36833b29d7d1f34896b3db55","modified":1661440014946},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/maid-costume-red.png","hash":"aeca4b2b0e070567f7e2e37fd86065ec79edaa5c","modified":1661440014946},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/00.png","hash":"fe5bbc29b3c3ade00fa4ace2ec5a627f0b46d036","modified":1661440014946},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/01.png","hash":"833545a8f4d7ea4162d28ed5ecc0d953da97a66b","modified":1661440014947},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/hanbok-costume-red.png","hash":"fe95eaee4c556c4343cb2e5fc509f0de0b6f4348","modified":1661440014948},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/santa-costume.png","hash":"8e37aedc57c6d6deb200960bbc09e18ccca163a3","modified":1661440014948},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume.png","hash":"0ccb5057d726236ecd6cc0c4ce3df5ef4a9c8f8d","modified":1661440014948},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/winter-costume.png","hash":"91c1a266c82938e9111d5657d161ab602b9e52a1","modified":1661440014949},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/cake-costume-cream.png","hash":"1c302029b9298d4a134de273905edb625c068590","modified":1661440014950},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/witch-costume.png","hash":"bdf97c60ffe3593af7a02f4755d05c419beb15da","modified":1661440014951},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-gray.png","hash":"5661ca8f0a14370c2485187acd84ba7e3fc85468","modified":1661440014951},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/01.png","hash":"39348df1aa1cc36ef8c1f5f6cabaec45386d9c4a","modified":1661440014952},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/02.png","hash":"07559d401d13838ac8bca96255003674b9e0228a","modified":1661440014953},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/01.png","hash":"8c52e4e4dd117f4b3f37e414c2306ba32eb3c918","modified":1661440014954},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/01.png","hash":"029498848de8323b1df1768d20c998a8b4fe818f","modified":1661440014955},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/01.png","hash":"853572eb865c6ce40dcdf3f71aee626e04b1a91e","modified":1661440014955},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/default-costume.png","hash":"badeb207fa62b28ae3b4cc8a3e9ad06d873f4808","modified":1661440014956},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/03.png","hash":"d82e9263e03c2c04b2ed59449efaebbd0e2f2ae0","modified":1661440014956},{"_id":"public/img/banner/coding.jpg","hash":"1585d2b179dbbcc30920c4fb9889ea78c7e9a890","modified":1661440014963},{"_id":"public/img/banner/comment.jpg","hash":"4a0b8c0736f6349419ae70bef741561290de623b","modified":1661440014963},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/model.moc","hash":"4fde92ff356618d5a93e72f51b684c5ef73e2c94","modified":1661440014963},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/night-witch-costume-black.png","hash":"db938a08af28cdcc42a3abc5127cfab2bfef18ec","modified":1661440014964},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/star-witch-costume-brown.png","hash":"ff2cd3dbf0cd23d8979c3d1e733db9fc5532c38a","modified":1661440014964},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/dress-costume.png","hash":"188dff7ed0d4c0bd16fb0a9a56b543e0d678e60b","modified":1661440014964},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/santa-costume-green.png","hash":"930ecf817be71a7d7765cf66555cd5437d2d5198","modified":1661440014964},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/01.png","hash":"8c52e4e4dd117f4b3f37e414c2306ba32eb3c918","modified":1661440014965},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/01.png","hash":"4633b3e978ae1db7a36eba64c5b5ff6137e916e3","modified":1661440014965},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/02.png","hash":"6e37abb40419a4a61f694f9626c4f84271e32152","modified":1661440014965},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/01.png","hash":"853572eb865c6ce40dcdf3f71aee626e04b1a91e","modified":1661440014966},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1661440014966},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1661440014966},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1661440014967},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1661440014967},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_santa/textures.1024/00.png","hash":"ef0ecdc75c50dc79863504e37c7432a9860af24c","modified":1661440014968},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/03.png","hash":"c015a2f68428fb97130e9c8666c2ef52486de30c","modified":1661440014968},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/00.png","hash":"726d1cd08ecbfd45c0947fd1604694b6c27a273c","modified":1661440014968},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/01.png","hash":"4633b3e978ae1db7a36eba64c5b5ff6137e916e3","modified":1661440014969},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/00.png","hash":"726d1cd08ecbfd45c0947fd1604694b6c27a273c","modified":1661440014969},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/01.png","hash":"78c91fe42bdf23c7703239e36c30aaf70880e84c","modified":1661440014969},{"_id":"public/live2d_api/model/Potion-Maker/Pio/textures/halloween-costume.png","hash":"d403eebd9764218c1fe3772503953c8c0f360877","modified":1661440014982},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/textures.1024/01.png","hash":"5a39879a876aba6f9f71c3076bc4839ac14e7e1b","modified":1661440014982},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/00.png","hash":"339192c1909176b121a2a4ba423b5f45adf3b486","modified":1661440014983},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/00.png","hash":"339192c1909176b121a2a4ba423b5f45adf3b486","modified":1661440014984},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/model.moc","hash":"dfa36095d6045abd9cc87983c6e1f43272a10c6f","modified":1661440014989},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/model.moc","hash":"ba4b45356419330b0b35c711be29f5a1ffb98478","modified":1661440014989},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/01.png","hash":"78c91fe42bdf23c7703239e36c30aaf70880e84c","modified":1661440014990},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoirenohover/textures.1024/02.png","hash":"bc754f8c7847d7fc36b528fe7ba58a81b0956a77","modified":1661440014991},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/02.png","hash":"bc754f8c7847d7fc36b528fe7ba58a81b0956a77","modified":1661440014991},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepnep/textures.1024/02.png","hash":"e4995b048effc544b0c57f7baeca6770ef9f9cbd","modified":1661440014992},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_normal/textures.1024/00.png","hash":"726d1cd08ecbfd45c0947fd1604694b6c27a273c","modified":1661440014992},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepswim/textures.1024/02.png","hash":"1ced944e2e7cf1c1fd9a9b8aca51a706ff460ad8","modified":1661440014992},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/03.png","hash":"fc83cc83d7a4c3576bab34f636cdc9f83e39296c","modified":1661440014993},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/textures.1024/02.png","hash":"ac4a5fb27f4921821ddb7d02e52ef95b23211c0d","modified":1661440014993},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1661440014994},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepmaid/model.moc","hash":"7aadbaf179e615a2863b992d1c468d9486fcb171","modified":1661440014998},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/01.png","hash":"029498848de8323b1df1768d20c998a8b4fe818f","modified":1661440014998},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/01.png","hash":"8c52e4e4dd117f4b3f37e414c2306ba32eb3c918","modified":1661440014999},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/histoire/textures.1024/03.png","hash":"c015a2f68428fb97130e9c8666c2ef52486de30c","modified":1661440014999},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/00.png","hash":"339192c1909176b121a2a4ba423b5f45adf3b486","modified":1661440014999},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepmaid/textures.1024/02.png","hash":"e38c69621f0cde67721c1f7477dd3442dc6e1c5e","modified":1661440014999},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1661440015001},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1661440015001},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/model.moc","hash":"f59dd76d865fadb8466c70ff7fa7d390ffc19ec1","modified":1661440015002},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir/textures.1024/02.png","hash":"3b7e7cc6edfaa63f3b53ecd06997f60708bb18cf","modified":1661440015003},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_swimwear/textures.1024/02.png","hash":"217ffa6562d145534eeefb9802e673cf8a22f2f6","modified":1661440015003},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noireswim/textures.1024/02.png","hash":"0d6fb1eb2d94a1f1fc811c14bed42e4f02e90e9d","modified":1661440015004},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/textures.1024/00.png","hash":"4c7c011dc3509bad39bd5dea1cfa24d4f89977d2","modified":1661440015004},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/textures.1024/00.png","hash":"4c7c011dc3509bad39bd5dea1cfa24d4f89977d2","modified":1661440015005},{"_id":"public/live2d_api/model/ShizukuTalk/shizuku-48/model.moc","hash":"30695934566624c3997e2ef680b75cd4c6d2a5fa","modified":1661440015012},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/blanc_classic/model.moc","hash":"99af0fcc22b7c7c39f177f008207b6bdd8b25563","modified":1661440015012},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear/model.moc","hash":"83fdc83db86eb55e4628a35ceb99e8bcbbfc8f05","modified":1661440015013},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/01.png","hash":"f2a7197896b9bcfd972ed11bcd0288462365c4fd","modified":1661440015024},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/03.png","hash":"43593e4b0b0cbe40f6099333d24f36da0948bc89","modified":1661440015025},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/neptune_classic/textures.1024/02.png","hash":"7b0207ddc047002e8ea91c6055f1deaceb7e07fa","modified":1661440015027},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_santa/textures.1024/02.png","hash":"04031bec1abae23980992f8927fb529750e180b1","modified":1661440015042},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_normal/textures.1024/02.png","hash":"34fb9a595766e48c9d6ae9ca5469abccd2bb2298","modified":1661440015042},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/03.png","hash":"b9897a1fff7d19fe77c2c6268075046c6af54d89","modified":1661440015043},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_classic/textures.1024/02.png","hash":"b943786aa97fcaaa7416e771daa345f1dcff5a7c","modified":1661440015045},{"_id":"public/live2d_api/model/KantaiCollection/murakumo/textures.1024/00.png","hash":"3ddf1fd2c570cea511303120f852b29292a2b151","modified":1661440015047},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/vert_swimwear/textures.1024/02.png","hash":"d2fa9046f49e206c4c2d09065c1a46c307e930e1","modified":1661440015050},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/noir_classic/textures.1024/02.png","hash":"36b800b6e58dc6b124a0fc7a7b2ab4d55450ec08","modified":1661440015050},{"_id":"public/img/banner/reading.jpg","hash":"8780e8998704cf68a7401e85153180879f1e941b","modified":1661440015053},{"_id":"public/img/other/starry_sky.png","hash":"795ce430749828520d717b933a3ce7d8ca0e63f5","modified":1661440015053},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgear_extra/model.moc","hash":"138d7cc102ef372e8f9deab9d732e78a9dcd40b2","modified":1661440015056},{"_id":"public/live2d_api/model/HyperdimensionNeptunia/nepgearswim/model.moc","hash":"13051bf85c25251697f7f7fc0f9db94d52c2c931","modified":1661440015058},{"_id":"source/categories/index.md","hash":"ad0d498367ba44ca96a4c5164f593cde8adecf5a","modified":1661442809998},{"_id":"public/categories/index.html","hash":"fc6c7df0547c77ab13ed66341d7f6a6c5f5ae09f","modified":1661444188424}],"Category":[{"name":"技术","_id":"cl796higw0004gwrwqljg79g9"},{"name":"随想","_id":"cl796hii30028gwrwi3u8joay"},{"name":"生活","_id":"cl796hiia002rgwrwu86r3iuy"}],"Data":[],"Page":[{"layout":"archive","title":"archive","date":"2020-12-20T15:13:05.000Z","keywords":"我所有的文档都在这了~","description":null,"comments":0,"photos":"https://api.ixiaowai.cn/mcapi/mcapi.php","_content":"","source":"archive/index.md","raw":"---\nlayout: archive\ntitle: archive\ndate: 2020-12-20 23:13:05\nkeywords: 我所有的文档都在这了~\ndescription: \ncomments: false\nphotos: https://api.ixiaowai.cn/mcapi/mcapi.php\n---\n","updated":"2022-08-23T16:00:37.652Z","path":"archive/index.html","_id":"cl796higt0001gwrwgrd62tot","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"comment","date":"2018-12-20T15:13:48.000Z","keywords":"留言板","description":null,"comments":1,"photos":"https://api.ixiaowai.cn/mcapi/mcapi.php","_content":"{% raw %}\n<div class=\"entry-content\">\n  <div class=\"poem-wrap\">\n    <div class=\"poem-border poem-left\">\n    </div>\n    <div class=\"poem-border poem-right\">\n    </div>\n    <h1>\n    念两句诗</h1>\n    <p id=\"poem\">\n    叙别梦、扬州一觉。</p>\n    <p id=\"info\">\n    【宋代】吴文英《夜游宫·人去西楼雁杳》</p>\n  </div>\n</div>\n{% endraw %}","source":"comment/index.md","raw":"---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\nphotos: https://api.ixiaowai.cn/mcapi/mcapi.php\n---\n{% raw %}\n<div class=\"entry-content\">\n  <div class=\"poem-wrap\">\n    <div class=\"poem-border poem-left\">\n    </div>\n    <div class=\"poem-border poem-right\">\n    </div>\n    <h1>\n    念两句诗</h1>\n    <p id=\"poem\">\n    叙别梦、扬州一觉。</p>\n    <p id=\"info\">\n    【宋代】吴文英《夜游宫·人去西楼雁杳》</p>\n  </div>\n</div>\n{% endraw %}","updated":"2022-08-23T15:14:10.688Z","path":"comment/index.html","layout":"page","_id":"cl796higv0003gwrwmi0iysuw","content":"\n<div class=\"entry-content\">\n  <div class=\"poem-wrap\">\n    <div class=\"poem-border poem-left\">\n    </div>\n    <div class=\"poem-border poem-right\">\n    </div>\n    <h1>\n    念两句诗</h1>\n    <p id=\"poem\">\n    叙别梦、扬州一觉。</p>\n    <p id=\"info\">\n    【宋代】吴文英《夜游宫·人去西楼雁杳》</p>\n  </div>\n</div>\n","site":{"data":{}},"excerpt":"","more":"\n<div class=\"entry-content\">\n  <div class=\"poem-wrap\">\n    <div class=\"poem-border poem-left\">\n    </div>\n    <div class=\"poem-border poem-right\">\n    </div>\n    <h1>\n    念两句诗</h1>\n    <p id=\"poem\">\n    叙别梦、扬州一觉。</p>\n    <p id=\"info\">\n    【宋代】吴文英《夜游宫·人去西楼雁杳》</p>\n  </div>\n</div>\n"},{"title":"lab","comments":0,"date":"2019-01-05T13:47:59.000Z","keywords":"Lab实验室","description":null,"photos":"https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/lab.jpg","_content":"\n## sakura主题\nbalabala","source":"lab/index.md","raw":"---\ntitle: lab\ncomments: false\ndate: 2019-01-05 21:47:59\nkeywords: Lab实验室\ndescription: \nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/lab.jpg\n---\n\n## sakura主题\nbalabala","updated":"2021-11-09T14:13:18.000Z","path":"lab/index.html","layout":"page","_id":"cl796higy0007gwrw4f3nvm58","content":"<h2 id=\"sakura主题\"><a href=\"#sakura主题\" class=\"headerlink\" title=\"sakura主题\"></a>sakura主题</h2><p>balabala</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"sakura主题\"><a href=\"#sakura主题\" class=\"headerlink\" title=\"sakura主题\"></a>sakura主题</h2><p>balabala</p>\n"},{"title":"client","date":"2018-12-20T15:13:35.000Z","keywords":"Android客户端","description":null,"comments":0,"photos":"https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/client.jpg","_content":"直接下载 or 扫码下载：\n{% raw %}\n<div style=\"text-align: center;\">\n<img class=\"lazyload\" data-src=\"https://view.moezx.cc/images/2018/06/08/app-download.png#in-center#width-50\" style=\"width: 200px; height: 200px;\" alt=\"\">\n</div>\n{% endraw %}","source":"client/index.md","raw":"---\ntitle: client\ndate: 2018-12-20 23:13:35\nkeywords: Android客户端\ndescription: \ncomments: false\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/client.jpg\n---\n直接下载 or 扫码下载：\n{% raw %}\n<div style=\"text-align: center;\">\n<img class=\"lazyload\" data-src=\"https://view.moezx.cc/images/2018/06/08/app-download.png#in-center#width-50\" style=\"width: 200px; height: 200px;\" alt=\"\">\n</div>\n{% endraw %}","updated":"2021-11-09T14:13:18.000Z","path":"client/index.html","layout":"page","_id":"cl796hih30009gwrw6zcw4571","content":"<p>直接下载 or 扫码下载：<br>\n<div style=\"text-align: center;\">\n<img class=\"lazyload\" data-src=\"https://view.moezx.cc/images/2018/06/08/app-download.png#in-center#width-50\" style=\"width: 200px; height: 200px;\" alt>\n</div>\n</p>\n","site":{"data":{}},"excerpt":"","more":"<p>直接下载 or 扫码下载：<br>\n<div style=\"text-align: center;\">\n<img class=\"lazyload\" data-src=\"https://view.moezx.cc/images/2018/06/08/app-download.png#in-center#width-50\" style=\"width: 200px; height: 200px;\" alt>\n</div>\n</p>\n"},{"layout":"bangumi","title":"bangumi","comments":0,"date":"2019-02-10T13:32:48.000Z","keywords":null,"description":null,"bangumis":[{"img":"https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9213b07eca806538c37b022291dda144ad34826a.jpg","title":"夏目友人帐","status":"已追完","progress":100,"jp":"夏目友人帳","time":"2018-06-24 SUN.","desc":"夏目贵志生来拥有强大的灵力，能看到妖怪和神明的存在。因其父母双亡，常年辗转于互相推卸责任的亲戚之间，并受到同龄人的欺负。同时被其能力影响，未曾与任何人深交，造成性格一定程度上的孤僻。本性和善，宽厚，踏实。对于自身的不幸，无论是对人类还是妖怪都未曾抱怨过。被藤原夫妇收养后踏入高中。一次被妖怪追赶打破了一只妖怪“斑”的封印，继而牵涉到其祖母夏目玲子的遗物“友人帐”——一本记录着众多妖怪名字的契约书。对友人帐产生兴趣的“斑”与贵志定下约定，自己守护其一生以替换友人帐的所有权，平日则化身成大头招财猫模样的“猫咪老师”。在“斑”的陪伴、八原妖怪和同学们关心鼓励下，贵志经历了一个个或奇异、悲伤、感怀的怪诞故事，并逐渐学会与人类、妖怪友好相处，谱写出一段充满人性哲思的温馨物语。"},{"img":"https://yiduji-1303822363.cos.ap-beijing.myqcloud.com/BZK/C88/F.png","title":"干物妹小埋","status":"已追完","progress":100,"jp":"干物妹！うまるちゃん","time":"2020-02-24 SUN.","desc":"我的妹妹“小埋”是个容貌秀丽！文武双全！ 任谁都会羡慕的完美女高中生♥ 而这个美少女妹妹她有个不为人知的秘密！！每当她一进入家门后就会…… 这里滚呀滚♪那里滚呀滚♪ 过着“吃、睡、玩”的干物妹生活！？追踪在家耍任性在外是气质美女“小埋”的生态！"}],"_content":"","source":"bangumi/index.md","raw":"---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  - img: https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9213b07eca806538c37b022291dda144ad34826a.jpg\n    title: 夏目友人帐\n    status: 已追完\n    progress: 100\n    jp: 夏目友人帳\n    time: 2018-06-24 SUN.\n    desc: 夏目贵志生来拥有强大的灵力，能看到妖怪和神明的存在。因其父母双亡，常年辗转于互相推卸责任的亲戚之间，并受到同龄人的欺负。同时被其能力影响，未曾与任何人深交，造成性格一定程度上的孤僻。本性和善，宽厚，踏实。对于自身的不幸，无论是对人类还是妖怪都未曾抱怨过。被藤原夫妇收养后踏入高中。一次被妖怪追赶打破了一只妖怪“斑”的封印，继而牵涉到其祖母夏目玲子的遗物“友人帐”——一本记录着众多妖怪名字的契约书。对友人帐产生兴趣的“斑”与贵志定下约定，自己守护其一生以替换友人帐的所有权，平日则化身成大头招财猫模样的“猫咪老师”。在“斑”的陪伴、八原妖怪和同学们关心鼓励下，贵志经历了一个个或奇异、悲伤、感怀的怪诞故事，并逐渐学会与人类、妖怪友好相处，谱写出一段充满人性哲思的温馨物语。\n  - img: https://yiduji-1303822363.cos.ap-beijing.myqcloud.com/BZK/C88/F.png\n    title: 干物妹小埋\n    status: 已追完\n    progress: 100\n    jp: 干物妹！うまるちゃん\n    time: 2020-02-24 SUN.\n    desc: 我的妹妹“小埋”是个容貌秀丽！文武双全！ 任谁都会羡慕的完美女高中生♥ 而这个美少女妹妹她有个不为人知的秘密！！每当她一进入家门后就会…… 这里滚呀滚♪那里滚呀滚♪ 过着“吃、睡、玩”的干物妹生活！？追踪在家耍任性在外是气质美女“小埋”的生态！\n---\n","updated":"2022-08-23T15:12:36.277Z","path":"bangumi/index.html","_id":"cl796hih7000dgwrwnh09klx1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-12-12T14:14:36.000Z","keywords":"关于","description":null,"comments":0,"photos":"https://api.ixiaowai.cn/mcapi/mcapi.php","_content":"{% raw %}\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[关于Rookie_l]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgba(242, 242, 242, 0.5); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    Rookie_l&nbsp;<rp>\n    （</rp>\n    <rt>\n    大揭秘</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui></botui>\n  </div>\n</div>\n<script src=\"/js/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n\n{% endraw %}","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-12-12 22:14:36\nkeywords: 关于\ndescription: \ncomments: false\nphotos: https://api.ixiaowai.cn/mcapi/mcapi.php\n---\n{% raw %}\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[关于Rookie_l]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgba(242, 242, 242, 0.5); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    Rookie_l&nbsp;<rp>\n    （</rp>\n    <rt>\n    大揭秘</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui></botui>\n  </div>\n</div>\n<script src=\"/js/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n\n{% endraw %}","updated":"2022-08-23T15:45:08.809Z","path":"about/index.html","layout":"page","_id":"cl796hiha000fgwrwc4sx82qj","content":"\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[关于Rookie_l]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgba(242, 242, 242, 0.5); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    Rookie_l&nbsp;<rp>\n    （</rp>\n    <rt>\n    大揭秘</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui>\n  </bot-ui></div>\n</div>\n<script src=\"/js/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n\n","site":{"data":{}},"excerpt":"","more":"\n<!-- 因为vue和botui更新导至bug,现将对话移至js下的botui中配置 -->\n<div class=\"entry-content\">\n  <div class=\"moe-mashiro\" style=\"text-align:center; font-size: 50px; margin-bottom: 20px;\">[关于Rookie_l]</div>\n  <div id=\"hello-mashiro\" class=\"popcontainer\" style=\"min-height: 300px; padding: 2px 6px 4px; background-color: rgba(242, 242, 242, 0.5); border-radius: 10px;\">\n    <center>\n    <p>\n    </p>\n    <h4>\n    与&nbsp;<ruby>\n    Rookie_l&nbsp;<rp>\n    （</rp>\n    <rt>\n    大揭秘</rt>\n    <rp>\n    ）</rp>\n    </ruby>\n    对话中...</h4>\n    <p>\n    </p>\n    </center>\n    <bot-ui>\n  </bot-ui></div>\n</div>\n<script src=\"/js/botui.js\"></script>\n<script>\nbot_ui_ini()\n</script>\n\n"},{"layout":"links","title":"links","date":"2018-12-19T15:11:06.000Z","keywords":"友人帐","description":null,"comments":1,"photos":"https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqw2vlij21kw0w0k8g.jpg","links":[{"group":"个人项目","desc":"充分说明这家伙是条咸鱼 < (￣︶￣)>","items":[{"url":"https://icu007.work","img":"https://icu007.work/wp-content/uploads/2022/03/head.jpeg","name":"主站","desc":"个人主站"},{"url":"https://baidu.icu007.work","img":"https://img.sj33.cn/uploads/202009/7-20092H12GA16.jpg","name":"让我帮你百度一下","desc":"百度一下"}]},{"group":"小伙伴们","desc":"欢迎交换友链 ꉂ(ˊᗜˋ)","items":[{"url":"https://icu007.work","img":"https://icu007.work/wp-content/uploads/2022/03/head.jpeg","name":"主站","desc":"我的主站"},{"url":"https://hiheya.github.io","img":"https://icu007.work/wp-content/uploads/2022/03/head.jpeg","name":"本站点","desc":"本博客"}]}],"_content":"","source":"links/index.md","raw":"---\nlayout: links\ntitle: links\ndate: 2018-12-19 23:11:06\nkeywords: 友人帐\ndescription: \ncomments: true\nphotos: https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqw2vlij21kw0w0k8g.jpg\nlinks:\n  - group: 个人项目\n    desc: 充分说明这家伙是条咸鱼 < (￣︶￣)>\n    items:\n    - url: https://icu007.work\n      img: https://icu007.work/wp-content/uploads/2022/03/head.jpeg\n      name: 主站\n      desc: 个人主站\n    - url: https://baidu.icu007.work\n      img: https://img.sj33.cn/uploads/202009/7-20092H12GA16.jpg\n      name: 让我帮你百度一下\n      desc: 百度一下\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://icu007.work\n      img: https://icu007.work/wp-content/uploads/2022/03/head.jpeg\n      name: 主站\n      desc: 我的主站\n    - url: https://hiheya.github.io\n      img: https://icu007.work/wp-content/uploads/2022/03/head.jpeg\n      name: 本站点\n      desc: 本博客\n---\n","updated":"2022-08-23T15:35:58.250Z","path":"links/index.html","_id":"cl796hihd000jgwrw5xab8esx","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"donate","title":"donate","date":"2018-12-20T15:13:05.000Z","keywords":"谢谢饲主了喵~","description":null,"comments":0,"photos":"https://api.ixiaowai.cn/mcapi/mcapi.php","_content":"","source":"donate/index.md","raw":"---\nlayout: donate\ntitle: donate\ndate: 2018-12-20 23:13:05\nkeywords: 谢谢饲主了喵~\ndescription: \ncomments: false\nphotos: https://api.ixiaowai.cn/mcapi/mcapi.php\n---\n","updated":"2022-08-23T16:06:32.203Z","path":"donate/index.html","_id":"cl796hihg000ogwrwl3x1k8k6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","photos":"https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-12 22:14:16\nphotos: https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg\n---\n","updated":"2022-08-25T15:11:51.559Z","path":"tags/index.html","_id":"cl796hihj000sgwrw3osduonq","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","photos":null,"_content":"","source":"rss/index.md","raw":"---\ntitle: rss\ndate: 2018-12-20 23:09:03\nphotos:\n---\n","updated":"2021-11-09T14:13:18.000Z","path":"rss/index.html","comments":1,"layout":"page","_id":"cl796hihm000xgwrwkqheoxpp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"theme-sakura","comments":0,"date":"2019-01-04T14:53:25.000Z","keywords":"Hexo 主题 Sakura 🌸","description":null,"photos":"https://static.2heng.xin/wp-content/uploads//2018/05/sakura2.jpeg","_content":"Hexo主题Sakura修改自WordPress主题[Sakura](https://github.com/mashirozx/Sakura/)，感谢原作者[Mashiro](https://2heng.xin/)","source":"theme-sakura/index.md","raw":"---\ntitle: theme-sakura\ncomments: false\ndate: 2019-01-04 22:53:25\nkeywords: Hexo 主题 Sakura 🌸\ndescription:\nphotos: https://static.2heng.xin/wp-content/uploads//2018/05/sakura2.jpeg\n---\nHexo主题Sakura修改自WordPress主题[Sakura](https://github.com/mashirozx/Sakura/)，感谢原作者[Mashiro](https://2heng.xin/)","updated":"2021-11-09T14:13:18.000Z","path":"theme-sakura/index.html","layout":"page","_id":"cl796hiho0011gwrwpojrobfy","content":"<p>Hexo主题Sakura修改自WordPress主题<a href=\"https://github.com/mashirozx/Sakura/\" target=\"_blank\" rel=\"noopener\">Sakura</a>，感谢原作者<a href=\"https://2heng.xin/\" target=\"_blank\" rel=\"noopener\">Mashiro</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hexo主题Sakura修改自WordPress主题<a href=\"https://github.com/mashirozx/Sakura/\" target=\"_blank\" rel=\"noopener\">Sakura</a>，感谢原作者<a href=\"https://2heng.xin/\" target=\"_blank\" rel=\"noopener\">Mashiro</a></p>\n"},{"title":"video","date":"2018-12-20T15:14:38.000Z","keywords":"B站","description":null,"comments":0,"photos":null,"_content":"{% raw %}\n<script>\n  var videos = [\n    {\n      img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '放送时间: 2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    },\n    {\n      img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    }\n  ]\n</script>\n{% endraw %}\n\n{% raw %}\n  <style>.should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}\n  </style>\n  <header class=\"page-header\"><h1 class=\"cat-title\">番组计划</h1> <span class=\"cat-des\"><p>这里将是永远的回忆</p> </span></header>\n  <div class=\"bangumi\">\n    <div class=\"row\" id=\"rootRow\">\n    </div>\n  </div>\n  <script>\n  window.onload = function(){\n    videos.forEach(function(video, i){\n      $('#rootRow').append(`<div class=\"col s12 m6\" id=\"bangumi-218971\">\n        <div class=\"card hoverable\" style=\"overflow: visible;\">\n          <div class=\"card-image waves-effect waves-block waves-light\">\n            <div class=\"activator itempic lazyload\" style=\"background-image: url(${video.img});\" data-src=\"${video.img}\">\n            </div>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"card-title should-ellipsis activator grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-commenting-o right\"></i>\n            </div>\n            <p class=\"should-ellipsis-full\">\n            ${video.jp}</p>\n            <ul class=\"skill-list\">\n              <li class=\"skill\">\n                <div>\n                ${video.status}</div>\n                <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                </progress>\n              </li>\n            </ul>\n          </div>\n          <div class=\"card-reveal\" style=\"display: none; transform: translateY(0%);\">\n            <span class=\"card-title grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-close right\"></i>\n            </span>\n            <span>\n              ${video.jp}<br>\n            </span>\n            <span>\n              放送时间: ${video.time}<span>\n                <p>${video.desc}</p>\n                <ul class=\"skill-list\">\n                  <li class=\"skill\">\n                    <div>\n                    ${video.status}</div>\n                    <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                    </progress>\n                  </li>\n                </ul>\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>`)\n    })\n  }\n  </script>\n{% endraw %}","source":"video/index.md","raw":"---\ntitle: video\ndate: 2018-12-20 23:14:38\nkeywords: B站\ndescription: \ncomments: false\nphotos: \n---\n{% raw %}\n<script>\n  var videos = [\n    {\n      img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '放送时间: 2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    },\n    {\n      img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    }\n  ]\n</script>\n{% endraw %}\n\n{% raw %}\n  <style>.should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}\n  </style>\n  <header class=\"page-header\"><h1 class=\"cat-title\">番组计划</h1> <span class=\"cat-des\"><p>这里将是永远的回忆</p> </span></header>\n  <div class=\"bangumi\">\n    <div class=\"row\" id=\"rootRow\">\n    </div>\n  </div>\n  <script>\n  window.onload = function(){\n    videos.forEach(function(video, i){\n      $('#rootRow').append(`<div class=\"col s12 m6\" id=\"bangumi-218971\">\n        <div class=\"card hoverable\" style=\"overflow: visible;\">\n          <div class=\"card-image waves-effect waves-block waves-light\">\n            <div class=\"activator itempic lazyload\" style=\"background-image: url(${video.img});\" data-src=\"${video.img}\">\n            </div>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"card-title should-ellipsis activator grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-commenting-o right\"></i>\n            </div>\n            <p class=\"should-ellipsis-full\">\n            ${video.jp}</p>\n            <ul class=\"skill-list\">\n              <li class=\"skill\">\n                <div>\n                ${video.status}</div>\n                <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                </progress>\n              </li>\n            </ul>\n          </div>\n          <div class=\"card-reveal\" style=\"display: none; transform: translateY(0%);\">\n            <span class=\"card-title grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-close right\"></i>\n            </span>\n            <span>\n              ${video.jp}<br>\n            </span>\n            <span>\n              放送时间: ${video.time}<span>\n                <p>${video.desc}</p>\n                <ul class=\"skill-list\">\n                  <li class=\"skill\">\n                    <div>\n                    ${video.status}</div>\n                    <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                    </progress>\n                  </li>\n                </ul>\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>`)\n    })\n  }\n  </script>\n{% endraw %}","updated":"2021-11-09T14:13:18.000Z","path":"video/index.html","layout":"page","_id":"cl796hihq0016gwrwsvewvnit","content":"\n<script>\n  var videos = [\n    {\n      img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '放送时间: 2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    },\n    {\n      img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    }\n  ]\n</script>\n\n\n  <style>.should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}\n  </style>\n  <header class=\"page-header\"><h1 class=\"cat-title\">番组计划</h1> <span class=\"cat-des\"><p>这里将是永远的回忆</p> </span></header>\n  <div class=\"bangumi\">\n    <div class=\"row\" id=\"rootRow\">\n    </div>\n  </div>\n  <script>\n  window.onload = function(){\n    videos.forEach(function(video, i){\n      $('#rootRow').append(`<div class=\"col s12 m6\" id=\"bangumi-218971\">\n        <div class=\"card hoverable\" style=\"overflow: visible;\">\n          <div class=\"card-image waves-effect waves-block waves-light\">\n            <div class=\"activator itempic lazyload\" style=\"background-image: url(${video.img});\" data-src=\"${video.img}\">\n            </div>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"card-title should-ellipsis activator grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-commenting-o right\"></i>\n            </div>\n            <p class=\"should-ellipsis-full\">\n            ${video.jp}</p>\n            <ul class=\"skill-list\">\n              <li class=\"skill\">\n                <div>\n                ${video.status}</div>\n                <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                </progress>\n              </li>\n            </ul>\n          </div>\n          <div class=\"card-reveal\" style=\"display: none; transform: translateY(0%);\">\n            <span class=\"card-title grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-close right\"></i>\n            </span>\n            <span>\n              ${video.jp}<br>\n            </span>\n            <span>\n              放送时间: ${video.time}<span>\n                <p>${video.desc}</p>\n                <ul class=\"skill-list\">\n                  <li class=\"skill\">\n                    <div>\n                    ${video.status}</div>\n                    <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                    </progress>\n                  </li>\n                </ul>\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>`)\n    })\n  }\n  </script>\n","site":{"data":{}},"excerpt":"","more":"\n<script>\n  var videos = [\n    {\n      img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '放送时间: 2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    },\n    {\n      img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg',\n      title: '朝花夕誓——于离别之朝束起约定之花',\n      status: '已追完',\n      progress: 100,\n      jp: 'さよならの朝に約束の花をかざろう',\n      time: '2018-02-24 SUN.',\n      desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。'\n    }\n  ]\n</script>\n\n\n  <style>.should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}\n  </style>\n  <header class=\"page-header\"><h1 class=\"cat-title\">番组计划</h1> <span class=\"cat-des\"><p>这里将是永远的回忆</p> </span></header>\n  <div class=\"bangumi\">\n    <div class=\"row\" id=\"rootRow\">\n    </div>\n  </div>\n  <script>\n  window.onload = function(){\n    videos.forEach(function(video, i){\n      $('#rootRow').append(`<div class=\"col s12 m6\" id=\"bangumi-218971\">\n        <div class=\"card hoverable\" style=\"overflow: visible;\">\n          <div class=\"card-image waves-effect waves-block waves-light\">\n            <div class=\"activator itempic lazyload\" style=\"background-image: url(${video.img});\" data-src=\"${video.img}\">\n            </div>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"card-title should-ellipsis activator grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-commenting-o right\"></i>\n            </div>\n            <p class=\"should-ellipsis-full\">\n            ${video.jp}</p>\n            <ul class=\"skill-list\">\n              <li class=\"skill\">\n                <div>\n                ${video.status}</div>\n                <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                </progress>\n              </li>\n            </ul>\n          </div>\n          <div class=\"card-reveal\" style=\"display: none; transform: translateY(0%);\">\n            <span class=\"card-title grey-text text-darken-4\">\n              ${video.title}<i class=\"fa fa-close right\"></i>\n            </span>\n            <span>\n              ${video.jp}<br>\n            </span>\n            <span>\n              放送时间: ${video.time}<span>\n                <p>${video.desc}</p>\n                <ul class=\"skill-list\">\n                  <li class=\"skill\">\n                    <div>\n                    ${video.status}</div>\n                    <progress class=\"skill-1\" max=\"100\" value=\"${video.progress}\">\n                    </progress>\n                  </li>\n                </ul>\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>`)\n    })\n  }\n  </script>\n"},{"title":"music","date":"2022-08-20T15:14:28.000Z","keywords":"喜欢的音乐","description":null,"comments":0,"photos":"https://api.ixiaowai.cn/mcapi/mcapi.php","_content":"{% raw %}\n<meting-js\n  server=\"netease\"\n  type=\"playlist\"\n  id=\"6842714056\"\n  mutex=\"true\">\n</meting-js>\n\n<meting-js\n  server=\"netease\"\n  type=\"playlist\"\n  id=\"6842714056\"\n  mutex=\"true\">\n</meting-js>\n{% endraw %}","source":"music/index.md","raw":"---\ntitle: music\ndate: 2022-8-20 23:14:28\nkeywords: 喜欢的音乐\ndescription: \ncomments: false\nphotos: https://api.ixiaowai.cn/mcapi/mcapi.php\n---\n{% raw %}\n<meting-js\n  server=\"netease\"\n  type=\"playlist\"\n  id=\"6842714056\"\n  mutex=\"true\">\n</meting-js>\n\n<meting-js\n  server=\"netease\"\n  type=\"playlist\"\n  id=\"6842714056\"\n  mutex=\"true\">\n</meting-js>\n{% endraw %}","updated":"2022-08-23T15:44:27.431Z","path":"music/index.html","layout":"page","_id":"cl796hihs001agwrwx9mny133","content":"\n<meting-js server=\"netease\" type=\"playlist\" id=\"6842714056\" mutex=\"true\">\n</meting-js>\n\n<meting-js server=\"netease\" type=\"playlist\" id=\"6842714056\" mutex=\"true\">\n</meting-js>\n","site":{"data":{}},"excerpt":"","more":"\n<meting-js server=\"netease\" type=\"playlist\" id=\"6842714056\" mutex=\"true\">\n</meting-js>\n\n<meting-js server=\"netease\" type=\"playlist\" id=\"6842714056\" mutex=\"true\">\n</meting-js>\n"},{"title":"categories","date":"2018-12-12T14:14:16.000Z","photos":"https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-12 22:14:16\nphotos: https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg\n---\n","updated":"2022-08-25T15:53:29.998Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl7985q7s0000h0rwlki6andh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java基础语法01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"date":"2022-08-25T14:34:29.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 注释\n\n- 平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。\n- **注释不会被执行**，只是给我们写代码的人看的\n- ***书写注释是一个非常好的编程习惯***\n\n### Java中的注释\n\n- 单行注释 //\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        //我是单行注释\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 多行注释/**/\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*我是多行注释\n        我是多行注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 文档注释/** */\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*\n        *我是文档注释\n        我是文档注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n## Java标识符\n\n**关键字**\n\n- ***Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符***\n\n**标识符注意点**\n\n- 所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始\n- 首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合\n- ***不能使用关键字作为变量名或方法名***\n- 标识符是**大小写敏感**的\n- **不建议使用中文或者拼音作为变量名或方法名**\n\n## Java数据类型\n\n- 强类型语言\n  - 要求变量的使用**必须要严格符合规定**，所有变量都必须先定义后才能使用\n- Java数据类型分为两大类\n  - 基本类型(primitive type)\n  - 引用类型(reference type)\n\n**基本类型**\n\n| No.  |      数据类型      | 大小/位 |              可表示数据范围              |  默认值  |\n| :--: | :----------------: | :-----: | :--------------------------------------: | :------: |\n|  1   |  `byte`（字节型）  |    8    |                 -128~127                 |    0     |\n|  2   | `short`（短整型）  |   16    |               -32768~32767               |    0     |\n|  3   |   `int`（整型）    |   32    |          -2147483648~2147483647          |    0     |\n|  4   |  `long`（长整型）  |   64    | -9223372036854775808~9223372036854775807 |    0     |\n|  5   | `float`（单精度）  |   32    |              -3.4E38~3.4E38              |   0.0    |\n|  6   | `double`（双精度） |   64    |             -1.7E308~1.7E308             |   0.0    |\n|  7   |   `char`（字符）   |   16    |                  0~255                   | '\\u0000' |\n|  8   | `boolean`（布尔）  |    -    |               true或false                |  false   |\n\n**引用类型**\n\n引用数据类型非常多，大致包括：\n类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型\n\n如**String为引用类型**\n\n\n\n```java\npublic class Demo01 {\n    public static void main(String[] args) {\n        //整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)\n        int num01 = 10;\n        byte num02 = 20;\n        short num03 = 30;\n        long num04 = 40l;\n        //浮点型：float(4字节)、double(8字节)\n        float num05 = 50.66f;\n        double num06 = 66.66;\n        //字符：char(2字节)\n        char usr = 'x';\n        //布尔值：boolean\n        boolean flag = true;\n    }\n}\n```\n\n\n\n**小科普**\n\n- **位(bit)**:是计算机内部数据存储的最小单位，10100101是一个八位二进制数\n- **字节(Byte)**: 是计算机中数据处理的基本单位，习惯上用大写的B来表示\n- 1B(Byte,字节) = 8bit(位)\n- **字符**:是指计算机中使用的字母、数字、字和符号\n  - 1bit = 1位;\n  - 1Byte = 1B = 8b;\n  - 1024B = 1KB\n  - 1024KB = 1M\n  - 1024M = 1G\n\n\n\n### Java数据类型拓展\n\n- 整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n        int b = 0b10;\n        int i = 10;\n        int i1 = 010;\n        int i2 = 0x10;\n        System.out.println(b);\n        System.out.println(i);\n        System.out.println(i1);\n        System.out.println(i2);\n\n        System.out.println(\"===================================\");\n        }\n}\n```\n\n- 浮点数扩展 \n  - 银行业务表示，\n  - 常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于！最好避免完全使用浮点数进行比较！！！\n- a\n\n```java\npublic class Demo02 {\n    public static void main(String[] args) {\n        //浮点数扩展 银行业务表示，\n        //通常使用数学工具类BigDecimal，来表示银行业务。\n        System.out.println(\"===================================\");\n        //float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于\n        //double\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        float f = 0.1f;\n        double d = 1.0/10;\n        System.out.println(f == d);\n        System.out.println(\"===================================\");\n        float f1 = 12345667486234f;\n        float f2 = f1 + 1;\n        System.out.println(f1 == f2);\n        System.out.println(\"===================================\");\n    }\n}\n```\n\n- 字符扩展\n  - System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n  - 所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n  - 转义字符：  \\t 制表符、 \\n 换行符……\n- a\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //字符扩展\n        System.out.println(\"===================================\");\n        char c1 = 'a';\n        char c2 = '荣';\n        System.out.println(c1);\n        System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n\n        System.out.println(c2);\n        System.out.println((int)c2);        //将char型的c2 强制转换为int型的Unicode编码\n        System.out.println(\"===================================\");\n        char c3 = '\\u0066';                 //将Unicode编码0066转义为char型数据c3\n        System.out.println(c3);\n        //所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n\n        //转义字符  \\t 制表符、 \\n 换行符……\n        System.out.println(\"Hello\\t World!\");\n    }\n}\n\n```\n\n- 布尔值扩展：\n  - less is more   代码要精简易读；\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n\n        //布尔值扩展\n        boolean flag = true;\n        if (flat == true){};\n        if (flag){};\n        //less is more   代码要精简易读；\n    }\n}\n\n```\n\n","source":"_posts/Java基础语法01.md","raw":"---\ntitle: Java基础语法01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ndate: 2022-08-25 22:34:29\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java基础语法\nkeywords:\ndescription:\n---\n\n## 注释\n\n- 平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。\n- **注释不会被执行**，只是给我们写代码的人看的\n- ***书写注释是一个非常好的编程习惯***\n\n### Java中的注释\n\n- 单行注释 //\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        //我是单行注释\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 多行注释/**/\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*我是多行注释\n        我是多行注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 文档注释/** */\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*\n        *我是文档注释\n        我是文档注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n## Java标识符\n\n**关键字**\n\n- ***Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符***\n\n**标识符注意点**\n\n- 所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始\n- 首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合\n- ***不能使用关键字作为变量名或方法名***\n- 标识符是**大小写敏感**的\n- **不建议使用中文或者拼音作为变量名或方法名**\n\n## Java数据类型\n\n- 强类型语言\n  - 要求变量的使用**必须要严格符合规定**，所有变量都必须先定义后才能使用\n- Java数据类型分为两大类\n  - 基本类型(primitive type)\n  - 引用类型(reference type)\n\n**基本类型**\n\n| No.  |      数据类型      | 大小/位 |              可表示数据范围              |  默认值  |\n| :--: | :----------------: | :-----: | :--------------------------------------: | :------: |\n|  1   |  `byte`（字节型）  |    8    |                 -128~127                 |    0     |\n|  2   | `short`（短整型）  |   16    |               -32768~32767               |    0     |\n|  3   |   `int`（整型）    |   32    |          -2147483648~2147483647          |    0     |\n|  4   |  `long`（长整型）  |   64    | -9223372036854775808~9223372036854775807 |    0     |\n|  5   | `float`（单精度）  |   32    |              -3.4E38~3.4E38              |   0.0    |\n|  6   | `double`（双精度） |   64    |             -1.7E308~1.7E308             |   0.0    |\n|  7   |   `char`（字符）   |   16    |                  0~255                   | '\\u0000' |\n|  8   | `boolean`（布尔）  |    -    |               true或false                |  false   |\n\n**引用类型**\n\n引用数据类型非常多，大致包括：\n类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型\n\n如**String为引用类型**\n\n\n\n```java\npublic class Demo01 {\n    public static void main(String[] args) {\n        //整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)\n        int num01 = 10;\n        byte num02 = 20;\n        short num03 = 30;\n        long num04 = 40l;\n        //浮点型：float(4字节)、double(8字节)\n        float num05 = 50.66f;\n        double num06 = 66.66;\n        //字符：char(2字节)\n        char usr = 'x';\n        //布尔值：boolean\n        boolean flag = true;\n    }\n}\n```\n\n\n\n**小科普**\n\n- **位(bit)**:是计算机内部数据存储的最小单位，10100101是一个八位二进制数\n- **字节(Byte)**: 是计算机中数据处理的基本单位，习惯上用大写的B来表示\n- 1B(Byte,字节) = 8bit(位)\n- **字符**:是指计算机中使用的字母、数字、字和符号\n  - 1bit = 1位;\n  - 1Byte = 1B = 8b;\n  - 1024B = 1KB\n  - 1024KB = 1M\n  - 1024M = 1G\n\n\n\n### Java数据类型拓展\n\n- 整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n        int b = 0b10;\n        int i = 10;\n        int i1 = 010;\n        int i2 = 0x10;\n        System.out.println(b);\n        System.out.println(i);\n        System.out.println(i1);\n        System.out.println(i2);\n\n        System.out.println(\"===================================\");\n        }\n}\n```\n\n- 浮点数扩展 \n  - 银行业务表示，\n  - 常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于！最好避免完全使用浮点数进行比较！！！\n- a\n\n```java\npublic class Demo02 {\n    public static void main(String[] args) {\n        //浮点数扩展 银行业务表示，\n        //通常使用数学工具类BigDecimal，来表示银行业务。\n        System.out.println(\"===================================\");\n        //float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于\n        //double\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        float f = 0.1f;\n        double d = 1.0/10;\n        System.out.println(f == d);\n        System.out.println(\"===================================\");\n        float f1 = 12345667486234f;\n        float f2 = f1 + 1;\n        System.out.println(f1 == f2);\n        System.out.println(\"===================================\");\n    }\n}\n```\n\n- 字符扩展\n  - System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n  - 所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n  - 转义字符：  \\t 制表符、 \\n 换行符……\n- a\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //字符扩展\n        System.out.println(\"===================================\");\n        char c1 = 'a';\n        char c2 = '荣';\n        System.out.println(c1);\n        System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n\n        System.out.println(c2);\n        System.out.println((int)c2);        //将char型的c2 强制转换为int型的Unicode编码\n        System.out.println(\"===================================\");\n        char c3 = '\\u0066';                 //将Unicode编码0066转义为char型数据c3\n        System.out.println(c3);\n        //所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n\n        //转义字符  \\t 制表符、 \\n 换行符……\n        System.out.println(\"Hello\\t World!\");\n    }\n}\n\n```\n\n- 布尔值扩展：\n  - less is more   代码要精简易读；\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n\n        //布尔值扩展\n        boolean flag = true;\n        if (flat == true){};\n        if (flag){};\n        //less is more   代码要精简易读；\n    }\n}\n\n```\n\n","slug":"Java基础语法01","published":1,"updated":"2022-08-25T15:04:09.409Z","layout":"post","link":"","_id":"cl796higo0000gwrwg1sx3b39","content":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。</li>\n<li><strong>注释不会被执行</strong>，只是给我们写代码的人看的</li>\n<li><strong><em>书写注释是一个非常好的编程习惯</em></strong></li>\n</ul>\n<h3 id=\"Java中的注释\"><a href=\"#Java中的注释\" class=\"headerlink\" title=\"Java中的注释\"></a>Java中的注释</h3><ul>\n<li>单行注释 //</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//我是单行注释</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<ul>\n<li>多行注释/**/</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/*我是多行注释\n        我是多行注释\n        */</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<ul>\n<li>文档注释/*<em> </em>/</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/*\n        *我是文档注释\n        我是文档注释\n        */</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h2 id=\"Java标识符\"><a href=\"#Java标识符\" class=\"headerlink\" title=\"Java标识符\"></a>Java标识符</h2><p><strong>关键字</strong></p>\n<ul>\n<li><strong><em>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</em></strong></li>\n</ul>\n<p><strong>标识符注意点</strong></p>\n<ul>\n<li>所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始</li>\n<li>首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合</li>\n<li><strong><em>不能使用关键字作为变量名或方法名</em></strong></li>\n<li>标识符是<strong>大小写敏感</strong>的</li>\n<li><strong>不建议使用中文或者拼音作为变量名或方法名</strong></li>\n</ul>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><ul>\n<li>强类型语言<ul>\n<li>要求变量的使用<strong>必须要严格符合规定</strong>，所有变量都必须先定义后才能使用</li>\n</ul>\n</li>\n<li>Java数据类型分为两大类<ul>\n<li>基本类型(primitive type)</li>\n<li>引用类型(reference type)</li>\n</ul>\n</li>\n</ul>\n<p><strong>基本类型</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">大小/位</th>\n<th style=\"text-align:center\">可表示数据范围</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><code>byte</code>（字节型）</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><code>short</code>（短整型）</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><code>int</code>（整型）</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">-2147483648~2147483647</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><code>long</code>（长整型）</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">-9223372036854775808~9223372036854775807</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><code>float</code>（单精度）</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">-3.4E38~3.4E38</td>\n<td style=\"text-align:center\">0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><code>double</code>（双精度）</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">-1.7E308~1.7E308</td>\n<td style=\"text-align:center\">0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><code>char</code>（字符）</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">0~255</td>\n<td style=\"text-align:center\">‘\\u0000’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><code>boolean</code>（布尔）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">true或false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p><strong>引用类型</strong></p>\n<p>引用数据类型非常多，大致包括：<br>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p>\n<p>如<strong>String为引用类型</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)</span>\n        <span class=\"token keyword\">int</span> num01 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> num02 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">short</span> num03 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> num04 <span class=\"token operator\">=</span> 40l<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//浮点型：float(4字节)、double(8字节)</span>\n        <span class=\"token keyword\">float</span> num05 <span class=\"token operator\">=</span> <span class=\"token number\">50.66f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> num06 <span class=\"token operator\">=</span> <span class=\"token number\">66.66</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//字符：char(2字节)</span>\n        <span class=\"token keyword\">char</span> usr <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//布尔值：boolean</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>小科普</strong></p>\n<ul>\n<li><strong>位(bit)</strong>:是计算机内部数据存储的最小单位，10100101是一个八位二进制数</li>\n<li><strong>字节(Byte)</strong>: 是计算机中数据处理的基本单位，习惯上用大写的B来表示</li>\n<li>1B(Byte,字节) = 8bit(位)</li>\n<li><strong>字符</strong>:是指计算机中使用的字母、数字、字和符号<ul>\n<li>1bit = 1位;</li>\n<li>1Byte = 1B = 8b;</li>\n<li>1024B = 1KB</li>\n<li>1024KB = 1M</li>\n<li>1024M = 1G</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java数据类型拓展\"><a href=\"#Java数据类型拓展\" class=\"headerlink\" title=\"Java数据类型拓展\"></a>Java数据类型拓展</h3><ul>\n<li>整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>BigDecimal<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0b10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">010</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>浮点数扩展 <ul>\n<li>银行业务表示，</li>\n<li>常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，—–&gt;接近但不等于！最好避免完全使用浮点数进行比较！！！</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//浮点数扩展 银行业务表示，</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通常使用数学工具类BigDecimal，来表示银行业务。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于</span>\n        <span class=\"token comment\" spellcheck=\"true\">//double</span>\n        <span class=\"token comment\" spellcheck=\"true\">//最好避免完全使用浮点数进行比较</span>\n        <span class=\"token comment\" spellcheck=\"true\">//最好避免完全使用浮点数进行比较</span>\n        <span class=\"token comment\" spellcheck=\"true\">//最好避免完全使用浮点数进行比较</span>\n        <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">12345667486234f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> f2 <span class=\"token operator\">=</span> f1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1 <span class=\"token operator\">==</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>字符扩展<ul>\n<li>System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码</li>\n<li>所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；</li>\n<li>转义字符：  \\t 制表符、 \\n 换行符……</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>BigDecimal<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//字符扩展</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c1 <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c2 <span class=\"token operator\">=</span> <span class=\"token string\">'荣'</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//将char型的c1 强制转换为int型的Unicode编码</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//将char型的c2 强制转换为int型的Unicode编码</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c3 <span class=\"token operator\">=</span> <span class=\"token string\">'\\u0066'</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">//将Unicode编码0066转义为char型数据c3</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//转义字符  \\t 制表符、 \\n 换行符……</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\\t World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul>\n<li>布尔值扩展：<ul>\n<li>less is more   代码要精简易读；</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span>BigDecimal<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//布尔值扩展</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flat <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//less is more   代码要精简易读；</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。</li>\n<li><strong>注释不会被执行</strong>，只是给我们写代码的人看的</li>\n<li><strong><em>书写注释是一个非常好的编程习惯</em></strong></li>\n</ul>\n<h3 id=\"Java中的注释\"><a href=\"#Java中的注释\" class=\"headerlink\" title=\"Java中的注释\"></a>Java中的注释</h3><ul>\n<li>单行注释 //</li>\n</ul>\n<pre><code class=\"java\">public class HelloWorld {\n    public static void main(String[] args) {\n        //我是单行注释\n        System.out.println(&quot;HelloWorld!&quot;);\n    }\n}\n</code></pre>\n<hr>\n<ul>\n<li>多行注释/**/</li>\n</ul>\n<pre><code class=\"java\">public class HelloWorld {\n    public static void main(String[] args) {\n        /*我是多行注释\n        我是多行注释\n        */\n        System.out.println(&quot;HelloWorld!&quot;);\n    }\n}\n</code></pre>\n<hr>\n<ul>\n<li>文档注释/*<em> </em>/</li>\n</ul>\n<pre><code class=\"java\">public class HelloWorld {\n    public static void main(String[] args) {\n        /*\n        *我是文档注释\n        我是文档注释\n        */\n        System.out.println(&quot;HelloWorld!&quot;);\n    }\n}\n</code></pre>\n<hr>\n<h2 id=\"Java标识符\"><a href=\"#Java标识符\" class=\"headerlink\" title=\"Java标识符\"></a>Java标识符</h2><p><strong>关键字</strong></p>\n<ul>\n<li><strong><em>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</em></strong></li>\n</ul>\n<p><strong>标识符注意点</strong></p>\n<ul>\n<li>所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始</li>\n<li>首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合</li>\n<li><strong><em>不能使用关键字作为变量名或方法名</em></strong></li>\n<li>标识符是<strong>大小写敏感</strong>的</li>\n<li><strong>不建议使用中文或者拼音作为变量名或方法名</strong></li>\n</ul>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><ul>\n<li>强类型语言<ul>\n<li>要求变量的使用<strong>必须要严格符合规定</strong>，所有变量都必须先定义后才能使用</li>\n</ul>\n</li>\n<li>Java数据类型分为两大类<ul>\n<li>基本类型(primitive type)</li>\n<li>引用类型(reference type)</li>\n</ul>\n</li>\n</ul>\n<p><strong>基本类型</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">大小/位</th>\n<th style=\"text-align:center\">可表示数据范围</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><code>byte</code>（字节型）</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"><code>short</code>（短整型）</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"><code>int</code>（整型）</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">-2147483648~2147483647</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"><code>long</code>（长整型）</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">-9223372036854775808~9223372036854775807</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"><code>float</code>（单精度）</td>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:center\">-3.4E38~3.4E38</td>\n<td style=\"text-align:center\">0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"><code>double</code>（双精度）</td>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">-1.7E308~1.7E308</td>\n<td style=\"text-align:center\">0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"><code>char</code>（字符）</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">0~255</td>\n<td style=\"text-align:center\">‘\\u0000’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"><code>boolean</code>（布尔）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">true或false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p><strong>引用类型</strong></p>\n<p>引用数据类型非常多，大致包括：<br>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p>\n<p>如<strong>String为引用类型</strong></p>\n<pre><code class=\"java\">public class Demo01 {\n    public static void main(String[] args) {\n        //整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)\n        int num01 = 10;\n        byte num02 = 20;\n        short num03 = 30;\n        long num04 = 40l;\n        //浮点型：float(4字节)、double(8字节)\n        float num05 = 50.66f;\n        double num06 = 66.66;\n        //字符：char(2字节)\n        char usr = &#39;x&#39;;\n        //布尔值：boolean\n        boolean flag = true;\n    }\n}\n</code></pre>\n<p><strong>小科普</strong></p>\n<ul>\n<li><strong>位(bit)</strong>:是计算机内部数据存储的最小单位，10100101是一个八位二进制数</li>\n<li><strong>字节(Byte)</strong>: 是计算机中数据处理的基本单位，习惯上用大写的B来表示</li>\n<li>1B(Byte,字节) = 8bit(位)</li>\n<li><strong>字符</strong>:是指计算机中使用的字母、数字、字和符号<ul>\n<li>1bit = 1位;</li>\n<li>1Byte = 1B = 8b;</li>\n<li>1024B = 1KB</li>\n<li>1024KB = 1M</li>\n<li>1024M = 1G</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java数据类型拓展\"><a href=\"#Java数据类型拓展\" class=\"headerlink\" title=\"Java数据类型拓展\"></a>Java数据类型拓展</h3><ul>\n<li>整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</li>\n</ul>\n<pre><code class=\"java\">import java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n        int b = 0b10;\n        int i = 10;\n        int i1 = 010;\n        int i2 = 0x10;\n        System.out.println(b);\n        System.out.println(i);\n        System.out.println(i1);\n        System.out.println(i2);\n\n        System.out.println(&quot;===================================&quot;);\n        }\n}\n</code></pre>\n<ul>\n<li>浮点数扩展 <ul>\n<li>银行业务表示，</li>\n<li>常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，—–&gt;接近但不等于！最好避免完全使用浮点数进行比较！！！</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<pre><code class=\"java\">public class Demo02 {\n    public static void main(String[] args) {\n        //浮点数扩展 银行业务表示，\n        //通常使用数学工具类BigDecimal，来表示银行业务。\n        System.out.println(&quot;===================================&quot;);\n        //float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，-----&gt;接近但不等于\n        //double\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        float f = 0.1f;\n        double d = 1.0/10;\n        System.out.println(f == d);\n        System.out.println(&quot;===================================&quot;);\n        float f1 = 12345667486234f;\n        float f2 = f1 + 1;\n        System.out.println(f1 == f2);\n        System.out.println(&quot;===================================&quot;);\n    }\n}\n</code></pre>\n<ul>\n<li>字符扩展<ul>\n<li>System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码</li>\n<li>所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；</li>\n<li>转义字符：  \\t 制表符、 \\n 换行符……</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<pre><code class=\"java\">import java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //字符扩展\n        System.out.println(&quot;===================================&quot;);\n        char c1 = &#39;a&#39;;\n        char c2 = &#39;荣&#39;;\n        System.out.println(c1);\n        System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n\n        System.out.println(c2);\n        System.out.println((int)c2);        //将char型的c2 强制转换为int型的Unicode编码\n        System.out.println(&quot;===================================&quot;);\n        char c3 = &#39;\\u0066&#39;;                 //将Unicode编码0066转义为char型数据c3\n        System.out.println(c3);\n        //所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n\n        //转义字符  \\t 制表符、 \\n 换行符……\n        System.out.println(&quot;Hello\\t World!&quot;);\n    }\n}\n\n</code></pre>\n<ul>\n<li>布尔值扩展：<ul>\n<li>less is more   代码要精简易读；</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">import java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n\n        //布尔值扩展\n        boolean flag = true;\n        if (flat == true){};\n        if (flag){};\n        //less is more   代码要精简易读；\n    }\n}\n\n</code></pre>\n"},{"title":"Java基础小结","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqshib2j21kw0w0apc.jpg"],"date":"2022-08-25T14:42:17.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 面向过程& 面向对象\n\n### 面向过程思想—>自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想—>自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象 —>将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**\n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n\n \n \n \n```\n\n------\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n\n \n \n \n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n------\n\n- this关键字\n\n## 类与对象的关系\n\n- 类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- 对象是抽象概念的具体实例\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n","source":"_posts/Java基础小结.md","raw":"---\ntitle: Java基础小结\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqshib2j21kw0w0apc.jpg'\ndate: 2022-08-25 22:42:17\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java基础语法\nkeywords:\ndescription:\n---\n\n## 面向过程& 面向对象\n\n### 面向过程思想—>自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想—>自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象 —>将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**\n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n\n \n \n \n```\n\n------\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n\n \n \n \n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n------\n\n- this关键字\n\n## 类与对象的关系\n\n- 类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- 对象是抽象概念的具体实例\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n","slug":"Java基础小结","published":1,"updated":"2022-08-25T15:04:26.063Z","layout":"post","link":"","_id":"cl796higu0002gwrwzdghm2xs","content":"<h2 id=\"面向过程-amp-面向对象\"><a href=\"#面向过程-amp-面向对象\" class=\"headerlink\" title=\"面向过程&amp; 面向对象\"></a>面向过程&amp; 面向对象</h2><h3 id=\"面向过程思想—-gt-自上而下\"><a href=\"#面向过程思想—-gt-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-gt-自下而上\"><a href=\"#面向对象思想—-gt-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象 —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<pre><code>package com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n\n\n\n\n</code></pre><hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<pre><code>package com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = &quot;xiheya&quot;;\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n\n\n\n\n</code></pre><p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。<ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li>对象是抽象概念的具体实例<ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向过程-amp-面向对象\"><a href=\"#面向过程-amp-面向对象\" class=\"headerlink\" title=\"面向过程&amp; 面向对象\"></a>面向过程&amp; 面向对象</h2><h3 id=\"面向过程思想—-gt-自上而下\"><a href=\"#面向过程思想—-gt-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-gt-自下而上\"><a href=\"#面向对象思想—-gt-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象 —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<pre><code>package com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n\n\n\n\n</code></pre><hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<pre><code>package com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = &quot;xiheya&quot;;\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n\n\n\n\n</code></pre><p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。<ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li>对象是抽象概念的具体实例<ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n"},{"title":"Hexo-Theme-Sakura","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","authorAbout":null,"authorDesc":null,"date":"2022-08-22T14:16:01.000Z","comments":1,"keywords":"Sakura","description":"hexo-sakura主题使用教程","photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqp0vyrj21kw0w0h0v.jpg"],"_content":"hexo-theme-sakura主题 [English document](https://github.com/honjun/hexo-theme-sakura/blob/master/README.md)\n\n基于WordPress主题[Sakura](https://github.com/mashirozx/Sakura/)修改成Hexo的主题。\n\n[demo预览](https://sakura.hojun.cn)\n\n正在开发中......\n\n![](https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg)\n\n\n\n## 主题特性\n\n - 首页大屏视频\n - 首页随机封面\n - 图片懒加载\n - valine评论\n - fancy-box相册\n - pjax支持，音乐不间断\n - aplayer音乐播放器\n - 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）\n\n\n## 赞赏作者\n如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！\n\n## 未完善的使用教程\n\n那啥？老实说我目前也不是很有条理233333333~\n\n## 1、主题下载安装\n\n[hexo-theme-sakura](https://github.com/honjun/hexo-theme-sakura)建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。\n\n下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行`npm i`安装依赖。\n\n## 2、主题配置\n\n### 博客根目录下的_config配置\n\n站点\n```yml\n# Site\ntitle: 你的站点名\nsubtitle:\ndescription: 站点简介\nkeywords:\nauthor: 作者名\nlanguage: zh-cn\ntimezone:\n```\n\n部署\n```yml\ndeploy:\n  type: git\n  repo: \n    github: 你的github仓库地址\n    # coding: 你的coding仓库地址\n  branch: master\n```\n\n备份 （使用hexo b发布备份到远程仓库）\n```yml\nbackup:\n  type: git\n  message: backup my blog of https://honjun.github.io/\n  repository:\n    # 你的github仓库地址,备份分支名  （建议新建backup分支）\n    github: https://github.com/honjun/honjun.github.io.git,backup\n    # coding: https://git.coding.net/hojun/hojun.git,backup\n\n```\n\n### 主题目录下的_config配置\n\n其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分\n```yml\n# site name\n# 站点名 【改】\nprefixName: さくら荘その\nsiteName: hojun\n\n# favicon and site master avatar\n# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】\nfavicon: /images/favicon.ico\navatar: /img/custom/avatar.jpg\n\n# 站点url 【改】\nurl: https://sakura.hojun.cn\n\n# 站点介绍（或者说是个人签名）【改】\ndescription: Live your life with passion! With some drive!\n\n# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg\ncdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6\n\n# 开启pjax 【选】\npjax: 1\n\n# 站点首页的公告信息 【改】\nnotice: hexo-Sakura主题已经开源，目前正在开发中...\n\n# 懒加载的加载中图片 【选】\nlazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg\n\n# 站点菜单配置 【选】\nmenus:\n  首页: { path: /, fa: fa-fort-awesome faa-shake }\n  归档: { path: /archives, fa: fa-archive faa-shake, submenus: { \n    技术: {path: /categories/技术/, fa: fa-code }, \n    生活: {path: /categories/生活/, fa: fa-file-text-o }, \n    资源: {path: /categories/资源/, fa: fa-cloud-download }, \n    随想: {path: /categories/随想/, fa: fa-commenting-o },\n    转载: {path: /categories/转载/, fa: fa-book }\n  } }\n  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { \n    书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, \n    番组: {path: /bangumi/, fa: fa-film faa-vertical }, \n    歌单: {path: /music/, fa: fa-headphones },\n    图集: {path: /tags/图集/, fa: fa-photo }\n  } }\n  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }\n  友人帐: { path: /links/, fa: fa-link faa-shake }\n  赞赏: { path: /donate/, fa: fa-heart faa-pulse }\n  关于: { path: /, fa: fa-leaf faa-wrench , submenus: { \n    我？: {path: /about/, fa: fa-meetup}, \n    主题: {path: /theme-sakura/, fa: iconfont icon-sakura },\n    Lab: {path: /lab/, fa: fa-cogs },\n  } }\n  客户端: { path: /client/, fa: fa-android faa-vertical }\n  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }\n\n# Home page sort type: -1: newer first，1: older first. 【非】\nhomePageSortType: -1\n\n# Home page article shown number) 【非】\nhomeArticleShown: 10\n\n# 背景图片 【选】\nbgn: 8\n\n# startdash面板 url, title, desc img 【改】\nstartdash: \n  - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}\n  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}\n  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}\n\n\n# your site build time or founded date\n# 你的站点建立日期 【改】\nsiteBuildingTime: 07/17/2018\n\n\n# 社交按钮(social)  url, img PC端配置 【改】\nsocial:\n  github: {url: http://github.com/honjun, img: /img/social/github.png}\n  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}\n  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}\n  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}\n  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}\n  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}\n\n# 社交按钮(msocial)  url, img 移动端配置 【改】\nmsocial:\n  github: {url: http://github.com/honjun, fa: fa-github, color: 333}\n  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}\n  qq: {url: https://wpa.qq.com/msgrd?v=3&uin=954655431&site=qq&menu=yes, fa: fa-qq, color: 25c6fe}\n\n# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】\ndonate:\n  alipay: /img/custom/donate/AliPayQR.jpg\n  wechat: /img/custom/donate/WeChanQR.jpg\n  wechatSQ: /img/custom/donate/WeChanSQ.jpg\n\n# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】\nmovies:\n  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2\n  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用\n  name: Unbroken.mp4\n\n# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】\naplayer: \n  id: 2660651585\n  server: netease\n  type: playlist\n  fixed: true\n  mini: false\n  autoplay: false\n  loop: all\n  order: random\n  preload: auto\n  volume: 0.7\n  mutex: true\n\n# Valine评论配置【改】\nvaline: true\nv_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz\nv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ\n```\n\n## 分类页和标签页配置\n\n### 分类页\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg)\n### 标签页\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg)\n\n配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。\n```yml\n#category\n# 按分类名创建\n技术:\n    #中文标题\n    zh: 野生技术协会 \n    # 英文标题\n    en: Geek – Only for Love\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg\n生活:\n    zh: 生活\n    en: live\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg\n\n#tag\n# 标签名即是标题\n悦读:\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg\n```\n\n## 单页面封面配置\n\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg)\n如留言板页面页面，位于source下的comment下，打开index.md如下：\n```md\n---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\n# 在这里配置单页面头部图片，自定义替换哦~\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg\n---\n```\n\n\n## 单页面配置\n\n### 番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg)\n\n```yml\n---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  # 番组图片\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n  # 番组名\n    title: 朝花夕誓——于离别之朝束起约定之花\n  # 追番状态 （追番ing/已追完）\n    status: 已追完\n  # 追番进度\n    progress: 100\n  # 番剧日文名称\n    jp: さよならの朝に約束の花をかざろう\n  # 放送时间\n    time: 放送时间: 2018-02-24 SUN.\n  # 番剧介绍\n    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n    title: 朝花夕誓——于离别之朝束起约定之花\n    status: 已追完\n    progress: 50\n    jp: さよならの朝に約束の花をかざろう\n    time: 放送时间: 2018-02-24 SUN.\n    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n---\n```\n\n### 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg)\n\n```yml\n---\nlayout: links\ntitle: links\n# 创建日期，可以改下\ndate: 2018-12-19 23:11:06 \n# 图片上的标题，自定义修改\nkeywords: 友人帐 \ndescription: \n# true/false 开启/关闭评论\ncomments: true \n# 页面头部图片，自定义修改\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg \n# 友链配置\nlinks: \n  # 类型分组\n  - group: 个人项目\n    # 类型简介\n    desc: 充分说明这家伙是条咸鱼 < (￣︶￣)>\n    items:\n    # 友链链接\n    - url: https://shino.cc/fgvf\n    # 友链头像\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n    # 友链站点名\n      name: Google\n    # 友链介绍  下面雷同\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n  # 类型分组...\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n---\n```\n\n## 写文章配置\n\n主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：\n```md\n{% bili video_id [page] %}\n```\n详细使用教程详见[hexo-tag-bili](https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md)。\n\nhexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：\n```md\n{% fb_img src [caption] %}\n```\n详细使用教程详见[hexo-tag-fancybox_img](https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md)\n\n## 还有啥，一时想不起来......\n\nTo be continued...","source":"_posts/Hexo-Theme-Sakura.md","raw":"---\ntitle: Hexo-Theme-Sakura\nauthor: Rookie_l\navatar: https://icu007.work/wp-content/uploads/2022/08/head.jpeg\nauthorLink: https://hiheya.github.io/\nauthorAbout:  \nauthorDesc:  \ncategories: 技术\ndate: 2022-8-22 22:16:01\ncomments: true\ntags: \n - web\n - 悦读\nkeywords: Sakura\ndescription: hexo-sakura主题使用教程\nphotos: https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqp0vyrj21kw0w0h0v.jpg\n---\nhexo-theme-sakura主题 [English document](https://github.com/honjun/hexo-theme-sakura/blob/master/README.md)\n\n基于WordPress主题[Sakura](https://github.com/mashirozx/Sakura/)修改成Hexo的主题。\n\n[demo预览](https://sakura.hojun.cn)\n\n正在开发中......\n\n![](https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg)\n\n\n\n## 主题特性\n\n - 首页大屏视频\n - 首页随机封面\n - 图片懒加载\n - valine评论\n - fancy-box相册\n - pjax支持，音乐不间断\n - aplayer音乐播放器\n - 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）\n\n\n## 赞赏作者\n如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！\n\n## 未完善的使用教程\n\n那啥？老实说我目前也不是很有条理233333333~\n\n## 1、主题下载安装\n\n[hexo-theme-sakura](https://github.com/honjun/hexo-theme-sakura)建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。\n\n下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行`npm i`安装依赖。\n\n## 2、主题配置\n\n### 博客根目录下的_config配置\n\n站点\n```yml\n# Site\ntitle: 你的站点名\nsubtitle:\ndescription: 站点简介\nkeywords:\nauthor: 作者名\nlanguage: zh-cn\ntimezone:\n```\n\n部署\n```yml\ndeploy:\n  type: git\n  repo: \n    github: 你的github仓库地址\n    # coding: 你的coding仓库地址\n  branch: master\n```\n\n备份 （使用hexo b发布备份到远程仓库）\n```yml\nbackup:\n  type: git\n  message: backup my blog of https://honjun.github.io/\n  repository:\n    # 你的github仓库地址,备份分支名  （建议新建backup分支）\n    github: https://github.com/honjun/honjun.github.io.git,backup\n    # coding: https://git.coding.net/hojun/hojun.git,backup\n\n```\n\n### 主题目录下的_config配置\n\n其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分\n```yml\n# site name\n# 站点名 【改】\nprefixName: さくら荘その\nsiteName: hojun\n\n# favicon and site master avatar\n# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】\nfavicon: /images/favicon.ico\navatar: /img/custom/avatar.jpg\n\n# 站点url 【改】\nurl: https://sakura.hojun.cn\n\n# 站点介绍（或者说是个人签名）【改】\ndescription: Live your life with passion! With some drive!\n\n# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg\ncdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6\n\n# 开启pjax 【选】\npjax: 1\n\n# 站点首页的公告信息 【改】\nnotice: hexo-Sakura主题已经开源，目前正在开发中...\n\n# 懒加载的加载中图片 【选】\nlazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg\n\n# 站点菜单配置 【选】\nmenus:\n  首页: { path: /, fa: fa-fort-awesome faa-shake }\n  归档: { path: /archives, fa: fa-archive faa-shake, submenus: { \n    技术: {path: /categories/技术/, fa: fa-code }, \n    生活: {path: /categories/生活/, fa: fa-file-text-o }, \n    资源: {path: /categories/资源/, fa: fa-cloud-download }, \n    随想: {path: /categories/随想/, fa: fa-commenting-o },\n    转载: {path: /categories/转载/, fa: fa-book }\n  } }\n  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { \n    书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, \n    番组: {path: /bangumi/, fa: fa-film faa-vertical }, \n    歌单: {path: /music/, fa: fa-headphones },\n    图集: {path: /tags/图集/, fa: fa-photo }\n  } }\n  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }\n  友人帐: { path: /links/, fa: fa-link faa-shake }\n  赞赏: { path: /donate/, fa: fa-heart faa-pulse }\n  关于: { path: /, fa: fa-leaf faa-wrench , submenus: { \n    我？: {path: /about/, fa: fa-meetup}, \n    主题: {path: /theme-sakura/, fa: iconfont icon-sakura },\n    Lab: {path: /lab/, fa: fa-cogs },\n  } }\n  客户端: { path: /client/, fa: fa-android faa-vertical }\n  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }\n\n# Home page sort type: -1: newer first，1: older first. 【非】\nhomePageSortType: -1\n\n# Home page article shown number) 【非】\nhomeArticleShown: 10\n\n# 背景图片 【选】\nbgn: 8\n\n# startdash面板 url, title, desc img 【改】\nstartdash: \n  - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}\n  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}\n  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}\n\n\n# your site build time or founded date\n# 你的站点建立日期 【改】\nsiteBuildingTime: 07/17/2018\n\n\n# 社交按钮(social)  url, img PC端配置 【改】\nsocial:\n  github: {url: http://github.com/honjun, img: /img/social/github.png}\n  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}\n  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}\n  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}\n  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}\n  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}\n\n# 社交按钮(msocial)  url, img 移动端配置 【改】\nmsocial:\n  github: {url: http://github.com/honjun, fa: fa-github, color: 333}\n  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}\n  qq: {url: https://wpa.qq.com/msgrd?v=3&uin=954655431&site=qq&menu=yes, fa: fa-qq, color: 25c6fe}\n\n# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】\ndonate:\n  alipay: /img/custom/donate/AliPayQR.jpg\n  wechat: /img/custom/donate/WeChanQR.jpg\n  wechatSQ: /img/custom/donate/WeChanSQ.jpg\n\n# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】\nmovies:\n  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2\n  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用\n  name: Unbroken.mp4\n\n# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】\naplayer: \n  id: 2660651585\n  server: netease\n  type: playlist\n  fixed: true\n  mini: false\n  autoplay: false\n  loop: all\n  order: random\n  preload: auto\n  volume: 0.7\n  mutex: true\n\n# Valine评论配置【改】\nvaline: true\nv_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz\nv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ\n```\n\n## 分类页和标签页配置\n\n### 分类页\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg)\n### 标签页\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg)\n\n配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。\n```yml\n#category\n# 按分类名创建\n技术:\n    #中文标题\n    zh: 野生技术协会 \n    # 英文标题\n    en: Geek – Only for Love\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg\n生活:\n    zh: 生活\n    en: live\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg\n\n#tag\n# 标签名即是标题\n悦读:\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg\n```\n\n## 单页面封面配置\n\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg)\n如留言板页面页面，位于source下的comment下，打开index.md如下：\n```md\n---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\n# 在这里配置单页面头部图片，自定义替换哦~\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg\n---\n```\n\n\n## 单页面配置\n\n### 番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg)\n\n```yml\n---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  # 番组图片\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n  # 番组名\n    title: 朝花夕誓——于离别之朝束起约定之花\n  # 追番状态 （追番ing/已追完）\n    status: 已追完\n  # 追番进度\n    progress: 100\n  # 番剧日文名称\n    jp: さよならの朝に約束の花をかざろう\n  # 放送时间\n    time: 放送时间: 2018-02-24 SUN.\n  # 番剧介绍\n    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n    title: 朝花夕誓——于离别之朝束起约定之花\n    status: 已追完\n    progress: 50\n    jp: さよならの朝に約束の花をかざろう\n    time: 放送时间: 2018-02-24 SUN.\n    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n---\n```\n\n### 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg)\n\n```yml\n---\nlayout: links\ntitle: links\n# 创建日期，可以改下\ndate: 2018-12-19 23:11:06 \n# 图片上的标题，自定义修改\nkeywords: 友人帐 \ndescription: \n# true/false 开启/关闭评论\ncomments: true \n# 页面头部图片，自定义修改\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg \n# 友链配置\nlinks: \n  # 类型分组\n  - group: 个人项目\n    # 类型简介\n    desc: 充分说明这家伙是条咸鱼 < (￣︶￣)>\n    items:\n    # 友链链接\n    - url: https://shino.cc/fgvf\n    # 友链头像\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n    # 友链站点名\n      name: Google\n    # 友链介绍  下面雷同\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n  # 类型分组...\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n---\n```\n\n## 写文章配置\n\n主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：\n```md\n{% bili video_id [page] %}\n```\n详细使用教程详见[hexo-tag-bili](https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md)。\n\nhexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：\n```md\n{% fb_img src [caption] %}\n```\n详细使用教程详见[hexo-tag-fancybox_img](https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md)\n\n## 还有啥，一时想不起来......\n\nTo be continued...","slug":"Hexo-Theme-Sakura","published":1,"updated":"2022-08-23T15:15:15.777Z","layout":"post","link":"","_id":"cl796higx0006gwrwann98lnp","content":"<p>hexo-theme-sakura主题 <a href=\"https://github.com/honjun/hexo-theme-sakura/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">English document</a></p>\n<p>基于WordPress主题<a href=\"https://github.com/mashirozx/Sakura/\" target=\"_blank\" rel=\"noopener\">Sakura</a>修改成Hexo的主题。</p>\n<p><a href=\"https://sakura.hojun.cn\" target=\"_blank\" rel=\"noopener\">demo预览</a></p>\n<p>正在开发中……</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg\" alt></p>\n<h2 id=\"主题特性\"><a href=\"#主题特性\" class=\"headerlink\" title=\"主题特性\"></a>主题特性</h2><ul>\n<li>首页大屏视频</li>\n<li>首页随机封面</li>\n<li>图片懒加载</li>\n<li>valine评论</li>\n<li>fancy-box相册</li>\n<li>pjax支持，音乐不间断</li>\n<li>aplayer音乐播放器</li>\n<li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li>\n</ul>\n<h2 id=\"赞赏作者\"><a href=\"#赞赏作者\" class=\"headerlink\" title=\"赞赏作者\"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p>\n<h2 id=\"未完善的使用教程\"><a href=\"#未完善的使用教程\" class=\"headerlink\" title=\"未完善的使用教程\"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p>\n<h2 id=\"1、主题下载安装\"><a href=\"#1、主题下载安装\" class=\"headerlink\" title=\"1、主题下载安装\"></a>1、主题下载安装</h2><p><a href=\"https://github.com/honjun/hexo-theme-sakura\" target=\"_blank\" rel=\"noopener\">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p>\n<p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p>\n<h2 id=\"2、主题配置\"><a href=\"#2、主题配置\" class=\"headerlink\" title=\"2、主题配置\"></a>2、主题配置</h2><h3 id=\"博客根目录下的-config配置\"><a href=\"#博客根目录下的-config配置\" class=\"headerlink\" title=\"博客根目录下的_config配置\"></a>博客根目录下的_config配置</h3><p>站点</p>\n<pre class=\" language-yml\"><code class=\"language-yml\"># Site\ntitle: 你的站点名\nsubtitle:\ndescription: 站点简介\nkeywords:\nauthor: 作者名\nlanguage: zh-cn\ntimezone:\n</code></pre>\n<p>部署</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repo: \n    github: 你的github仓库地址\n    # coding: 你的coding仓库地址\n  branch: master\n</code></pre>\n<p>备份 （使用hexo b发布备份到远程仓库）</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">backup:\n  type: git\n  message: backup my blog of https://honjun.github.io/\n  repository:\n    # 你的github仓库地址,备份分支名  （建议新建backup分支）\n    github: https://github.com/honjun/honjun.github.io.git,backup\n    # coding: https://git.coding.net/hojun/hojun.git,backup\n\n</code></pre>\n<h3 id=\"主题目录下的-config配置\"><a href=\"#主题目录下的-config配置\" class=\"headerlink\" title=\"主题目录下的_config配置\"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p>\n<pre class=\" language-yml\"><code class=\"language-yml\"># site name\n# 站点名 【改】\nprefixName: さくら荘その\nsiteName: hojun\n\n# favicon and site master avatar\n# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】\nfavicon: /images/favicon.ico\navatar: /img/custom/avatar.jpg\n\n# 站点url 【改】\nurl: https://sakura.hojun.cn\n\n# 站点介绍（或者说是个人签名）【改】\ndescription: Live your life with passion! With some drive!\n\n# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg\ncdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6\n\n# 开启pjax 【选】\npjax: 1\n\n# 站点首页的公告信息 【改】\nnotice: hexo-Sakura主题已经开源，目前正在开发中...\n\n# 懒加载的加载中图片 【选】\nlazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg\n\n# 站点菜单配置 【选】\nmenus:\n  首页: { path: /, fa: fa-fort-awesome faa-shake }\n  归档: { path: /archives, fa: fa-archive faa-shake, submenus: { \n    技术: {path: /categories/技术/, fa: fa-code }, \n    生活: {path: /categories/生活/, fa: fa-file-text-o }, \n    资源: {path: /categories/资源/, fa: fa-cloud-download }, \n    随想: {path: /categories/随想/, fa: fa-commenting-o },\n    转载: {path: /categories/转载/, fa: fa-book }\n  } }\n  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { \n    书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, \n    番组: {path: /bangumi/, fa: fa-film faa-vertical }, \n    歌单: {path: /music/, fa: fa-headphones },\n    图集: {path: /tags/图集/, fa: fa-photo }\n  } }\n  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }\n  友人帐: { path: /links/, fa: fa-link faa-shake }\n  赞赏: { path: /donate/, fa: fa-heart faa-pulse }\n  关于: { path: /, fa: fa-leaf faa-wrench , submenus: { \n    我？: {path: /about/, fa: fa-meetup}, \n    主题: {path: /theme-sakura/, fa: iconfont icon-sakura },\n    Lab: {path: /lab/, fa: fa-cogs },\n  } }\n  客户端: { path: /client/, fa: fa-android faa-vertical }\n  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }\n\n# Home page sort type: -1: newer first，1: older first. 【非】\nhomePageSortType: -1\n\n# Home page article shown number) 【非】\nhomeArticleShown: 10\n\n# 背景图片 【选】\nbgn: 8\n\n# startdash面板 url, title, desc img 【改】\nstartdash: \n  - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}\n  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}\n  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}\n\n\n# your site build time or founded date\n# 你的站点建立日期 【改】\nsiteBuildingTime: 07/17/2018\n\n\n# 社交按钮(social)  url, img PC端配置 【改】\nsocial:\n  github: {url: http://github.com/honjun, img: /img/social/github.png}\n  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}\n  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}\n  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}\n  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}\n  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}\n\n# 社交按钮(msocial)  url, img 移动端配置 【改】\nmsocial:\n  github: {url: http://github.com/honjun, fa: fa-github, color: 333}\n  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}\n  qq: {url: https://wpa.qq.com/msgrd?v=3&uin=954655431&site=qq&menu=yes, fa: fa-qq, color: 25c6fe}\n\n# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】\ndonate:\n  alipay: /img/custom/donate/AliPayQR.jpg\n  wechat: /img/custom/donate/WeChanQR.jpg\n  wechatSQ: /img/custom/donate/WeChanSQ.jpg\n\n# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】\nmovies:\n  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2\n  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用\n  name: Unbroken.mp4\n\n# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】\naplayer: \n  id: 2660651585\n  server: netease\n  type: playlist\n  fixed: true\n  mini: false\n  autoplay: false\n  loop: all\n  order: random\n  preload: auto\n  volume: 0.7\n  mutex: true\n\n# Valine评论配置【改】\nvaline: true\nv_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz\nv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ\n</code></pre>\n<h2 id=\"分类页和标签页配置\"><a href=\"#分类页和标签页配置\" class=\"headerlink\" title=\"分类页和标签页配置\"></a>分类页和标签页配置</h2><h3 id=\"分类页\"><a href=\"#分类页\" class=\"headerlink\" title=\"分类页\"></a>分类页</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg\" alt></p>\n<h3 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg\" alt></p>\n<p>配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">#category\n# 按分类名创建\n技术:\n    #中文标题\n    zh: 野生技术协会 \n    # 英文标题\n    en: Geek – Only for Love\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg\n生活:\n    zh: 生活\n    en: live\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg\n\n#tag\n# 标签名即是标题\n悦读:\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg\n</code></pre>\n<h2 id=\"单页面封面配置\"><a href=\"#单页面封面配置\" class=\"headerlink\" title=\"单页面封面配置\"></a>单页面封面配置</h2><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg\" alt><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p>\n<pre class=\" language-md\"><code class=\"language-md\">---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\n# 在这里配置单页面头部图片，自定义替换哦~\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg\n---\n</code></pre>\n<h2 id=\"单页面配置\"><a href=\"#单页面配置\" class=\"headerlink\" title=\"单页面配置\"></a>单页面配置</h2><h3 id=\"番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg\" alt></p>\n<pre class=\" language-yml\"><code class=\"language-yml\">---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  # 番组图片\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n  # 番组名\n    title: 朝花夕誓——于离别之朝束起约定之花\n  # 追番状态 （追番ing/已追完）\n    status: 已追完\n  # 追番进度\n    progress: 100\n  # 番剧日文名称\n    jp: さよならの朝に約束の花をかざろう\n  # 放送时间\n    time: 放送时间: 2018-02-24 SUN.\n  # 番剧介绍\n    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n    title: 朝花夕誓——于离别之朝束起约定之花\n    status: 已追完\n    progress: 50\n    jp: さよならの朝に約束の花をかざろう\n    time: 放送时间: 2018-02-24 SUN.\n    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n---\n</code></pre>\n<h3 id=\"友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg\" alt></p>\n<pre class=\" language-yml\"><code class=\"language-yml\">---\nlayout: links\ntitle: links\n# 创建日期，可以改下\ndate: 2018-12-19 23:11:06 \n# 图片上的标题，自定义修改\nkeywords: 友人帐 \ndescription: \n# true/false 开启/关闭评论\ncomments: true \n# 页面头部图片，自定义修改\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg \n# 友链配置\nlinks: \n  # 类型分组\n  - group: 个人项目\n    # 类型简介\n    desc: 充分说明这家伙是条咸鱼 < (￣︶￣)>\n    items:\n    # 友链链接\n    - url: https://shino.cc/fgvf\n    # 友链头像\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n    # 友链站点名\n      name: Google\n    # 友链介绍  下面雷同\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n  # 类型分组...\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n---\n</code></pre>\n<h2 id=\"写文章配置\"><a href=\"#写文章配置\" class=\"headerlink\" title=\"写文章配置\"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p>\n<pre class=\" language-md\"><code class=\"language-md\">{% bili video_id [page] %}\n</code></pre>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md\" target=\"_blank\" rel=\"noopener\">hexo-tag-bili</a>。</p>\n<p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p>\n<pre class=\" language-md\"><code class=\"language-md\">{% fb_img src [caption] %}\n</code></pre>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md\" target=\"_blank\" rel=\"noopener\">hexo-tag-fancybox_img</a></p>\n<h2 id=\"还有啥，一时想不起来……\"><a href=\"#还有啥，一时想不起来……\" class=\"headerlink\" title=\"还有啥，一时想不起来……\"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>hexo-theme-sakura主题 <a href=\"https://github.com/honjun/hexo-theme-sakura/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">English document</a></p>\n<p>基于WordPress主题<a href=\"https://github.com/mashirozx/Sakura/\" target=\"_blank\" rel=\"noopener\">Sakura</a>修改成Hexo的主题。</p>\n<p><a href=\"https://sakura.hojun.cn\" target=\"_blank\" rel=\"noopener\">demo预览</a></p>\n<p>正在开发中……</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg\" alt></p>\n<h2 id=\"主题特性\"><a href=\"#主题特性\" class=\"headerlink\" title=\"主题特性\"></a>主题特性</h2><ul>\n<li>首页大屏视频</li>\n<li>首页随机封面</li>\n<li>图片懒加载</li>\n<li>valine评论</li>\n<li>fancy-box相册</li>\n<li>pjax支持，音乐不间断</li>\n<li>aplayer音乐播放器</li>\n<li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li>\n</ul>\n<h2 id=\"赞赏作者\"><a href=\"#赞赏作者\" class=\"headerlink\" title=\"赞赏作者\"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p>\n<h2 id=\"未完善的使用教程\"><a href=\"#未完善的使用教程\" class=\"headerlink\" title=\"未完善的使用教程\"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p>\n<h2 id=\"1、主题下载安装\"><a href=\"#1、主题下载安装\" class=\"headerlink\" title=\"1、主题下载安装\"></a>1、主题下载安装</h2><p><a href=\"https://github.com/honjun/hexo-theme-sakura\" target=\"_blank\" rel=\"noopener\">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p>\n<p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p>\n<h2 id=\"2、主题配置\"><a href=\"#2、主题配置\" class=\"headerlink\" title=\"2、主题配置\"></a>2、主题配置</h2><h3 id=\"博客根目录下的-config配置\"><a href=\"#博客根目录下的-config配置\" class=\"headerlink\" title=\"博客根目录下的_config配置\"></a>博客根目录下的_config配置</h3><p>站点</p>\n<pre><code class=\"yml\"># Site\ntitle: 你的站点名\nsubtitle:\ndescription: 站点简介\nkeywords:\nauthor: 作者名\nlanguage: zh-cn\ntimezone:\n</code></pre>\n<p>部署</p>\n<pre><code class=\"yml\">deploy:\n  type: git\n  repo: \n    github: 你的github仓库地址\n    # coding: 你的coding仓库地址\n  branch: master\n</code></pre>\n<p>备份 （使用hexo b发布备份到远程仓库）</p>\n<pre><code class=\"yml\">backup:\n  type: git\n  message: backup my blog of https://honjun.github.io/\n  repository:\n    # 你的github仓库地址,备份分支名  （建议新建backup分支）\n    github: https://github.com/honjun/honjun.github.io.git,backup\n    # coding: https://git.coding.net/hojun/hojun.git,backup\n\n</code></pre>\n<h3 id=\"主题目录下的-config配置\"><a href=\"#主题目录下的-config配置\" class=\"headerlink\" title=\"主题目录下的_config配置\"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p>\n<pre><code class=\"yml\"># site name\n# 站点名 【改】\nprefixName: さくら荘その\nsiteName: hojun\n\n# favicon and site master avatar\n# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】\nfavicon: /images/favicon.ico\navatar: /img/custom/avatar.jpg\n\n# 站点url 【改】\nurl: https://sakura.hojun.cn\n\n# 站点介绍（或者说是个人签名）【改】\ndescription: Live your life with passion! With some drive!\n\n# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg\ncdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6\n\n# 开启pjax 【选】\npjax: 1\n\n# 站点首页的公告信息 【改】\nnotice: hexo-Sakura主题已经开源，目前正在开发中...\n\n# 懒加载的加载中图片 【选】\nlazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg\n\n# 站点菜单配置 【选】\nmenus:\n  首页: { path: /, fa: fa-fort-awesome faa-shake }\n  归档: { path: /archives, fa: fa-archive faa-shake, submenus: { \n    技术: {path: /categories/技术/, fa: fa-code }, \n    生活: {path: /categories/生活/, fa: fa-file-text-o }, \n    资源: {path: /categories/资源/, fa: fa-cloud-download }, \n    随想: {path: /categories/随想/, fa: fa-commenting-o },\n    转载: {path: /categories/转载/, fa: fa-book }\n  } }\n  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { \n    书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, \n    番组: {path: /bangumi/, fa: fa-film faa-vertical }, \n    歌单: {path: /music/, fa: fa-headphones },\n    图集: {path: /tags/图集/, fa: fa-photo }\n  } }\n  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }\n  友人帐: { path: /links/, fa: fa-link faa-shake }\n  赞赏: { path: /donate/, fa: fa-heart faa-pulse }\n  关于: { path: /, fa: fa-leaf faa-wrench , submenus: { \n    我？: {path: /about/, fa: fa-meetup}, \n    主题: {path: /theme-sakura/, fa: iconfont icon-sakura },\n    Lab: {path: /lab/, fa: fa-cogs },\n  } }\n  客户端: { path: /client/, fa: fa-android faa-vertical }\n  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }\n\n# Home page sort type: -1: newer first，1: older first. 【非】\nhomePageSortType: -1\n\n# Home page article shown number) 【非】\nhomeArticleShown: 10\n\n# 背景图片 【选】\nbgn: 8\n\n# startdash面板 url, title, desc img 【改】\nstartdash: \n  - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}\n  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}\n  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}\n\n\n# your site build time or founded date\n# 你的站点建立日期 【改】\nsiteBuildingTime: 07/17/2018\n\n\n# 社交按钮(social)  url, img PC端配置 【改】\nsocial:\n  github: {url: http://github.com/honjun, img: /img/social/github.png}\n  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}\n  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}\n  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}\n  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}\n  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}\n\n# 社交按钮(msocial)  url, img 移动端配置 【改】\nmsocial:\n  github: {url: http://github.com/honjun, fa: fa-github, color: 333}\n  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}\n  qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe}\n\n# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】\ndonate:\n  alipay: /img/custom/donate/AliPayQR.jpg\n  wechat: /img/custom/donate/WeChanQR.jpg\n  wechatSQ: /img/custom/donate/WeChanSQ.jpg\n\n# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】\nmovies:\n  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2\n  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用\n  name: Unbroken.mp4\n\n# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】\naplayer: \n  id: 2660651585\n  server: netease\n  type: playlist\n  fixed: true\n  mini: false\n  autoplay: false\n  loop: all\n  order: random\n  preload: auto\n  volume: 0.7\n  mutex: true\n\n# Valine评论配置【改】\nvaline: true\nv_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz\nv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ\n</code></pre>\n<h2 id=\"分类页和标签页配置\"><a href=\"#分类页和标签页配置\" class=\"headerlink\" title=\"分类页和标签页配置\"></a>分类页和标签页配置</h2><h3 id=\"分类页\"><a href=\"#分类页\" class=\"headerlink\" title=\"分类页\"></a>分类页</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg\" alt></p>\n<h3 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg\" alt></p>\n<p>配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p>\n<pre><code class=\"yml\">#category\n# 按分类名创建\n技术:\n    #中文标题\n    zh: 野生技术协会 \n    # 英文标题\n    en: Geek – Only for Love\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg\n生活:\n    zh: 生活\n    en: live\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg\n\n#tag\n# 标签名即是标题\n悦读:\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg\n</code></pre>\n<h2 id=\"单页面封面配置\"><a href=\"#单页面封面配置\" class=\"headerlink\" title=\"单页面封面配置\"></a>单页面封面配置</h2><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg\" alt><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p>\n<pre><code class=\"md\">---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\n# 在这里配置单页面头部图片，自定义替换哦~\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg\n---\n</code></pre>\n<h2 id=\"单页面配置\"><a href=\"#单页面配置\" class=\"headerlink\" title=\"单页面配置\"></a>单页面配置</h2><h3 id=\"番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg\" alt></p>\n<pre><code class=\"yml\">---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  # 番组图片\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n  # 番组名\n    title: 朝花夕誓——于离别之朝束起约定之花\n  # 追番状态 （追番ing/已追完）\n    status: 已追完\n  # 追番进度\n    progress: 100\n  # 番剧日文名称\n    jp: さよならの朝に約束の花をかざろう\n  # 放送时间\n    time: 放送时间: 2018-02-24 SUN.\n  # 番剧介绍\n    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n    title: 朝花夕誓——于离别之朝束起约定之花\n    status: 已追完\n    progress: 50\n    jp: さよならの朝に約束の花をかざろう\n    time: 放送时间: 2018-02-24 SUN.\n    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n---\n</code></pre>\n<h3 id=\"友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg\" alt></p>\n<pre><code class=\"yml\">---\nlayout: links\ntitle: links\n# 创建日期，可以改下\ndate: 2018-12-19 23:11:06 \n# 图片上的标题，自定义修改\nkeywords: 友人帐 \ndescription: \n# true/false 开启/关闭评论\ncomments: true \n# 页面头部图片，自定义修改\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg \n# 友链配置\nlinks: \n  # 类型分组\n  - group: 个人项目\n    # 类型简介\n    desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt;\n    items:\n    # 友链链接\n    - url: https://shino.cc/fgvf\n    # 友链头像\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n    # 友链站点名\n      name: Google\n    # 友链介绍  下面雷同\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n  # 类型分组...\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n---\n</code></pre>\n<h2 id=\"写文章配置\"><a href=\"#写文章配置\" class=\"headerlink\" title=\"写文章配置\"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p>\n<pre><code class=\"md\">{% bili video_id [page] %}\n</code></pre>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md\" target=\"_blank\" rel=\"noopener\">hexo-tag-bili</a>。</p>\n<p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p>\n<pre><code class=\"md\">{% fb_img src [caption] %}\n</code></pre>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md\" target=\"_blank\" rel=\"noopener\">hexo-tag-fancybox_img</a></p>\n<h2 id=\"还有啥，一时想不起来……\"><a href=\"#还有啥，一时想不起来……\" class=\"headerlink\" title=\"还有啥，一时想不起来……\"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>\n"},{"title":"Java基础语法02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"date":"2022-08-25T14:36:16.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 类型转换\n\n- 由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换\n\n```java\n//低----------------------------------------->高\nbyte,short,char --->  int ---> long ---> double;\n//小数的优先级一定大于整数\n\n```\n\n\n\n- 运算中，不同类型的数据先转换为同一类型，然后再进行运算\n- 强制类型转换:              (类型)变量名;         高--->低\n- 自动类型转换:                                              低--->高\n- 注意点：\n  * 不能对布尔值进行转换\n  * 不能打对象类型转换为不相干的类型\n    * 把高容量类型转换到低容量类型时，需要强制转换\n          * 2.转换可能会出现内存溢出或精度问题\n\n```java\npublic class Demo03 {\n    public static void main(String[] args) {\n        int i = 128 ;\n        byte b = (byte) i;          //内存溢出\n        //强制转换 (类型)变量名;         高--->低\n        //自动转换                     低--->高\n        System.out.println(i);\n        System.out.println(b);\n        System.out.println(\"=========================\");\n        /*\n        * 注意点：\n        * 1.不能对布尔值进行转换\n        * 2.不能打对象类型转换为不相干的类型\n        * 3.把高容量类型转换到低容量类型时，需要强制转换\n        * 4.转换可能会出现内存溢出或精度问题\n        * */\n\n        System.out.println((int) 30.7);\n        System.out.println((int) 43.33f);\n        System.out.println(\"=========================\");\n        char c = 'a';\n        int d = c + 1;\n        System.out.println(d);\n        System.out.println((char) d);\n    }\n}\n\n```\n\n## 变量\n\n- 变量：即为可以变化的量\n- Java是一种强类型语言，每个变量都必须声明其类型。\n- Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域\n\n```java\ntype varName [=value][{,varName[=value]}];\n//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量\nint a,b,c = 10;\n```\n\n- **注意事项**\n  - 每个变量都有类型，类型可以是基本类型，也可以是引用类型\n  - 变量名必须是合法的标识符\n  - 变量声明是一条完整的语句，因此每一个声明都必须以分号结束。\n- 变量的命名规范\n  - 所有变量、方法、类名：**见名知意**\n  - 类成员变量：首字母小写和驼峰原则：monthSalary\n  - 局部变量：首字母小写和驼峰规则\n  - 常量：大写字母和下划线：MAX_VALUE\n  - 类名：首字母大写和驼峰原则：Man、GoodMan\n  - 方法名：首字母小写和驼峰原则：run(),runRun();\n","source":"_posts/Java基础语法02.md","raw":"---\ntitle: Java基础语法02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ndate: 2022-08-25 22:36:16\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java基础语法\nkeywords:\ndescription:\n---\n\n## 类型转换\n\n- 由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换\n\n```java\n//低----------------------------------------->高\nbyte,short,char --->  int ---> long ---> double;\n//小数的优先级一定大于整数\n\n```\n\n\n\n- 运算中，不同类型的数据先转换为同一类型，然后再进行运算\n- 强制类型转换:              (类型)变量名;         高--->低\n- 自动类型转换:                                              低--->高\n- 注意点：\n  * 不能对布尔值进行转换\n  * 不能打对象类型转换为不相干的类型\n    * 把高容量类型转换到低容量类型时，需要强制转换\n          * 2.转换可能会出现内存溢出或精度问题\n\n```java\npublic class Demo03 {\n    public static void main(String[] args) {\n        int i = 128 ;\n        byte b = (byte) i;          //内存溢出\n        //强制转换 (类型)变量名;         高--->低\n        //自动转换                     低--->高\n        System.out.println(i);\n        System.out.println(b);\n        System.out.println(\"=========================\");\n        /*\n        * 注意点：\n        * 1.不能对布尔值进行转换\n        * 2.不能打对象类型转换为不相干的类型\n        * 3.把高容量类型转换到低容量类型时，需要强制转换\n        * 4.转换可能会出现内存溢出或精度问题\n        * */\n\n        System.out.println((int) 30.7);\n        System.out.println((int) 43.33f);\n        System.out.println(\"=========================\");\n        char c = 'a';\n        int d = c + 1;\n        System.out.println(d);\n        System.out.println((char) d);\n    }\n}\n\n```\n\n## 变量\n\n- 变量：即为可以变化的量\n- Java是一种强类型语言，每个变量都必须声明其类型。\n- Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域\n\n```java\ntype varName [=value][{,varName[=value]}];\n//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量\nint a,b,c = 10;\n```\n\n- **注意事项**\n  - 每个变量都有类型，类型可以是基本类型，也可以是引用类型\n  - 变量名必须是合法的标识符\n  - 变量声明是一条完整的语句，因此每一个声明都必须以分号结束。\n- 变量的命名规范\n  - 所有变量、方法、类名：**见名知意**\n  - 类成员变量：首字母小写和驼峰原则：monthSalary\n  - 局部变量：首字母小写和驼峰规则\n  - 常量：大写字母和下划线：MAX_VALUE\n  - 类名：首字母大写和驼峰原则：Man、GoodMan\n  - 方法名：首字母小写和驼峰原则：run(),runRun();\n","slug":"Java基础语法02","published":1,"updated":"2022-08-25T15:04:14.634Z","layout":"post","link":"","_id":"cl796higz0008gwrw48ml6q2v","content":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//低----------------------------------------->高</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>  <span class=\"token keyword\">int</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">long</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//小数的优先级一定大于整数</span>\n\n</code></pre>\n<ul>\n<li>运算中，不同类型的数据先转换为同一类型，然后再进行运算</li>\n<li>强制类型转换:              (类型)变量名;         高—&gt;低</li>\n<li>自动类型转换:                                              低—&gt;高</li>\n<li>注意点：<ul>\n<li>不能对布尔值进行转换</li>\n<li>不能打对象类型转换为不相干的类型<ul>\n<li>把高容量类型转换到低容量类型时，需要强制转换<pre><code>* 2.转换可能会出现内存溢出或精度问题\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">128</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> i<span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//内存溢出</span>\n        <span class=\"token comment\" spellcheck=\"true\">//强制转换 (类型)变量名;         高--->低</span>\n        <span class=\"token comment\" spellcheck=\"true\">//自动转换                     低--->高</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/*\n        * 注意点：\n        * 1.不能对布尔值进行转换\n        * 2.不能打对象类型转换为不相干的类型\n        * 3.把高容量类型转换到低容量类型时，需要强制转换\n        * 4.转换可能会出现内存溢出或精度问题\n        * */</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">30.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">43.33f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量：即为可以变化的量</li>\n<li>Java是一种强类型语言，每个变量都必须声明其类型。</li>\n<li>Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">type varName <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">,</span>varName<span class=\"token punctuation\">[</span><span class=\"token operator\">=</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>注意事项</strong><ul>\n<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li>\n<li>变量名必须是合法的标识符</li>\n<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>\n</ul>\n</li>\n<li>变量的命名规范<ul>\n<li>所有变量、方法、类名：<strong>见名知意</strong></li>\n<li>类成员变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：首字母小写和驼峰规则</li>\n<li>常量：大写字母和下划线：MAX_VALUE</li>\n<li>类名：首字母大写和驼峰原则：Man、GoodMan</li>\n<li>方法名：首字母小写和驼峰原则：run(),runRun();</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换</li>\n</ul>\n<pre><code class=\"java\">//低-----------------------------------------&gt;高\nbyte,short,char ---&gt;  int ---&gt; long ---&gt; double;\n//小数的优先级一定大于整数\n\n</code></pre>\n<ul>\n<li>运算中，不同类型的数据先转换为同一类型，然后再进行运算</li>\n<li>强制类型转换:              (类型)变量名;         高—&gt;低</li>\n<li>自动类型转换:                                              低—&gt;高</li>\n<li>注意点：<ul>\n<li>不能对布尔值进行转换</li>\n<li>不能打对象类型转换为不相干的类型<ul>\n<li>把高容量类型转换到低容量类型时，需要强制转换<pre><code>* 2.转换可能会出现内存溢出或精度问题\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">public class Demo03 {\n    public static void main(String[] args) {\n        int i = 128 ;\n        byte b = (byte) i;          //内存溢出\n        //强制转换 (类型)变量名;         高---&gt;低\n        //自动转换                     低---&gt;高\n        System.out.println(i);\n        System.out.println(b);\n        System.out.println(&quot;=========================&quot;);\n        /*\n        * 注意点：\n        * 1.不能对布尔值进行转换\n        * 2.不能打对象类型转换为不相干的类型\n        * 3.把高容量类型转换到低容量类型时，需要强制转换\n        * 4.转换可能会出现内存溢出或精度问题\n        * */\n\n        System.out.println((int) 30.7);\n        System.out.println((int) 43.33f);\n        System.out.println(&quot;=========================&quot;);\n        char c = &#39;a&#39;;\n        int d = c + 1;\n        System.out.println(d);\n        System.out.println((char) d);\n    }\n}\n\n</code></pre>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量：即为可以变化的量</li>\n<li>Java是一种强类型语言，每个变量都必须声明其类型。</li>\n<li>Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域</li>\n</ul>\n<pre><code class=\"java\">type varName [=value][{,varName[=value]}];\n//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量\nint a,b,c = 10;\n</code></pre>\n<ul>\n<li><strong>注意事项</strong><ul>\n<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li>\n<li>变量名必须是合法的标识符</li>\n<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>\n</ul>\n</li>\n<li>变量的命名规范<ul>\n<li>所有变量、方法、类名：<strong>见名知意</strong></li>\n<li>类成员变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：首字母小写和驼峰规则</li>\n<li>常量：大写字母和下划线：MAX_VALUE</li>\n<li>类名：首字母大写和驼峰原则：Man、GoodMan</li>\n<li>方法名：首字母小写和驼峰原则：run(),runRun();</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java基础语法04","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"date":"2022-08-25T14:37:45.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 包机制\n\n- 为了更好地组织类，Java提供了包机制，用于区别类名的命名空间\n- 包语句的语法格式为\n\n```java\npackage pkg1[.pkg2[.pkg3...]];\n```\n\n- *** 一般利用公司域名倒置作为包名***\n- 为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能\n\n```java\nimport package1[.package2...].(classname|*);\n```\n\n## JavaDoc生成文档\n\nWin + r 后输入：\n\n```shell\njavadoc -encoding UTF-8 -charset UTF-8 ***.java\n```\n\n\n\n","source":"_posts/Java基础语法04.md","raw":"---\ntitle: Java基础语法04\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ndate: 2022-08-25 22:37:45\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java基础语法\nkeywords:\ndescription:\n---\n\n## 包机制\n\n- 为了更好地组织类，Java提供了包机制，用于区别类名的命名空间\n- 包语句的语法格式为\n\n```java\npackage pkg1[.pkg2[.pkg3...]];\n```\n\n- *** 一般利用公司域名倒置作为包名***\n- 为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能\n\n```java\nimport package1[.package2...].(classname|*);\n```\n\n## JavaDoc生成文档\n\nWin + r 后输入：\n\n```shell\njavadoc -encoding UTF-8 -charset UTF-8 ***.java\n```\n\n\n\n","slug":"Java基础语法04","published":1,"updated":"2022-08-25T15:04:20.806Z","layout":"post","link":"","_id":"cl796hih5000agwrww9ki6b0q","content":"<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><ul>\n<li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</li>\n<li>包语句的语法格式为</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> pkg1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong><em> 一般利用公司域名倒置作为包名</em></strong></li>\n<li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> package1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>package2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>classname<span class=\"token operator\">|</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"JavaDoc生成文档\"><a href=\"#JavaDoc生成文档\" class=\"headerlink\" title=\"JavaDoc生成文档\"></a>JavaDoc生成文档</h2><p>Win + r 后输入：</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">javadoc -encoding UTF-8 -charset UTF-8 ***.java\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><ul>\n<li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</li>\n<li>包语句的语法格式为</li>\n</ul>\n<pre><code class=\"java\">package pkg1[.pkg2[.pkg3...]];\n</code></pre>\n<ul>\n<li><strong><em> 一般利用公司域名倒置作为包名</em></strong></li>\n<li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能</li>\n</ul>\n<pre><code class=\"java\">import package1[.package2...].(classname|*);\n</code></pre>\n<h2 id=\"JavaDoc生成文档\"><a href=\"#JavaDoc生成文档\" class=\"headerlink\" title=\"JavaDoc生成文档\"></a>JavaDoc生成文档</h2><p>Win + r 后输入：</p>\n<pre><code class=\"shell\">javadoc -encoding UTF-8 -charset UTF-8 ***.java\n</code></pre>\n"},{"title":"Java异常01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg"],"date":"2022-08-25T14:42:03.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 异常\n\n### 定义\n\n- 实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等\n- 软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？\n- 异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。\n- 异常发生在程序运行期间，他影响了程序正常的程序执行流程\n\n### 分类\n\n#### 简单分类\n\n需要掌握以下三种类型的异常\n\n1. 检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略\n2. 运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n3. **错误ERROR**：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。\n\n### 异常体系结构\n\n- Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类\n- 在Java API中已经定义了许多异常类，这些异常类分为两大类：**错误ERROR**和**异常Exception**\n\n![异常体系结构](https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png)\n\n#### ERROR\n\n- Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。\n- Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 **OutOfMemoryError**。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；\n- 还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。\n\n#### Exception\n\n- 在Exception分支中有一个重要的子类RuntimeException（运行时异常）\n  - ArrayIndexOutOfBoundsException（数组下标越界异常）\n  - NullPointerException（空指针异常）\n  - ArithmeticException（算数异常）\n  - MissingResourceException（丢失资源）\n  - ClassNotFoundException（找不到类）等异常\n- 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；\n- Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。\n\n","source":"_posts/Java异常01.md","raw":"---\ntitle: Java异常01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg'\ndate: 2022-08-25 22:42:03\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java异常\nkeywords:\ndescription:\n---\n\n## 异常\n\n### 定义\n\n- 实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等\n- 软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？\n- 异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。\n- 异常发生在程序运行期间，他影响了程序正常的程序执行流程\n\n### 分类\n\n#### 简单分类\n\n需要掌握以下三种类型的异常\n\n1. 检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略\n2. 运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n3. **错误ERROR**：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。\n\n### 异常体系结构\n\n- Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类\n- 在Java API中已经定义了许多异常类，这些异常类分为两大类：**错误ERROR**和**异常Exception**\n\n![异常体系结构](https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png)\n\n#### ERROR\n\n- Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。\n- Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 **OutOfMemoryError**。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；\n- 还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。\n\n#### Exception\n\n- 在Exception分支中有一个重要的子类RuntimeException（运行时异常）\n  - ArrayIndexOutOfBoundsException（数组下标越界异常）\n  - NullPointerException（空指针异常）\n  - ArithmeticException（算数异常）\n  - MissingResourceException（丢失资源）\n  - ClassNotFoundException（找不到类）等异常\n- 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；\n- Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。\n\n","slug":"Java异常01","published":1,"updated":"2022-08-25T15:02:07.903Z","layout":"post","link":"","_id":"cl796hiha000egwrwsr32lo14","content":"<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等</li>\n<li>软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？</li>\n<li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li>\n<li>异常发生在程序运行期间，他影响了程序正常的程序执行流程</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"简单分类\"><a href=\"#简单分类\" class=\"headerlink\" title=\"简单分类\"></a>简单分类</h4><p>需要掌握以下三种类型的异常</p>\n<ol>\n<li>检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>\n<li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误ERROR</strong>：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。</li>\n</ol>\n<h3 id=\"异常体系结构\"><a href=\"#异常体系结构\" class=\"headerlink\" title=\"异常体系结构\"></a>异常体系结构</h3><ul>\n<li>Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类</li>\n<li>在Java API中已经定义了许多异常类，这些异常类分为两大类：<strong>错误ERROR</strong>和<strong>异常Exception</strong></li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png\" alt=\"异常体系结构\"></p>\n<h4 id=\"ERROR\"><a href=\"#ERROR\" class=\"headerlink\" title=\"ERROR\"></a>ERROR</h4><ul>\n<li>Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li>\n<li>Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 <strong>OutOfMemoryError</strong>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li>\n<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li>\n</ul>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><ul>\n<li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul>\n<li>ArrayIndexOutOfBoundsException（数组下标越界异常）</li>\n<li>NullPointerException（空指针异常）</li>\n<li>ArithmeticException（算数异常）</li>\n<li>MissingResourceException（丢失资源）</li>\n<li>ClassNotFoundException（找不到类）等异常</li>\n</ul>\n</li>\n<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li>\n<li>Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等</li>\n<li>软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？</li>\n<li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li>\n<li>异常发生在程序运行期间，他影响了程序正常的程序执行流程</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"简单分类\"><a href=\"#简单分类\" class=\"headerlink\" title=\"简单分类\"></a>简单分类</h4><p>需要掌握以下三种类型的异常</p>\n<ol>\n<li>检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>\n<li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误ERROR</strong>：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。</li>\n</ol>\n<h3 id=\"异常体系结构\"><a href=\"#异常体系结构\" class=\"headerlink\" title=\"异常体系结构\"></a>异常体系结构</h3><ul>\n<li>Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类</li>\n<li>在Java API中已经定义了许多异常类，这些异常类分为两大类：<strong>错误ERROR</strong>和<strong>异常Exception</strong></li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png\" alt=\"异常体系结构\"></p>\n<h4 id=\"ERROR\"><a href=\"#ERROR\" class=\"headerlink\" title=\"ERROR\"></a>ERROR</h4><ul>\n<li>Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li>\n<li>Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 <strong>OutOfMemoryError</strong>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li>\n<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li>\n</ul>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><ul>\n<li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul>\n<li>ArrayIndexOutOfBoundsException（数组下标越界异常）</li>\n<li>NullPointerException（空指针异常）</li>\n<li>ArithmeticException（算数异常）</li>\n<li>MissingResourceException（丢失资源）</li>\n<li>ClassNotFoundException（找不到类）等异常</li>\n</ul>\n</li>\n<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li>\n<li>Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li>\n</ul>\n"},{"title":"Java基础语法03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"date":"2022-08-25T14:37:23.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 运算符\n\n### Java语言支持的与算符\n\n### 算术运算符\n\n#### **符号**\n\n算术运算符符号：**+   ,   -   ,   *   ,   /   ,   ++   ,   --**\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        int a = 10;\n        int b = 20;\n        int c = 30;\n        int d = 40;\n        System.out.println(a+b);\n        System.out.println(a-b);\n        System.out.println(a*b);\n        System.out.println(a/(double)b);\n        System.out.println(a%b);\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png)\n\n---\n\n#### **小tips**\n\n- 当参与运算的变量中有**long**型时，输出的结果也为**long**型\n\n- 若参与运算的变量中五**long**型时，**无论参与运算的变量是何类型**，则输出结果均为**int**型\n\neg：\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        long a = 10;\n        int b = 20;\n        byte c = 30;\n        short d = 40;\n        System.out.println((String) (a+b));\n        System.out.println((String) (b+c));\n        System.out.println((String) (c+d));\n        System.out.println((String) (b+d));\n        \n\n    }\n}\n```\n\n![test](https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png)\n\n---\n\n** 自增（++）、自减（--）运算符**\n\n```java\npackage Operator;\n\npublic class Demo03 {\n    public static void main(String[] args) {\n        //++  --  自增 自减  一元运算符\n        int a = 1;\n        int b = a++;                //执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。\n        System.out.println(a);\n        int c = ++a;                //执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n    }\n}\n\n```\n\n![自增自减](https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png)\n\n---\n\n### 赋值运算符\n\n#### 符号\n\n赋值运算符符号：**=**\n\n#### 语法格式\n\n```java\n//语法格式如下\nint a = 10;  //初始化int类型变量a，并将10赋值给a。\n```\n\n---\n\n### 关系运算符\n\n#### 符号\n\n：关系运算符符号：**>   ,   <   ,   >=   ,   <=   ,   ==   ,   !=   ,   instanceof**\n\n- **关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中**\n\n#### 语法格式\n\n```java\npackage Operator;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中\n        int a = 10 ;\n        int b = 20 ;\n        System.out.println(a == b);\n        System.out.println(a != b);\n        System.out.println(a < b);\n        System.out.println(a > b);\n\n    }\n}\n\n```\n\n![result](https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png)\n\n\n---\n\n### 逻辑运算符\n\n#### 符号\n\n逻辑运算符符号：**&&   ,   ||   ,   !**\n\n#### 语法格式\n\n```java\npackage Operator;\n\npublic class Demo04 {\n    public static void main(String[] args) {\n        boolean a = true;\n        boolean b = false;\n        System.out.println(\"a&&b:\\t\"+(a && b));             //逻辑与运算：只要有一个是假的，则结果就是假的\n        System.out.println(\"a||b:\\t\"+(a || b));             //逻辑或运算：只要有一个是真的，则结果就是真的\n        System.out.println(\"!(a&&b):\\t\"+!(a && b));         //逻辑非运算：结果取反\n        //短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。\n        int c = 5;\n        boolean d = b && (c++ > 5);\n        System.out.println(d);\n        System.out.println(c);\n    }\n}\n```\n\n![result01](https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png)\n\n---\n\n### 位运算符\n\n#### 符号\n\n位运算符符号：**&  ,  |  ,  ^  ,  ~  ,  >>  ,  <<   ,  >>>**\n\n#### 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        /*\n        A = \t0010 1101\n        B = \t1011 1001\n        -------------------\n        A&B =   0010 1001\n        A|B =   1011 1101\n        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真\n        ~B  =   0100 0110\n        */\n        //快速计算2*8\n        System.out.println(2<<3);\n    }\n}\n```\n\n---\n\n### 条件运算符\n\n#### 符号\n\n条件运算符符号：**x ? y : z :**\n\n#### 语法格式\n\n语法格式如下：\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        // 条件运算符 x ? y : z\n        // 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z\n        System.out.println((a>b) ? 50 : 60);\n        System.out.println((a<b) ? 50 : 60);\n    }\n\n}\n\n```\n\n---\n\n### 扩展赋值运算符\n\n#### 符号\n\n扩展赋值运算符符号：**+=  ,  -=  ,  *=  ,  /=**\n\n#### 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        a+=b;\n        System.out.println(a); // a = a+b -->30 = 10+20\n        a-=b;\n        System.out.println(a); // a = a-b -->10 = 30-20\n\n        //字符串连接符 +\n        //当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。\n        System.out.println(\"\" + a + b);\n        //但是如果String类型前面出现了运算，则会先运算再连接。\n        System.out.println(b+ a + \"\" );\n    }\n\n}\n\n```\n\n![result02](https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png)\n\n---\n\n### 运算符优先级\n\n| **优先级** |                          **运算符**                          |                          **简介**                           | **结合性** |\n| :--------: | :----------------------------------------------------------: | :---------------------------------------------------------: | :--------: |\n|     1      |                     `[ ]`、` .`、` ( ) `                     |                     方法调用，属性获取                      |  从左向右  |\n|     2      |                        !、~、 ++、 --                        |                         一元运算符                          |  从右向左  |\n|     3      |                          * 、/ 、%                           |                    乘、除、取模（余数）                     |  从左向右  |\n|     4      |                            + 、 -                            |                           加减法                            |  从左向右  |\n|     5      |                        <<、 >>、 >>>                         |                 左位移、右位移、无符号右移                  |  从左向右  |\n|     6      |                 < 、<= 、>、 >=、 instanceof                 | 小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型 |  从左向右  |\n|     7      |                           == 、!=                            |      2个值是否相等，2个值是否不等于。 下面有详细的解释      |  从左向右  |\n|     8      |                              &                               |                           按位与                            |  从左向右  |\n|     9      |                              ^                               |                          按位异或                           |  从左向右  |\n|     10     |                              \\|                              |                           按位或                            |  从左向右  |\n|     11     |                              &&                              |                           短路与                            |  从左向右  |\n|     12     |                             \\|\\|                             |                           短路或                            |  从左向右  |\n|     13     |                              ?:                              |                         条件运算符                          |  从右向左  |\n|     14     | =、 += 、-= 、*= 、/=、 %=、 &=、 \\|=、 ^=、 <、<= 、>、>= 、>>= |                       混合赋值运算符                        |  从右向左  |\n\n点击查看[Java基础语法之注释、标识符、数据类型（一）](http://110.42.139.30:8000/index.php/2022/03/07/java基础语法之注释、标识符、数据类型/)\n\n点击查看[Java基础语法之类型转换和变量（二）](http://110.42.139.30:8000/index.php/2022/03/07/java基础之类型转换和变量（二）/)\n\n","source":"_posts/Java基础语法03.md","raw":"---\ntitle: Java基础语法03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ndate: 2022-08-25 22:37:23\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java基础语法\nkeywords:\ndescription:\n---\n\n## 运算符\n\n### Java语言支持的与算符\n\n### 算术运算符\n\n#### **符号**\n\n算术运算符符号：**+   ,   -   ,   *   ,   /   ,   ++   ,   --**\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        int a = 10;\n        int b = 20;\n        int c = 30;\n        int d = 40;\n        System.out.println(a+b);\n        System.out.println(a-b);\n        System.out.println(a*b);\n        System.out.println(a/(double)b);\n        System.out.println(a%b);\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png)\n\n---\n\n#### **小tips**\n\n- 当参与运算的变量中有**long**型时，输出的结果也为**long**型\n\n- 若参与运算的变量中五**long**型时，**无论参与运算的变量是何类型**，则输出结果均为**int**型\n\neg：\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        long a = 10;\n        int b = 20;\n        byte c = 30;\n        short d = 40;\n        System.out.println((String) (a+b));\n        System.out.println((String) (b+c));\n        System.out.println((String) (c+d));\n        System.out.println((String) (b+d));\n        \n\n    }\n}\n```\n\n![test](https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png)\n\n---\n\n** 自增（++）、自减（--）运算符**\n\n```java\npackage Operator;\n\npublic class Demo03 {\n    public static void main(String[] args) {\n        //++  --  自增 自减  一元运算符\n        int a = 1;\n        int b = a++;                //执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。\n        System.out.println(a);\n        int c = ++a;                //执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n    }\n}\n\n```\n\n![自增自减](https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png)\n\n---\n\n### 赋值运算符\n\n#### 符号\n\n赋值运算符符号：**=**\n\n#### 语法格式\n\n```java\n//语法格式如下\nint a = 10;  //初始化int类型变量a，并将10赋值给a。\n```\n\n---\n\n### 关系运算符\n\n#### 符号\n\n：关系运算符符号：**>   ,   <   ,   >=   ,   <=   ,   ==   ,   !=   ,   instanceof**\n\n- **关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中**\n\n#### 语法格式\n\n```java\npackage Operator;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中\n        int a = 10 ;\n        int b = 20 ;\n        System.out.println(a == b);\n        System.out.println(a != b);\n        System.out.println(a < b);\n        System.out.println(a > b);\n\n    }\n}\n\n```\n\n![result](https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png)\n\n\n---\n\n### 逻辑运算符\n\n#### 符号\n\n逻辑运算符符号：**&&   ,   ||   ,   !**\n\n#### 语法格式\n\n```java\npackage Operator;\n\npublic class Demo04 {\n    public static void main(String[] args) {\n        boolean a = true;\n        boolean b = false;\n        System.out.println(\"a&&b:\\t\"+(a && b));             //逻辑与运算：只要有一个是假的，则结果就是假的\n        System.out.println(\"a||b:\\t\"+(a || b));             //逻辑或运算：只要有一个是真的，则结果就是真的\n        System.out.println(\"!(a&&b):\\t\"+!(a && b));         //逻辑非运算：结果取反\n        //短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。\n        int c = 5;\n        boolean d = b && (c++ > 5);\n        System.out.println(d);\n        System.out.println(c);\n    }\n}\n```\n\n![result01](https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png)\n\n---\n\n### 位运算符\n\n#### 符号\n\n位运算符符号：**&  ,  |  ,  ^  ,  ~  ,  >>  ,  <<   ,  >>>**\n\n#### 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        /*\n        A = \t0010 1101\n        B = \t1011 1001\n        -------------------\n        A&B =   0010 1001\n        A|B =   1011 1101\n        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真\n        ~B  =   0100 0110\n        */\n        //快速计算2*8\n        System.out.println(2<<3);\n    }\n}\n```\n\n---\n\n### 条件运算符\n\n#### 符号\n\n条件运算符符号：**x ? y : z :**\n\n#### 语法格式\n\n语法格式如下：\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        // 条件运算符 x ? y : z\n        // 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z\n        System.out.println((a>b) ? 50 : 60);\n        System.out.println((a<b) ? 50 : 60);\n    }\n\n}\n\n```\n\n---\n\n### 扩展赋值运算符\n\n#### 符号\n\n扩展赋值运算符符号：**+=  ,  -=  ,  *=  ,  /=**\n\n#### 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        a+=b;\n        System.out.println(a); // a = a+b -->30 = 10+20\n        a-=b;\n        System.out.println(a); // a = a-b -->10 = 30-20\n\n        //字符串连接符 +\n        //当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。\n        System.out.println(\"\" + a + b);\n        //但是如果String类型前面出现了运算，则会先运算再连接。\n        System.out.println(b+ a + \"\" );\n    }\n\n}\n\n```\n\n![result02](https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png)\n\n---\n\n### 运算符优先级\n\n| **优先级** |                          **运算符**                          |                          **简介**                           | **结合性** |\n| :--------: | :----------------------------------------------------------: | :---------------------------------------------------------: | :--------: |\n|     1      |                     `[ ]`、` .`、` ( ) `                     |                     方法调用，属性获取                      |  从左向右  |\n|     2      |                        !、~、 ++、 --                        |                         一元运算符                          |  从右向左  |\n|     3      |                          * 、/ 、%                           |                    乘、除、取模（余数）                     |  从左向右  |\n|     4      |                            + 、 -                            |                           加减法                            |  从左向右  |\n|     5      |                        <<、 >>、 >>>                         |                 左位移、右位移、无符号右移                  |  从左向右  |\n|     6      |                 < 、<= 、>、 >=、 instanceof                 | 小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型 |  从左向右  |\n|     7      |                           == 、!=                            |      2个值是否相等，2个值是否不等于。 下面有详细的解释      |  从左向右  |\n|     8      |                              &                               |                           按位与                            |  从左向右  |\n|     9      |                              ^                               |                          按位异或                           |  从左向右  |\n|     10     |                              \\|                              |                           按位或                            |  从左向右  |\n|     11     |                              &&                              |                           短路与                            |  从左向右  |\n|     12     |                             \\|\\|                             |                           短路或                            |  从左向右  |\n|     13     |                              ?:                              |                         条件运算符                          |  从右向左  |\n|     14     | =、 += 、-= 、*= 、/=、 %=、 &=、 \\|=、 ^=、 <、<= 、>、>= 、>>= |                       混合赋值运算符                        |  从右向左  |\n\n点击查看[Java基础语法之注释、标识符、数据类型（一）](http://110.42.139.30:8000/index.php/2022/03/07/java基础语法之注释、标识符、数据类型/)\n\n点击查看[Java基础语法之类型转换和变量（二）](http://110.42.139.30:8000/index.php/2022/03/07/java基础之类型转换和变量（二）/)\n\n","slug":"Java基础语法03","published":1,"updated":"2022-08-25T15:04:17.682Z","layout":"post","link":"","_id":"cl796hihc000ggwrwmzmgpvyz","content":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"Java语言支持的与算符\"><a href=\"#Java语言支持的与算符\" class=\"headerlink\" title=\"Java语言支持的与算符\"></a>Java语言支持的与算符</h3><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><h4 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a><strong>符号</strong></h4><p>算术运算符符号：<strong>+   ,   -   ,   *   ,   /   ,   ++   ,   –</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//算数运算符的基本操作</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png\" alt=\"输出结果\"></p>\n<hr>\n<h4 id=\"小tips\"><a href=\"#小tips\" class=\"headerlink\" title=\"小tips\"></a><strong>小tips</strong></h4><ul>\n<li><p>当参与运算的变量中有<strong>long</strong>型时，输出的结果也为<strong>long</strong>型</p>\n</li>\n<li><p>若参与运算的变量中五<strong>long</strong>型时，<strong>无论参与运算的变量是何类型</strong>，则输出结果均为<strong>int</strong>型</p>\n</li>\n</ul>\n<p>eg：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//算数运算符的基本操作</span>\n        <span class=\"token keyword\">long</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">short</span> d <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png\" alt=\"test\"></p>\n<hr>\n<p><strong> 自增（++）、自减（–）运算符</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//++  --  自增 自减  一元运算符</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">//执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">//执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png\" alt=\"自增自减\"></p>\n<hr>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><h4 id=\"符号-1\"><a href=\"#符号-1\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>赋值运算符符号：<strong>=</strong></p>\n<h4 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//语法格式如下</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//初始化int类型变量a，并将10赋值给a。</span>\n</code></pre>\n<hr>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><h4 id=\"符号-2\"><a href=\"#符号-2\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>：关系运算符符号：<strong>&gt;   ,   &lt;   ,   &gt;=   ,   &lt;=   ,   ==   ,   !=   ,   instanceof</strong></p>\n<ul>\n<li><strong>关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</strong></li>\n</ul>\n<h4 id=\"语法格式-1\"><a href=\"#语法格式-1\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><h4 id=\"符号-3\"><a href=\"#符号-3\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>逻辑运算符符号：<strong>&amp;&amp;   ,   ||   ,   !</strong></p>\n<h4 id=\"语法格式-2\"><a href=\"#语法格式-2\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo04</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a&amp;&amp;b:\\t\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">//逻辑与运算：只要有一个是假的，则结果就是假的</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a||b:\\t\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">||</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">//逻辑或运算：只要有一个是真的，则结果就是真的</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!(a&amp;&amp;b):\\t\"</span><span class=\"token operator\">+</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">//逻辑非运算：结果取反</span>\n        <span class=\"token comment\" spellcheck=\"true\">//短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。</span>\n        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> d <span class=\"token operator\">=</span> b <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">++</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png\" alt=\"result01\"></p>\n<hr>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><h4 id=\"符号-4\"><a href=\"#符号-4\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>位运算符符号：<strong>&amp;  ,  |  ,  ^  ,  ~  ,  &gt;&gt;  ,  &lt;&lt;   ,  &gt;&gt;&gt;</strong></p>\n<h4 id=\"语法格式-3\"><a href=\"#语法格式-3\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><p>语法格式如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo05</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/*\n        A =     0010 1101\n        B =     1011 1001\n        -------------------\n        A&amp;B =   0010 1001\n        A|B =   1011 1101\n        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真\n        ~B  =   0100 0110\n        */</span>\n        <span class=\"token comment\" spellcheck=\"true\">//快速计算2*8</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><h4 id=\"符号-5\"><a href=\"#符号-5\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>条件运算符符号：<strong>x ? y : z :</strong></p>\n<h4 id=\"语法格式-4\"><a href=\"#语法格式-4\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><p>语法格式如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo05</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 条件运算符 x ? y : z</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">50</span> <span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">50</span> <span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<h3 id=\"扩展赋值运算符\"><a href=\"#扩展赋值运算符\" class=\"headerlink\" title=\"扩展赋值运算符\"></a>扩展赋值运算符</h3><h4 id=\"符号-6\"><a href=\"#符号-6\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>扩展赋值运算符符号：<strong>+=  ,  -=  ,  *=  ,  /=</strong></p>\n<h4 id=\"语法格式-5\"><a href=\"#语法格式-5\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><p>语法格式如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> Operator<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo05</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// a = a+b -->30 = 10+20</span>\n        a<span class=\"token operator\">-=</span>b<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// a = a-b -->10 = 30-20</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//字符串连接符 +</span>\n        <span class=\"token comment\" spellcheck=\"true\">//当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//但是如果String类型前面出现了运算，则会先运算再连接。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png\" alt=\"result02\"></p>\n<hr>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>优先级</strong></th>\n<th style=\"text-align:center\"><strong>运算符</strong></th>\n<th style=\"text-align:center\"><strong>简介</strong></th>\n<th style=\"text-align:center\"><strong>结合性</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><code>[ ]</code>、<code>.</code>、<code>( )</code></td>\n<td style=\"text-align:center\">方法调用，属性获取</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">!、~、 ++、 –</td>\n<td style=\"text-align:center\">一元运算符</td>\n<td style=\"text-align:center\">从右向左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">* 、/ 、%</td>\n<td style=\"text-align:center\">乘、除、取模（余数）</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">+ 、 -</td>\n<td style=\"text-align:center\">加减法</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td>\n<td style=\"text-align:center\">左位移、右位移、无符号右移</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">&lt; 、&lt;= 、&gt;、 &gt;=、 instanceof</td>\n<td style=\"text-align:center\">小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">== 、!=</td>\n<td style=\"text-align:center\">2个值是否相等，2个值是否不等于。 下面有详细的解释</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">按位与</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">按位异或</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">按位或</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:center\">短路与</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\"></td>\n<td>短路或</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">?:</td>\n<td style=\"text-align:center\">条件运算符</td>\n<td style=\"text-align:center\">从右向左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">=、 += 、-= 、*= 、/=、 %=、 &amp;=、 \\</td>\n<td style=\"text-align:center\">=、 ^=、 &lt;、&lt;= 、&gt;、&gt;= 、&gt;&gt;=</td>\n<td style=\"text-align:center\">混合赋值运算符</td>\n<td>从右向左</td>\n</tr>\n</tbody>\n</table>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java基础语法之注释、标识符、数据类型/\" target=\"_blank\" rel=\"noopener\">Java基础语法之注释、标识符、数据类型（一）</a></p>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java基础之类型转换和变量（二）/\" target=\"_blank\" rel=\"noopener\">Java基础语法之类型转换和变量（二）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"Java语言支持的与算符\"><a href=\"#Java语言支持的与算符\" class=\"headerlink\" title=\"Java语言支持的与算符\"></a>Java语言支持的与算符</h3><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><h4 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a><strong>符号</strong></h4><p>算术运算符符号：<strong>+   ,   -   ,   *   ,   /   ,   ++   ,   –</strong></p>\n<pre><code class=\"java\">package Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        int a = 10;\n        int b = 20;\n        int c = 30;\n        int d = 40;\n        System.out.println(a+b);\n        System.out.println(a-b);\n        System.out.println(a*b);\n        System.out.println(a/(double)b);\n        System.out.println(a%b);\n    }\n}\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png\" alt=\"输出结果\"></p>\n<hr>\n<h4 id=\"小tips\"><a href=\"#小tips\" class=\"headerlink\" title=\"小tips\"></a><strong>小tips</strong></h4><ul>\n<li><p>当参与运算的变量中有<strong>long</strong>型时，输出的结果也为<strong>long</strong>型</p>\n</li>\n<li><p>若参与运算的变量中五<strong>long</strong>型时，<strong>无论参与运算的变量是何类型</strong>，则输出结果均为<strong>int</strong>型</p>\n</li>\n</ul>\n<p>eg：</p>\n<pre><code class=\"java\">package Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        long a = 10;\n        int b = 20;\n        byte c = 30;\n        short d = 40;\n        System.out.println((String) (a+b));\n        System.out.println((String) (b+c));\n        System.out.println((String) (c+d));\n        System.out.println((String) (b+d));\n\n\n    }\n}\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png\" alt=\"test\"></p>\n<hr>\n<p><strong> 自增（++）、自减（–）运算符</strong></p>\n<pre><code class=\"java\">package Operator;\n\npublic class Demo03 {\n    public static void main(String[] args) {\n        //++  --  自增 自减  一元运算符\n        int a = 1;\n        int b = a++;                //执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。\n        System.out.println(a);\n        int c = ++a;                //执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n    }\n}\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png\" alt=\"自增自减\"></p>\n<hr>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><h4 id=\"符号-1\"><a href=\"#符号-1\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>赋值运算符符号：<strong>=</strong></p>\n<h4 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><pre><code class=\"java\">//语法格式如下\nint a = 10;  //初始化int类型变量a，并将10赋值给a。\n</code></pre>\n<hr>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><h4 id=\"符号-2\"><a href=\"#符号-2\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>：关系运算符符号：<strong>&gt;   ,   &lt;   ,   &gt;=   ,   &lt;=   ,   ==   ,   !=   ,   instanceof</strong></p>\n<ul>\n<li><strong>关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</strong></li>\n</ul>\n<h4 id=\"语法格式-1\"><a href=\"#语法格式-1\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><pre><code class=\"java\">package Operator;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中\n        int a = 10 ;\n        int b = 20 ;\n        System.out.println(a == b);\n        System.out.println(a != b);\n        System.out.println(a &lt; b);\n        System.out.println(a &gt; b);\n\n    }\n}\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><h4 id=\"符号-3\"><a href=\"#符号-3\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>逻辑运算符符号：<strong>&amp;&amp;   ,   ||   ,   !</strong></p>\n<h4 id=\"语法格式-2\"><a href=\"#语法格式-2\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><pre><code class=\"java\">package Operator;\n\npublic class Demo04 {\n    public static void main(String[] args) {\n        boolean a = true;\n        boolean b = false;\n        System.out.println(&quot;a&amp;&amp;b:\\t&quot;+(a &amp;&amp; b));             //逻辑与运算：只要有一个是假的，则结果就是假的\n        System.out.println(&quot;a||b:\\t&quot;+(a || b));             //逻辑或运算：只要有一个是真的，则结果就是真的\n        System.out.println(&quot;!(a&amp;&amp;b):\\t&quot;+!(a &amp;&amp; b));         //逻辑非运算：结果取反\n        //短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。\n        int c = 5;\n        boolean d = b &amp;&amp; (c++ &gt; 5);\n        System.out.println(d);\n        System.out.println(c);\n    }\n}\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png\" alt=\"result01\"></p>\n<hr>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><h4 id=\"符号-4\"><a href=\"#符号-4\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>位运算符符号：<strong>&amp;  ,  |  ,  ^  ,  ~  ,  &gt;&gt;  ,  &lt;&lt;   ,  &gt;&gt;&gt;</strong></p>\n<h4 id=\"语法格式-3\"><a href=\"#语法格式-3\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><p>语法格式如下</p>\n<pre><code class=\"java\">package Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        /*\n        A =     0010 1101\n        B =     1011 1001\n        -------------------\n        A&amp;B =   0010 1001\n        A|B =   1011 1101\n        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真\n        ~B  =   0100 0110\n        */\n        //快速计算2*8\n        System.out.println(2&lt;&lt;3);\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><h4 id=\"符号-5\"><a href=\"#符号-5\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>条件运算符符号：<strong>x ? y : z :</strong></p>\n<h4 id=\"语法格式-4\"><a href=\"#语法格式-4\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><p>语法格式如下：</p>\n<pre><code class=\"java\">package Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        // 条件运算符 x ? y : z\n        // 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z\n        System.out.println((a&gt;b) ? 50 : 60);\n        System.out.println((a&lt;b) ? 50 : 60);\n    }\n\n}\n\n</code></pre>\n<hr>\n<h3 id=\"扩展赋值运算符\"><a href=\"#扩展赋值运算符\" class=\"headerlink\" title=\"扩展赋值运算符\"></a>扩展赋值运算符</h3><h4 id=\"符号-6\"><a href=\"#符号-6\" class=\"headerlink\" title=\"符号\"></a>符号</h4><p>扩展赋值运算符符号：<strong>+=  ,  -=  ,  *=  ,  /=</strong></p>\n<h4 id=\"语法格式-5\"><a href=\"#语法格式-5\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><p>语法格式如下</p>\n<pre><code class=\"java\">package Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        a+=b;\n        System.out.println(a); // a = a+b --&gt;30 = 10+20\n        a-=b;\n        System.out.println(a); // a = a-b --&gt;10 = 30-20\n\n        //字符串连接符 +\n        //当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。\n        System.out.println(&quot;&quot; + a + b);\n        //但是如果String类型前面出现了运算，则会先运算再连接。\n        System.out.println(b+ a + &quot;&quot; );\n    }\n\n}\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png\" alt=\"result02\"></p>\n<hr>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>优先级</strong></th>\n<th style=\"text-align:center\"><strong>运算符</strong></th>\n<th style=\"text-align:center\"><strong>简介</strong></th>\n<th style=\"text-align:center\"><strong>结合性</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"><code>[ ]</code>、<code>.</code>、<code>( )</code></td>\n<td style=\"text-align:center\">方法调用，属性获取</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">!、~、 ++、 –</td>\n<td style=\"text-align:center\">一元运算符</td>\n<td style=\"text-align:center\">从右向左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">* 、/ 、%</td>\n<td style=\"text-align:center\">乘、除、取模（余数）</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">+ 、 -</td>\n<td style=\"text-align:center\">加减法</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td>\n<td style=\"text-align:center\">左位移、右位移、无符号右移</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">&lt; 、&lt;= 、&gt;、 &gt;=、 instanceof</td>\n<td style=\"text-align:center\">小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">== 、!=</td>\n<td style=\"text-align:center\">2个值是否相等，2个值是否不等于。 下面有详细的解释</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">按位与</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">按位异或</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">按位或</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:center\">短路与</td>\n<td style=\"text-align:center\">从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\"></td>\n<td>短路或</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">?:</td>\n<td style=\"text-align:center\">条件运算符</td>\n<td style=\"text-align:center\">从右向左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">=、 += 、-= 、*= 、/=、 %=、 &amp;=、 \\</td>\n<td style=\"text-align:center\">=、 ^=、 &lt;、&lt;= 、&gt;、&gt;= 、&gt;&gt;=</td>\n<td style=\"text-align:center\">混合赋值运算符</td>\n<td>从右向左</td>\n</tr>\n</tbody>\n</table>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java基础语法之注释、标识符、数据类型/\" target=\"_blank\" rel=\"noopener\">Java基础语法之注释、标识符、数据类型（一）</a></p>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java基础之类型转换和变量（二）/\" target=\"_blank\" rel=\"noopener\">Java基础语法之类型转换和变量（二）</a></p>\n"},{"title":"Java数组01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg"],"date":"2022-08-25T14:41:17.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n### 数组的定义\n\n- 数组是相同类型数据的有序集合\n- 数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。\n- 其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。\n\n---\n\n### 数组声明创建\n\n- 首先必须声明数组变量，才能再程序中使用数组。语法如下：\n\n```java\ndataType[] arrayRefVar;       //首选方法\ndataType arrayRefVar[];\t\t  //效果相同，但不是首选方法\n```\n\n- Java语言使用new操作符来创建数组，语法如下：\n\n```java\ndataType [] arrayRefVar = new dataType[arraySize];\n```\n\n- 数组的元素是通过索引访问的，数组索引从0开始。\n- 获取数组长度：arrays.length\n\n```\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:21\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        int[] nums;                     //1.声明一个数组\n        nums = new int[10];             //2.给数组开辟空间，创建一个数组\n\n        int[] numrs = new int[10];      //直接声明数组并创建\n\n        \n\n    }\n}\n```\n\n---\n\n### 数组的四个基本特点\n\n- 其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。\n- 其元素必须是相同类型，不允许出现混合类型。\n- 数组中的元素可以是任何数据类型，包括基本类型和引用类型。\n- 数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。\n- 数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，**数组对象本身是在堆中的**\n\n","source":"_posts/Java数组01.md","raw":"---\ntitle: Java数组01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg'\ndate: 2022-08-25 22:41:17\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java数组\nkeywords:\ndescription:\n---\n\n### 数组的定义\n\n- 数组是相同类型数据的有序集合\n- 数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。\n- 其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。\n\n---\n\n### 数组声明创建\n\n- 首先必须声明数组变量，才能再程序中使用数组。语法如下：\n\n```java\ndataType[] arrayRefVar;       //首选方法\ndataType arrayRefVar[];\t\t  //效果相同，但不是首选方法\n```\n\n- Java语言使用new操作符来创建数组，语法如下：\n\n```java\ndataType [] arrayRefVar = new dataType[arraySize];\n```\n\n- 数组的元素是通过索引访问的，数组索引从0开始。\n- 获取数组长度：arrays.length\n\n```\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:21\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        int[] nums;                     //1.声明一个数组\n        nums = new int[10];             //2.给数组开辟空间，创建一个数组\n\n        int[] numrs = new int[10];      //直接声明数组并创建\n\n        \n\n    }\n}\n```\n\n---\n\n### 数组的四个基本特点\n\n- 其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。\n- 其元素必须是相同类型，不允许出现混合类型。\n- 数组中的元素可以是任何数据类型，包括基本类型和引用类型。\n- 数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。\n- 数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，**数组对象本身是在堆中的**\n\n","slug":"Java数组01","published":1,"updated":"2022-08-25T15:02:35.415Z","layout":"post","link":"","_id":"cl796hihf000lgwrwmb4zd6fa","content":"<h3 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h3><ul>\n<li>数组是相同类型数据的有序集合</li>\n<li>数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。</li>\n<li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。</li>\n</ul>\n<hr>\n<h3 id=\"数组声明创建\"><a href=\"#数组声明创建\" class=\"headerlink\" title=\"数组声明创建\"></a>数组声明创建</h3><ul>\n<li>首先必须声明数组变量，才能再程序中使用数组。语法如下：</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar<span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//首选方法</span>\ndataType arrayRefVar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//效果相同，但不是首选方法</span>\n</code></pre>\n<ul>\n<li>Java语言使用new操作符来创建数组，语法如下：</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">dataType <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">dataType</span><span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>数组的元素是通过索引访问的，数组索引从0开始。</li>\n<li>获取数组长度：arrays.length</li>\n</ul>\n<pre><code>package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:21\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        int[] nums;                     //1.声明一个数组\n        nums = new int[10];             //2.给数组开辟空间，创建一个数组\n\n        int[] numrs = new int[10];      //直接声明数组并创建\n\n\n\n    }\n}\n</code></pre><hr>\n<h3 id=\"数组的四个基本特点\"><a href=\"#数组的四个基本特点\" class=\"headerlink\" title=\"数组的四个基本特点\"></a>数组的四个基本特点</h3><ul>\n<li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li>\n<li>其元素必须是相同类型，不允许出现混合类型。</li>\n<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>\n<li>数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。</li>\n<li>数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h3><ul>\n<li>数组是相同类型数据的有序集合</li>\n<li>数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。</li>\n<li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。</li>\n</ul>\n<hr>\n<h3 id=\"数组声明创建\"><a href=\"#数组声明创建\" class=\"headerlink\" title=\"数组声明创建\"></a>数组声明创建</h3><ul>\n<li>首先必须声明数组变量，才能再程序中使用数组。语法如下：</li>\n</ul>\n<pre><code class=\"java\">dataType[] arrayRefVar;       //首选方法\ndataType arrayRefVar[];          //效果相同，但不是首选方法\n</code></pre>\n<ul>\n<li>Java语言使用new操作符来创建数组，语法如下：</li>\n</ul>\n<pre><code class=\"java\">dataType [] arrayRefVar = new dataType[arraySize];\n</code></pre>\n<ul>\n<li>数组的元素是通过索引访问的，数组索引从0开始。</li>\n<li>获取数组长度：arrays.length</li>\n</ul>\n<pre><code>package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:21\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        int[] nums;                     //1.声明一个数组\n        nums = new int[10];             //2.给数组开辟空间，创建一个数组\n\n        int[] numrs = new int[10];      //直接声明数组并创建\n\n\n\n    }\n}\n</code></pre><hr>\n<h3 id=\"数组的四个基本特点\"><a href=\"#数组的四个基本特点\" class=\"headerlink\" title=\"数组的四个基本特点\"></a>数组的四个基本特点</h3><ul>\n<li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li>\n<li>其元素必须是相同类型，不允许出现混合类型。</li>\n<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>\n<li>数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。</li>\n<li>数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li>\n</ul>\n"},{"title":"Java异常02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg"],"date":"2022-08-25T14:42:06.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 捕获异常\n\n### try catch关键字\n\n- try：监控类型\n- catch：想要捕获的异常，可以捕获异常\n- finally：可以处理善后工作，（可以不要finally）\n- 使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。\n\n```java\npackage com.xiheya.exception;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/14/ 9:47\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n\n        //假设要捕获多个异常：我们要从小到大的去捕获\n        // 快捷键 Ctrl + Alt + T  快速捕获异常。\n        try{                                    //try  监控类型\n            int a = 1;\n            int b = 0;\n            System.out.println(a/b);\n        }catch (ArithmeticException e){         //catch（想要捕获的异常类型0  捕获异常）\n            System.out.println(\"程序出现异常，b不能为0\");\n        }finally {                              //处理善后工作。可以不要finally，假设IO，资源 关闭\n            System.out.println(\"finally\");\n        }\n\n    }\n}\n```\n\n---\n\n### throw 和 throws关键字\n\n- throw关键字一般是在方法体内主动抛出异常\n- throws关键字一般是在方法名中抛出异常\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 0;\n        try {\n            new Test().test(1,0);\n        } catch (ArithmeticException e) {\n            e.printStackTrace();\n        } finally {\n        }\n    }\n\n    public void test (int a , int b)throws ArithmeticException{\n        if (b == 0){\n            throw new ArithmeticException();\n        }\n    }\n\n}\n```\n\n---\n\n## 自定义异常\n\n- 使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。\n- 在程序中使用自定义异常类，大体可以分为以下几个步骤：\n  - 创建自定义异常类。\n  - 在方法中通过throw关键字抛出异常对象。\n  - 如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。\n  - 再出现异常方法的调用者中捕获并处理异常。\n\n### 代码\n\n```java\npackage com.xiheya.exception.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 0:23\n * @Description\n */\npublic class Test {\n    static void test(int a) throws MyException {\n        if (a > 10){\n            throw new MyException(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            test(11);\n        } catch (MyException e) {\n            System.out.println(\"my exception\"+ e);\n        }\n    }\n}\n/*\npublic class MyException extends Exception{\n    private int detail;\n\n    public MyException(int a) {\n        this.detail = a;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyException{\" +\n                \"detail=\" + detail +\n                '}';\n    }\n}\n */\n```\n\n---\n\n### 运行结果\n\n![自定义异常](https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png)\n\n---\n\n### 经验总结\n\n- 处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理\n- 在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。\n- 对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。\n- 尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出\n- 具体如何处理异常，要根据不同的业务需求和异常类型去决定\n- 尽量添加finally语句块去释放占用的资源。\n","source":"_posts/Java异常02.md","raw":"---\ntitle: Java异常02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg'\ndate: 2022-08-25 22:42:06\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java异常\nkeywords:\ndescription:\n---\n\n## 捕获异常\n\n### try catch关键字\n\n- try：监控类型\n- catch：想要捕获的异常，可以捕获异常\n- finally：可以处理善后工作，（可以不要finally）\n- 使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。\n\n```java\npackage com.xiheya.exception;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/14/ 9:47\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n\n        //假设要捕获多个异常：我们要从小到大的去捕获\n        // 快捷键 Ctrl + Alt + T  快速捕获异常。\n        try{                                    //try  监控类型\n            int a = 1;\n            int b = 0;\n            System.out.println(a/b);\n        }catch (ArithmeticException e){         //catch（想要捕获的异常类型0  捕获异常）\n            System.out.println(\"程序出现异常，b不能为0\");\n        }finally {                              //处理善后工作。可以不要finally，假设IO，资源 关闭\n            System.out.println(\"finally\");\n        }\n\n    }\n}\n```\n\n---\n\n### throw 和 throws关键字\n\n- throw关键字一般是在方法体内主动抛出异常\n- throws关键字一般是在方法名中抛出异常\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 0;\n        try {\n            new Test().test(1,0);\n        } catch (ArithmeticException e) {\n            e.printStackTrace();\n        } finally {\n        }\n    }\n\n    public void test (int a , int b)throws ArithmeticException{\n        if (b == 0){\n            throw new ArithmeticException();\n        }\n    }\n\n}\n```\n\n---\n\n## 自定义异常\n\n- 使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。\n- 在程序中使用自定义异常类，大体可以分为以下几个步骤：\n  - 创建自定义异常类。\n  - 在方法中通过throw关键字抛出异常对象。\n  - 如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。\n  - 再出现异常方法的调用者中捕获并处理异常。\n\n### 代码\n\n```java\npackage com.xiheya.exception.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 0:23\n * @Description\n */\npublic class Test {\n    static void test(int a) throws MyException {\n        if (a > 10){\n            throw new MyException(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            test(11);\n        } catch (MyException e) {\n            System.out.println(\"my exception\"+ e);\n        }\n    }\n}\n/*\npublic class MyException extends Exception{\n    private int detail;\n\n    public MyException(int a) {\n        this.detail = a;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyException{\" +\n                \"detail=\" + detail +\n                '}';\n    }\n}\n */\n```\n\n---\n\n### 运行结果\n\n![自定义异常](https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png)\n\n---\n\n### 经验总结\n\n- 处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理\n- 在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。\n- 对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。\n- 尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出\n- 具体如何处理异常，要根据不同的业务需求和异常类型去决定\n- 尽量添加finally语句块去释放占用的资源。\n","slug":"Java异常02","published":1,"updated":"2022-08-25T15:02:18.233Z","layout":"post","link":"","_id":"cl796hihi000pgwrwlu62g01o","content":"<h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><h3 id=\"try-catch关键字\"><a href=\"#try-catch关键字\" class=\"headerlink\" title=\"try catch关键字\"></a>try catch关键字</h3><ul>\n<li>try：监控类型</li>\n<li>catch：想要捕获的异常，可以捕获异常</li>\n<li>finally：可以处理善后工作，（可以不要finally）</li>\n<li>使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/14/ 9:47\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//假设要捕获多个异常：我们要从小到大的去捕获</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 快捷键 Ctrl + Alt + T  快速捕获异常。</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>                                    <span class=\"token comment\" spellcheck=\"true\">//try  监控类型</span>\n            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>         <span class=\"token comment\" spellcheck=\"true\">//catch（想要捕获的异常类型0  捕获异常）</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序出现异常，b不能为0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>                              <span class=\"token comment\" spellcheck=\"true\">//处理善后工作。可以不要finally，假设IO，资源 关闭</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h3 id=\"throw-和-throws关键字\"><a href=\"#throw-和-throws关键字\" class=\"headerlink\" title=\"throw 和 throws关键字\"></a>throw 和 throws关键字</h3><ul>\n<li>throw关键字一般是在方法体内主动抛出异常</li>\n<li>throws关键字一般是在方法名中抛出异常</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> ArithmeticException<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><ul>\n<li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li>\n<li>在程序中使用自定义异常类，大体可以分为以下几个步骤：<ul>\n<li>创建自定义异常类。</li>\n<li>在方法中通过throw关键字抛出异常对象。</li>\n<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。</li>\n<li>再出现异常方法的调用者中捕获并处理异常。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">.</span>demo02<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 0:23\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> MyException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my exception\"</span><span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class MyException extends Exception{\n    private int detail;\n\n    public MyException(int a) {\n        this.detail = a;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyException{\" +\n                \"detail=\" + detail +\n                '}';\n    }\n}\n */</span>\n</code></pre>\n<hr>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png\" alt=\"自定义异常\"></p>\n<hr>\n<h3 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h3><ul>\n<li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li>\n<li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。</li>\n<li>对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。</li>\n<li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li>\n<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>\n<li>尽量添加finally语句块去释放占用的资源。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><h3 id=\"try-catch关键字\"><a href=\"#try-catch关键字\" class=\"headerlink\" title=\"try catch关键字\"></a>try catch关键字</h3><ul>\n<li>try：监控类型</li>\n<li>catch：想要捕获的异常，可以捕获异常</li>\n<li>finally：可以处理善后工作，（可以不要finally）</li>\n<li>使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。</li>\n</ul>\n<pre><code class=\"java\">package com.xiheya.exception;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/14/ 9:47\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n\n        //假设要捕获多个异常：我们要从小到大的去捕获\n        // 快捷键 Ctrl + Alt + T  快速捕获异常。\n        try{                                    //try  监控类型\n            int a = 1;\n            int b = 0;\n            System.out.println(a/b);\n        }catch (ArithmeticException e){         //catch（想要捕获的异常类型0  捕获异常）\n            System.out.println(&quot;程序出现异常，b不能为0&quot;);\n        }finally {                              //处理善后工作。可以不要finally，假设IO，资源 关闭\n            System.out.println(&quot;finally&quot;);\n        }\n\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"throw-和-throws关键字\"><a href=\"#throw-和-throws关键字\" class=\"headerlink\" title=\"throw 和 throws关键字\"></a>throw 和 throws关键字</h3><ul>\n<li>throw关键字一般是在方法体内主动抛出异常</li>\n<li>throws关键字一般是在方法名中抛出异常</li>\n</ul>\n<pre><code class=\"java\">public class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 0;\n        try {\n            new Test().test(1,0);\n        } catch (ArithmeticException e) {\n            e.printStackTrace();\n        } finally {\n        }\n    }\n\n    public void test (int a , int b)throws ArithmeticException{\n        if (b == 0){\n            throw new ArithmeticException();\n        }\n    }\n\n}\n</code></pre>\n<hr>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><ul>\n<li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li>\n<li>在程序中使用自定义异常类，大体可以分为以下几个步骤：<ul>\n<li>创建自定义异常类。</li>\n<li>在方法中通过throw关键字抛出异常对象。</li>\n<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。</li>\n<li>再出现异常方法的调用者中捕获并处理异常。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.exception.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 0:23\n * @Description\n */\npublic class Test {\n    static void test(int a) throws MyException {\n        if (a &gt; 10){\n            throw new MyException(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            test(11);\n        } catch (MyException e) {\n            System.out.println(&quot;my exception&quot;+ e);\n        }\n    }\n}\n/*\npublic class MyException extends Exception{\n    private int detail;\n\n    public MyException(int a) {\n        this.detail = a;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;MyException{&quot; +\n                &quot;detail=&quot; + detail +\n                &#39;}&#39;;\n    }\n}\n */\n</code></pre>\n<hr>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png\" alt=\"自定义异常\"></p>\n<hr>\n<h3 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h3><ul>\n<li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li>\n<li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。</li>\n<li>对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。</li>\n<li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li>\n<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>\n<li>尽量添加finally语句块去释放占用的资源。</li>\n</ul>\n"},{"title":"Java数组03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg"],"date":"2022-08-25T14:41:24.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Arrays类\n\n- 数组的工具类java.util.Arrays\n\n- 由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。\n\n- **查看JDK帮助文档**\n\n- Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用**（注意：是”不用”而不是“不能”）**\n\n- 具有以下常用功能：\n\n  - 给数组赋值：通过fill方法。\n  - 对数组排序：通过sort方法，按升序\n  - 比较数组：通过equals方法比较数组中元素值是否相等\n  - 查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作\n\n  代码实现：\n\n  ```java\n  package com.xiheya.Array;\n  \n  import java.util.Arrays;\n  \n  /**\n   * @Author {xiheya}\n   * @Date: 2022/03/12/ 16:19\n   * @Description\n   */\n  public class ArrayDemo05 {\n      public static void main(String[] args) {\n          int[] a = {1,2,3,4,65,98,54,21,0};\n          System.out.println(Arrays.toString(a));         //Arrays 里的toString方法\n          Arrays.sort(a);                                 //sort，将a中的数据从小到大排列\n          System.out.println(Arrays.toString(a));         \n      }\n  }\n  \n  ```\n\n  运行结果：\n\n  ![方法调用](https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png)\n\n---\n\n### 冒泡排序\n\n- 冒泡排序是最出名的算法之一，总共有八大排序！\n\n```java\npackage com.xiheya.Array;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:32\n * @Description\n */\npublic class ArrayDemo06 {\n    public static void main(String[] args) {\n        int[] a = {1,6,5,3,2,9};\n        System.out.println(Arrays.toString(a));\n        sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n\n    //冒泡排序：\n    // 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。\n    // 2.每一次排序都会产生一个最大或最小的数字；\n    // 3.下一轮则可以少一次排序\n    // 4.依次循环直到结束\n    public static void sort(int[] a){\n        int temp = 0;\n        for (int i = 0; i < a.length-1; i++) {\n            for (int j = 0; j < a.length-i-1; j++){\n                if (a[j] > a[j+1]){\n                    temp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png)\n\n---\n\n### 稀疏数组\n\n- 需求：编写五子棋游戏中，有存盘退出和续上盘的功能。\n- 介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。\n- 稀疏数组的处理方式是：\n  - 记录数组一共有几行几列，有多少个不同值\n  - 把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模\n- 稀疏数组与原数组图示：\n\n![原数组与稀疏数组](https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png)\n\n---\n\n**设计一个程序实现 稀疏数组与普通数组 的互换**\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 17:39\n * @Description\n */\npublic class ArrayDemo07 {\n    public static void main(String[] args) {\n        int[][] array = new int[11][11];\n        array[2][3] = 2;\n        array[1][4] = 1;\n        printArray(array);                                  //打印原数组\n        int[][] array1 = toArray(array);                    //将原数组转换为稀疏数组\n        printArray(array1);                                 //打印转换好的稀疏数组\n        int[][] restore = restore(array1);                  //将稀疏数组再转换为普通数组\n        printArray(restore);                                //打印转换完成后的数组\n    }\n\n    public static void printArray(int[][] array){           //通过for_each遍历方法，打印数组\n        System.out.println(\"start to print the array:\");\n        for (int[] ints : array) {                          //for_each遍历外层\n            System.out.print(\"[\");\n            for (int anInt : ints) {                        //for_each遍历内层\n                System.out.print(anInt + \"\\t\");\n            }\n            System.out.print(\"]\");\n            System.out.println();\n        }\n    }\n\n    public static int[][] toArray(int[][] a){               //将普通数组转换为稀疏数组的方法\n        int sum = 0;                                        //用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];\n        for (int[] ints : a) {\n            for (int anInt : ints) {\n                if (anInt != 0){\n                    sum++;\n                }\n            }\n        }\n        int[][] temp = new int[sum+1][3];                   //统计完sum声明并创建稀疏数组temp\n        temp[0][0] = a.length;                              //temp[0][0] 存放行数\n        temp[0][1] = a[0].length;                           //temp[0][1] 存放列数\n        temp[0][2] = sum;                                   //temp[0][2] 存放数组内有效数据个数\n        int tempnum = 1;                                    //稀疏数组行号tempnum\n        for (int i = 0; i < a.length; i++) {                //遍历普通数组，当遍历到普通数字内有效数字时\n            for (int j = 0; j < a[i].length; j++) {\n                if (a[i][j] != 0){\n                    temp[tempnum][0] = i;                   //将原普通数组行号赋值给temp[tempnum][0]\n                    temp[tempnum][1] = j;                   //将原普通数组行号赋值给temp[tempnum][1]\n                    temp[tempnum][2] = a[i][j];             //将原普通数组第i行j列的数据 赋值给temp[tempnum][2]\n                    tempnum++;                              //装载完成后，稀疏数组行号 tempnum  自增1\n                }\n            }\n        }\n    return temp;\n    }\n\n    public static int[][] restore (int[][] array){              //将稀疏数组还原为普通数组的方法\n        int[][] result = new int[array[0][0]][array[0][1]];     //声明并创建还原后的数组：result\n        for (int i = 1; i < array.length ; i++) {               //遍历稀疏数组，取出原普通数组的行号和列号\n            result[array[i][0]][array[i][1]] = array[i][2];     //array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。\n        }\n\n\n    return result;                                              //返回还原完成后的普通数组。\n    }\n\n}\n\n```\n\n运行结果：\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png)\n","source":"_posts/Java数组03.md","raw":"---\ntitle: Java数组03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg'\ndate: 2022-08-25 22:41:24\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java数组\nkeywords:\ndescription:\n---\n\n## Arrays类\n\n- 数组的工具类java.util.Arrays\n\n- 由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。\n\n- **查看JDK帮助文档**\n\n- Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用**（注意：是”不用”而不是“不能”）**\n\n- 具有以下常用功能：\n\n  - 给数组赋值：通过fill方法。\n  - 对数组排序：通过sort方法，按升序\n  - 比较数组：通过equals方法比较数组中元素值是否相等\n  - 查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作\n\n  代码实现：\n\n  ```java\n  package com.xiheya.Array;\n  \n  import java.util.Arrays;\n  \n  /**\n   * @Author {xiheya}\n   * @Date: 2022/03/12/ 16:19\n   * @Description\n   */\n  public class ArrayDemo05 {\n      public static void main(String[] args) {\n          int[] a = {1,2,3,4,65,98,54,21,0};\n          System.out.println(Arrays.toString(a));         //Arrays 里的toString方法\n          Arrays.sort(a);                                 //sort，将a中的数据从小到大排列\n          System.out.println(Arrays.toString(a));         \n      }\n  }\n  \n  ```\n\n  运行结果：\n\n  ![方法调用](https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png)\n\n---\n\n### 冒泡排序\n\n- 冒泡排序是最出名的算法之一，总共有八大排序！\n\n```java\npackage com.xiheya.Array;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:32\n * @Description\n */\npublic class ArrayDemo06 {\n    public static void main(String[] args) {\n        int[] a = {1,6,5,3,2,9};\n        System.out.println(Arrays.toString(a));\n        sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n\n    //冒泡排序：\n    // 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。\n    // 2.每一次排序都会产生一个最大或最小的数字；\n    // 3.下一轮则可以少一次排序\n    // 4.依次循环直到结束\n    public static void sort(int[] a){\n        int temp = 0;\n        for (int i = 0; i < a.length-1; i++) {\n            for (int j = 0; j < a.length-i-1; j++){\n                if (a[j] > a[j+1]){\n                    temp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png)\n\n---\n\n### 稀疏数组\n\n- 需求：编写五子棋游戏中，有存盘退出和续上盘的功能。\n- 介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。\n- 稀疏数组的处理方式是：\n  - 记录数组一共有几行几列，有多少个不同值\n  - 把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模\n- 稀疏数组与原数组图示：\n\n![原数组与稀疏数组](https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png)\n\n---\n\n**设计一个程序实现 稀疏数组与普通数组 的互换**\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 17:39\n * @Description\n */\npublic class ArrayDemo07 {\n    public static void main(String[] args) {\n        int[][] array = new int[11][11];\n        array[2][3] = 2;\n        array[1][4] = 1;\n        printArray(array);                                  //打印原数组\n        int[][] array1 = toArray(array);                    //将原数组转换为稀疏数组\n        printArray(array1);                                 //打印转换好的稀疏数组\n        int[][] restore = restore(array1);                  //将稀疏数组再转换为普通数组\n        printArray(restore);                                //打印转换完成后的数组\n    }\n\n    public static void printArray(int[][] array){           //通过for_each遍历方法，打印数组\n        System.out.println(\"start to print the array:\");\n        for (int[] ints : array) {                          //for_each遍历外层\n            System.out.print(\"[\");\n            for (int anInt : ints) {                        //for_each遍历内层\n                System.out.print(anInt + \"\\t\");\n            }\n            System.out.print(\"]\");\n            System.out.println();\n        }\n    }\n\n    public static int[][] toArray(int[][] a){               //将普通数组转换为稀疏数组的方法\n        int sum = 0;                                        //用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];\n        for (int[] ints : a) {\n            for (int anInt : ints) {\n                if (anInt != 0){\n                    sum++;\n                }\n            }\n        }\n        int[][] temp = new int[sum+1][3];                   //统计完sum声明并创建稀疏数组temp\n        temp[0][0] = a.length;                              //temp[0][0] 存放行数\n        temp[0][1] = a[0].length;                           //temp[0][1] 存放列数\n        temp[0][2] = sum;                                   //temp[0][2] 存放数组内有效数据个数\n        int tempnum = 1;                                    //稀疏数组行号tempnum\n        for (int i = 0; i < a.length; i++) {                //遍历普通数组，当遍历到普通数字内有效数字时\n            for (int j = 0; j < a[i].length; j++) {\n                if (a[i][j] != 0){\n                    temp[tempnum][0] = i;                   //将原普通数组行号赋值给temp[tempnum][0]\n                    temp[tempnum][1] = j;                   //将原普通数组行号赋值给temp[tempnum][1]\n                    temp[tempnum][2] = a[i][j];             //将原普通数组第i行j列的数据 赋值给temp[tempnum][2]\n                    tempnum++;                              //装载完成后，稀疏数组行号 tempnum  自增1\n                }\n            }\n        }\n    return temp;\n    }\n\n    public static int[][] restore (int[][] array){              //将稀疏数组还原为普通数组的方法\n        int[][] result = new int[array[0][0]][array[0][1]];     //声明并创建还原后的数组：result\n        for (int i = 1; i < array.length ; i++) {               //遍历稀疏数组，取出原普通数组的行号和列号\n            result[array[i][0]][array[i][1]] = array[i][2];     //array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。\n        }\n\n\n    return result;                                              //返回还原完成后的普通数组。\n    }\n\n}\n\n```\n\n运行结果：\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png)\n","slug":"Java数组03","published":1,"updated":"2022-08-25T15:02:49.895Z","layout":"post","link":"","_id":"cl796hihl000ugwrwsdu83kfd","content":"<h2 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h2><ul>\n<li><p>数组的工具类java.util.Arrays</p>\n</li>\n<li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。</p>\n</li>\n<li><p><strong>查看JDK帮助文档</strong></p>\n</li>\n<li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用<strong>（注意：是”不用”而不是“不能”）</strong></p>\n</li>\n<li><p>具有以下常用功能：</p>\n<ul>\n<li>给数组赋值：通过fill方法。</li>\n<li>对数组排序：通过sort方法，按升序</li>\n<li>比较数组：通过equals方法比较数组中元素值是否相等</li>\n<li>查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作</li>\n</ul>\n<p>代码实现：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Arrays<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:19\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo05</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">//Arrays 里的toString方法</span>\n        Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                 <span class=\"token comment\" spellcheck=\"true\">//sort，将a中的数据从小到大排列</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png\" alt=\"方法调用\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li>冒泡排序是最出名的算法之一，总共有八大排序！</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Arrays<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:32\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo06</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//冒泡排序：</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 2.每一次排序都会产生一个最大或最小的数字；</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 3.下一轮则可以少一次排序</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 4.依次循环直到结束</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h3 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h3><ul>\n<li>需求：编写五子棋游戏中，有存盘退出和续上盘的功能。</li>\n<li>介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li>\n<li>稀疏数组的处理方式是：<ul>\n<li>记录数组一共有几行几列，有多少个不同值</li>\n<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>\n</ul>\n</li>\n<li>稀疏数组与原数组图示：</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png\" alt=\"原数组与稀疏数组\"></p>\n<hr>\n<p><strong>设计一个程序实现 稀疏数组与普通数组 的互换</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 17:39\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo07</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                  <span class=\"token comment\" spellcheck=\"true\">//打印原数组</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">//将原数组转换为稀疏数组</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                 <span class=\"token comment\" spellcheck=\"true\">//打印转换好的稀疏数组</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> restore <span class=\"token operator\">=</span> <span class=\"token function\">restore</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\" spellcheck=\"true\">//将稀疏数组再转换为普通数组</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>restore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                <span class=\"token comment\" spellcheck=\"true\">//打印转换完成后的数组</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>           <span class=\"token comment\" spellcheck=\"true\">//通过for_each遍历方法，打印数组</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start to print the array:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                          <span class=\"token comment\" spellcheck=\"true\">//for_each遍历外层</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> anInt <span class=\"token operator\">:</span> ints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\" spellcheck=\"true\">//for_each遍历内层</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>anInt <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>               <span class=\"token comment\" spellcheck=\"true\">//将普通数组转换为稀疏数组的方法</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                        <span class=\"token comment\" spellcheck=\"true\">//用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> anInt <span class=\"token operator\">:</span> ints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anInt <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>sum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">//统计完sum声明并创建稀疏数组temp</span>\n        temp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>                              <span class=\"token comment\" spellcheck=\"true\">//temp[0][0] 存放行数</span>\n        temp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>                           <span class=\"token comment\" spellcheck=\"true\">//temp[0][1] 存放列数</span>\n        temp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>                                   <span class=\"token comment\" spellcheck=\"true\">//temp[0][2] 存放数组内有效数据个数</span>\n        <span class=\"token keyword\">int</span> tempnum <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                                    <span class=\"token comment\" spellcheck=\"true\">//稀疏数组行号tempnum</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                <span class=\"token comment\" spellcheck=\"true\">//遍历普通数组，当遍历到普通数字内有效数字时</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    temp<span class=\"token punctuation\">[</span>tempnum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">//将原普通数组行号赋值给temp[tempnum][0]</span>\n                    temp<span class=\"token punctuation\">[</span>tempnum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">//将原普通数组行号赋值给temp[tempnum][1]</span>\n                    temp<span class=\"token punctuation\">[</span>tempnum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">//将原普通数组第i行j列的数据 赋值给temp[tempnum][2]</span>\n                    tempnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\" spellcheck=\"true\">//装载完成后，稀疏数组行号 tempnum  自增1</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">restore</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>              <span class=\"token comment\" spellcheck=\"true\">//将稀疏数组还原为普通数组的方法</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">//声明并创建还原后的数组：result</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>               <span class=\"token comment\" spellcheck=\"true\">//遍历稀疏数组，取出原普通数组的行号和列号</span>\n            result<span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">//array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。</span>\n        <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>                                              <span class=\"token comment\" spellcheck=\"true\">//返回还原完成后的普通数组。</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png\" alt=\"输出结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h2><ul>\n<li><p>数组的工具类java.util.Arrays</p>\n</li>\n<li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。</p>\n</li>\n<li><p><strong>查看JDK帮助文档</strong></p>\n</li>\n<li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用<strong>（注意：是”不用”而不是“不能”）</strong></p>\n</li>\n<li><p>具有以下常用功能：</p>\n<ul>\n<li>给数组赋值：通过fill方法。</li>\n<li>对数组排序：通过sort方法，按升序</li>\n<li>比较数组：通过equals方法比较数组中元素值是否相等</li>\n<li>查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作</li>\n</ul>\n<p>代码实现：</p>\n<pre><code class=\"java\">package com.xiheya.Array;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:19\n * @Description\n */\npublic class ArrayDemo05 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,65,98,54,21,0};\n        System.out.println(Arrays.toString(a));         //Arrays 里的toString方法\n        Arrays.sort(a);                                 //sort，将a中的数据从小到大排列\n        System.out.println(Arrays.toString(a));         \n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png\" alt=\"方法调用\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li>冒泡排序是最出名的算法之一，总共有八大排序！</li>\n</ul>\n<pre><code class=\"java\">package com.xiheya.Array;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:32\n * @Description\n */\npublic class ArrayDemo06 {\n    public static void main(String[] args) {\n        int[] a = {1,6,5,3,2,9};\n        System.out.println(Arrays.toString(a));\n        sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n\n    //冒泡排序：\n    // 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。\n    // 2.每一次排序都会产生一个最大或最小的数字；\n    // 3.下一轮则可以少一次排序\n    // 4.依次循环直到结束\n    public static void sort(int[] a){\n        int temp = 0;\n        for (int i = 0; i &lt; a.length-1; i++) {\n            for (int j = 0; j &lt; a.length-i-1; j++){\n                if (a[j] &gt; a[j+1]){\n                    temp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h3 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h3><ul>\n<li>需求：编写五子棋游戏中，有存盘退出和续上盘的功能。</li>\n<li>介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li>\n<li>稀疏数组的处理方式是：<ul>\n<li>记录数组一共有几行几列，有多少个不同值</li>\n<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>\n</ul>\n</li>\n<li>稀疏数组与原数组图示：</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png\" alt=\"原数组与稀疏数组\"></p>\n<hr>\n<p><strong>设计一个程序实现 稀疏数组与普通数组 的互换</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 17:39\n * @Description\n */\npublic class ArrayDemo07 {\n    public static void main(String[] args) {\n        int[][] array = new int[11][11];\n        array[2][3] = 2;\n        array[1][4] = 1;\n        printArray(array);                                  //打印原数组\n        int[][] array1 = toArray(array);                    //将原数组转换为稀疏数组\n        printArray(array1);                                 //打印转换好的稀疏数组\n        int[][] restore = restore(array1);                  //将稀疏数组再转换为普通数组\n        printArray(restore);                                //打印转换完成后的数组\n    }\n\n    public static void printArray(int[][] array){           //通过for_each遍历方法，打印数组\n        System.out.println(&quot;start to print the array:&quot;);\n        for (int[] ints : array) {                          //for_each遍历外层\n            System.out.print(&quot;[&quot;);\n            for (int anInt : ints) {                        //for_each遍历内层\n                System.out.print(anInt + &quot;\\t&quot;);\n            }\n            System.out.print(&quot;]&quot;);\n            System.out.println();\n        }\n    }\n\n    public static int[][] toArray(int[][] a){               //将普通数组转换为稀疏数组的方法\n        int sum = 0;                                        //用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];\n        for (int[] ints : a) {\n            for (int anInt : ints) {\n                if (anInt != 0){\n                    sum++;\n                }\n            }\n        }\n        int[][] temp = new int[sum+1][3];                   //统计完sum声明并创建稀疏数组temp\n        temp[0][0] = a.length;                              //temp[0][0] 存放行数\n        temp[0][1] = a[0].length;                           //temp[0][1] 存放列数\n        temp[0][2] = sum;                                   //temp[0][2] 存放数组内有效数据个数\n        int tempnum = 1;                                    //稀疏数组行号tempnum\n        for (int i = 0; i &lt; a.length; i++) {                //遍历普通数组，当遍历到普通数字内有效数字时\n            for (int j = 0; j &lt; a[i].length; j++) {\n                if (a[i][j] != 0){\n                    temp[tempnum][0] = i;                   //将原普通数组行号赋值给temp[tempnum][0]\n                    temp[tempnum][1] = j;                   //将原普通数组行号赋值给temp[tempnum][1]\n                    temp[tempnum][2] = a[i][j];             //将原普通数组第i行j列的数据 赋值给temp[tempnum][2]\n                    tempnum++;                              //装载完成后，稀疏数组行号 tempnum  自增1\n                }\n            }\n        }\n    return temp;\n    }\n\n    public static int[][] restore (int[][] array){              //将稀疏数组还原为普通数组的方法\n        int[][] result = new int[array[0][0]][array[0][1]];     //声明并创建还原后的数组：result\n        for (int i = 1; i &lt; array.length ; i++) {               //遍历稀疏数组，取出原普通数组的行号和列号\n            result[array[i][0]][array[i][1]] = array[i][2];     //array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。\n        }\n\n\n    return result;                                              //返回还原完成后的普通数组。\n    }\n\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png\" alt=\"输出结果\"></p>\n"},{"title":"Java数组02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg"],"date":"2022-08-25T14:41:21.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 内存分析\n\n- Java内存分析\n\n![内存分析](https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png)\n\n**数组的声明在栈当中，创建空间及赋值操作在堆中。**\n\n![声明与创建](https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png)\n\n## 三种初始化\n\n### 静态初始化\n\n```java\nint[] a = {1,2,3};\nMan[] mans = {new Man(1,1),new Man(2,2)};\n```\n\n### 动态初始化\n\n```java\nint[] a = new int[5];\na[0] = 1;\na[1] = 2;\n……\n```\n\n### 数组的默认初始化\n\n- 数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:45\n * @Description\n */\npublic class ArrayDemo02 {\n    public static void main(String[] args) {\n        //静态初始化\n        int[] a = {1,2,3,4,5};\n        System.out.println(a[0]);\n        //动态初始化,包含默认初始化\n        int[] b = new int[2];\n        b[0] = 10;\n        System.out.println(b[0]);\n        System.out.println(b[1]);\n\n    }\n}\n\n```\n\n运行截图：\n\n![初始化](https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png)\n\n---\n\n### 数组边界\n\n- 下标的合法区间：[0,length-1],如果越界就会报错\n\n```java\npublic static void main(String[] args){\n\tint[] a = new int[2];\n\tSystem.out.println(a[2]);\n}\n```\n\n- **ArrayIndexOutOfBoundsException:数组下标越界异常**\n- 小结\n  - 数组是相同数据类型（数据类型可以为任意类型）的有序集合\n  - 数组也是对象，数组元素相当于对象的成员变量\n  - 数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds\n\n---\n\n## 数组的使用\n\n### 简单for循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n        \n    }\n}\n```\n\n---\n\n### For-Each循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i : a) {\n            System.out.println(i);\n        }\n    }\n}\n\n```\n\n---\n\n### 数组作方法入参\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n```\n\n---\n\n### 数组作返回值\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n\n```\n\n---\n\n运行结果：\n\n![数组操作](https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png)\n\n---\n\n## 多维数组\n\n- 多维数组可以看成是数组的数组~~（套娃）~~，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。\n- 二维数组\n\n语法：\n\n```java\nint a[][] = new int[2][5]  //声明并创建一个两行五列的数组\n```\n\n- 解析：二维数组a可以看一个两行五列的数组\n\n代码示例：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:43\n * @Description\n */\npublic class ArrayDemo04 {\n    public static void main(String[] args) {\n        /**\n         * array:\n         * 1 2\n         * 3 4\n         * 5 6\n         * 7 8\n         */\n        int[][] array = {{1,2}, {3,4},{5,6},{7,8}};\n        for (int i = 0; i < array.length; i++) {\n            System.out.println(\"\\nprint  array[\" + i + \"],nums\");\n            for (int j = 0; j < array[i].length; j++) {\n                System.out.print(array[i][j]+\"  \");\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![二维数组](https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png)\n\n---\n","source":"_posts/Java数组02.md","raw":"---\ntitle: Java数组02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg'\ndate: 2022-08-25 22:41:21\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java数组\nkeywords:\ndescription:\n---\n\n## 内存分析\n\n- Java内存分析\n\n![内存分析](https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png)\n\n**数组的声明在栈当中，创建空间及赋值操作在堆中。**\n\n![声明与创建](https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png)\n\n## 三种初始化\n\n### 静态初始化\n\n```java\nint[] a = {1,2,3};\nMan[] mans = {new Man(1,1),new Man(2,2)};\n```\n\n### 动态初始化\n\n```java\nint[] a = new int[5];\na[0] = 1;\na[1] = 2;\n……\n```\n\n### 数组的默认初始化\n\n- 数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:45\n * @Description\n */\npublic class ArrayDemo02 {\n    public static void main(String[] args) {\n        //静态初始化\n        int[] a = {1,2,3,4,5};\n        System.out.println(a[0]);\n        //动态初始化,包含默认初始化\n        int[] b = new int[2];\n        b[0] = 10;\n        System.out.println(b[0]);\n        System.out.println(b[1]);\n\n    }\n}\n\n```\n\n运行截图：\n\n![初始化](https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png)\n\n---\n\n### 数组边界\n\n- 下标的合法区间：[0,length-1],如果越界就会报错\n\n```java\npublic static void main(String[] args){\n\tint[] a = new int[2];\n\tSystem.out.println(a[2]);\n}\n```\n\n- **ArrayIndexOutOfBoundsException:数组下标越界异常**\n- 小结\n  - 数组是相同数据类型（数据类型可以为任意类型）的有序集合\n  - 数组也是对象，数组元素相当于对象的成员变量\n  - 数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds\n\n---\n\n## 数组的使用\n\n### 简单for循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n        \n    }\n}\n```\n\n---\n\n### For-Each循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i : a) {\n            System.out.println(i);\n        }\n    }\n}\n\n```\n\n---\n\n### 数组作方法入参\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n```\n\n---\n\n### 数组作返回值\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n\n```\n\n---\n\n运行结果：\n\n![数组操作](https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png)\n\n---\n\n## 多维数组\n\n- 多维数组可以看成是数组的数组~~（套娃）~~，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。\n- 二维数组\n\n语法：\n\n```java\nint a[][] = new int[2][5]  //声明并创建一个两行五列的数组\n```\n\n- 解析：二维数组a可以看一个两行五列的数组\n\n代码示例：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:43\n * @Description\n */\npublic class ArrayDemo04 {\n    public static void main(String[] args) {\n        /**\n         * array:\n         * 1 2\n         * 3 4\n         * 5 6\n         * 7 8\n         */\n        int[][] array = {{1,2}, {3,4},{5,6},{7,8}};\n        for (int i = 0; i < array.length; i++) {\n            System.out.println(\"\\nprint  array[\" + i + \"],nums\");\n            for (int j = 0; j < array[i].length; j++) {\n                System.out.print(array[i][j]+\"  \");\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![二维数组](https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png)\n\n---\n","slug":"Java数组02","published":1,"updated":"2022-08-25T15:02:42.322Z","layout":"post","link":"","_id":"cl796hihn000ygwrwhcxcju02","content":"<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>Java内存分析</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png\" alt=\"内存分析\"></p>\n<p><strong>数组的声明在栈当中，创建空间及赋值操作在堆中。</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png\" alt=\"声明与创建\"></p>\n<h2 id=\"三种初始化\"><a href=\"#三种初始化\" class=\"headerlink\" title=\"三种初始化\"></a>三种初始化</h2><h3 id=\"静态初始化\"><a href=\"#静态初始化\" class=\"headerlink\" title=\"静态初始化\"></a>静态初始化</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nMan<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mans <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"动态初始化\"><a href=\"#动态初始化\" class=\"headerlink\" title=\"动态初始化\"></a>动态初始化</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n……\n</code></pre>\n<h3 id=\"数组的默认初始化\"><a href=\"#数组的默认初始化\" class=\"headerlink\" title=\"数组的默认初始化\"></a>数组的默认初始化</h3><ul>\n<li>数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>\n</ul>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:45\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//静态初始化</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//动态初始化,包含默认初始化</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行截图：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png\" alt=\"初始化\"></p>\n<hr>\n<h3 id=\"数组边界\"><a href=\"#数组边界\" class=\"headerlink\" title=\"数组边界\"></a>数组边界</h3><ul>\n<li>下标的合法区间：[0,length-1],如果越界就会报错</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li><strong>ArrayIndexOutOfBoundsException:数组下标越界异常</strong></li>\n<li>小结<ul>\n<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>\n<li>数组也是对象，数组元素相当于对象的成员变量</li>\n<li>数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><h3 id=\"简单for循环\"><a href=\"#简单for循环\" class=\"headerlink\" title=\"简单for循环\"></a>简单for循环</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h3 id=\"For-Each循环\"><a href=\"#For-Each循环\" class=\"headerlink\" title=\"For-Each循环\"></a>For-Each循环</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<h3 id=\"数组作方法入参\"><a href=\"#数组作方法入参\" class=\"headerlink\" title=\"数组作方法入参\"></a>数组作方法入参</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//        for (int i = 0; i &lt; a.length; i++) {</span>\n<span class=\"token comment\" spellcheck=\"true\">//            System.out.println(a[i]);</span>\n<span class=\"token comment\" spellcheck=\"true\">//        }</span>\n<span class=\"token comment\" spellcheck=\"true\">//        for (int i : a) {</span>\n<span class=\"token comment\" spellcheck=\"true\">//            System.out.println(i);</span>\n<span class=\"token comment\" spellcheck=\"true\">//        }</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token function\">reverseArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>         <span class=\"token comment\" spellcheck=\"true\">//将数组作为参数传入方法中，然后打印数组</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reverseArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token comment\" spellcheck=\"true\">//将数组作为方法返回值，反转数组后返回结果数组。</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h3 id=\"数组作返回值\"><a href=\"#数组作返回值\" class=\"headerlink\" title=\"数组作返回值\"></a>数组作返回值</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//        for (int i = 0; i &lt; a.length; i++) {</span>\n<span class=\"token comment\" spellcheck=\"true\">//            System.out.println(a[i]);</span>\n<span class=\"token comment\" spellcheck=\"true\">//        }</span>\n<span class=\"token comment\" spellcheck=\"true\">//        for (int i : a) {</span>\n<span class=\"token comment\" spellcheck=\"true\">//            System.out.println(i);</span>\n<span class=\"token comment\" spellcheck=\"true\">//        }</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token function\">reverseArray</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n=================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>         <span class=\"token comment\" spellcheck=\"true\">//将数组作为参数传入方法中，然后打印数组</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reverseArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token comment\" spellcheck=\"true\">//将数组作为方法返回值，反转数组后返回结果数组。</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png\" alt=\"数组操作\"></p>\n<hr>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><ul>\n<li>多维数组可以看成是数组的数组<del>（套娃）</del>，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li>\n<li>二维数组</li>\n</ul>\n<p>语法：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\" spellcheck=\"true\">//声明并创建一个两行五列的数组</span>\n</code></pre>\n<ul>\n<li>解析：二维数组a可以看一个两行五列的数组</li>\n</ul>\n<p>代码示例：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:43\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayDemo04</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * array:\n         * 1 2\n         * 3 4\n         * 5 6\n         * 7 8\n         */</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nprint  array[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"],nums\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png\" alt=\"二维数组\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>Java内存分析</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png\" alt=\"内存分析\"></p>\n<p><strong>数组的声明在栈当中，创建空间及赋值操作在堆中。</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png\" alt=\"声明与创建\"></p>\n<h2 id=\"三种初始化\"><a href=\"#三种初始化\" class=\"headerlink\" title=\"三种初始化\"></a>三种初始化</h2><h3 id=\"静态初始化\"><a href=\"#静态初始化\" class=\"headerlink\" title=\"静态初始化\"></a>静态初始化</h3><pre><code class=\"java\">int[] a = {1,2,3};\nMan[] mans = {new Man(1,1),new Man(2,2)};\n</code></pre>\n<h3 id=\"动态初始化\"><a href=\"#动态初始化\" class=\"headerlink\" title=\"动态初始化\"></a>动态初始化</h3><pre><code class=\"java\">int[] a = new int[5];\na[0] = 1;\na[1] = 2;\n……\n</code></pre>\n<h3 id=\"数组的默认初始化\"><a href=\"#数组的默认初始化\" class=\"headerlink\" title=\"数组的默认初始化\"></a>数组的默认初始化</h3><ul>\n<li>数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:45\n * @Description\n */\npublic class ArrayDemo02 {\n    public static void main(String[] args) {\n        //静态初始化\n        int[] a = {1,2,3,4,5};\n        System.out.println(a[0]);\n        //动态初始化,包含默认初始化\n        int[] b = new int[2];\n        b[0] = 10;\n        System.out.println(b[0]);\n        System.out.println(b[1]);\n\n    }\n}\n\n</code></pre>\n<p>运行截图：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png\" alt=\"初始化\"></p>\n<hr>\n<h3 id=\"数组边界\"><a href=\"#数组边界\" class=\"headerlink\" title=\"数组边界\"></a>数组边界</h3><ul>\n<li>下标的合法区间：[0,length-1],如果越界就会报错</li>\n</ul>\n<pre><code class=\"java\">public static void main(String[] args){\n    int[] a = new int[2];\n    System.out.println(a[2]);\n}\n</code></pre>\n<ul>\n<li><strong>ArrayIndexOutOfBoundsException:数组下标越界异常</strong></li>\n<li>小结<ul>\n<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>\n<li>数组也是对象，数组元素相当于对象的成员变量</li>\n<li>数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><h3 id=\"简单for循环\"><a href=\"#简单for循环\" class=\"headerlink\" title=\"简单for循环\"></a>简单for循环</h3><pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i = 0; i &lt; a.length; i++) {\n            System.out.println(a[i]);\n        }\n\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"For-Each循环\"><a href=\"#For-Each循环\" class=\"headerlink\" title=\"For-Each循环\"></a>For-Each循环</h3><pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i : a) {\n            System.out.println(i);\n        }\n    }\n}\n\n</code></pre>\n<hr>\n<h3 id=\"数组作方法入参\"><a href=\"#数组作方法入参\" class=\"headerlink\" title=\"数组作方法入参\"></a>数组作方法入参</h3><pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i &lt; a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(&quot;\\n=================&quot;);\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i &lt; a.length; i++) {\n            System.out.print(a[i] + &quot;  &quot;);\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i &lt; a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"数组作返回值\"><a href=\"#数组作返回值\" class=\"headerlink\" title=\"数组作返回值\"></a>数组作返回值</h3><pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i &lt; a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(&quot;\\n=================&quot;);\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i &lt; a.length; i++) {\n            System.out.print(a[i] + &quot;  &quot;);\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i &lt; a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n\n</code></pre>\n<hr>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png\" alt=\"数组操作\"></p>\n<hr>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><ul>\n<li>多维数组可以看成是数组的数组<del>（套娃）</del>，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li>\n<li>二维数组</li>\n</ul>\n<p>语法：</p>\n<pre><code class=\"java\">int a[][] = new int[2][5]  //声明并创建一个两行五列的数组\n</code></pre>\n<ul>\n<li>解析：二维数组a可以看一个两行五列的数组</li>\n</ul>\n<p>代码示例：</p>\n<pre><code class=\"java\">package com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:43\n * @Description\n */\npublic class ArrayDemo04 {\n    public static void main(String[] args) {\n        /**\n         * array:\n         * 1 2\n         * 3 4\n         * 5 6\n         * 7 8\n         */\n        int[][] array = {{1,2}, {3,4},{5,6},{7,8}};\n        for (int i = 0; i &lt; array.length; i++) {\n            System.out.println(&quot;\\nprint  array[&quot; + i + &quot;],nums&quot;);\n            for (int j = 0; j &lt; array[i].length; j++) {\n                System.out.print(array[i][j]+&quot;  &quot;);\n            }\n        }\n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png\" alt=\"二维数组\"></p>\n<hr>\n"},{"title":"Java方法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqhqfnzj21kw0w0ao2.jpg"],"date":"2022-08-25T14:41:09.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 方法\n\n### 定义\n\n- Java方法是语句的集合，它们在一起执行一个功能\n  - 方法是解决一类问题的步骤的有序组合\n  - 方法包含于类或对象当中\n  - 方法在程序中被创建，在其他地方被引用\n- 设计方法的原则\n  - 方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的**原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展**\n- 方法的命名规则：**首字母小写，后面是驼峰命名规则。**\n\n**设计一个方法：实现简单的两个数的加法：**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 16:23\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        System.out.println(add(1,2));\t\t //方法的调用\n    }\n    public static int add(int a , int b){    //方法的定义\n        return a+b;\n    }\n}\n\n```\n\n- Java的方法类似于其他语言的函数，是一段**用来完成特定功能的代码片段**，一般情况下，定义一个方法包含以下语句：\n- **方法包含一个方法头和一个方法体**下面是一个方法的所有部分\n  - **修饰符**：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型\n  - **返回值类型**：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。\n  - **方法名**：是方法的实际名称。方法名和参数表共同构成方法签名。\n  - **参数类型**： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数\n    - 形式参数：在方法被调用时用于接收外界输入的数据。\n    - 实参：调用方法时实际传给方法的数据。\n  - **方法体**：方法体包含具体的语句，定义该方法功能\n\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){\n\t……\n\t方法体\n\t……\n\treturn 返回值;\n}\n```\n\n**小tips**：值传递和应用传递 **Java为值传递**\n\n- 值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；\n- 引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；\n\n---\n\n### 方法的重载\n\n- 重载就是在一个类中，**有相同的函数名称**，但形参不同的函数。\n- 方法重载的规则\n  - 方法名称必须相同\n  - 参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）\n  - 方法的返回类型可以相同也可以不相同\n  - **仅仅返回类型不同不足以成为方法的重载。**\n- 实现理论：\n  - 方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。\n\n**实现max()函数的重载**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 21:56\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int max = max(10,20);\n        System.out.println(max);\n        double dmax = max(20.0,30.0);\n        System.out.println(dmax);\n    }\n    public static int max(int a, int b){\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n    public static double max(double a, double b){         // 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n}\n\n```\n\n运行结果：\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png)\n\n---\n\n### 命令行传参\n\n- 有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现\n- 通过在运行时使用命令行给main()函数来实现。\n\n### 可变参数\n\n- JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。\n- 在方法声明中，在指定参数类型后加一个省略号（……）\n- 一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明\n\n**设计一个程序计算出可变字长数组的最大值**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:16\n * @Description\n */\npublic class Demo04 {       //可变参数\n    public static void main(String[] args) {\n        double [] test1 = {10,20,30,40};\n        Demo04 demo04 = new Demo04();\n        demo04.printMax(10.0,20.0,30.0);\n        demo04.printMax(test1);\n    }\n\n    public static void printMax(double... i){\n        if (i.length == 0){\n            System.out.println(\"error!!the length is 0\");\n            return;\n        }\n        double result = i[0];\n        for (int j = 0; j < i.length; j++) {\n            if (i[j] > result){\n                result = i[j];\n            }\n        }\n        System.out.println(\"the max number is \" + result);\n    }\n}\n\n```\n\n运行结果：\n\n![可变参数](https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png)\n\n---\n\n### 递归\n\n- A方法可以调用B方法，这是很常见的。\n- 而递归就是：**A方法调用A方法，自己调用自己**\n- 利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合\n- 递归结构包括两个部分：\n  - **递归头：什么时候不调用自身方法。如果没有头，会陷入死循环**\n  - **递归体：什么时候需要调用自身方法。**\n\n**设计一个程序计算递归**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:37\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(function(3));        //打印出6的阶乘\n    }\n    public static int function(int n){              //计算阶乘的方法\n        if (n == 1){\n            return 1;\n        }else {\n            return n*function(n-1);\n        }\n    }\n}\n\n```\n\n![递归](https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png)\n\n---\n\n","source":"_posts/Java方法.md","raw":"---\ntitle: Java方法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqhqfnzj21kw0w0ao2.jpg'\ndate: 2022-08-25 22:41:09\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java方法\nkeywords:\ndescription:\n---\n\n## 方法\n\n### 定义\n\n- Java方法是语句的集合，它们在一起执行一个功能\n  - 方法是解决一类问题的步骤的有序组合\n  - 方法包含于类或对象当中\n  - 方法在程序中被创建，在其他地方被引用\n- 设计方法的原则\n  - 方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的**原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展**\n- 方法的命名规则：**首字母小写，后面是驼峰命名规则。**\n\n**设计一个方法：实现简单的两个数的加法：**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 16:23\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        System.out.println(add(1,2));\t\t //方法的调用\n    }\n    public static int add(int a , int b){    //方法的定义\n        return a+b;\n    }\n}\n\n```\n\n- Java的方法类似于其他语言的函数，是一段**用来完成特定功能的代码片段**，一般情况下，定义一个方法包含以下语句：\n- **方法包含一个方法头和一个方法体**下面是一个方法的所有部分\n  - **修饰符**：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型\n  - **返回值类型**：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。\n  - **方法名**：是方法的实际名称。方法名和参数表共同构成方法签名。\n  - **参数类型**： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数\n    - 形式参数：在方法被调用时用于接收外界输入的数据。\n    - 实参：调用方法时实际传给方法的数据。\n  - **方法体**：方法体包含具体的语句，定义该方法功能\n\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){\n\t……\n\t方法体\n\t……\n\treturn 返回值;\n}\n```\n\n**小tips**：值传递和应用传递 **Java为值传递**\n\n- 值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；\n- 引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；\n\n---\n\n### 方法的重载\n\n- 重载就是在一个类中，**有相同的函数名称**，但形参不同的函数。\n- 方法重载的规则\n  - 方法名称必须相同\n  - 参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）\n  - 方法的返回类型可以相同也可以不相同\n  - **仅仅返回类型不同不足以成为方法的重载。**\n- 实现理论：\n  - 方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。\n\n**实现max()函数的重载**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 21:56\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int max = max(10,20);\n        System.out.println(max);\n        double dmax = max(20.0,30.0);\n        System.out.println(dmax);\n    }\n    public static int max(int a, int b){\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n    public static double max(double a, double b){         // 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n}\n\n```\n\n运行结果：\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png)\n\n---\n\n### 命令行传参\n\n- 有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现\n- 通过在运行时使用命令行给main()函数来实现。\n\n### 可变参数\n\n- JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。\n- 在方法声明中，在指定参数类型后加一个省略号（……）\n- 一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明\n\n**设计一个程序计算出可变字长数组的最大值**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:16\n * @Description\n */\npublic class Demo04 {       //可变参数\n    public static void main(String[] args) {\n        double [] test1 = {10,20,30,40};\n        Demo04 demo04 = new Demo04();\n        demo04.printMax(10.0,20.0,30.0);\n        demo04.printMax(test1);\n    }\n\n    public static void printMax(double... i){\n        if (i.length == 0){\n            System.out.println(\"error!!the length is 0\");\n            return;\n        }\n        double result = i[0];\n        for (int j = 0; j < i.length; j++) {\n            if (i[j] > result){\n                result = i[j];\n            }\n        }\n        System.out.println(\"the max number is \" + result);\n    }\n}\n\n```\n\n运行结果：\n\n![可变参数](https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png)\n\n---\n\n### 递归\n\n- A方法可以调用B方法，这是很常见的。\n- 而递归就是：**A方法调用A方法，自己调用自己**\n- 利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合\n- 递归结构包括两个部分：\n  - **递归头：什么时候不调用自身方法。如果没有头，会陷入死循环**\n  - **递归体：什么时候需要调用自身方法。**\n\n**设计一个程序计算递归**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:37\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(function(3));        //打印出6的阶乘\n    }\n    public static int function(int n){              //计算阶乘的方法\n        if (n == 1){\n            return 1;\n        }else {\n            return n*function(n-1);\n        }\n    }\n}\n\n```\n\n![递归](https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png)\n\n---\n\n","slug":"Java方法","published":1,"updated":"2022-08-25T15:04:32.722Z","layout":"post","link":"","_id":"cl796hihq0013gwrw1lgv5v65","content":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Java方法是语句的集合，它们在一起执行一个功能<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象当中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n</li>\n<li>设计方法的原则<ul>\n<li>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<strong>原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展</strong></li>\n</ul>\n</li>\n<li>方法的命名规则：<strong>首字母小写，后面是驼峰命名规则。</strong></li>\n</ul>\n<p><strong>设计一个方法：实现简单的两个数的加法：</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 16:23\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">//方法的调用</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\" spellcheck=\"true\">//方法的定义</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<ul>\n<li>Java的方法类似于其他语言的函数，是一段<strong>用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语句：</li>\n<li><strong>方法包含一个方法头和一个方法体</strong>下面是一个方法的所有部分<ul>\n<li><strong>修饰符</strong>：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型</li>\n<li><strong>返回值类型</strong>：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li>\n<li><strong>方法名</strong>：是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li><strong>参数类型</strong>： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数<ul>\n<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>\n<li>实参：调用方法时实际传给方法的数据。</li>\n</ul>\n</li>\n<li><strong>方法体</strong>：方法体包含具体的语句，定义该方法功能</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">修饰符 返回值类型 方法名<span class=\"token punctuation\">(</span>参数类型 参数名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ……\n    方法体\n    ……\n    <span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>小tips</strong>：值传递和应用传递 <strong>Java为值传递</strong></p>\n<ul>\n<li>值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；</li>\n<li>引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；</li>\n</ul>\n<hr>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><ul>\n<li>重载就是在一个类中，<strong>有相同的函数名称</strong>，但形参不同的函数。</li>\n<li>方法重载的规则<ul>\n<li>方法名称必须相同</li>\n<li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）</li>\n<li>方法的返回类型可以相同也可以不相同</li>\n<li><strong>仅仅返回类型不同不足以成为方法的重载。</strong></li>\n</ul>\n</li>\n<li>实现理论：<ul>\n<li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li>\n</ul>\n</li>\n</ul>\n<p><strong>实现max()函数的重载</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 21:56\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> dmax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">30.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dmax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>                             <span class=\"token comment\" spellcheck=\"true\">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>         <span class=\"token comment\" spellcheck=\"true\">// 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span>                             <span class=\"token comment\" spellcheck=\"true\">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h3><ul>\n<li>有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现</li>\n<li>通过在运行时使用命令行给main()函数来实现。</li>\n</ul>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><ul>\n<li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li>\n<li>在方法声明中，在指定参数类型后加一个省略号（……）</li>\n<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</li>\n</ul>\n<p><strong>设计一个程序计算出可变字长数组的最大值</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:16\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo04</span> <span class=\"token punctuation\">{</span>       <span class=\"token comment\" spellcheck=\"true\">//可变参数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> test1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Demo04 demo04 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        demo04<span class=\"token punctuation\">.</span><span class=\"token function\">printMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">30.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        demo04<span class=\"token punctuation\">.</span><span class=\"token function\">printMax</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error!!the length is 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> i<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> i<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the max number is \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png\" alt=\"可变参数\"></p>\n<hr>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><ul>\n<li>A方法可以调用B方法，这是很常见的。</li>\n<li>而递归就是：<strong>A方法调用A方法，自己调用自己</strong></li>\n<li>利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合</li>\n<li>递归结构包括两个部分：<ul>\n<li><strong>递归头：什么时候不调用自身方法。如果没有头，会陷入死循环</strong></li>\n<li><strong>递归体：什么时候需要调用自身方法。</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序计算递归</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:37\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//打印出6的阶乘</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>              <span class=\"token comment\" spellcheck=\"true\">//计算阶乘的方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png\" alt=\"递归\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Java方法是语句的集合，它们在一起执行一个功能<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象当中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n</li>\n<li>设计方法的原则<ul>\n<li>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<strong>原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展</strong></li>\n</ul>\n</li>\n<li>方法的命名规则：<strong>首字母小写，后面是驼峰命名规则。</strong></li>\n</ul>\n<p><strong>设计一个方法：实现简单的两个数的加法：</strong></p>\n<pre><code class=\"java\">package com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 16:23\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        System.out.println(add(1,2));         //方法的调用\n    }\n    public static int add(int a , int b){    //方法的定义\n        return a+b;\n    }\n}\n\n</code></pre>\n<ul>\n<li>Java的方法类似于其他语言的函数，是一段<strong>用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语句：</li>\n<li><strong>方法包含一个方法头和一个方法体</strong>下面是一个方法的所有部分<ul>\n<li><strong>修饰符</strong>：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型</li>\n<li><strong>返回值类型</strong>：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li>\n<li><strong>方法名</strong>：是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li><strong>参数类型</strong>： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数<ul>\n<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>\n<li>实参：调用方法时实际传给方法的数据。</li>\n</ul>\n</li>\n<li><strong>方法体</strong>：方法体包含具体的语句，定义该方法功能</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">修饰符 返回值类型 方法名(参数类型 参数名){\n    ……\n    方法体\n    ……\n    return 返回值;\n}\n</code></pre>\n<p><strong>小tips</strong>：值传递和应用传递 <strong>Java为值传递</strong></p>\n<ul>\n<li>值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；</li>\n<li>引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；</li>\n</ul>\n<hr>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><ul>\n<li>重载就是在一个类中，<strong>有相同的函数名称</strong>，但形参不同的函数。</li>\n<li>方法重载的规则<ul>\n<li>方法名称必须相同</li>\n<li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）</li>\n<li>方法的返回类型可以相同也可以不相同</li>\n<li><strong>仅仅返回类型不同不足以成为方法的重载。</strong></li>\n</ul>\n</li>\n<li>实现理论：<ul>\n<li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li>\n</ul>\n</li>\n</ul>\n<p><strong>实现max()函数的重载</strong></p>\n<pre><code class=\"java\">package com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 21:56\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int max = max(10,20);\n        System.out.println(max);\n        double dmax = max(20.0,30.0);\n        System.out.println(dmax);\n    }\n    public static int max(int a, int b){\n        return a &gt; b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n    public static double max(double a, double b){         // 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载\n        return a &gt; b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h3><ul>\n<li>有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现</li>\n<li>通过在运行时使用命令行给main()函数来实现。</li>\n</ul>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><ul>\n<li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li>\n<li>在方法声明中，在指定参数类型后加一个省略号（……）</li>\n<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</li>\n</ul>\n<p><strong>设计一个程序计算出可变字长数组的最大值</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:16\n * @Description\n */\npublic class Demo04 {       //可变参数\n    public static void main(String[] args) {\n        double [] test1 = {10,20,30,40};\n        Demo04 demo04 = new Demo04();\n        demo04.printMax(10.0,20.0,30.0);\n        demo04.printMax(test1);\n    }\n\n    public static void printMax(double... i){\n        if (i.length == 0){\n            System.out.println(&quot;error!!the length is 0&quot;);\n            return;\n        }\n        double result = i[0];\n        for (int j = 0; j &lt; i.length; j++) {\n            if (i[j] &gt; result){\n                result = i[j];\n            }\n        }\n        System.out.println(&quot;the max number is &quot; + result);\n    }\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png\" alt=\"可变参数\"></p>\n<hr>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><ul>\n<li>A方法可以调用B方法，这是很常见的。</li>\n<li>而递归就是：<strong>A方法调用A方法，自己调用自己</strong></li>\n<li>利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合</li>\n<li>递归结构包括两个部分：<ul>\n<li><strong>递归头：什么时候不调用自身方法。如果没有头，会陷入死循环</strong></li>\n<li><strong>递归体：什么时候需要调用自身方法。</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序计算递归</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:37\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(function(3));        //打印出6的阶乘\n    }\n    public static int function(int n){              //计算阶乘的方法\n        if (n == 1){\n            return 1;\n        }else {\n            return n*function(n-1);\n        }\n    }\n}\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png\" alt=\"递归\"></p>\n<hr>\n"},{"title":"Java流程控制02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg"],"date":"2022-08-25T14:40:57.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 顺序结构\n\n- Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行\n- 顺序结构是最简单的算法结构\n- 语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，**他是一个任何算法都离不开的一种基本算法结构**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:12\n * @Description\n */\npublic class orderDemo01 {\n    public static void main(String[] args) {\n        System.out.println(\"helloworld1\");\n        System.out.println(\"helloworld2\");\n        System.out.println(\"helloworld3\");\n        System.out.println(\"helloworld4\");\n    }\n}\n\n```\n\n因为Java的基本结构是顺序结构，所以会依次输出helloworld1234\n\n**输出结果：**\n\n![顺序结构](https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png)\n\n---\n\n## 选择结构\n\n### if单选择结构\n\n- 很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句\n- 语法：\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}\n```\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:17\n * @Description\n */\npublic class ifDemo01 {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        if (s.equals(\"helloworld\")){\n            System.out.println(\"helloworld\");\n        }\n        System.out.println(\"End\");\n        scanner.close();\n    }\n}\n\n```\n\n因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End\n\n**输出结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png)\n\n---\n\n### if双选择结构\n\n语法和单选择结构类似\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}else{\n    //如果布尔表达式为false就执行这里面的语句\n}\n```\n\n\n\n**设计一个程序，输入分数大于60时输出及格，否则输出不及格**\n\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo02 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        if (scanner.nextInt() > 60){\n            System.out.println(\"您的成绩及格\");\n        } else{\n            System.out.println(\"您的成绩不及格\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### if多选择结构\n\n语法：\n\n```java\nif(布尔表达式 1){\n    //如果布尔表达式1为true就执行这里面的语句\n}else if(布尔表达式 2){\n    //如果布尔表达式2为true就执行这里面的语句\n}else if(布尔表达式 3){\n    //如果布尔表达式3为true就执行这里面的语句\n}else{\n    //如果以上布尔表达式为false就执行这里面的语句\n}\n```\n\n**设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo03 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        int score = scanner.nextInt();\n        if (score == 100){\n            System.out.println(\"满分！\");\n        }else if(score < 100 && score >= 90){\n            System.out.println(\"A!\");\n        }else if(score < 90 && score >= 80){\n            System.out.println(\"B!\");\n        }else if(score < 80 && score >= 70){\n            System.out.println(\"C!\");\n        }else if(score < 70 && score >= 60){\n            System.out.println(\"D!\");\n        }\n        else if(score < 60 && score >= 0){\n            System.out.println(\"您的成绩不及格\");\n        } else\n        {\n            System.out.println(\"成绩不合法\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### 嵌套的if结构\n\n- 使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else\n- 语法\n\n```java\nif(布尔表达式1){\n    //如果布尔表达式为true就执行\n    if(布尔表达式2){\n        //如果布尔表达式2为true就执行\n    }\n}\n```\n\n----\n\n### switch多选择结构\n\n- 多选择结构还有一个实现方式就是switch case语句\n- switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支\n- 语法：\n\n```java\nswitch(expression){\n    case value :\n        //语句\n        break;//可选\n    case value :\n        //语句\n        break;//可选\n    //你可以有任意数量的case语句\n        default : //可选\n        //语句\n}\n```\n\n- switch 语句中的变量类型可以是\n  - byte 、short、int或者char\n  - **从Java SE 7开始 switch就支持字符串String型了**\n  - 同时case标签必须为字符串常量或字面量\n\n**设计一个程序，根据ABCD输出不同的评价。**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:09\n * @Description\n */\npublic class SwitchDemo01 {\n    public static void main(String[] args) {\n        char grade = 'G';\n        switch (grade){\n            case 'A' :\n                System.out.println(\"优秀\");\n                break;\n            case 'B' :\n                System.out.println(\"良好\");\n                break;\n            case 'C' :\n                System.out.println(\"及格\");\n                break;\n            case 'D' :\n                System.out.println(\"再接再厉\");\n                break;\n            case 'E' :\n                System.out.println(\"挂科\");\n                break;\n            default:\n                System.out.println(\"未知成绩\");\n        }\n    }\n}\n\n```\n\n---\n\n**Java SE 7 新特性**\n\n代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:20\n * @Description\n */\npublic class SwitchDemo02 {\n    public static void main(String[] args) {\n        String name = \"hahaha\";\n        switch (name){\n            case \"xiheya\":\n                System.out.println(\"right\");\n                break;\n            case \"hahaha\":\n                System.out.println(\"error\");\n                break;\n            default:\n                System.out.println(\"???\");\n        }\n    }\n}\n\n```\n\n","source":"_posts/Java流程控制02.md","raw":"---\ntitle: Java流程控制02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg'\ndate: 2022-08-25 22:40:57\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java流程控制\nkeywords:\ndescription:\n---\n\n## 顺序结构\n\n- Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行\n- 顺序结构是最简单的算法结构\n- 语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，**他是一个任何算法都离不开的一种基本算法结构**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:12\n * @Description\n */\npublic class orderDemo01 {\n    public static void main(String[] args) {\n        System.out.println(\"helloworld1\");\n        System.out.println(\"helloworld2\");\n        System.out.println(\"helloworld3\");\n        System.out.println(\"helloworld4\");\n    }\n}\n\n```\n\n因为Java的基本结构是顺序结构，所以会依次输出helloworld1234\n\n**输出结果：**\n\n![顺序结构](https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png)\n\n---\n\n## 选择结构\n\n### if单选择结构\n\n- 很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句\n- 语法：\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}\n```\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:17\n * @Description\n */\npublic class ifDemo01 {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        if (s.equals(\"helloworld\")){\n            System.out.println(\"helloworld\");\n        }\n        System.out.println(\"End\");\n        scanner.close();\n    }\n}\n\n```\n\n因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End\n\n**输出结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png)\n\n---\n\n### if双选择结构\n\n语法和单选择结构类似\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}else{\n    //如果布尔表达式为false就执行这里面的语句\n}\n```\n\n\n\n**设计一个程序，输入分数大于60时输出及格，否则输出不及格**\n\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo02 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        if (scanner.nextInt() > 60){\n            System.out.println(\"您的成绩及格\");\n        } else{\n            System.out.println(\"您的成绩不及格\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### if多选择结构\n\n语法：\n\n```java\nif(布尔表达式 1){\n    //如果布尔表达式1为true就执行这里面的语句\n}else if(布尔表达式 2){\n    //如果布尔表达式2为true就执行这里面的语句\n}else if(布尔表达式 3){\n    //如果布尔表达式3为true就执行这里面的语句\n}else{\n    //如果以上布尔表达式为false就执行这里面的语句\n}\n```\n\n**设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo03 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        int score = scanner.nextInt();\n        if (score == 100){\n            System.out.println(\"满分！\");\n        }else if(score < 100 && score >= 90){\n            System.out.println(\"A!\");\n        }else if(score < 90 && score >= 80){\n            System.out.println(\"B!\");\n        }else if(score < 80 && score >= 70){\n            System.out.println(\"C!\");\n        }else if(score < 70 && score >= 60){\n            System.out.println(\"D!\");\n        }\n        else if(score < 60 && score >= 0){\n            System.out.println(\"您的成绩不及格\");\n        } else\n        {\n            System.out.println(\"成绩不合法\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### 嵌套的if结构\n\n- 使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else\n- 语法\n\n```java\nif(布尔表达式1){\n    //如果布尔表达式为true就执行\n    if(布尔表达式2){\n        //如果布尔表达式2为true就执行\n    }\n}\n```\n\n----\n\n### switch多选择结构\n\n- 多选择结构还有一个实现方式就是switch case语句\n- switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支\n- 语法：\n\n```java\nswitch(expression){\n    case value :\n        //语句\n        break;//可选\n    case value :\n        //语句\n        break;//可选\n    //你可以有任意数量的case语句\n        default : //可选\n        //语句\n}\n```\n\n- switch 语句中的变量类型可以是\n  - byte 、short、int或者char\n  - **从Java SE 7开始 switch就支持字符串String型了**\n  - 同时case标签必须为字符串常量或字面量\n\n**设计一个程序，根据ABCD输出不同的评价。**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:09\n * @Description\n */\npublic class SwitchDemo01 {\n    public static void main(String[] args) {\n        char grade = 'G';\n        switch (grade){\n            case 'A' :\n                System.out.println(\"优秀\");\n                break;\n            case 'B' :\n                System.out.println(\"良好\");\n                break;\n            case 'C' :\n                System.out.println(\"及格\");\n                break;\n            case 'D' :\n                System.out.println(\"再接再厉\");\n                break;\n            case 'E' :\n                System.out.println(\"挂科\");\n                break;\n            default:\n                System.out.println(\"未知成绩\");\n        }\n    }\n}\n\n```\n\n---\n\n**Java SE 7 新特性**\n\n代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:20\n * @Description\n */\npublic class SwitchDemo02 {\n    public static void main(String[] args) {\n        String name = \"hahaha\";\n        switch (name){\n            case \"xiheya\":\n                System.out.println(\"right\");\n                break;\n            case \"hahaha\":\n                System.out.println(\"error\");\n                break;\n            default:\n                System.out.println(\"???\");\n        }\n    }\n}\n\n```\n\n","slug":"Java流程控制02","published":1,"updated":"2022-08-25T15:03:50.824Z","layout":"post","link":"","_id":"cl796hihr0017gwrw2gmgxkgf","content":"<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><ul>\n<li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行</li>\n<li>顺序结构是最简单的算法结构</li>\n<li>语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，<strong>他是一个任何算法都离不开的一种基本算法结构</strong></li>\n</ul>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:12\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">orderDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>因为Java的基本结构是顺序结构，所以会依次输出helloworld1234</p>\n<p><strong>输出结果：</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png\" alt=\"顺序结构\"></p>\n<hr>\n<h2 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h2><h3 id=\"if单选择结构\"><a href=\"#if单选择结构\" class=\"headerlink\" title=\"if单选择结构\"></a>if单选择结构</h3><ul>\n<li>很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句</li>\n<li>语法：</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式为true就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:17\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ifDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String s <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End</p>\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png\" alt=\"输出结果2\"></p>\n<hr>\n<h3 id=\"if双选择结构\"><a href=\"#if双选择结构\" class=\"headerlink\" title=\"if双选择结构\"></a>if双选择结构</h3><p>语法和单选择结构类似</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式为true就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式为false就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>设计一个程序，输入分数大于60时输出及格，否则输出不及格</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IfDemo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您的成绩及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您的成绩不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<h3 id=\"if多选择结构\"><a href=\"#if多选择结构\" class=\"headerlink\" title=\"if多选择结构\"></a>if多选择结构</h3><p>语法：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式 <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式1为true就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式 <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式2为true就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式 <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式3为true就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果以上布尔表达式为false就执行这里面的语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IfDemo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"满分！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">70</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span> <span class=\"token operator\">&amp;&amp;</span> score <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您的成绩不及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成绩不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<h3 id=\"嵌套的if结构\"><a href=\"#嵌套的if结构\" class=\"headerlink\" title=\"嵌套的if结构\"></a>嵌套的if结构</h3><ul>\n<li>使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else</li>\n<li>语法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式为true就执行</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果布尔表达式2为true就执行</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h3 id=\"switch多选择结构\"><a href=\"#switch多选择结构\" class=\"headerlink\" title=\"switch多选择结构\"></a>switch多选择结构</h3><ul>\n<li>多选择结构还有一个实现方式就是switch case语句</li>\n<li>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支</li>\n<li>语法：</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> value <span class=\"token operator\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\">//语句</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可选</span>\n    <span class=\"token keyword\">case</span> value <span class=\"token operator\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\">//语句</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可选</span>\n    <span class=\"token comment\" spellcheck=\"true\">//你可以有任意数量的case语句</span>\n        <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\" spellcheck=\"true\">//可选</span>\n        <span class=\"token comment\" spellcheck=\"true\">//语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>switch 语句中的变量类型可以是<ul>\n<li>byte 、short、int或者char</li>\n<li><strong>从Java SE 7开始 switch就支持字符串String型了</strong></li>\n<li>同时case标签必须为字符串常量或字面量</li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序，根据ABCD输出不同的评价。</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:09\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SwitchDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> grade <span class=\"token operator\">=</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"优秀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"良好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'C'</span> <span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"及格\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'D'</span> <span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"再接再厉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'E'</span> <span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"挂科\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未知成绩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<p><strong>Java SE 7 新特性</strong></p>\n<p>代码</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:20\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SwitchDemo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String name <span class=\"token operator\">=</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"xiheya\"</span><span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"hahaha\"</span><span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"???\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><ul>\n<li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行</li>\n<li>顺序结构是最简单的算法结构</li>\n<li>语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，<strong>他是一个任何算法都离不开的一种基本算法结构</strong></li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:12\n * @Description\n */\npublic class orderDemo01 {\n    public static void main(String[] args) {\n        System.out.println(&quot;helloworld1&quot;);\n        System.out.println(&quot;helloworld2&quot;);\n        System.out.println(&quot;helloworld3&quot;);\n        System.out.println(&quot;helloworld4&quot;);\n    }\n}\n\n</code></pre>\n<p>因为Java的基本结构是顺序结构，所以会依次输出helloworld1234</p>\n<p><strong>输出结果：</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png\" alt=\"顺序结构\"></p>\n<hr>\n<h2 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h2><h3 id=\"if单选择结构\"><a href=\"#if单选择结构\" class=\"headerlink\" title=\"if单选择结构\"></a>if单选择结构</h3><ul>\n<li>很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句</li>\n<li>语法：</li>\n</ul>\n<pre><code class=\"java\">if(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}\n</code></pre>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:17\n * @Description\n */\npublic class ifDemo01 {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        if (s.equals(&quot;helloworld&quot;)){\n            System.out.println(&quot;helloworld&quot;);\n        }\n        System.out.println(&quot;End&quot;);\n        scanner.close();\n    }\n}\n\n</code></pre>\n<p>因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End</p>\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png\" alt=\"输出结果2\"></p>\n<hr>\n<h3 id=\"if双选择结构\"><a href=\"#if双选择结构\" class=\"headerlink\" title=\"if双选择结构\"></a>if双选择结构</h3><p>语法和单选择结构类似</p>\n<pre><code class=\"java\">if(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}else{\n    //如果布尔表达式为false就执行这里面的语句\n}\n</code></pre>\n<p><strong>设计一个程序，输入分数大于60时输出及格，否则输出不及格</strong></p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo02 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(&quot;请输入成绩&quot;);\n        if (scanner.nextInt() &gt; 60){\n            System.out.println(&quot;您的成绩及格&quot;);\n        } else{\n            System.out.println(&quot;您的成绩不及格&quot;);\n        }\n        scanner.close();\n    }\n}\n\n</code></pre>\n<hr>\n<h3 id=\"if多选择结构\"><a href=\"#if多选择结构\" class=\"headerlink\" title=\"if多选择结构\"></a>if多选择结构</h3><p>语法：</p>\n<pre><code class=\"java\">if(布尔表达式 1){\n    //如果布尔表达式1为true就执行这里面的语句\n}else if(布尔表达式 2){\n    //如果布尔表达式2为true就执行这里面的语句\n}else if(布尔表达式 3){\n    //如果布尔表达式3为true就执行这里面的语句\n}else{\n    //如果以上布尔表达式为false就执行这里面的语句\n}\n</code></pre>\n<p><strong>设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo03 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(&quot;请输入成绩&quot;);\n        int score = scanner.nextInt();\n        if (score == 100){\n            System.out.println(&quot;满分！&quot;);\n        }else if(score &lt; 100 &amp;&amp; score &gt;= 90){\n            System.out.println(&quot;A!&quot;);\n        }else if(score &lt; 90 &amp;&amp; score &gt;= 80){\n            System.out.println(&quot;B!&quot;);\n        }else if(score &lt; 80 &amp;&amp; score &gt;= 70){\n            System.out.println(&quot;C!&quot;);\n        }else if(score &lt; 70 &amp;&amp; score &gt;= 60){\n            System.out.println(&quot;D!&quot;);\n        }\n        else if(score &lt; 60 &amp;&amp; score &gt;= 0){\n            System.out.println(&quot;您的成绩不及格&quot;);\n        } else\n        {\n            System.out.println(&quot;成绩不合法&quot;);\n        }\n        scanner.close();\n    }\n}\n\n</code></pre>\n<hr>\n<h3 id=\"嵌套的if结构\"><a href=\"#嵌套的if结构\" class=\"headerlink\" title=\"嵌套的if结构\"></a>嵌套的if结构</h3><ul>\n<li>使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else</li>\n<li>语法</li>\n</ul>\n<pre><code class=\"java\">if(布尔表达式1){\n    //如果布尔表达式为true就执行\n    if(布尔表达式2){\n        //如果布尔表达式2为true就执行\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"switch多选择结构\"><a href=\"#switch多选择结构\" class=\"headerlink\" title=\"switch多选择结构\"></a>switch多选择结构</h3><ul>\n<li>多选择结构还有一个实现方式就是switch case语句</li>\n<li>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支</li>\n<li>语法：</li>\n</ul>\n<pre><code class=\"java\">switch(expression){\n    case value :\n        //语句\n        break;//可选\n    case value :\n        //语句\n        break;//可选\n    //你可以有任意数量的case语句\n        default : //可选\n        //语句\n}\n</code></pre>\n<ul>\n<li>switch 语句中的变量类型可以是<ul>\n<li>byte 、short、int或者char</li>\n<li><strong>从Java SE 7开始 switch就支持字符串String型了</strong></li>\n<li>同时case标签必须为字符串常量或字面量</li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序，根据ABCD输出不同的评价。</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:09\n * @Description\n */\npublic class SwitchDemo01 {\n    public static void main(String[] args) {\n        char grade = &#39;G&#39;;\n        switch (grade){\n            case &#39;A&#39; :\n                System.out.println(&quot;优秀&quot;);\n                break;\n            case &#39;B&#39; :\n                System.out.println(&quot;良好&quot;);\n                break;\n            case &#39;C&#39; :\n                System.out.println(&quot;及格&quot;);\n                break;\n            case &#39;D&#39; :\n                System.out.println(&quot;再接再厉&quot;);\n                break;\n            case &#39;E&#39; :\n                System.out.println(&quot;挂科&quot;);\n                break;\n            default:\n                System.out.println(&quot;未知成绩&quot;);\n        }\n    }\n}\n\n</code></pre>\n<hr>\n<p><strong>Java SE 7 新特性</strong></p>\n<p>代码</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:20\n * @Description\n */\npublic class SwitchDemo02 {\n    public static void main(String[] args) {\n        String name = &quot;hahaha&quot;;\n        switch (name){\n            case &quot;xiheya&quot;:\n                System.out.println(&quot;right&quot;);\n                break;\n            case &quot;hahaha&quot;:\n                System.out.println(&quot;error&quot;);\n                break;\n            default:\n                System.out.println(&quot;???&quot;);\n        }\n    }\n}\n\n</code></pre>\n"},{"title":"Java的特性与优势","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqpyov8j21kw0w0h0t.jpg"],"date":"2022-08-25T14:30:29.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Java的特性和优势\n\n### Java特性\n\n- 简单性\n- 面向对象\n- 可移植性\n- 高性能\n- 分布式\n- 动态性\n- 多线程\n- 安全性\n- 健壮性\n\n---\n\n### Java三大版本\n\n- **JavaSE ： 标准版（桌面程序，控制台开发……**\n- ~~**JavaME： 嵌入式开发（手机、小家电）**~~\n- **JavaEE： 企业级开发（web端，服务器开发）**\n\n---\n\n### JDK、JRE、JVM\n\n> JDK： Java Development Kit\n>\n> JRE： Java Runtime Environment\n>\n> JVM： Java Virtual Machine\n\n![三者区别与联系](https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png)\n\n\n\n![架构图](https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png)\n\n---\n\n### Java开发环境安装\n\n#### 卸载JDK\n\n1. 删除Java安装目录\n2. 删除环境变量中的JAVA_HOME\n3. 删除环境变量中的Path下关于Java的目录\n\n#### 安装JDK\n\n1. 打开官网找到电脑对应的版本，并下载到本地。[JDk下载页面](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html)\n2. 双击安装包进行安装\n3. 记住安装的路径\n4. **配置环境变量**\n   1. 我的电脑---> 右键 ---> 属性\n   2. 高级系统设置 ---> 环境变量 ---> 新建系统变量\n   3. 配置变量名： JAVA_HOME  值：Java的安装目录\n   4. 配置Path：鼠标右击Path--- 值为%JAVA_HOME%/lib\n5. 检查JDK是否安装成功\n   1. Win + r ：cmd\n   2. 输入java -version\n   3. 若打印出Java版本信息，则安装成功。\n","source":"_posts/Java的特性与优势.md","raw":"---\ntitle: Java的特性与优势\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqpyov8j21kw0w0h0t.jpg'\ndate: 2022-08-25 22:30:29\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java特性\nkeywords:\ndescription:\n---\n\n## Java的特性和优势\n\n### Java特性\n\n- 简单性\n- 面向对象\n- 可移植性\n- 高性能\n- 分布式\n- 动态性\n- 多线程\n- 安全性\n- 健壮性\n\n---\n\n### Java三大版本\n\n- **JavaSE ： 标准版（桌面程序，控制台开发……**\n- ~~**JavaME： 嵌入式开发（手机、小家电）**~~\n- **JavaEE： 企业级开发（web端，服务器开发）**\n\n---\n\n### JDK、JRE、JVM\n\n> JDK： Java Development Kit\n>\n> JRE： Java Runtime Environment\n>\n> JVM： Java Virtual Machine\n\n![三者区别与联系](https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png)\n\n\n\n![架构图](https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png)\n\n---\n\n### Java开发环境安装\n\n#### 卸载JDK\n\n1. 删除Java安装目录\n2. 删除环境变量中的JAVA_HOME\n3. 删除环境变量中的Path下关于Java的目录\n\n#### 安装JDK\n\n1. 打开官网找到电脑对应的版本，并下载到本地。[JDk下载页面](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html)\n2. 双击安装包进行安装\n3. 记住安装的路径\n4. **配置环境变量**\n   1. 我的电脑---> 右键 ---> 属性\n   2. 高级系统设置 ---> 环境变量 ---> 新建系统变量\n   3. 配置变量名： JAVA_HOME  值：Java的安装目录\n   4. 配置Path：鼠标右击Path--- 值为%JAVA_HOME%/lib\n5. 检查JDK是否安装成功\n   1. Win + r ：cmd\n   2. 输入java -version\n   3. 若打印出Java版本信息，则安装成功。\n","slug":"Java的特性与优势","published":1,"updated":"2022-08-25T15:04:42.468Z","layout":"post","link":"","_id":"cl796hiht001cgwrwwttycnuo","content":"<h2 id=\"Java的特性和优势\"><a href=\"#Java的特性和优势\" class=\"headerlink\" title=\"Java的特性和优势\"></a>Java的特性和优势</h2><h3 id=\"Java特性\"><a href=\"#Java特性\" class=\"headerlink\" title=\"Java特性\"></a>Java特性</h3><ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n</ul>\n<hr>\n<h3 id=\"Java三大版本\"><a href=\"#Java三大版本\" class=\"headerlink\" title=\"Java三大版本\"></a>Java三大版本</h3><ul>\n<li><strong>JavaSE ： 标准版（桌面程序，控制台开发……</strong></li>\n<li><del><strong>JavaME： 嵌入式开发（手机、小家电）</strong></del></li>\n<li><strong>JavaEE： 企业级开发（web端，服务器开发）</strong></li>\n</ul>\n<hr>\n<h3 id=\"JDK、JRE、JVM\"><a href=\"#JDK、JRE、JVM\" class=\"headerlink\" title=\"JDK、JRE、JVM\"></a>JDK、JRE、JVM</h3><blockquote>\n<p>JDK： Java Development Kit</p>\n<p>JRE： Java Runtime Environment</p>\n<p>JVM： Java Virtual Machine</p>\n</blockquote>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png\" alt=\"三者区别与联系\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png\" alt=\"架构图\"></p>\n<hr>\n<h3 id=\"Java开发环境安装\"><a href=\"#Java开发环境安装\" class=\"headerlink\" title=\"Java开发环境安装\"></a>Java开发环境安装</h3><h4 id=\"卸载JDK\"><a href=\"#卸载JDK\" class=\"headerlink\" title=\"卸载JDK\"></a>卸载JDK</h4><ol>\n<li>删除Java安装目录</li>\n<li>删除环境变量中的JAVA_HOME</li>\n<li>删除环境变量中的Path下关于Java的目录</li>\n</ol>\n<h4 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h4><ol>\n<li>打开官网找到电脑对应的版本，并下载到本地。<a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\" target=\"_blank\" rel=\"noopener\">JDk下载页面</a></li>\n<li>双击安装包进行安装</li>\n<li>记住安装的路径</li>\n<li><strong>配置环境变量</strong><ol>\n<li>我的电脑—&gt; 右键 —&gt; 属性</li>\n<li>高级系统设置 —&gt; 环境变量 —&gt; 新建系统变量</li>\n<li>配置变量名： JAVA_HOME  值：Java的安装目录</li>\n<li>配置Path：鼠标右击Path— 值为%JAVA_HOME%/lib</li>\n</ol>\n</li>\n<li>检查JDK是否安装成功<ol>\n<li>Win + r ：cmd</li>\n<li>输入java -version</li>\n<li>若打印出Java版本信息，则安装成功。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java的特性和优势\"><a href=\"#Java的特性和优势\" class=\"headerlink\" title=\"Java的特性和优势\"></a>Java的特性和优势</h2><h3 id=\"Java特性\"><a href=\"#Java特性\" class=\"headerlink\" title=\"Java特性\"></a>Java特性</h3><ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n</ul>\n<hr>\n<h3 id=\"Java三大版本\"><a href=\"#Java三大版本\" class=\"headerlink\" title=\"Java三大版本\"></a>Java三大版本</h3><ul>\n<li><strong>JavaSE ： 标准版（桌面程序，控制台开发……</strong></li>\n<li><del><strong>JavaME： 嵌入式开发（手机、小家电）</strong></del></li>\n<li><strong>JavaEE： 企业级开发（web端，服务器开发）</strong></li>\n</ul>\n<hr>\n<h3 id=\"JDK、JRE、JVM\"><a href=\"#JDK、JRE、JVM\" class=\"headerlink\" title=\"JDK、JRE、JVM\"></a>JDK、JRE、JVM</h3><blockquote>\n<p>JDK： Java Development Kit</p>\n<p>JRE： Java Runtime Environment</p>\n<p>JVM： Java Virtual Machine</p>\n</blockquote>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png\" alt=\"三者区别与联系\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png\" alt=\"架构图\"></p>\n<hr>\n<h3 id=\"Java开发环境安装\"><a href=\"#Java开发环境安装\" class=\"headerlink\" title=\"Java开发环境安装\"></a>Java开发环境安装</h3><h4 id=\"卸载JDK\"><a href=\"#卸载JDK\" class=\"headerlink\" title=\"卸载JDK\"></a>卸载JDK</h4><ol>\n<li>删除Java安装目录</li>\n<li>删除环境变量中的JAVA_HOME</li>\n<li>删除环境变量中的Path下关于Java的目录</li>\n</ol>\n<h4 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h4><ol>\n<li>打开官网找到电脑对应的版本，并下载到本地。<a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\" target=\"_blank\" rel=\"noopener\">JDk下载页面</a></li>\n<li>双击安装包进行安装</li>\n<li>记住安装的路径</li>\n<li><strong>配置环境变量</strong><ol>\n<li>我的电脑—&gt; 右键 —&gt; 属性</li>\n<li>高级系统设置 —&gt; 环境变量 —&gt; 新建系统变量</li>\n<li>配置变量名： JAVA_HOME  值：Java的安装目录</li>\n<li>配置Path：鼠标右击Path— 值为%JAVA_HOME%/lib</li>\n</ol>\n</li>\n<li>检查JDK是否安装成功<ol>\n<li>Win + r ：cmd</li>\n<li>输入java -version</li>\n<li>若打印出Java版本信息，则安装成功。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"Java流程控制01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg"],"date":"2022-08-25T14:38:42.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 用户交互Scanner\n\n- Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，**我们可以通过Scanner类来获取用户的输入**\n- 基本语法\n\n```java\nScanner s = new Scanner(System.in);\n```\n\n- 通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.\n\n---\n\n1. 使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以空格键或回车键结束\");\n        if (scanner.hasNext()){\n            String str = scanner.next();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n2. 使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        if (scanner.hasNextLine()){\n            String str = scanner.nextLine();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n3. 不判断是否还有输入的数据；直接nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        String str = scanner.nextLine();\n        System.out.println(\"从键盘上输入字符为：\" + str);\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n**IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!**\n\n### next()与nextLine()方法的区别\n\n- Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。\n\n![API](https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png)\n\n- next()方法是读取到空白符就结束了\n  1. 一定要读取到有效字符后才可以结束输入\n  2. 对输入有效字符之前遇到的空白，next()方法会自动将其去掉。\n  3. 只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符\n  4. **next**()不能得到带有空格的字符串\n- nextLine()方法是读取到了回车就结束即：\\t.\n  1. 以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符\n  2. 可以获得空白符\n\n---\n\n### Scanner中的其他方法\n\n1. **hasNextInt()** 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:31\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int i = 0;\n        float f = 0f;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意整数\");\n        if (scanner.hasNextInt()){\n            i = scanner.nextInt();\n            System.out.println(\"输入的整数为\" + i);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是整数\");\n        }\n\n\n        System.out.println(\"请从键盘上输入任意小数\");\n        if (scanner.hasNextFloat()){\n            f = scanner.nextFloat();\n            System.out.println(\"输入的小数为\" + f);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是小数\");\n        }\n        scanner.close();\n\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png)\n\n---\n\n2. **hasNextdouble()方法**：判断接下来输入的是不是double型；\n\n学到这里可以做一个简易的数字求和程序，代码如下：\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:52\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        double total = 0;\n        int m = 0;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意个数，以字符型数据结束\");\n        while (scanner.hasNextDouble()){\n\n            double x = scanner.nextDouble();\n            total = total + x;\n            m++;\n            System.out.println(\"您输入了\" + m + \"个数，和为：\" + total);\n\n        }\n        double v = total / m;\n        System.out.println(\"您结束了输入，此次您输入了\" + m + \"个数，和为：\" + total + \"这些数的平均值为：\" + v);\n        scanner.close();\n    }\n}\n\n```\n\n运行结果如下：\n\n![求和程序](https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png)\n\n","source":"_posts/Java流程控制01.md","raw":"---\ntitle: Java流程控制01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg'\ndate: 2022-08-25 22:38:42\nauthorAbout:\nauthorDesc:\ntags: \n- Java\n- Java流程控制\nkeywords:\ndescription:\n---\n\n## 用户交互Scanner\n\n- Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，**我们可以通过Scanner类来获取用户的输入**\n- 基本语法\n\n```java\nScanner s = new Scanner(System.in);\n```\n\n- 通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.\n\n---\n\n1. 使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以空格键或回车键结束\");\n        if (scanner.hasNext()){\n            String str = scanner.next();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n2. 使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        if (scanner.hasNextLine()){\n            String str = scanner.nextLine();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n3. 不判断是否还有输入的数据；直接nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        String str = scanner.nextLine();\n        System.out.println(\"从键盘上输入字符为：\" + str);\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n**IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!**\n\n### next()与nextLine()方法的区别\n\n- Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。\n\n![API](https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png)\n\n- next()方法是读取到空白符就结束了\n  1. 一定要读取到有效字符后才可以结束输入\n  2. 对输入有效字符之前遇到的空白，next()方法会自动将其去掉。\n  3. 只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符\n  4. **next**()不能得到带有空格的字符串\n- nextLine()方法是读取到了回车就结束即：\\t.\n  1. 以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符\n  2. 可以获得空白符\n\n---\n\n### Scanner中的其他方法\n\n1. **hasNextInt()** 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:31\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int i = 0;\n        float f = 0f;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意整数\");\n        if (scanner.hasNextInt()){\n            i = scanner.nextInt();\n            System.out.println(\"输入的整数为\" + i);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是整数\");\n        }\n\n\n        System.out.println(\"请从键盘上输入任意小数\");\n        if (scanner.hasNextFloat()){\n            f = scanner.nextFloat();\n            System.out.println(\"输入的小数为\" + f);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是小数\");\n        }\n        scanner.close();\n\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png)\n\n---\n\n2. **hasNextdouble()方法**：判断接下来输入的是不是double型；\n\n学到这里可以做一个简易的数字求和程序，代码如下：\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:52\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        double total = 0;\n        int m = 0;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意个数，以字符型数据结束\");\n        while (scanner.hasNextDouble()){\n\n            double x = scanner.nextDouble();\n            total = total + x;\n            m++;\n            System.out.println(\"您输入了\" + m + \"个数，和为：\" + total);\n\n        }\n        double v = total / m;\n        System.out.println(\"您结束了输入，此次您输入了\" + m + \"个数，和为：\" + total + \"这些数的平均值为：\" + v);\n        scanner.close();\n    }\n}\n\n```\n\n运行结果如下：\n\n![求和程序](https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png)\n\n","slug":"Java流程控制01","published":1,"updated":"2022-08-25T15:03:47.752Z","layout":"post","link":"","_id":"cl796hihu001egwrwq1h154y3","content":"<h2 id=\"用户交互Scanner\"><a href=\"#用户交互Scanner\" class=\"headerlink\" title=\"用户交互Scanner\"></a>用户交互Scanner</h2><ul>\n<li>Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，<strong>我们可以通过Scanner类来获取用户的输入</strong></li>\n<li>基本语法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">Scanner s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.</li>\n</ul>\n<hr>\n<ol>\n<li>使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//声明一个Scanner类型的变量</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//声明一个String类型的变量</span>\n        <span class=\"token comment\" spellcheck=\"true\">//String str;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//判断是否还有输入的数据</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请从键盘上输入任意字符，以空格键或回车键结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            String str <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从键盘上输入字符为：\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//用完一定要记得关闭！！！</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<ol start=\"2\">\n<li>使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//声明一个Scanner类型的变量</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//声明一个String类型的变量</span>\n        <span class=\"token comment\" spellcheck=\"true\">//String str;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//判断是否还有输入的数据</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请从键盘上输入任意字符，以回车键结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            String str <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从键盘上输入字符为：\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//用完一定要记得关闭！！！</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<ol start=\"3\">\n<li>不判断是否还有输入的数据；直接nextLine()方法接收输入的字符</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//声明一个Scanner类型的变量</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//声明一个String类型的变量</span>\n        <span class=\"token comment\" spellcheck=\"true\">//String str;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//判断是否还有输入的数据</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请从键盘上输入任意字符，以回车键结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String str <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"从键盘上输入字符为：\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//用完一定要记得关闭！！！</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<p><strong>IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!</strong></p>\n<h3 id=\"next-与nextLine-方法的区别\"><a href=\"#next-与nextLine-方法的区别\" class=\"headerlink\" title=\"next()与nextLine()方法的区别\"></a>next()与nextLine()方法的区别</h3><ul>\n<li>Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png\" alt=\"API\"></p>\n<ul>\n<li>next()方法是读取到空白符就结束了<ol>\n<li>一定要读取到有效字符后才可以结束输入</li>\n<li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li>\n<li>只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符</li>\n<li><strong>next</strong>()不能得到带有空格的字符串</li>\n</ol>\n</li>\n<li>nextLine()方法是读取到了回车就结束即：\\t.<ol>\n<li>以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符</li>\n<li>可以获得空白符</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"Scanner中的其他方法\"><a href=\"#Scanner中的其他方法\" class=\"headerlink\" title=\"Scanner中的其他方法\"></a>Scanner中的其他方法</h3><ol>\n<li><strong>hasNextInt()</strong> 方法与 <strong>hasNextfloat()</strong>方法可以判断下一个是否还有整数或小数输入。</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:31\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请从键盘上输入任意整数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            i <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的整数为\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error！您输入的不是整数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请从键盘上输入任意小数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            f <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入的小数为\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error！您输入的不是小数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png\" alt=\"输出结果\"></p>\n<hr>\n<ol start=\"2\">\n<li><strong>hasNextdouble()方法</strong>：判断接下来输入的是不是double型；</li>\n</ol>\n<p>学到这里可以做一个简易的数字求和程序，代码如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Scanner<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:52\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        Scanner scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请从键盘上输入任意个数，以字符型数据结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> x<span class=\"token punctuation\">;</span>\n            m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入了\"</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">+</span> <span class=\"token string\">\"个数，和为：\"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">double</span> v <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> m<span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您结束了输入，此次您输入了\"</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">+</span> <span class=\"token string\">\"个数，和为：\"</span> <span class=\"token operator\">+</span> total <span class=\"token operator\">+</span> <span class=\"token string\">\"这些数的平均值为：\"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果如下：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png\" alt=\"求和程序\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用户交互Scanner\"><a href=\"#用户交互Scanner\" class=\"headerlink\" title=\"用户交互Scanner\"></a>用户交互Scanner</h2><ul>\n<li>Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，<strong>我们可以通过Scanner类来获取用户的输入</strong></li>\n<li>基本语法</li>\n</ul>\n<pre><code class=\"java\">Scanner s = new Scanner(System.in);\n</code></pre>\n<ul>\n<li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.</li>\n</ul>\n<hr>\n<ol>\n<li>使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符</li>\n</ol>\n<pre><code class=\"java\">package com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(&quot;请从键盘上输入任意字符，以空格键或回车键结束&quot;);\n        if (scanner.hasNext()){\n            String str = scanner.next();\n            System.out.println(&quot;从键盘上输入字符为：&quot; + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n</code></pre>\n<hr>\n<ol start=\"2\">\n<li>使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符</li>\n</ol>\n<pre><code class=\"java\">package com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(&quot;请从键盘上输入任意字符，以回车键结束&quot;);\n        if (scanner.hasNextLine()){\n            String str = scanner.nextLine();\n            System.out.println(&quot;从键盘上输入字符为：&quot; + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n</code></pre>\n<hr>\n<ol start=\"3\">\n<li>不判断是否还有输入的数据；直接nextLine()方法接收输入的字符</li>\n</ol>\n<pre><code class=\"java\">package com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(&quot;请从键盘上输入任意字符，以回车键结束&quot;);\n        String str = scanner.nextLine();\n        System.out.println(&quot;从键盘上输入字符为：&quot; + str);\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n</code></pre>\n<hr>\n<p><strong>IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!</strong></p>\n<h3 id=\"next-与nextLine-方法的区别\"><a href=\"#next-与nextLine-方法的区别\" class=\"headerlink\" title=\"next()与nextLine()方法的区别\"></a>next()与nextLine()方法的区别</h3><ul>\n<li>Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png\" alt=\"API\"></p>\n<ul>\n<li>next()方法是读取到空白符就结束了<ol>\n<li>一定要读取到有效字符后才可以结束输入</li>\n<li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li>\n<li>只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符</li>\n<li><strong>next</strong>()不能得到带有空格的字符串</li>\n</ol>\n</li>\n<li>nextLine()方法是读取到了回车就结束即：\\t.<ol>\n<li>以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符</li>\n<li>可以获得空白符</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"Scanner中的其他方法\"><a href=\"#Scanner中的其他方法\" class=\"headerlink\" title=\"Scanner中的其他方法\"></a>Scanner中的其他方法</h3><ol>\n<li><strong>hasNextInt()</strong> 方法与 <strong>hasNextfloat()</strong>方法可以判断下一个是否还有整数或小数输入。</li>\n</ol>\n<pre><code class=\"java\">package com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:31\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int i = 0;\n        float f = 0f;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(&quot;请从键盘上输入任意整数&quot;);\n        if (scanner.hasNextInt()){\n            i = scanner.nextInt();\n            System.out.println(&quot;输入的整数为&quot; + i);\n        }\n        else {\n            System.out.println(&quot;Error！您输入的不是整数&quot;);\n        }\n\n\n        System.out.println(&quot;请从键盘上输入任意小数&quot;);\n        if (scanner.hasNextFloat()){\n            f = scanner.nextFloat();\n            System.out.println(&quot;输入的小数为&quot; + f);\n        }\n        else {\n            System.out.println(&quot;Error！您输入的不是小数&quot;);\n        }\n        scanner.close();\n\n    }\n}\n\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png\" alt=\"输出结果\"></p>\n<hr>\n<ol start=\"2\">\n<li><strong>hasNextdouble()方法</strong>：判断接下来输入的是不是double型；</li>\n</ol>\n<p>学到这里可以做一个简易的数字求和程序，代码如下：</p>\n<pre><code class=\"java\">package com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:52\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        double total = 0;\n        int m = 0;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(&quot;请从键盘上输入任意个数，以字符型数据结束&quot;);\n        while (scanner.hasNextDouble()){\n\n            double x = scanner.nextDouble();\n            total = total + x;\n            m++;\n            System.out.println(&quot;您输入了&quot; + m + &quot;个数，和为：&quot; + total);\n\n        }\n        double v = total / m;\n        System.out.println(&quot;您结束了输入，此次您输入了&quot; + m + &quot;个数，和为：&quot; + total + &quot;这些数的平均值为：&quot; + v);\n        scanner.close();\n    }\n}\n\n</code></pre>\n<p>运行结果如下：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png\" alt=\"求和程序\"></p>\n"},{"title":"Java运行机制及IDEA安装教程","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqm5vu5j21kw0w0aon.jpg"],"date":"2022-08-25T14:32:04.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Java运行机制及IDEA安装教程\n\n### Hello World \n\n1. 新建一个Java文件\n   - 文件后缀名为.java\n   - Hello.java\n2. 编写代码\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n3. 编译java文件  cmd：javac Hello.java。会生成一个class文件\n\n4. 运行class文件 cmd：java Hello\n\n5. **可能会遇到的问题**\n\n   1. Java是大小写敏感的语言，每个单词的大小写不能出现问题\n   2. 尽量使用中文\n   3. 文件名与类名必须保持一致\n\n   ---\n\n### Java运行机制\n\n   - 编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c/c++)\n   - 解释型：执行什么就读取什么(网页、Javascript)\n   - Java程序运行机制\n\n![java_run](https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png)\n\n---\n\n## IDEA安装教程\n\n### 1. 打开jetbrains官网下载IDEA\n\n![](https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png)\n\n- 下载地址：https://www.jetbrains.com/zh-cn/idea/download/#section=windows\n\n- 点击[此处](https://www.jetbrains.com/zh-cn/idea/download/#section=windows)进入IDEA下载界面\n\n![](https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png)\n\n### 2. 打开安装包之后，~~无脑next。~~\n\n![](https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png)\n\n### 3. **安装目录不建议放在C盘**\n\n![](https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png)\n\n---\n\n## 创建一个Java程序\n\n1. 双击打开IDEA快捷方式，首先new一个Project\n\n   ![new_project](https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png)\n\n   \n\n2. 然后选择Java语言导入JDK环境\n\n   ![JDK](https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png)\n\n3. 鼠标右击src文件夹 new一个 java class\n\n   ![new class](https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png)\n\n4. 编写hello world\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n![HELLO WORLD](https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png)\n\n\n\n> \n\n---\n\n","source":"_posts/Java运行机制及IDEA安装教程.md","raw":"---\ntitle: Java运行机制及IDEA安装教程\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqm5vu5j21kw0w0aon.jpg'\ndate: 2022-08-25 22:32:04\nauthorAbout:\nauthorDesc:\ntags: Java\nkeywords:\ndescription:\n---\n\n## Java运行机制及IDEA安装教程\n\n### Hello World \n\n1. 新建一个Java文件\n   - 文件后缀名为.java\n   - Hello.java\n2. 编写代码\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n3. 编译java文件  cmd：javac Hello.java。会生成一个class文件\n\n4. 运行class文件 cmd：java Hello\n\n5. **可能会遇到的问题**\n\n   1. Java是大小写敏感的语言，每个单词的大小写不能出现问题\n   2. 尽量使用中文\n   3. 文件名与类名必须保持一致\n\n   ---\n\n### Java运行机制\n\n   - 编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c/c++)\n   - 解释型：执行什么就读取什么(网页、Javascript)\n   - Java程序运行机制\n\n![java_run](https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png)\n\n---\n\n## IDEA安装教程\n\n### 1. 打开jetbrains官网下载IDEA\n\n![](https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png)\n\n- 下载地址：https://www.jetbrains.com/zh-cn/idea/download/#section=windows\n\n- 点击[此处](https://www.jetbrains.com/zh-cn/idea/download/#section=windows)进入IDEA下载界面\n\n![](https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png)\n\n### 2. 打开安装包之后，~~无脑next。~~\n\n![](https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png)\n\n### 3. **安装目录不建议放在C盘**\n\n![](https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png)\n\n---\n\n## 创建一个Java程序\n\n1. 双击打开IDEA快捷方式，首先new一个Project\n\n   ![new_project](https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png)\n\n   \n\n2. 然后选择Java语言导入JDK环境\n\n   ![JDK](https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png)\n\n3. 鼠标右击src文件夹 new一个 java class\n\n   ![new class](https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png)\n\n4. 编写hello world\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n![HELLO WORLD](https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png)\n\n\n\n> \n\n---\n\n","slug":"Java运行机制及IDEA安装教程","published":1,"updated":"2022-08-25T15:01:24.754Z","layout":"post","link":"","_id":"cl796hihv001hgwrw9sae99fa","content":"<h2 id=\"Java运行机制及IDEA安装教程\"><a href=\"#Java运行机制及IDEA安装教程\" class=\"headerlink\" title=\"Java运行机制及IDEA安装教程\"></a>Java运行机制及IDEA安装教程</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><ol>\n<li>新建一个Java文件<ul>\n<li>文件后缀名为.java</li>\n<li>Hello.java</li>\n</ul>\n</li>\n<li>编写代码</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"3\">\n<li><p>编译java文件  cmd：javac Hello.java。会生成一个class文件</p>\n</li>\n<li><p>运行class文件 cmd：java Hello</p>\n</li>\n<li><p><strong>可能会遇到的问题</strong></p>\n<ol>\n<li>Java是大小写敏感的语言，每个单词的大小写不能出现问题</li>\n<li>尽量使用中文</li>\n<li>文件名与类名必须保持一致</li>\n</ol>\n<hr>\n</li>\n</ol>\n<h3 id=\"Java运行机制\"><a href=\"#Java运行机制\" class=\"headerlink\" title=\"Java运行机制\"></a>Java运行机制</h3><ul>\n<li>编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c/c++)</li>\n<li>解释型：执行什么就读取什么(网页、Javascript)</li>\n<li>Java程序运行机制</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png\" alt=\"java_run\"></p>\n<hr>\n<h2 id=\"IDEA安装教程\"><a href=\"#IDEA安装教程\" class=\"headerlink\" title=\"IDEA安装教程\"></a>IDEA安装教程</h2><h3 id=\"1-打开jetbrains官网下载IDEA\"><a href=\"#1-打开jetbrains官网下载IDEA\" class=\"headerlink\" title=\"1. 打开jetbrains官网下载IDEA\"></a>1. 打开jetbrains官网下载IDEA</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png\" alt></p>\n<ul>\n<li><p>下载地址：<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a></p>\n</li>\n<li><p>点击<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\" target=\"_blank\" rel=\"noopener\">此处</a>进入IDEA下载界面</p>\n</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png\" alt></p>\n<h3 id=\"2-打开安装包之后，无脑next。\"><a href=\"#2-打开安装包之后，无脑next。\" class=\"headerlink\" title=\"2. 打开安装包之后，无脑next。\"></a>2. 打开安装包之后，<del>无脑next。</del></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png\" alt></p>\n<h3 id=\"3-安装目录不建议放在C盘\"><a href=\"#3-安装目录不建议放在C盘\" class=\"headerlink\" title=\"3. 安装目录不建议放在C盘\"></a>3. <strong>安装目录不建议放在C盘</strong></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png\" alt></p>\n<hr>\n<h2 id=\"创建一个Java程序\"><a href=\"#创建一个Java程序\" class=\"headerlink\" title=\"创建一个Java程序\"></a>创建一个Java程序</h2><ol>\n<li><p>双击打开IDEA快捷方式，首先new一个Project</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png\" alt=\"new_project\"></p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>然后选择Java语言导入JDK环境</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png\" alt=\"JDK\"></p>\n</li>\n<li><p>鼠标右击src文件夹 new一个 java class</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png\" alt=\"new class\"></p>\n</li>\n<li><p>编写hello world</p>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png\" alt=\"HELLO WORLD\"></p>\n<blockquote>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java运行机制及IDEA安装教程\"><a href=\"#Java运行机制及IDEA安装教程\" class=\"headerlink\" title=\"Java运行机制及IDEA安装教程\"></a>Java运行机制及IDEA安装教程</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><ol>\n<li>新建一个Java文件<ul>\n<li>文件后缀名为.java</li>\n<li>Hello.java</li>\n</ul>\n</li>\n<li>编写代码</li>\n</ol>\n<pre><code class=\"java\">public class Hello{\n    public static void main(String[] args){\n        System.out.print(&quot;hello world&quot;);\n    }\n}\n</code></pre>\n<ol start=\"3\">\n<li><p>编译java文件  cmd：javac Hello.java。会生成一个class文件</p>\n</li>\n<li><p>运行class文件 cmd：java Hello</p>\n</li>\n<li><p><strong>可能会遇到的问题</strong></p>\n<ol>\n<li>Java是大小写敏感的语言，每个单词的大小写不能出现问题</li>\n<li>尽量使用中文</li>\n<li>文件名与类名必须保持一致</li>\n</ol>\n<hr>\n</li>\n</ol>\n<h3 id=\"Java运行机制\"><a href=\"#Java运行机制\" class=\"headerlink\" title=\"Java运行机制\"></a>Java运行机制</h3><ul>\n<li>编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c/c++)</li>\n<li>解释型：执行什么就读取什么(网页、Javascript)</li>\n<li>Java程序运行机制</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png\" alt=\"java_run\"></p>\n<hr>\n<h2 id=\"IDEA安装教程\"><a href=\"#IDEA安装教程\" class=\"headerlink\" title=\"IDEA安装教程\"></a>IDEA安装教程</h2><h3 id=\"1-打开jetbrains官网下载IDEA\"><a href=\"#1-打开jetbrains官网下载IDEA\" class=\"headerlink\" title=\"1. 打开jetbrains官网下载IDEA\"></a>1. 打开jetbrains官网下载IDEA</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png\" alt></p>\n<ul>\n<li><p>下载地址：<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a></p>\n</li>\n<li><p>点击<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\" target=\"_blank\" rel=\"noopener\">此处</a>进入IDEA下载界面</p>\n</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png\" alt></p>\n<h3 id=\"2-打开安装包之后，无脑next。\"><a href=\"#2-打开安装包之后，无脑next。\" class=\"headerlink\" title=\"2. 打开安装包之后，无脑next。\"></a>2. 打开安装包之后，<del>无脑next。</del></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png\" alt></p>\n<h3 id=\"3-安装目录不建议放在C盘\"><a href=\"#3-安装目录不建议放在C盘\" class=\"headerlink\" title=\"3. 安装目录不建议放在C盘\"></a>3. <strong>安装目录不建议放在C盘</strong></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png\" alt></p>\n<hr>\n<h2 id=\"创建一个Java程序\"><a href=\"#创建一个Java程序\" class=\"headerlink\" title=\"创建一个Java程序\"></a>创建一个Java程序</h2><ol>\n<li><p>双击打开IDEA快捷方式，首先new一个Project</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png\" alt=\"new_project\"></p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>然后选择Java语言导入JDK环境</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png\" alt=\"JDK\"></p>\n</li>\n<li><p>鼠标右击src文件夹 new一个 java class</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png\" alt=\"new class\"></p>\n</li>\n<li><p>编写hello world</p>\n</li>\n</ol>\n<pre><code class=\"java\">public class Hello{\n    public static void main(String[] args){\n        System.out.print(&quot;hello world&quot;);\n    }\n}\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png\" alt=\"HELLO WORLD\"></p>\n<blockquote>\n</blockquote>\n<hr>\n"},{"title":"Java流程控制03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg"],"date":"2022-08-25T14:41:01.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 循环结构\n\n### while 循环\n\n- while 是最基本的循环\n- 语法\n\n```java\nwhile(布尔表达式){\n    //循环内容\n}\n```\n\n- 只要布尔表达式为true，则循环一直执行下去\n- **我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环**\n- 少部分情况循环需要一直执行，比如服务器的请求响应监听\n- 循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃\n\n**设计一个程序计算1+2+3+4+5+……+100；**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:44\n * @Description\n */\npublic class WhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        while( i < 100)\n        {\n            i++;\n            total += i ;\n        }\n        System.out.println(total);\n    }\n}\n\n```\n\n---\n\n### do …… while循环\n\n- 对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。\n- do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。\n- 语法\n\n```java\ndo{\n    //代码语句\n}while(布尔表达式);\n```\n\n- while和do-While的区别：\n  - while先判断后执行，dowhile是先执行后判断！\n  - Do……while总是保证循环体会被至少执行一次！这是他们的主要差别\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:56\n * @Description\n */\npublic class DoWhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        do{\n            i++;\n            total += i;\n        }while(i < 100);\n        System.out.println(total);\n    }\n}\n\n```\n\n\n\n### for循环\n\n- 虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句---for循环，使一些循环结构变得更加简单。\n- for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环\n- for循环执行的次数在执行前就确定。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式 ; 更新){\n    //代码语句\n}\n\n```\n\n**设计一个程序计算出0-100的奇数和与偶数和**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n    }\n\n}\n\n```\n\n**运行截图**\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png)\n\n**设计一个程序输出1-1000之间能被5整除的数，每行输出三个**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n\n        for (int i = 0; i <= 1000; i++) {\n            if ((i%5) == 0){                    //对\n                System.out.print(i+\"\\t\");\n\n            }\n            if (((i+1) % (5*3)) == 0){\n                System.out.print(\"\\n\");\n\n            }\n        }\n    }\n\n\n}\n\n```\n\n**设计一个程序打印出99乘法表**\n\n程序\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 16:56\n * @Description\n */\npublic class ForDemo02 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 1; j <= i; j++) {           //行由i控制，第i行输出i个依次类推\n                System.out.print( j + \"*\" + i + \"=\" + i*j + \"\\t\");\n            }\n            System.out.println();                   //输出完一行就换一次行\n        }\n    }\n}\n\n```\n\n**运行结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png)\n\n### 增强for循环\n\n- Java5引入了一种主要用于数组或集合的增强for循环。\n- 增强for循环语法格式\n\n```java\nfor(声明语句:表达式){\n    //代码语句\n}\n```\n\n- 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。\n- 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。\n\n代码示例：简单的遍历代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 18:56\n * @Description\n */\npublic class ForDemo03 {\n    public static void main(String[] args) {\n        int [] numbers = {10,20,30,40,50};\n        for (int x : numbers){\n            System.out.println(x);\n        };\n    }\n}\n\n```\n\n### break 和 continue\n\n- break在任何循环语句的主体部分，均可用break控制循环的流程。**break用于强行退出循环，不执行循环中剩余的语句**。（break语句也可以在switch语句中使用）\n\n示例：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:13\n * @Description\n */\npublic class Break {\n    public static void main(String[] args) {\n        for (int i = 1; i < 100; i++) {\n            if (i  == 30){\n                System.out.println();\n                break;                              //break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句\n            }\n            System.out.println(i);\n        }\n        System.out.println(\"我还可以继续运行\");         //跳出循环后程序还是会继续运行\n    }\n}\n\n```\n\n输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。\n\n![输出结果0](https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png)\n\n---\n\n- continue语句用在循环语句体中，**用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。**\n\n示例\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:21\n * @Description\n */\npublic class Continue {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 100){\n            i ++;\n            if (i%10 == 0){\n                System.out.println();\n                continue;                       //每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。\n            }\n            System.out.print(i+\"\\t\");\n        }\n    }\n}\n\n```\n\n输出结果：输出时遇到能被10整除的数自动跳过。\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png)\n\n- 拓展：关于goto关键字\n  - goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子------带标签的break和continue\n  - 标签是指后面跟一个冒号的标识符，例如：label；\n  - 对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。\n\n### 联系\n\n```markdown\n设计一个程序打印出一个三角形。\n**********\n****  ****\n***    ***\n**      **\n*        *\n\n```\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 15:56\n * @Description\n */\npublic class TestDemo01 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 5; j >= i; j--) {\n                System.out.print(\"*\");\n            }\n            for (int k = 1; k < i; k++) {\n                System.out.print(\"  \");\n            }\n            for (int k = 5; k >= i; k--) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n\n","source":"_posts/Java流程控制03.md","raw":"---\ntitle: Java流程控制03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg'\ndate: 2022-08-25 22:41:01\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java流程控制\nkeywords:\ndescription:\n---\n\n## 循环结构\n\n### while 循环\n\n- while 是最基本的循环\n- 语法\n\n```java\nwhile(布尔表达式){\n    //循环内容\n}\n```\n\n- 只要布尔表达式为true，则循环一直执行下去\n- **我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环**\n- 少部分情况循环需要一直执行，比如服务器的请求响应监听\n- 循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃\n\n**设计一个程序计算1+2+3+4+5+……+100；**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:44\n * @Description\n */\npublic class WhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        while( i < 100)\n        {\n            i++;\n            total += i ;\n        }\n        System.out.println(total);\n    }\n}\n\n```\n\n---\n\n### do …… while循环\n\n- 对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。\n- do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。\n- 语法\n\n```java\ndo{\n    //代码语句\n}while(布尔表达式);\n```\n\n- while和do-While的区别：\n  - while先判断后执行，dowhile是先执行后判断！\n  - Do……while总是保证循环体会被至少执行一次！这是他们的主要差别\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:56\n * @Description\n */\npublic class DoWhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        do{\n            i++;\n            total += i;\n        }while(i < 100);\n        System.out.println(total);\n    }\n}\n\n```\n\n\n\n### for循环\n\n- 虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句---for循环，使一些循环结构变得更加简单。\n- for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环\n- for循环执行的次数在执行前就确定。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式 ; 更新){\n    //代码语句\n}\n\n```\n\n**设计一个程序计算出0-100的奇数和与偶数和**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n    }\n\n}\n\n```\n\n**运行截图**\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png)\n\n**设计一个程序输出1-1000之间能被5整除的数，每行输出三个**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n\n        for (int i = 0; i <= 1000; i++) {\n            if ((i%5) == 0){                    //对\n                System.out.print(i+\"\\t\");\n\n            }\n            if (((i+1) % (5*3)) == 0){\n                System.out.print(\"\\n\");\n\n            }\n        }\n    }\n\n\n}\n\n```\n\n**设计一个程序打印出99乘法表**\n\n程序\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 16:56\n * @Description\n */\npublic class ForDemo02 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 1; j <= i; j++) {           //行由i控制，第i行输出i个依次类推\n                System.out.print( j + \"*\" + i + \"=\" + i*j + \"\\t\");\n            }\n            System.out.println();                   //输出完一行就换一次行\n        }\n    }\n}\n\n```\n\n**运行结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png)\n\n### 增强for循环\n\n- Java5引入了一种主要用于数组或集合的增强for循环。\n- 增强for循环语法格式\n\n```java\nfor(声明语句:表达式){\n    //代码语句\n}\n```\n\n- 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。\n- 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。\n\n代码示例：简单的遍历代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 18:56\n * @Description\n */\npublic class ForDemo03 {\n    public static void main(String[] args) {\n        int [] numbers = {10,20,30,40,50};\n        for (int x : numbers){\n            System.out.println(x);\n        };\n    }\n}\n\n```\n\n### break 和 continue\n\n- break在任何循环语句的主体部分，均可用break控制循环的流程。**break用于强行退出循环，不执行循环中剩余的语句**。（break语句也可以在switch语句中使用）\n\n示例：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:13\n * @Description\n */\npublic class Break {\n    public static void main(String[] args) {\n        for (int i = 1; i < 100; i++) {\n            if (i  == 30){\n                System.out.println();\n                break;                              //break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句\n            }\n            System.out.println(i);\n        }\n        System.out.println(\"我还可以继续运行\");         //跳出循环后程序还是会继续运行\n    }\n}\n\n```\n\n输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。\n\n![输出结果0](https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png)\n\n---\n\n- continue语句用在循环语句体中，**用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。**\n\n示例\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:21\n * @Description\n */\npublic class Continue {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 100){\n            i ++;\n            if (i%10 == 0){\n                System.out.println();\n                continue;                       //每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。\n            }\n            System.out.print(i+\"\\t\");\n        }\n    }\n}\n\n```\n\n输出结果：输出时遇到能被10整除的数自动跳过。\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png)\n\n- 拓展：关于goto关键字\n  - goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子------带标签的break和continue\n  - 标签是指后面跟一个冒号的标识符，例如：label；\n  - 对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。\n\n### 联系\n\n```markdown\n设计一个程序打印出一个三角形。\n**********\n****  ****\n***    ***\n**      **\n*        *\n\n```\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 15:56\n * @Description\n */\npublic class TestDemo01 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 5; j >= i; j--) {\n                System.out.print(\"*\");\n            }\n            for (int k = 1; k < i; k++) {\n                System.out.print(\"  \");\n            }\n            for (int k = 5; k >= i; k--) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n\n","slug":"Java流程控制03","published":1,"updated":"2022-08-25T15:03:54.064Z","layout":"post","link":"","_id":"cl796hihw001kgwrw8k4yhk6q","content":"<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><ul>\n<li>while 是最基本的循环</li>\n<li>语法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//循环内容</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>只要布尔表达式为true，则循环一直执行下去</li>\n<li><strong>我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环</strong></li>\n<li>少部分情况循环需要一直执行，比如服务器的请求响应监听</li>\n<li>循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃</li>\n</ul>\n<p><strong>设计一个程序计算1+2+3+4+5+……+100；</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:44\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WhileDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            total <span class=\"token operator\">+=</span> i <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<h3 id=\"do-……-while循环\"><a href=\"#do-……-while循环\" class=\"headerlink\" title=\"do …… while循环\"></a>do …… while循环</h3><ul>\n<li>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。</li>\n<li>do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。</li>\n<li>语法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//代码语句</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>while和do-While的区别：<ul>\n<li>while先判断后执行，dowhile是先执行后判断！</li>\n<li>Do……while总是保证循环体会被至少执行一次！这是他们的主要差别</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:56\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DoWhileDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span><span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            total <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><ul>\n<li>虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句—for循环，使一些循环结构变得更加简单。</li>\n<li>for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环</li>\n<li>for循环执行的次数在执行前就确定。语法格式如下：</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span> 布尔表达式 <span class=\"token punctuation\">;</span> 更新<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//代码语句</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>设计一个程序计算出0-100的奇数和与偶数和</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> oddtotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//奇数和</span>\n        <span class=\"token keyword\">int</span> eventotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//偶数和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                eventotal <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                oddtotal <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数和：\\t\"</span><span class=\"token operator\">+</span>eventotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奇数和: \\t\"</span><span class=\"token operator\">+</span>oddtotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>运行截图</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png\" alt=\"运行结果\"></p>\n<p><strong>设计一个程序输出1-1000之间能被5整除的数，每行输出三个</strong></p>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> oddtotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//奇数和</span>\n        <span class=\"token keyword\">int</span> eventotal <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//偶数和</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                eventotal <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                oddtotal <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"偶数和：\\t\"</span><span class=\"token operator\">+</span>eventotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奇数和: \\t\"</span><span class=\"token operator\">+</span>oddtotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                    <span class=\"token comment\" spellcheck=\"true\">//对</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>设计一个程序打印出99乘法表</strong></p>\n<p>程序</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 16:56\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForDemo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>           <span class=\"token comment\" spellcheck=\"true\">//行由i控制，第i行输出i个依次类推</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span>j <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">//输出完一行就换一次行</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png\" alt=\"输出结果2\"></p>\n<h3 id=\"增强for循环\"><a href=\"#增强for循环\" class=\"headerlink\" title=\"增强for循环\"></a>增强for循环</h3><ul>\n<li>Java5引入了一种主要用于数组或集合的增强for循环。</li>\n<li>增强for循环语法格式</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句<span class=\"token operator\">:</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//代码语句</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。</li>\n<li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li>\n</ul>\n<p>代码示例：简单的遍历代码</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 18:56\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForDemo03</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h3><ul>\n<li>break在任何循环语句的主体部分，均可用break控制循环的流程。<strong>break用于强行退出循环，不执行循环中剩余的语句</strong>。（break语句也可以在switch语句中使用）</li>\n</ul>\n<p>示例：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:13\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Break</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i  <span class=\"token operator\">==</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\" spellcheck=\"true\">//break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我还可以继续运行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">//跳出循环后程序还是会继续运行</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png\" alt=\"输出结果0\"></p>\n<hr>\n<ul>\n<li>continue语句用在循环语句体中，<strong>用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</strong></li>\n</ul>\n<p>示例</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:21\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Continue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            i <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\" spellcheck=\"true\">//每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>输出结果：输出时遇到能被10整除的数自动跳过。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png\" alt=\"输出结果\"></p>\n<ul>\n<li>拓展：关于goto关键字<ul>\n<li>goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子——带标签的break和continue</li>\n<li>标签是指后面跟一个冒号的标识符，例如：label；</li>\n<li>对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><pre class=\" language-markdown\"><code class=\"language-markdown\">设计一个程序打印出一个三角形。\n<span class=\"token hr punctuation\">**********</span>\n<span class=\"token hr punctuation\">****  ****</span>\n<span class=\"token hr punctuation\">***    ***</span>\n<span class=\"token hr punctuation\">**      **</span>\n<span class=\"token list punctuation\">*</span>        *\n\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>struct<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 15:56\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><ul>\n<li>while 是最基本的循环</li>\n<li>语法</li>\n</ul>\n<pre><code class=\"java\">while(布尔表达式){\n    //循环内容\n}\n</code></pre>\n<ul>\n<li>只要布尔表达式为true，则循环一直执行下去</li>\n<li><strong>我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环</strong></li>\n<li>少部分情况循环需要一直执行，比如服务器的请求响应监听</li>\n<li>循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃</li>\n</ul>\n<p><strong>设计一个程序计算1+2+3+4+5+……+100；</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:44\n * @Description\n */\npublic class WhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        while( i &lt; 100)\n        {\n            i++;\n            total += i ;\n        }\n        System.out.println(total);\n    }\n}\n\n</code></pre>\n<hr>\n<h3 id=\"do-……-while循环\"><a href=\"#do-……-while循环\" class=\"headerlink\" title=\"do …… while循环\"></a>do …… while循环</h3><ul>\n<li>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。</li>\n<li>do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。</li>\n<li>语法</li>\n</ul>\n<pre><code class=\"java\">do{\n    //代码语句\n}while(布尔表达式);\n</code></pre>\n<ul>\n<li>while和do-While的区别：<ul>\n<li>while先判断后执行，dowhile是先执行后判断！</li>\n<li>Do……while总是保证循环体会被至少执行一次！这是他们的主要差别</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:56\n * @Description\n */\npublic class DoWhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        do{\n            i++;\n            total += i;\n        }while(i &lt; 100);\n        System.out.println(total);\n    }\n}\n\n</code></pre>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><ul>\n<li>虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句—for循环，使一些循环结构变得更加简单。</li>\n<li>for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环</li>\n<li>for循环执行的次数在执行前就确定。语法格式如下：</li>\n</ul>\n<pre><code class=\"java\">for(初始化; 布尔表达式 ; 更新){\n    //代码语句\n}\n\n</code></pre>\n<p><strong>设计一个程序计算出0-100的奇数和与偶数和</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i &lt;= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(&quot;偶数和：\\t&quot;+eventotal);\n        System.out.println(&quot;奇数和: \\t&quot;+oddtotal);\n    }\n\n}\n\n</code></pre>\n<p><strong>运行截图</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png\" alt=\"运行结果\"></p>\n<p><strong>设计一个程序输出1-1000之间能被5整除的数，每行输出三个</strong></p>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i &lt;= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(&quot;偶数和：\\t&quot;+eventotal);\n        System.out.println(&quot;奇数和: \\t&quot;+oddtotal);\n\n        for (int i = 0; i &lt;= 1000; i++) {\n            if ((i%5) == 0){                    //对\n                System.out.print(i+&quot;\\t&quot;);\n\n            }\n            if (((i+1) % (5*3)) == 0){\n                System.out.print(&quot;\\n&quot;);\n\n            }\n        }\n    }\n\n\n}\n\n</code></pre>\n<p><strong>设计一个程序打印出99乘法表</strong></p>\n<p>程序</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 16:56\n * @Description\n */\npublic class ForDemo02 {\n    public static void main(String[] args) {\n        for (int i = 1; i &lt;= 9; i++) {\n            for (int j = 1; j &lt;= i; j++) {           //行由i控制，第i行输出i个依次类推\n                System.out.print( j + &quot;*&quot; + i + &quot;=&quot; + i*j + &quot;\\t&quot;);\n            }\n            System.out.println();                   //输出完一行就换一次行\n        }\n    }\n}\n\n</code></pre>\n<p><strong>运行结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png\" alt=\"输出结果2\"></p>\n<h3 id=\"增强for循环\"><a href=\"#增强for循环\" class=\"headerlink\" title=\"增强for循环\"></a>增强for循环</h3><ul>\n<li>Java5引入了一种主要用于数组或集合的增强for循环。</li>\n<li>增强for循环语法格式</li>\n</ul>\n<pre><code class=\"java\">for(声明语句:表达式){\n    //代码语句\n}\n</code></pre>\n<ul>\n<li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。</li>\n<li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li>\n</ul>\n<p>代码示例：简单的遍历代码</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 18:56\n * @Description\n */\npublic class ForDemo03 {\n    public static void main(String[] args) {\n        int [] numbers = {10,20,30,40,50};\n        for (int x : numbers){\n            System.out.println(x);\n        };\n    }\n}\n\n</code></pre>\n<h3 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h3><ul>\n<li>break在任何循环语句的主体部分，均可用break控制循环的流程。<strong>break用于强行退出循环，不执行循环中剩余的语句</strong>。（break语句也可以在switch语句中使用）</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:13\n * @Description\n */\npublic class Break {\n    public static void main(String[] args) {\n        for (int i = 1; i &lt; 100; i++) {\n            if (i  == 30){\n                System.out.println();\n                break;                              //break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句\n            }\n            System.out.println(i);\n        }\n        System.out.println(&quot;我还可以继续运行&quot;);         //跳出循环后程序还是会继续运行\n    }\n}\n\n</code></pre>\n<p>输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png\" alt=\"输出结果0\"></p>\n<hr>\n<ul>\n<li>continue语句用在循环语句体中，<strong>用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</strong></li>\n</ul>\n<p>示例</p>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:21\n * @Description\n */\npublic class Continue {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i &lt; 100){\n            i ++;\n            if (i%10 == 0){\n                System.out.println();\n                continue;                       //每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。\n            }\n            System.out.print(i+&quot;\\t&quot;);\n        }\n    }\n}\n\n</code></pre>\n<p>输出结果：输出时遇到能被10整除的数自动跳过。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png\" alt=\"输出结果\"></p>\n<ul>\n<li>拓展：关于goto关键字<ul>\n<li>goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子——带标签的break和continue</li>\n<li>标签是指后面跟一个冒号的标识符，例如：label；</li>\n<li>对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><pre><code class=\"markdown\">设计一个程序打印出一个三角形。\n**********\n****  ****\n***    ***\n**      **\n*        *\n\n</code></pre>\n<pre><code class=\"java\">package com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 15:56\n * @Description\n */\npublic class TestDemo01 {\n    public static void main(String[] args) {\n        for (int i = 1; i &lt;= 5; i++) {\n            for (int j = 5; j &gt;= i; j--) {\n                System.out.print(&quot;*&quot;);\n            }\n            for (int k = 1; k &lt; i; k++) {\n                System.out.print(&quot;  &quot;);\n            }\n            for (int k = 5; k &gt;= i; k--) {\n                System.out.print(&quot;*&quot;);\n            }\n            System.out.println();\n        }\n    }\n}\n\n</code></pre>\n"},{"title":"Java面向对象02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"date":"2022-08-25T14:41:45.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 构造器\n\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n\n代码：\n\n```java\npackage com.xiheya.oop.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:50\n * @Description\n */\n//学生类\npublic class Student {\n    //一个类即使什么都不写，也会存在一个构造方法\n    // 显示的定义构造期。\n//    属性：字段\n    String name;\n    int age;\n//    方法\n//    实例化初始值\n//    1.使用new关键字，实质上是调用构造器\n//    2.构造器一般用来初始化值 .\n    public Student(){\n\n    }\n//    一旦定义了有参构造，无参构造就必须显示定义\n    public Student(String name,int age){\n        this.setName(name);\n        this.setAge(age);\n    }\n    public void study(){\n        System.out.println(this.name + \" is study\");\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n/*\n//一个项目应该只存在一个main方法\npublic class Application {\n    public static void main(String[] args) {\n//类是一个抽象的事物，我们在使用它时要先实例化\n        Student student = new Student();\n        student.study();\n        Student Tom = new Student(\"Tom\",3);\n        Tom.study();\n    }\n}\n\n    构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    快捷键：Alt + Insert\n */\n```\n\n构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    **快捷键：Alt + Insert**\n\n## 创建对象内存分析\n\n代码：\n\n```java\npackage com.xiheya.oop.demo03;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 23:57\n * @Description\n */\npublic class Pet {\n    String name;\n    int age;\n    public void shout(){\n        System.out.println(\"wow  wow  wow\");\n    }\n}\n\n\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Pet dog = new Pet();\n        dog.name = \"旺财\";\n        dog.age = 3;\n        dog .shout();\n\n        Pet cat = new Pet();\n    }\n}\n\n */\n```\n\n### 内存分析\n\n1. 先将Application类中的main()方法以及常量池中的旺财，加载到方法区。\n2. 将main()方法压入栈底\n3. Pet dog = new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n4. 实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n5. Pet cat= new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n6. 实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n\n图解：\n\n![图解](https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png)\n\n---\n\n## 小结\n\n1. 类与对象\n   1. 类是一个模板---抽象；对象是一个具体的实例\n2. 方法\n   1. 方法的定义及调用\n3. 对应的应用\n   1. 引用类型：基本类型（8），对象是通过引用来操作的：栈---->堆（地址）\n4. 属性：字段Field  成员变量\n   1. 默认初始化：\n      1. 数字 ： 0  0.0\n      2. char： u0000\n      3. boolean：false\n      4. 引用：null\n   2. 属性的定义\n      1. 修饰符 + 属性类型 + 属性名 = 属性值\n5. 对象的创建和使用\n   1. 必须使用new 关键字创造对象，构造器Person xiheya = new Person();\n   2. 对象的属性 xiheya.name\n   3. 对象的方法 xiheya.sleep();\n6. 类\n   1. 静态的属性  属性\n   2. 动态的行为  方法\n","source":"_posts/Java面向对象02.md","raw":"---\ntitle: Java面向对象02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ndate: 2022-08-25 22:41:45\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java面向对象\nkeywords:\ndescription:\n---\n\n## 构造器\n\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n\n代码：\n\n```java\npackage com.xiheya.oop.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:50\n * @Description\n */\n//学生类\npublic class Student {\n    //一个类即使什么都不写，也会存在一个构造方法\n    // 显示的定义构造期。\n//    属性：字段\n    String name;\n    int age;\n//    方法\n//    实例化初始值\n//    1.使用new关键字，实质上是调用构造器\n//    2.构造器一般用来初始化值 .\n    public Student(){\n\n    }\n//    一旦定义了有参构造，无参构造就必须显示定义\n    public Student(String name,int age){\n        this.setName(name);\n        this.setAge(age);\n    }\n    public void study(){\n        System.out.println(this.name + \" is study\");\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n/*\n//一个项目应该只存在一个main方法\npublic class Application {\n    public static void main(String[] args) {\n//类是一个抽象的事物，我们在使用它时要先实例化\n        Student student = new Student();\n        student.study();\n        Student Tom = new Student(\"Tom\",3);\n        Tom.study();\n    }\n}\n\n    构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    快捷键：Alt + Insert\n */\n```\n\n构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    **快捷键：Alt + Insert**\n\n## 创建对象内存分析\n\n代码：\n\n```java\npackage com.xiheya.oop.demo03;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 23:57\n * @Description\n */\npublic class Pet {\n    String name;\n    int age;\n    public void shout(){\n        System.out.println(\"wow  wow  wow\");\n    }\n}\n\n\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Pet dog = new Pet();\n        dog.name = \"旺财\";\n        dog.age = 3;\n        dog .shout();\n\n        Pet cat = new Pet();\n    }\n}\n\n */\n```\n\n### 内存分析\n\n1. 先将Application类中的main()方法以及常量池中的旺财，加载到方法区。\n2. 将main()方法压入栈底\n3. Pet dog = new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n4. 实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n5. Pet cat= new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n6. 实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n\n图解：\n\n![图解](https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png)\n\n---\n\n## 小结\n\n1. 类与对象\n   1. 类是一个模板---抽象；对象是一个具体的实例\n2. 方法\n   1. 方法的定义及调用\n3. 对应的应用\n   1. 引用类型：基本类型（8），对象是通过引用来操作的：栈---->堆（地址）\n4. 属性：字段Field  成员变量\n   1. 默认初始化：\n      1. 数字 ： 0  0.0\n      2. char： u0000\n      3. boolean：false\n      4. 引用：null\n   2. 属性的定义\n      1. 修饰符 + 属性类型 + 属性名 = 属性值\n5. 对象的创建和使用\n   1. 必须使用new 关键字创造对象，构造器Person xiheya = new Person();\n   2. 对象的属性 xiheya.name\n   3. 对象的方法 xiheya.sleep();\n6. 类\n   1. 静态的属性  属性\n   2. 动态的行为  方法\n","slug":"Java面向对象02","published":1,"updated":"2022-08-25T15:03:11.082Z","layout":"post","link":"","_id":"cl796hihx001ogwrwtjsb1im0","content":"<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><ul>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo02<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:50\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//学生类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//一个类即使什么都不写，也会存在一个构造方法</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 显示的定义构造期。</span>\n<span class=\"token comment\" spellcheck=\"true\">//    属性：字段</span>\n    String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//    方法</span>\n<span class=\"token comment\" spellcheck=\"true\">//    实例化初始值</span>\n<span class=\"token comment\" spellcheck=\"true\">//    1.使用new关键字，实质上是调用构造器</span>\n<span class=\"token comment\" spellcheck=\"true\">//    2.构造器一般用来初始化值 .</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//    一旦定义了有参构造，无参构造就必须显示定义</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" is study\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n//一个项目应该只存在一个main方法\npublic class Application {\n    public static void main(String[] args) {\n//类是一个抽象的事物，我们在使用它时要先实例化\n        Student student = new Student();\n        student.study();\n        Student Tom = new Student(\"Tom\",3);\n        Tom.study();\n    }\n}\n\n    构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    快捷键：Alt + Insert\n */</span>\n</code></pre>\n<p>构造器：<br>        1.和类名相同<br>        2.没有返回值<br>    作用：<br>        1.new本质在调用构造器<br>        2.初始化对象的值<br>    注意点:<br>        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义<br>    <strong>快捷键：Alt + Insert</strong></p>\n<h2 id=\"创建对象内存分析\"><a href=\"#创建对象内存分析\" class=\"headerlink\" title=\"创建对象内存分析\"></a>创建对象内存分析</h2><p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo03<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 23:57\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n    String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wow  wow  wow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class Application {\n    public static void main(String[] args) {\n        Pet dog = new Pet();\n        dog.name = \"旺财\";\n        dog.age = 3;\n        dog .shout();\n\n        Pet cat = new Pet();\n    }\n}\n\n */</span>\n</code></pre>\n<h3 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><ol>\n<li>先将Application类中的main()方法以及常量池中的旺财，加载到方法区。</li>\n<li>将main()方法压入栈底</li>\n<li>Pet dog = new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n<li>Pet cat= new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n</ol>\n<p>图解：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png\" alt=\"图解\"></p>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li>类与对象<ol>\n<li>类是一个模板—抽象；对象是一个具体的实例</li>\n</ol>\n</li>\n<li>方法<ol>\n<li>方法的定义及调用</li>\n</ol>\n</li>\n<li>对应的应用<ol>\n<li>引用类型：基本类型（8），对象是通过引用来操作的：栈—-&gt;堆（地址）</li>\n</ol>\n</li>\n<li>属性：字段Field  成员变量<ol>\n<li>默认初始化：<ol>\n<li>数字 ： 0  0.0</li>\n<li>char： u0000</li>\n<li>boolean：false</li>\n<li>引用：null</li>\n</ol>\n</li>\n<li>属性的定义<ol>\n<li>修饰符 + 属性类型 + 属性名 = 属性值</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>对象的创建和使用<ol>\n<li>必须使用new 关键字创造对象，构造器Person xiheya = new Person();</li>\n<li>对象的属性 xiheya.name</li>\n<li>对象的方法 xiheya.sleep();</li>\n</ol>\n</li>\n<li>类<ol>\n<li>静态的属性  属性</li>\n<li>动态的行为  方法</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><ul>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.oop.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:50\n * @Description\n */\n//学生类\npublic class Student {\n    //一个类即使什么都不写，也会存在一个构造方法\n    // 显示的定义构造期。\n//    属性：字段\n    String name;\n    int age;\n//    方法\n//    实例化初始值\n//    1.使用new关键字，实质上是调用构造器\n//    2.构造器一般用来初始化值 .\n    public Student(){\n\n    }\n//    一旦定义了有参构造，无参构造就必须显示定义\n    public Student(String name,int age){\n        this.setName(name);\n        this.setAge(age);\n    }\n    public void study(){\n        System.out.println(this.name + &quot; is study&quot;);\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n/*\n//一个项目应该只存在一个main方法\npublic class Application {\n    public static void main(String[] args) {\n//类是一个抽象的事物，我们在使用它时要先实例化\n        Student student = new Student();\n        student.study();\n        Student Tom = new Student(&quot;Tom&quot;,3);\n        Tom.study();\n    }\n}\n\n    构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    快捷键：Alt + Insert\n */\n</code></pre>\n<p>构造器：<br>        1.和类名相同<br>        2.没有返回值<br>    作用：<br>        1.new本质在调用构造器<br>        2.初始化对象的值<br>    注意点:<br>        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义<br>    <strong>快捷键：Alt + Insert</strong></p>\n<h2 id=\"创建对象内存分析\"><a href=\"#创建对象内存分析\" class=\"headerlink\" title=\"创建对象内存分析\"></a>创建对象内存分析</h2><p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.oop.demo03;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 23:57\n * @Description\n */\npublic class Pet {\n    String name;\n    int age;\n    public void shout(){\n        System.out.println(&quot;wow  wow  wow&quot;);\n    }\n}\n\n\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Pet dog = new Pet();\n        dog.name = &quot;旺财&quot;;\n        dog.age = 3;\n        dog .shout();\n\n        Pet cat = new Pet();\n    }\n}\n\n */\n</code></pre>\n<h3 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><ol>\n<li>先将Application类中的main()方法以及常量池中的旺财，加载到方法区。</li>\n<li>将main()方法压入栈底</li>\n<li>Pet dog = new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n<li>Pet cat= new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n</ol>\n<p>图解：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png\" alt=\"图解\"></p>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li>类与对象<ol>\n<li>类是一个模板—抽象；对象是一个具体的实例</li>\n</ol>\n</li>\n<li>方法<ol>\n<li>方法的定义及调用</li>\n</ol>\n</li>\n<li>对应的应用<ol>\n<li>引用类型：基本类型（8），对象是通过引用来操作的：栈—-&gt;堆（地址）</li>\n</ol>\n</li>\n<li>属性：字段Field  成员变量<ol>\n<li>默认初始化：<ol>\n<li>数字 ： 0  0.0</li>\n<li>char： u0000</li>\n<li>boolean：false</li>\n<li>引用：null</li>\n</ol>\n</li>\n<li>属性的定义<ol>\n<li>修饰符 + 属性类型 + 属性名 = 属性值</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>对象的创建和使用<ol>\n<li>必须使用new 关键字创造对象，构造器Person xiheya = new Person();</li>\n<li>对象的属性 xiheya.name</li>\n<li>对象的方法 xiheya.sleep();</li>\n</ol>\n</li>\n<li>类<ol>\n<li>静态的属性  属性</li>\n<li>动态的行为  方法</li>\n</ol>\n</li>\n</ol>\n"},{"title":"Java面向对象01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"date":"2022-08-25T14:41:42.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 面向过程& 面向对象\n\n### 面向过程思想--->自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想--->自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象   --->将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**   \n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n```\n\n---\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n---\n\n- this关键字\n\n## 类与对象的关系\n\n- **类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。**\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- **对象是抽象概念的具体实例**\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n\n","source":"_posts/Java面向对象01.md","raw":"---\ntitle: Java面向对象01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ndate: 2022-08-25 22:41:42\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java面向对象\nkeywords:\ndescription:\n---\n\n## 面向过程& 面向对象\n\n### 面向过程思想--->自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想--->自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象   --->将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**   \n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n```\n\n---\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n---\n\n- this关键字\n\n## 类与对象的关系\n\n- **类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。**\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- **对象是抽象概念的具体实例**\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n\n","slug":"Java面向对象01","published":1,"updated":"2022-08-25T15:03:08.479Z","layout":"post","link":"","_id":"cl796hihy001rgwrwhod7k6ot","content":"<h2 id=\"面向过程-amp-面向对象\"><a href=\"#面向过程-amp-面向对象\" class=\"headerlink\" title=\"面向过程&amp; 面向对象\"></a>面向过程&amp; 面向对象</h2><h3 id=\"面向过程思想—-gt-自上而下\"><a href=\"#面向过程思想—-gt-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-gt-自下而上\"><a href=\"#面向对象思想—-gt-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象   —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong>   </li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo02</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Demo02 demo02 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> demo02<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//实例化对象demo02后，才可以调用非静态方法add</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//而静态方法add则可以直接调用</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token comment\" spellcheck=\"true\">//静态方法，main方法中可以直接调用。</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                    <span class=\"token comment\" spellcheck=\"true\">//非静态方法，调用的话需要实例化对象后才能调用。</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">// 值传递和引用传递</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\" spellcheck=\"true\">//调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\" spellcheck=\"true\">//可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//实例化一个类，new一个Person类。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">//由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//这就是引用传递（实质上还是值传递）</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span>Person person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span>\n        person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"xiheya\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n    String name<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</strong><ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li><strong>对象是抽象概念的具体实例</strong><ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向过程-amp-面向对象\"><a href=\"#面向过程-amp-面向对象\" class=\"headerlink\" title=\"面向过程&amp; 面向对象\"></a>面向过程&amp; 面向对象</h2><h3 id=\"面向过程思想—-gt-自上而下\"><a href=\"#面向过程思想—-gt-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-gt-自下而上\"><a href=\"#面向对象思想—-gt-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象   —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong>   </li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<pre><code class=\"java\">package com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n</code></pre>\n<hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = &quot;xiheya&quot;;\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</strong><ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li><strong>对象是抽象概念的具体实例</strong><ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n"},{"title":"Java面向对象03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"date":"2022-08-25T14:41:48.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 封装\n\n- 该露的露，该藏的藏\n  - 我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用\n- 封装（数据的隐藏）\n  - 通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。\n- 记住这句话：**属性私有，get/set**\n- 封装的作用：\n  - 1.提高程序的安全性，保护数据\n  - 2.隐藏代码的实现细节\n  - 3.统一接口\n  - 4.系统可维护性增加了\n\n代码：\n\n```java\npackage com.xiheya.oop.demo04;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:00\n * @Description\n */\npublic class Student {\n//    属性私有\n    private String name;        //姓名\n    private int id;            //学号\n    private char sex;           //性别\n\n    public Student() {\n    }\n\n    public Student(String name, int id, char sex) {\n        this.name = name;\n        this.id = id;\n        this.sex = sex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n}\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Student Tom = new Student();\n        System.out.println(Tom.getName());\n        Tom.setName(\"Tom\");\n        System.out.println(Tom.getName());\n        System.out.println(Tom.getId());\n        Tom.setId(1234);\n        System.out.println(Tom.getId());\n    }\n}\n */\n```\n\n运行结果：\n\n![封装](https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png)\n\n---\n\n## 继承\n\n- 继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。\n- **extends**的意思是”扩展“。子类是父类的扩展。\n- **Java中类只有单继承，没有多继承！**\n- 继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。\n- 继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。\n- object类\n- super\n- 方法重写\n\n**子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    \n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n![继承](https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png)\n\n可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。\n\n---\n\n### super关键字：\n\nsuper关键字可以在子类调用父类。\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    public Person() {\n        System.out.println(\"Person类的构造方法执行了\");\n    }\n\n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n    public void print(){\n        System.out.println(\"Person\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n    public Teacher() {\n        System.out.println(\"Teache的构造方法执行了\");\n    }\n\n    public void test(){\n        print();\n        this.print();\n        super.print();\n    }\n    public void print(){\n        System.out.println(\"Teacher\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n#### 运行结果：\n\n![super](https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png)\n\n![构造方法](https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png)\n\n可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。\n\n---\n\n#### super注意点\n\n1. super调用父类的构造方法，必须在构造方法的第一个\n2. super必须只能出现在子类的方法或者构造方法中\n3. super和this不能同时调用构造方法\n\nsuper与this的区别\n\n1. 代表的对象不同：\n   1. this：本身调用者这个对象\n   2. super：代表父类对象的应用\n2. 前提：\n   1. this：没有继承也可以使用\n   2. super：只能在继承条件才可以使用\n3. 构造方法：\n   1. this();本类的构造\n   2. super():父类的构造\n\n### 方法重写\n\n**静态方法是类的方法，而非静态方法是对象的方法。** 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。\n\n**静态方法和非静态方法差别很大**\n\n1. 静态方法：方法的调用只和左边定义的数据类型有关\n2. 非静态：非静态方法才存在重写。\n\n**只有非静态的 public属性的方法才能被重写**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n```\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n\n```\n\n#### 运行结果\n\n![方法重写](https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png)\n\n---\n\n#### 笔记\n\n**重写：需要有继承关系，子类重写父类的方法！**\n\n1. 方法名必须相同\n2. 参数列表必须相同\n3. 修饰符：范围可以扩大. public>protected>default>private\n4. 抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException\n\n**重写：子类的方法和父类必须要一致，方法体不同。**\n\n**为什么要重写**：\n\n1. 父类的功能，子类不一定需要，或者不一定满足\n\n---\n\n## 多态\n\n- 动态编译：类型”可扩展性更强\n- 多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。\n- 一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多\n- 多态存在的条件\n  - 有继承关系\n  - 子类重写父类方法\n  - 父类引用指向子类对象\n- **注意：多态是方法的多态，属性没有多态**\n- instanceof\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo06;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:59\n * @Description\n */\npublic class Person {\n    public void run(){\n        System.out.println(\"Person run\");\n    }\n}\n/*\npublic class Student extends Person{\n    @Override\n    public void run() {\n\n        System.out.println(\"Student run\");\n    }\n\n    public void eat(){\n        System.out.println(\"Student eat\");\n    }\n}\n\n\npublic class Application {\n    public static void main(String[] args) {\n        //一个对象的实际类型是确定的\n        // 可以指向的引用类型就不确了 父类的引用可以指向子类\n        // Student 能调用的方法都是自己的，或者继承父类的、\n        Student s1 = new Student();\n        //Person 父类型，可以指向子类，但是不能调用子类独有的方法\n        Person s2 = new Student();\n        Object s3 = new Student();\n        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大\n        // 子类重写了父类的方法，则执行子类的方法。\n        s1.run();\n        s2.run();\n        ((Student)s2).eat();\n        s1.eat();\n\n\n    }\n}\n\n */\n```\n\n### 运行结果\n\n![多态](https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png)\n\n---\n\n### 注意事项\n\n1. 多态是方法的多态；属性没有多态。\n2. 父类和子类，有联系 （类型转换异常--ClassCastException）\n3. 存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 = new Son();\n4. **哪些方法不能重写？**\n   1. static方法，static代码块属于类，对象被创建时一同被执行\n   2. **final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。**\n   3. private方法： 私有属性不能被继承\n\n### instanceof关键字\n\n#### 代码：\n\n```java\npackage com.xiheya.oop;\n\nimport com.xiheya.oop.demo06.Teacher;\nimport com.xiheya.oop.demo06.Student;\nimport com.xiheya.oop.demo06.Person;\n\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 11:59\n * @Description\n */\npublic class Application {\n    public static void main(String[] args) {\n        Student student = new Student();\n        Person person = new Student();\n        Object object = new Student();\n        //X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。\n        System.out.println(object instanceof Student);     //true\n        System.out.println(object instanceof Person);       //true\n        System.out.println(object instanceof Object);       //true\n        System.out.println(object instanceof Teacher);      //false\n        System.out.println(object instanceof String);       //false\n        System.out.println(\"========================\");\n\n        System.out.println(person instanceof Student);      //true\n        System.out.println(person instanceof Person);       //true\n        System.out.println(person instanceof Object);       //true\n        System.out.println(person instanceof Teacher);      //false\n        //System.out.println(person instanceof String);     //编译报错\n        System.out.println(\"========================\");\n\n        System.out.println(student instanceof Student);     //true\n        System.out.println(student instanceof Person);      //true\n        System.out.println(student instanceof Object);      //true\n        //System.out.println(student instanceof Teacher);   //编译报错\n        //System.out.println(student instanceof String);    //编译报错\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n//        Person obj = new Student();\n//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n//        ((Student) obj).go();\n//\n//        //类型之间的转换  子-------》父\n//        Student student = new Student();\n//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n//        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n\n#### 运行结果\n\n![instanceof](https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png)\n\n---\n\n### 强制转换\n\n1. 父类引用指向子类的对象\n\n2. 把子类转换为父类：向上转型：（自动转换）\n\n3. 把父类转换为子类：向下转型：（强制转换）\n\n4. 方便方法的调用，减少代码重复率，简洁\n\n5. 由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n\n6. student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n\n7. 类型之间的转换\n   高-------------------低（强制转换）\n\n   低-------------------高（自动转换）\n\n代码：\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n        Person obj = new Student();\n        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n        ((Student) obj).go();\n\n        //类型之间的转换  子-------》父\n        Student student = new Student();\n        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n","source":"_posts/Java面向对象03.md","raw":"---\ntitle: Java面向对象03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ndate: 2022-08-25 22:41:48\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java面向对象\nkeywords:\ndescription:\n---\n\n## 封装\n\n- 该露的露，该藏的藏\n  - 我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用\n- 封装（数据的隐藏）\n  - 通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。\n- 记住这句话：**属性私有，get/set**\n- 封装的作用：\n  - 1.提高程序的安全性，保护数据\n  - 2.隐藏代码的实现细节\n  - 3.统一接口\n  - 4.系统可维护性增加了\n\n代码：\n\n```java\npackage com.xiheya.oop.demo04;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:00\n * @Description\n */\npublic class Student {\n//    属性私有\n    private String name;        //姓名\n    private int id;            //学号\n    private char sex;           //性别\n\n    public Student() {\n    }\n\n    public Student(String name, int id, char sex) {\n        this.name = name;\n        this.id = id;\n        this.sex = sex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n}\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Student Tom = new Student();\n        System.out.println(Tom.getName());\n        Tom.setName(\"Tom\");\n        System.out.println(Tom.getName());\n        System.out.println(Tom.getId());\n        Tom.setId(1234);\n        System.out.println(Tom.getId());\n    }\n}\n */\n```\n\n运行结果：\n\n![封装](https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png)\n\n---\n\n## 继承\n\n- 继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。\n- **extends**的意思是”扩展“。子类是父类的扩展。\n- **Java中类只有单继承，没有多继承！**\n- 继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。\n- 继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。\n- object类\n- super\n- 方法重写\n\n**子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    \n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n![继承](https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png)\n\n可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。\n\n---\n\n### super关键字：\n\nsuper关键字可以在子类调用父类。\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    public Person() {\n        System.out.println(\"Person类的构造方法执行了\");\n    }\n\n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n    public void print(){\n        System.out.println(\"Person\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n    public Teacher() {\n        System.out.println(\"Teache的构造方法执行了\");\n    }\n\n    public void test(){\n        print();\n        this.print();\n        super.print();\n    }\n    public void print(){\n        System.out.println(\"Teacher\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n#### 运行结果：\n\n![super](https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png)\n\n![构造方法](https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png)\n\n可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。\n\n---\n\n#### super注意点\n\n1. super调用父类的构造方法，必须在构造方法的第一个\n2. super必须只能出现在子类的方法或者构造方法中\n3. super和this不能同时调用构造方法\n\nsuper与this的区别\n\n1. 代表的对象不同：\n   1. this：本身调用者这个对象\n   2. super：代表父类对象的应用\n2. 前提：\n   1. this：没有继承也可以使用\n   2. super：只能在继承条件才可以使用\n3. 构造方法：\n   1. this();本类的构造\n   2. super():父类的构造\n\n### 方法重写\n\n**静态方法是类的方法，而非静态方法是对象的方法。** 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。\n\n**静态方法和非静态方法差别很大**\n\n1. 静态方法：方法的调用只和左边定义的数据类型有关\n2. 非静态：非静态方法才存在重写。\n\n**只有非静态的 public属性的方法才能被重写**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n```\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n\n```\n\n#### 运行结果\n\n![方法重写](https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png)\n\n---\n\n#### 笔记\n\n**重写：需要有继承关系，子类重写父类的方法！**\n\n1. 方法名必须相同\n2. 参数列表必须相同\n3. 修饰符：范围可以扩大. public>protected>default>private\n4. 抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException\n\n**重写：子类的方法和父类必须要一致，方法体不同。**\n\n**为什么要重写**：\n\n1. 父类的功能，子类不一定需要，或者不一定满足\n\n---\n\n## 多态\n\n- 动态编译：类型”可扩展性更强\n- 多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。\n- 一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多\n- 多态存在的条件\n  - 有继承关系\n  - 子类重写父类方法\n  - 父类引用指向子类对象\n- **注意：多态是方法的多态，属性没有多态**\n- instanceof\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo06;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:59\n * @Description\n */\npublic class Person {\n    public void run(){\n        System.out.println(\"Person run\");\n    }\n}\n/*\npublic class Student extends Person{\n    @Override\n    public void run() {\n\n        System.out.println(\"Student run\");\n    }\n\n    public void eat(){\n        System.out.println(\"Student eat\");\n    }\n}\n\n\npublic class Application {\n    public static void main(String[] args) {\n        //一个对象的实际类型是确定的\n        // 可以指向的引用类型就不确了 父类的引用可以指向子类\n        // Student 能调用的方法都是自己的，或者继承父类的、\n        Student s1 = new Student();\n        //Person 父类型，可以指向子类，但是不能调用子类独有的方法\n        Person s2 = new Student();\n        Object s3 = new Student();\n        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大\n        // 子类重写了父类的方法，则执行子类的方法。\n        s1.run();\n        s2.run();\n        ((Student)s2).eat();\n        s1.eat();\n\n\n    }\n}\n\n */\n```\n\n### 运行结果\n\n![多态](https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png)\n\n---\n\n### 注意事项\n\n1. 多态是方法的多态；属性没有多态。\n2. 父类和子类，有联系 （类型转换异常--ClassCastException）\n3. 存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 = new Son();\n4. **哪些方法不能重写？**\n   1. static方法，static代码块属于类，对象被创建时一同被执行\n   2. **final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。**\n   3. private方法： 私有属性不能被继承\n\n### instanceof关键字\n\n#### 代码：\n\n```java\npackage com.xiheya.oop;\n\nimport com.xiheya.oop.demo06.Teacher;\nimport com.xiheya.oop.demo06.Student;\nimport com.xiheya.oop.demo06.Person;\n\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 11:59\n * @Description\n */\npublic class Application {\n    public static void main(String[] args) {\n        Student student = new Student();\n        Person person = new Student();\n        Object object = new Student();\n        //X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。\n        System.out.println(object instanceof Student);     //true\n        System.out.println(object instanceof Person);       //true\n        System.out.println(object instanceof Object);       //true\n        System.out.println(object instanceof Teacher);      //false\n        System.out.println(object instanceof String);       //false\n        System.out.println(\"========================\");\n\n        System.out.println(person instanceof Student);      //true\n        System.out.println(person instanceof Person);       //true\n        System.out.println(person instanceof Object);       //true\n        System.out.println(person instanceof Teacher);      //false\n        //System.out.println(person instanceof String);     //编译报错\n        System.out.println(\"========================\");\n\n        System.out.println(student instanceof Student);     //true\n        System.out.println(student instanceof Person);      //true\n        System.out.println(student instanceof Object);      //true\n        //System.out.println(student instanceof Teacher);   //编译报错\n        //System.out.println(student instanceof String);    //编译报错\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n//        Person obj = new Student();\n//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n//        ((Student) obj).go();\n//\n//        //类型之间的转换  子-------》父\n//        Student student = new Student();\n//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n//        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n\n#### 运行结果\n\n![instanceof](https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png)\n\n---\n\n### 强制转换\n\n1. 父类引用指向子类的对象\n\n2. 把子类转换为父类：向上转型：（自动转换）\n\n3. 把父类转换为子类：向下转型：（强制转换）\n\n4. 方便方法的调用，减少代码重复率，简洁\n\n5. 由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n\n6. student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n\n7. 类型之间的转换\n   高-------------------低（强制转换）\n\n   低-------------------高（自动转换）\n\n代码：\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n        Person obj = new Student();\n        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n        ((Student) obj).go();\n\n        //类型之间的转换  子-------》父\n        Student student = new Student();\n        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n","slug":"Java面向对象03","published":1,"updated":"2022-08-25T15:03:14.353Z","layout":"post","link":"","_id":"cl796hihz001vgwrw3w74o61v","content":"<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>该露的露，该藏的藏<ul>\n<li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li>\n</ul>\n</li>\n<li>封装（数据的隐藏）<ul>\n<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>\n</ul>\n</li>\n<li>记住这句话：<strong>属性私有，get/set</strong></li>\n<li>封装的作用：<ul>\n<li>1.提高程序的安全性，保护数据</li>\n<li>2.隐藏代码的实现细节</li>\n<li>3.统一接口</li>\n<li>4.系统可维护性增加了</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo04<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:00\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//    属性私有</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//姓名</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//学号</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">//性别</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class Application {\n    public static void main(String[] args) {\n        Student Tom = new Student();\n        System.out.println(Tom.getName());\n        Tom.setName(\"Tom\");\n        System.out.println(Tom.getName());\n        System.out.println(Tom.getId());\n        Tom.setId(1234);\n        System.out.println(Tom.getId());\n    }\n}\n */</span>\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png\" alt=\"封装\"></p>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li>\n<li><strong>extends</strong>的意思是”扩展“。子类是父类的扩展。</li>\n<li><strong>Java中类只有单继承，没有多继承！</strong></li>\n<li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。</li>\n<li>继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li>\n<li>object类</li>\n<li>super</li>\n<li>方法重写</li>\n</ul>\n<p><strong>子类继承了父类，就会拥有父类的全部方法，前提是方法属性为<br>在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo05<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//在Java中所有类都默认直接或间接继承Object</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say some thing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */</span>\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png\" alt=\"继承\"></p>\n<p>可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。</p>\n<hr>\n<h3 id=\"super关键字：\"><a href=\"#super关键字：\" class=\"headerlink\" title=\"super关键字：\"></a>super关键字：</h3><p>super关键字可以在子类调用父类。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo05<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//在Java中所有类都默认直接或间接继承Object</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person类的构造方法执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"say some thing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n    public Teacher() {\n        System.out.println(\"Teache的构造方法执行了\");\n    }\n\n    public void test(){\n        print();\n        this.print();\n        super.print();\n    }\n    public void print(){\n        System.out.println(\"Teacher\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */</span>\n</code></pre>\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png\" alt=\"super\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png\" alt=\"构造方法\"></p>\n<p>可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。</p>\n<hr>\n<h4 id=\"super注意点\"><a href=\"#super注意点\" class=\"headerlink\" title=\"super注意点\"></a>super注意点</h4><ol>\n<li>super调用父类的构造方法，必须在构造方法的第一个</li>\n<li>super必须只能出现在子类的方法或者构造方法中</li>\n<li>super和this不能同时调用构造方法</li>\n</ol>\n<p>super与this的区别</p>\n<ol>\n<li>代表的对象不同：<ol>\n<li>this：本身调用者这个对象</li>\n<li>super：代表父类对象的应用</li>\n</ol>\n</li>\n<li>前提：<ol>\n<li>this：没有继承也可以使用</li>\n<li>super：只能在继承条件才可以使用</li>\n</ol>\n</li>\n<li>构造方法：<ol>\n<li>this();本类的构造</li>\n<li>super():父类的构造</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p><strong>静态方法是类的方法，而非静态方法是对象的方法。</strong> 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。</p>\n<p><strong>静态方法和非静态方法差别很大</strong></p>\n<ol>\n<li>静态方法：方法的调用只和左边定义的数据类型有关</li>\n<li>非静态：非静态方法才存在重写。</li>\n</ol>\n<p><strong>只有非静态的 public属性的方法才能被重写</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo05<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b--->test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */</span>\n</code></pre>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo05<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b--->test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */</span>\n\n</code></pre>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png\" alt=\"方法重写\"></p>\n<hr>\n<h4 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h4><p><strong>重写：需要有继承关系，子类重写父类的方法！</strong></p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须相同</li>\n<li>修饰符：范围可以扩大. public&gt;protected&gt;default&gt;private</li>\n<li>抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException</li>\n</ol>\n<p><strong>重写：子类的方法和父类必须要一致，方法体不同。</strong></p>\n<p><strong>为什么要重写</strong>：</p>\n<ol>\n<li>父类的功能，子类不一定需要，或者不一定满足</li>\n</ol>\n<hr>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li>动态编译：类型”可扩展性更强</li>\n<li>多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</li>\n<li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li>\n<li>多态存在的条件<ul>\n<li>有继承关系</li>\n<li>子类重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n</li>\n<li><strong>注意：多态是方法的多态，属性没有多态</strong></li>\n<li>instanceof</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo06<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:59\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class Student extends Person{\n    @Override\n    public void run() {\n\n        System.out.println(\"Student run\");\n    }\n\n    public void eat(){\n        System.out.println(\"Student eat\");\n    }\n}\n\n\npublic class Application {\n    public static void main(String[] args) {\n        //一个对象的实际类型是确定的\n        // 可以指向的引用类型就不确了 父类的引用可以指向子类\n        // Student 能调用的方法都是自己的，或者继承父类的、\n        Student s1 = new Student();\n        //Person 父类型，可以指向子类，但是不能调用子类独有的方法\n        Person s2 = new Student();\n        Object s3 = new Student();\n        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大\n        // 子类重写了父类的方法，则执行子类的方法。\n        s1.run();\n        s2.run();\n        ((Student)s2).eat();\n        s1.eat();\n\n\n    }\n}\n\n */</span>\n</code></pre>\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png\" alt=\"多态\"></p>\n<hr>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>多态是方法的多态；属性没有多态。</li>\n<li>父类和子类，有联系 （类型转换异常–ClassCastException）</li>\n<li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 = new Son();</li>\n<li><strong>哪些方法不能重写？</strong><ol>\n<li>static方法，static代码块属于类，对象被创建时一同被执行</li>\n<li><strong>final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。</strong></li>\n<li>private方法： 私有属性不能被继承</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h3><h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo06<span class=\"token punctuation\">.</span>Teacher<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo06<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo06<span class=\"token punctuation\">.</span>Person<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 11:59\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Student student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">//false</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//false</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">//false</span>\n        <span class=\"token comment\" spellcheck=\"true\">//System.out.println(person instanceof String);     //编译报错</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">//true</span>\n        <span class=\"token comment\" spellcheck=\"true\">//System.out.println(student instanceof Teacher);   //编译报错</span>\n        <span class=\"token comment\" spellcheck=\"true\">//System.out.println(student instanceof String);    //编译报错</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//类型之间的转换  父-------》子</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 高-------------------低（强制转换）。</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Person obj = new Student();</span>\n<span class=\"token comment\" spellcheck=\"true\">//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span>\n<span class=\"token comment\" spellcheck=\"true\">//        ((Student) obj).go();</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//        //类型之间的转换  子-------》父</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Student student = new Student();</span>\n<span class=\"token comment\" spellcheck=\"true\">//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Person person = student;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */</span>\n</code></pre>\n<h4 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png\" alt=\"instanceof\"></p>\n<hr>\n<h3 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h3><ol>\n<li><p>父类引用指向子类的对象</p>\n</li>\n<li><p>把子类转换为父类：向上转型：（自动转换）</p>\n</li>\n<li><p>把父类转换为子类：向下转型：（强制转换）</p>\n</li>\n<li><p>方便方法的调用，减少代码重复率，简洁</p>\n</li>\n<li><p>由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</p>\n</li>\n<li><p>student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</p>\n</li>\n<li><p>类型之间的转换<br>高——————-低（强制转换）</p>\n<p>低——————-高（自动转换）</p>\n</li>\n</ol>\n<p>代码：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//类型之间的转换  父-------》子</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 高-------------------低（强制转换）。</span>\n        Person obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//类型之间的转换  子-------》父</span>\n        Student student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span>\n        Person person <span class=\"token operator\">=</span> student<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>该露的露，该藏的藏<ul>\n<li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li>\n</ul>\n</li>\n<li>封装（数据的隐藏）<ul>\n<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>\n</ul>\n</li>\n<li>记住这句话：<strong>属性私有，get/set</strong></li>\n<li>封装的作用：<ul>\n<li>1.提高程序的安全性，保护数据</li>\n<li>2.隐藏代码的实现细节</li>\n<li>3.统一接口</li>\n<li>4.系统可维护性增加了</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"java\">package com.xiheya.oop.demo04;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:00\n * @Description\n */\npublic class Student {\n//    属性私有\n    private String name;        //姓名\n    private int id;            //学号\n    private char sex;           //性别\n\n    public Student() {\n    }\n\n    public Student(String name, int id, char sex) {\n        this.name = name;\n        this.id = id;\n        this.sex = sex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n}\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Student Tom = new Student();\n        System.out.println(Tom.getName());\n        Tom.setName(&quot;Tom&quot;);\n        System.out.println(Tom.getName());\n        System.out.println(Tom.getId());\n        Tom.setId(1234);\n        System.out.println(Tom.getId());\n    }\n}\n */\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png\" alt=\"封装\"></p>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li>\n<li><strong>extends</strong>的意思是”扩展“。子类是父类的扩展。</li>\n<li><strong>Java中类只有单继承，没有多继承！</strong></li>\n<li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。</li>\n<li>继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li>\n<li>object类</li>\n<li>super</li>\n<li>方法重写</li>\n</ul>\n<p><strong>子类继承了父类，就会拥有父类的全部方法，前提是方法属性为<br>在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H</strong></p>\n<pre><code class=\"java\">package com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n\n    public void speak(){\n        System.out.println(&quot;say some thing&quot;);\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(&quot;Tom&quot;);\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png\" alt=\"继承\"></p>\n<p>可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。</p>\n<hr>\n<h3 id=\"super关键字：\"><a href=\"#super关键字：\" class=\"headerlink\" title=\"super关键字：\"></a>super关键字：</h3><p>super关键字可以在子类调用父类。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre><code class=\"java\">package com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    public Person() {\n        System.out.println(&quot;Person类的构造方法执行了&quot;);\n    }\n\n    public void speak(){\n        System.out.println(&quot;say some thing&quot;);\n    }\n    public void print(){\n        System.out.println(&quot;Person&quot;);\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n    public Teacher() {\n        System.out.println(&quot;Teache的构造方法执行了&quot;);\n    }\n\n    public void test(){\n        print();\n        this.print();\n        super.print();\n    }\n    public void print(){\n        System.out.println(&quot;Teacher&quot;);\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(&quot;Tom&quot;);\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n</code></pre>\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png\" alt=\"super\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png\" alt=\"构造方法\"></p>\n<p>可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。</p>\n<hr>\n<h4 id=\"super注意点\"><a href=\"#super注意点\" class=\"headerlink\" title=\"super注意点\"></a>super注意点</h4><ol>\n<li>super调用父类的构造方法，必须在构造方法的第一个</li>\n<li>super必须只能出现在子类的方法或者构造方法中</li>\n<li>super和this不能同时调用构造方法</li>\n</ol>\n<p>super与this的区别</p>\n<ol>\n<li>代表的对象不同：<ol>\n<li>this：本身调用者这个对象</li>\n<li>super：代表父类对象的应用</li>\n</ol>\n</li>\n<li>前提：<ol>\n<li>this：没有继承也可以使用</li>\n<li>super：只能在继承条件才可以使用</li>\n</ol>\n</li>\n<li>构造方法：<ol>\n<li>this();本类的构造</li>\n<li>super():父类的构造</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p><strong>静态方法是类的方法，而非静态方法是对象的方法。</strong> 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。</p>\n<p><strong>静态方法和非静态方法差别很大</strong></p>\n<ol>\n<li>静态方法：方法的调用只和左边定义的数据类型有关</li>\n<li>非静态：非静态方法才存在重写。</li>\n</ol>\n<p><strong>只有非静态的 public属性的方法才能被重写</strong></p>\n<pre><code class=\"java\">package com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(&quot;b---&gt;test&quot;);\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(&quot;a---&gt;test&quot;);\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n</code></pre>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre><code class=\"java\">package com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(&quot;b---&gt;test&quot;);\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(&quot;a---&gt;test&quot;);\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n\n</code></pre>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png\" alt=\"方法重写\"></p>\n<hr>\n<h4 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h4><p><strong>重写：需要有继承关系，子类重写父类的方法！</strong></p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须相同</li>\n<li>修饰符：范围可以扩大. public&gt;protected&gt;default&gt;private</li>\n<li>抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException</li>\n</ol>\n<p><strong>重写：子类的方法和父类必须要一致，方法体不同。</strong></p>\n<p><strong>为什么要重写</strong>：</p>\n<ol>\n<li>父类的功能，子类不一定需要，或者不一定满足</li>\n</ol>\n<hr>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li>动态编译：类型”可扩展性更强</li>\n<li>多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</li>\n<li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li>\n<li>多态存在的条件<ul>\n<li>有继承关系</li>\n<li>子类重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n</li>\n<li><strong>注意：多态是方法的多态，属性没有多态</strong></li>\n<li>instanceof</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.oop.demo06;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:59\n * @Description\n */\npublic class Person {\n    public void run(){\n        System.out.println(&quot;Person run&quot;);\n    }\n}\n/*\npublic class Student extends Person{\n    @Override\n    public void run() {\n\n        System.out.println(&quot;Student run&quot;);\n    }\n\n    public void eat(){\n        System.out.println(&quot;Student eat&quot;);\n    }\n}\n\n\npublic class Application {\n    public static void main(String[] args) {\n        //一个对象的实际类型是确定的\n        // 可以指向的引用类型就不确了 父类的引用可以指向子类\n        // Student 能调用的方法都是自己的，或者继承父类的、\n        Student s1 = new Student();\n        //Person 父类型，可以指向子类，但是不能调用子类独有的方法\n        Person s2 = new Student();\n        Object s3 = new Student();\n        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大\n        // 子类重写了父类的方法，则执行子类的方法。\n        s1.run();\n        s2.run();\n        ((Student)s2).eat();\n        s1.eat();\n\n\n    }\n}\n\n */\n</code></pre>\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png\" alt=\"多态\"></p>\n<hr>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>多态是方法的多态；属性没有多态。</li>\n<li>父类和子类，有联系 （类型转换异常–ClassCastException）</li>\n<li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 = new Son();</li>\n<li><strong>哪些方法不能重写？</strong><ol>\n<li>static方法，static代码块属于类，对象被创建时一同被执行</li>\n<li><strong>final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。</strong></li>\n<li>private方法： 私有属性不能被继承</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h3><h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><pre><code class=\"java\">package com.xiheya.oop;\n\nimport com.xiheya.oop.demo06.Teacher;\nimport com.xiheya.oop.demo06.Student;\nimport com.xiheya.oop.demo06.Person;\n\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 11:59\n * @Description\n */\npublic class Application {\n    public static void main(String[] args) {\n        Student student = new Student();\n        Person person = new Student();\n        Object object = new Student();\n        //X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。\n        System.out.println(object instanceof Student);     //true\n        System.out.println(object instanceof Person);       //true\n        System.out.println(object instanceof Object);       //true\n        System.out.println(object instanceof Teacher);      //false\n        System.out.println(object instanceof String);       //false\n        System.out.println(&quot;========================&quot;);\n\n        System.out.println(person instanceof Student);      //true\n        System.out.println(person instanceof Person);       //true\n        System.out.println(person instanceof Object);       //true\n        System.out.println(person instanceof Teacher);      //false\n        //System.out.println(person instanceof String);     //编译报错\n        System.out.println(&quot;========================&quot;);\n\n        System.out.println(student instanceof Student);     //true\n        System.out.println(student instanceof Person);      //true\n        System.out.println(student instanceof Object);      //true\n        //System.out.println(student instanceof Teacher);   //编译报错\n        //System.out.println(student instanceof String);    //编译报错\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n//        Person obj = new Student();\n//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n//        ((Student) obj).go();\n//\n//        //类型之间的转换  子-------》父\n//        Student student = new Student();\n//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n//        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n</code></pre>\n<h4 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png\" alt=\"instanceof\"></p>\n<hr>\n<h3 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h3><ol>\n<li><p>父类引用指向子类的对象</p>\n</li>\n<li><p>把子类转换为父类：向上转型：（自动转换）</p>\n</li>\n<li><p>把父类转换为子类：向下转型：（强制转换）</p>\n</li>\n<li><p>方便方法的调用，减少代码重复率，简洁</p>\n</li>\n<li><p>由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</p>\n</li>\n<li><p>student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</p>\n</li>\n<li><p>类型之间的转换<br>高——————-低（强制转换）</p>\n<p>低——————-高（自动转换）</p>\n</li>\n</ol>\n<p>代码：</p>\n<pre><code class=\"java\">public class Application {\n    public static void main(String[] args) {\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n        Person obj = new Student();\n        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n        ((Student) obj).go();\n\n        //类型之间的转换  子-------》父\n        Student student = new Student();\n        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n</code></pre>\n"},{"title":"Java面向对象04","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"date":"2022-08-25T14:41:51.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## static 关键字\n\n### 静态变量与静态方法\n\n- 静态的变量  多线程中会用到(包含static关键字)\n- 非静态的变量（不包含static关键字）\n- 非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.\n- 如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。\n- 静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。\n\n代码\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 20:44\n * @Description\n */\npublic class Student {\n    private static int age;                 //静态的变量  多线程中会用到\n    private double score;                   //非静态的变量\n    public void run(){                      //非静态方法\n        go();                               //非静态方法中可以直接调用静态方法\n    }\n    public static void go(){                //静态方法\n        //run();                            而静态方法中无法调用非静态方法\n    }\n    public static void main(String[] args) {\n        Student s1 = new Student();\n\n        System.out.println(s1.score);       //可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。\n        System.out.println(s1.age);\n\n        System.out.println(Student.age);    //如果变量是静态变量我们就可以直接通过类名去访问这个变量\n        //System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。\n        go();                               //静态方法可以直接被调用\n        //run();\n        s1.run();                           //非静态方法需要实例化类对象之后，才可以通过对象来调用。\n    }\n}\n```\n\n---\n\n### 静态代码块\n\n**在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。**\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:03\n * @Description\n */\npublic class Person {\n    {\n        System.out.println(\"我是匿名代码块\");\n    }\n    static {\n        System.out.println(\"我是静态代码块\");\n    }\n    public Person(){\n        System.out.println(\"我是构造方法\");\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person();\n    }\n}\n```\n\n![静态代码块](https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png)\n\n---\n\n### 静态导入包（不常用）\n\n语法：\n\n```java\nimport static java.lang.Math.random;\nimport static java.lang.Math.PI;\nSystem.out.println(random());\nSystem.out.println(PI);\n```\n\n当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。\n\n---\n\n## 抽象类\n\n- ***abstract*修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。**\n- **抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。**\n- 抽象类，不能用new关键字来创建对象，它是用来让子类继承的\n- 抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。\n- 子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。\n- 抽象类存在的意义：抽象出来，提高开发效率。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:27\n * @Description\n */\n//用abstract 关键字修饰的类叫做抽象类，\npublic abstract class Action {\n    //abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。\n    public abstract void doSomething();\n    //1.不能new这个抽象类，只能靠子类去实现\n    //2.抽象类中可以写普通方法\n    //3.抽象方法必须在抽象类中\n    //抽象的抽象：约束。\n\n    public Action() {\n    }\n}\n```\n\n继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:05\n * @Description\n */\n//继承抽象类，就一定要实现抽象类里面的抽象方法\npublic class A extends Action{\n    @Override\n    public void doSomething() {\n\n    }\n}\n```\n\n---\n\n## 接口\n\n- 普通类：只有具体实现\n- 抽象类：具体实现和规范（抽象方法）都有\n- 接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程~\n\n- 接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。**eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。**\n- **接口的本质是契约**，就像我们人间的法律一样，制定好后大家都遵守。\n- 接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。\n\n---\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo09;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:36\n * @Description\n */\n\n//抽象类是继承  extends\n// 类也可以实现接口 implements 接口\n// 实现了接口的类，就必须重写接口中的方法\n// 接口就间接的实现了多继承。\npublic class UserServiceImpl implements UserService,TimeService{\n    @Override\n    public void timer() {\n\n    }\n\n    @Override\n    public void add() {\n\n    }\n\n    @Override\n    public void delete() {\n\n    }\n\n    @Override\n    public void update() {\n\n    }\n\n    @Override\n    public void query() {\n\n    }\n}\n\n/*\npublic interface TimeService {\n    void timer();\n}\n\n// interface 定义的关键字 ， 接口都需要有实现类\npublic interface UserService {\n    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）\n    public static final int AGE = 99;\n    //接口中所有定义其实默认都是抽象的 public abstract\n    public abstract void add();\n    void delete();\n    void update();\n    void query();\n}\n\n */\n```\n\n---\n\n### 作用\n\n1. 接口是一个约束\n2. 定义一些方法，让不同人实现。\n3. 方法的默认属性是 public abstract\n4. 常量的默认属性是public static final\n5. 接口不能被实例化~接口中没有构造方法~\n6. implements可以实现多个接口\n7. 必须要重写接口中的方法\n\n---\n\n## 内部类\n\n### 定义\n\n内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。\n\n### 分类\n\n#### 成员内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public class Inner{\n        public void in(){\n            System.out.println(\"I'm the inner\");\n        }\n        public void gerAge(){\n            System.out.println(age);\n        }\n    }\n}\n\n*/\n```\n\n- 内部类可以获得外部类的私有属性\n\n- 要通过外部类来实例化内部类。\n\n  Outer outer = new Outer();\n  Outer.Inner inner = outer.new Inner();\n\n---\n\n#### 静态内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public static class Inner1{\n        public void in(){\n            System.out.println(\"I'm the inner1\");\n        }\n    }\n}\n*/\n```\n\n---\n\n#### 局部内部类\n\n```java\npublic class Outer {\n        public void method(){\n            //局部内部类\n            class Inner{\n                public void in(){\n                    \n                }\n            }\n        }\n}\n```\n\n---\n\n#### 匿名内部类\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        //匿名内部类：没有名字初始化类，不用将实例保存到变量中\n        new Apple().eat();\n    }\n}\n\nclass Apple{\n    public void eat(){\n        System.out.println(\"eat apple\");\n    }\n}\n```\n\n","source":"_posts/Java面向对象04.md","raw":"---\ntitle: Java面向对象04\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ndate: 2022-08-25 22:41:51\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- Java面向对象\nkeywords:\ndescription:\n---\n\n## static 关键字\n\n### 静态变量与静态方法\n\n- 静态的变量  多线程中会用到(包含static关键字)\n- 非静态的变量（不包含static关键字）\n- 非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.\n- 如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。\n- 静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。\n\n代码\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 20:44\n * @Description\n */\npublic class Student {\n    private static int age;                 //静态的变量  多线程中会用到\n    private double score;                   //非静态的变量\n    public void run(){                      //非静态方法\n        go();                               //非静态方法中可以直接调用静态方法\n    }\n    public static void go(){                //静态方法\n        //run();                            而静态方法中无法调用非静态方法\n    }\n    public static void main(String[] args) {\n        Student s1 = new Student();\n\n        System.out.println(s1.score);       //可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。\n        System.out.println(s1.age);\n\n        System.out.println(Student.age);    //如果变量是静态变量我们就可以直接通过类名去访问这个变量\n        //System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。\n        go();                               //静态方法可以直接被调用\n        //run();\n        s1.run();                           //非静态方法需要实例化类对象之后，才可以通过对象来调用。\n    }\n}\n```\n\n---\n\n### 静态代码块\n\n**在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。**\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:03\n * @Description\n */\npublic class Person {\n    {\n        System.out.println(\"我是匿名代码块\");\n    }\n    static {\n        System.out.println(\"我是静态代码块\");\n    }\n    public Person(){\n        System.out.println(\"我是构造方法\");\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person();\n    }\n}\n```\n\n![静态代码块](https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png)\n\n---\n\n### 静态导入包（不常用）\n\n语法：\n\n```java\nimport static java.lang.Math.random;\nimport static java.lang.Math.PI;\nSystem.out.println(random());\nSystem.out.println(PI);\n```\n\n当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。\n\n---\n\n## 抽象类\n\n- ***abstract*修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。**\n- **抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。**\n- 抽象类，不能用new关键字来创建对象，它是用来让子类继承的\n- 抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。\n- 子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。\n- 抽象类存在的意义：抽象出来，提高开发效率。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:27\n * @Description\n */\n//用abstract 关键字修饰的类叫做抽象类，\npublic abstract class Action {\n    //abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。\n    public abstract void doSomething();\n    //1.不能new这个抽象类，只能靠子类去实现\n    //2.抽象类中可以写普通方法\n    //3.抽象方法必须在抽象类中\n    //抽象的抽象：约束。\n\n    public Action() {\n    }\n}\n```\n\n继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:05\n * @Description\n */\n//继承抽象类，就一定要实现抽象类里面的抽象方法\npublic class A extends Action{\n    @Override\n    public void doSomething() {\n\n    }\n}\n```\n\n---\n\n## 接口\n\n- 普通类：只有具体实现\n- 抽象类：具体实现和规范（抽象方法）都有\n- 接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程~\n\n- 接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。**eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。**\n- **接口的本质是契约**，就像我们人间的法律一样，制定好后大家都遵守。\n- 接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。\n\n---\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo09;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:36\n * @Description\n */\n\n//抽象类是继承  extends\n// 类也可以实现接口 implements 接口\n// 实现了接口的类，就必须重写接口中的方法\n// 接口就间接的实现了多继承。\npublic class UserServiceImpl implements UserService,TimeService{\n    @Override\n    public void timer() {\n\n    }\n\n    @Override\n    public void add() {\n\n    }\n\n    @Override\n    public void delete() {\n\n    }\n\n    @Override\n    public void update() {\n\n    }\n\n    @Override\n    public void query() {\n\n    }\n}\n\n/*\npublic interface TimeService {\n    void timer();\n}\n\n// interface 定义的关键字 ， 接口都需要有实现类\npublic interface UserService {\n    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）\n    public static final int AGE = 99;\n    //接口中所有定义其实默认都是抽象的 public abstract\n    public abstract void add();\n    void delete();\n    void update();\n    void query();\n}\n\n */\n```\n\n---\n\n### 作用\n\n1. 接口是一个约束\n2. 定义一些方法，让不同人实现。\n3. 方法的默认属性是 public abstract\n4. 常量的默认属性是public static final\n5. 接口不能被实例化~接口中没有构造方法~\n6. implements可以实现多个接口\n7. 必须要重写接口中的方法\n\n---\n\n## 内部类\n\n### 定义\n\n内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。\n\n### 分类\n\n#### 成员内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public class Inner{\n        public void in(){\n            System.out.println(\"I'm the inner\");\n        }\n        public void gerAge(){\n            System.out.println(age);\n        }\n    }\n}\n\n*/\n```\n\n- 内部类可以获得外部类的私有属性\n\n- 要通过外部类来实例化内部类。\n\n  Outer outer = new Outer();\n  Outer.Inner inner = outer.new Inner();\n\n---\n\n#### 静态内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public static class Inner1{\n        public void in(){\n            System.out.println(\"I'm the inner1\");\n        }\n    }\n}\n*/\n```\n\n---\n\n#### 局部内部类\n\n```java\npublic class Outer {\n        public void method(){\n            //局部内部类\n            class Inner{\n                public void in(){\n                    \n                }\n            }\n        }\n}\n```\n\n---\n\n#### 匿名内部类\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        //匿名内部类：没有名字初始化类，不用将实例保存到变量中\n        new Apple().eat();\n    }\n}\n\nclass Apple{\n    public void eat(){\n        System.out.println(\"eat apple\");\n    }\n}\n```\n\n","slug":"Java面向对象04","published":1,"updated":"2022-08-25T15:03:18.064Z","layout":"post","link":"","_id":"cl796hii0001ygwrwaov2qf8t","content":"<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"静态变量与静态方法\"><a href=\"#静态变量与静态方法\" class=\"headerlink\" title=\"静态变量与静态方法\"></a>静态变量与静态方法</h3><ul>\n<li>静态的变量  多线程中会用到(包含static关键字)</li>\n<li>非静态的变量（不包含static关键字）</li>\n<li>非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.</li>\n<li>如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。</li>\n<li>静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。</li>\n</ul>\n<p>代码</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo07<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 20:44\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">//静态的变量  多线程中会用到</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">//非静态的变量</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                      <span class=\"token comment\" spellcheck=\"true\">//非静态方法</span>\n        <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               <span class=\"token comment\" spellcheck=\"true\">//非静态方法中可以直接调用静态方法</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                <span class=\"token comment\" spellcheck=\"true\">//静态方法</span>\n        <span class=\"token comment\" spellcheck=\"true\">//run();                            而静态方法中无法调用非静态方法</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Student s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">//可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//如果变量是静态变量我们就可以直接通过类名去访问这个变量</span>\n        <span class=\"token comment\" spellcheck=\"true\">//System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。</span>\n        <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               <span class=\"token comment\" spellcheck=\"true\">//静态方法可以直接被调用</span>\n        <span class=\"token comment\" spellcheck=\"true\">//run();</span>\n        s1<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\" spellcheck=\"true\">//非静态方法需要实例化类对象之后，才可以通过对象来调用。</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p><strong>在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo07<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:03\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是匿名代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png\" alt=\"静态代码块\"></p>\n<hr>\n<h3 id=\"静态导入包（不常用）\"><a href=\"#静态导入包（不常用）\" class=\"headerlink\" title=\"静态导入包（不常用）\"></a>静态导入包（不常用）</h3><p>语法：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span>PI<span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。</p>\n<hr>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><ul>\n<li><strong><em>abstract</em>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</strong></li>\n<li><strong>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</strong></li>\n<li>抽象类，不能用new关键字来创建对象，它是用来让子类继承的</li>\n<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>\n<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>\n<li>抽象类存在的意义：抽象出来，提高开发效率。</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo08<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:27\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//用abstract 关键字修饰的类叫做抽象类，</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//1.不能new这个抽象类，只能靠子类去实现</span>\n    <span class=\"token comment\" spellcheck=\"true\">//2.抽象类中可以写普通方法</span>\n    <span class=\"token comment\" spellcheck=\"true\">//3.抽象方法必须在抽象类中</span>\n    <span class=\"token comment\" spellcheck=\"true\">//抽象的抽象：约束。</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo08<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:05\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//继承抽象类，就一定要实现抽象类里面的抽象方法</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li>普通类：只有具体实现</li>\n<li>抽象类：具体实现和规范（抽象方法）都有</li>\n<li><p>接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程~</p>\n</li>\n<li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。<strong>eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</strong></p>\n</li>\n<li><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定好后大家都遵守。</li>\n<li>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。</li>\n</ul>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>oop<span class=\"token punctuation\">.</span>demo09<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:36\n * @Description\n */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//抽象类是继承  extends</span>\n<span class=\"token comment\" spellcheck=\"true\">// 类也可以实现接口 implements 接口</span>\n<span class=\"token comment\" spellcheck=\"true\">// 实现了接口的类，就必须重写接口中的方法</span>\n<span class=\"token comment\" spellcheck=\"true\">// 接口就间接的实现了多继承。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">,</span>TimeService<span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic interface TimeService {\n    void timer();\n}\n\n// interface 定义的关键字 ， 接口都需要有实现类\npublic interface UserService {\n    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）\n    public static final int AGE = 99;\n    //接口中所有定义其实默认都是抽象的 public abstract\n    public abstract void add();\n    void delete();\n    void update();\n    void query();\n}\n\n */</span>\n</code></pre>\n<hr>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>接口是一个约束</li>\n<li>定义一些方法，让不同人实现。</li>\n<li>方法的默认属性是 public abstract</li>\n<li>常量的默认属性是public static final</li>\n<li>接口不能被实例化~接口中没有构造方法~</li>\n<li>implements可以实现多个接口</li>\n<li>必须要重写接口中的方法</li>\n</ol>\n<hr>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Outer outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Outer<span class=\"token punctuation\">.</span>Inner inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inner<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inner<span class=\"token punctuation\">.</span><span class=\"token function\">gerAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public class Inner{\n        public void in(){\n            System.out.println(\"I'm the inner\");\n        }\n        public void gerAge(){\n            System.out.println(age);\n        }\n    }\n}\n\n*/</span>\n</code></pre>\n<ul>\n<li><p>内部类可以获得外部类的私有属性</p>\n</li>\n<li><p>要通过外部类来实例化内部类。</p>\n<p>Outer outer = new Outer();<br>Outer.Inner inner = outer.new Inner();</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Outer outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Outer<span class=\"token punctuation\">.</span>Inner inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inner<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inner<span class=\"token punctuation\">.</span><span class=\"token function\">gerAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public static class Inner1{\n        public void in(){\n            System.out.println(\"I'm the inner1\");\n        }\n    }\n}\n*/</span>\n</code></pre>\n<hr>\n<h4 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//局部内部类</span>\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//匿名内部类：没有名字初始化类，不用将实例保存到变量中</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"静态变量与静态方法\"><a href=\"#静态变量与静态方法\" class=\"headerlink\" title=\"静态变量与静态方法\"></a>静态变量与静态方法</h3><ul>\n<li>静态的变量  多线程中会用到(包含static关键字)</li>\n<li>非静态的变量（不包含static关键字）</li>\n<li>非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.</li>\n<li>如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。</li>\n<li>静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。</li>\n</ul>\n<p>代码</p>\n<pre><code class=\"java\">package com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 20:44\n * @Description\n */\npublic class Student {\n    private static int age;                 //静态的变量  多线程中会用到\n    private double score;                   //非静态的变量\n    public void run(){                      //非静态方法\n        go();                               //非静态方法中可以直接调用静态方法\n    }\n    public static void go(){                //静态方法\n        //run();                            而静态方法中无法调用非静态方法\n    }\n    public static void main(String[] args) {\n        Student s1 = new Student();\n\n        System.out.println(s1.score);       //可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。\n        System.out.println(s1.age);\n\n        System.out.println(Student.age);    //如果变量是静态变量我们就可以直接通过类名去访问这个变量\n        //System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。\n        go();                               //静态方法可以直接被调用\n        //run();\n        s1.run();                           //非静态方法需要实例化类对象之后，才可以通过对象来调用。\n    }\n}\n</code></pre>\n<hr>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p><strong>在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。</strong></p>\n<pre><code class=\"java\">package com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:03\n * @Description\n */\npublic class Person {\n    {\n        System.out.println(&quot;我是匿名代码块&quot;);\n    }\n    static {\n        System.out.println(&quot;我是静态代码块&quot;);\n    }\n    public Person(){\n        System.out.println(&quot;我是构造方法&quot;);\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person();\n    }\n}\n</code></pre>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png\" alt=\"静态代码块\"></p>\n<hr>\n<h3 id=\"静态导入包（不常用）\"><a href=\"#静态导入包（不常用）\" class=\"headerlink\" title=\"静态导入包（不常用）\"></a>静态导入包（不常用）</h3><p>语法：</p>\n<pre><code class=\"java\">import static java.lang.Math.random;\nimport static java.lang.Math.PI;\nSystem.out.println(random());\nSystem.out.println(PI);\n</code></pre>\n<p>当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。</p>\n<hr>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><ul>\n<li><strong><em>abstract</em>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</strong></li>\n<li><strong>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</strong></li>\n<li>抽象类，不能用new关键字来创建对象，它是用来让子类继承的</li>\n<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>\n<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>\n<li>抽象类存在的意义：抽象出来，提高开发效率。</li>\n</ul>\n<pre><code class=\"java\">package com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:27\n * @Description\n */\n//用abstract 关键字修饰的类叫做抽象类，\npublic abstract class Action {\n    //abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。\n    public abstract void doSomething();\n    //1.不能new这个抽象类，只能靠子类去实现\n    //2.抽象类中可以写普通方法\n    //3.抽象方法必须在抽象类中\n    //抽象的抽象：约束。\n\n    public Action() {\n    }\n}\n</code></pre>\n<p>继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。</p>\n<pre><code class=\"java\">package com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:05\n * @Description\n */\n//继承抽象类，就一定要实现抽象类里面的抽象方法\npublic class A extends Action{\n    @Override\n    public void doSomething() {\n\n    }\n}\n</code></pre>\n<hr>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li>普通类：只有具体实现</li>\n<li>抽象类：具体实现和规范（抽象方法）都有</li>\n<li><p>接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程~</p>\n</li>\n<li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。<strong>eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</strong></p>\n</li>\n<li><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定好后大家都遵守。</li>\n<li>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。</li>\n</ul>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.oop.demo09;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:36\n * @Description\n */\n\n//抽象类是继承  extends\n// 类也可以实现接口 implements 接口\n// 实现了接口的类，就必须重写接口中的方法\n// 接口就间接的实现了多继承。\npublic class UserServiceImpl implements UserService,TimeService{\n    @Override\n    public void timer() {\n\n    }\n\n    @Override\n    public void add() {\n\n    }\n\n    @Override\n    public void delete() {\n\n    }\n\n    @Override\n    public void update() {\n\n    }\n\n    @Override\n    public void query() {\n\n    }\n}\n\n/*\npublic interface TimeService {\n    void timer();\n}\n\n// interface 定义的关键字 ， 接口都需要有实现类\npublic interface UserService {\n    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）\n    public static final int AGE = 99;\n    //接口中所有定义其实默认都是抽象的 public abstract\n    public abstract void add();\n    void delete();\n    void update();\n    void query();\n}\n\n */\n</code></pre>\n<hr>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>接口是一个约束</li>\n<li>定义一些方法，让不同人实现。</li>\n<li>方法的默认属性是 public abstract</li>\n<li>常量的默认属性是public static final</li>\n<li>接口不能被实例化~接口中没有构造方法~</li>\n<li>implements可以实现多个接口</li>\n<li>必须要重写接口中的方法</li>\n</ol>\n<hr>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h4><pre><code class=\"java\">public class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(&quot;I&#39;m the outer&quot;);\n    }\n\n    public class Inner{\n        public void in(){\n            System.out.println(&quot;I&#39;m the inner&quot;);\n        }\n        public void gerAge(){\n            System.out.println(age);\n        }\n    }\n}\n\n*/\n</code></pre>\n<ul>\n<li><p>内部类可以获得外部类的私有属性</p>\n</li>\n<li><p>要通过外部类来实例化内部类。</p>\n<p>Outer outer = new Outer();<br>Outer.Inner inner = outer.new Inner();</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><pre><code class=\"java\">public class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(&quot;I&#39;m the outer&quot;);\n    }\n\n    public static class Inner1{\n        public void in(){\n            System.out.println(&quot;I&#39;m the inner1&quot;);\n        }\n    }\n}\n*/\n</code></pre>\n<hr>\n<h4 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h4><pre><code class=\"java\">public class Outer {\n        public void method(){\n            //局部内部类\n            class Inner{\n                public void in(){\n\n                }\n            }\n        }\n}\n</code></pre>\n<hr>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><pre><code class=\"java\">public class Test {\n    public static void main(String[] args) {\n        //匿名内部类：没有名字初始化类，不用将实例保存到变量中\n        new Apple().eat();\n    }\n}\n\nclass Apple{\n    public void eat(){\n        System.out.println(&quot;eat apple&quot;);\n    }\n}\n</code></pre>\n"},{"title":"WP备份","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg"],"date":"2022-08-25T14:43:48.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## argon主题选项\n\n### 文本附加内容\n\n```markdown\n您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》\n非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。\n\n版权声明：\n1、本博客属个人所有，不涉及商业目的。\n2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！\n3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。\n4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。\n5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境\n6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。\n7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;\n\n```\n\n---\n\n### 页脚内容\n\n```markdown\n<p><b>Copyright  2022 Xiheya</b>, All Rights Reserved.</p> \n<p><b>本站已<del>稳定运行</b></del>:<span id=\"blog_running_days\" class=\"odometer\"></span> days , <span id=\"blog_running_hours\" class=\"odometer\"></span> h , <span id=\"blog_running_mins\" class=\"odometer\"></span> m , <span id=\"blog_running_secs\" class=\"odometer\"></span> s</p> \n<script no-pjax>\nvar blog_running_days=document.getElementById(\"blog_running_days\");\nvar blog_running_hours=document.getElementById(\"blog_running_hours\");\nvar blog_running_mins=document.getElementById(\"blog_running_mins\");\nvar blog_running_secs=document.getElementById(\"blog_running_secs\");\nfunction refresh_blog_running_time(){\n    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);\n    var d=parseInt(time/24/60/60/1000);\n    var h=parseInt(time%(24*60*60*1000)/60/60/1000);\n    var m=parseInt(time%(60*60*1000)/60/1000);\n    var s=parseInt(time%(60*1000)/1000);\n    blog_running_days.innerHTML=d;\n    blog_running_hours.innerHTML=h;\n    blog_running_mins.innerHTML=m;\n    blog_running_secs.innerHTML=s;\n}\nrefresh_blog_running_time();\nif (typeof(bottomTimeIntervalHasSet) == \"undefined\"){\n    var bottomTimeIntervalHasSet = true;\n    setInterval(function(){refresh_blog_running_time();},500);\n}\n</script>\n```\n\n---\n\n### 主题颜色\n\n```markdown\n#9a92b9\n\nbanner副标题：记录我的日常生活&学习笔记\n页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg\n```\n\n---\n\n### 左侧栏\n\n```markdown\n左侧栏标题\t\n与君共赴，万里征程。\n\n左侧栏子标题（格言）\t\n--hitokoto--\n\n左侧栏作者名称\t\n未可知.\n\n左侧栏作者头像地址\t\nhttps://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png\n\n```\n\n---\n\n## 留言板与友链\n\n### 留言板内容：\n\n```markdown\n留言规则\n\n留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n留言者承担因留言行为而直接或间接引起的法律责任;\n本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n如果你有任何问题或是要求，可以在这里给我发送消息;\n如在本博客目留言，即表明已阅读并接受了上述各项条款;\n```\n\n---\n\n### 友链内容\n\n```\n[friendlinks style=\"1-square\" sort=\"rand\"/]  \n//方形头像，随机排序\n```\n\n友链格式 :\n\n> 博客名称：Rookie_L’s Blog\n>\n> 描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&学习笔记\n>\n> 站点：https://solstice23.top\n>\n> Avatar (头像)：https://solstice23.top/friendlink_image/avatar/\n\n---\n\n## 菜单栏\n\n### 顶部导航标签\n\n```markdown\n<i class=\"fa fa-home\" aria-hidden=\"true\"></i> 首页\n<i class=\"fa fa-comments\" aria-hidden=\"true\"></i> 留言板\n<i class=\"fa fa-link\" aria-hidden=\"true\"></i> 友情链接\n<i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> 归档\n\n<i class=\"fa fa-star\" aria-hidden=\"true\"></i>分类 <i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n\n<i class=\"fa fa-tags\" aria-hidden=\"true\"></i> 标签<i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n```\n\n---\n\n### 左侧栏菜单导航\n\n```markdown\nurl：https://docs.oracle.com/javase/8/docs/api/\n标签：<i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> API帮助文档\n\nurl：https://leetcode-cn.com/\n标签：<i class=\"fa fa-code\" aria-hidden=\"true\"></i> LeetCode\n\nurl：https://codetop.cc/home\n标签：<i class=\"fa fa-codepen\" aria-hidden=\"true\"></i> CodeTop\n\nurl：https://github.com/\n标签：<i class=\"fa fa-github-alt\" aria-hidden=\"true\"></i> GayHub\n\nurl：https://www.programmercarl.com/\n标签：<i class=\"fa fa-eye\" aria-hidden=\"true\"></i> 代码随想录\n\nurl：https://www.runoob.com/\n标签：<i class=\"fa fa-child\" aria-hidden=\"true\"></i> 笨鸟先飞\n```\n\n---\n\n### 左侧个人链接：\n\n```markdown\n1. URL：https://cloud.icu007.work/ 标签： <i class=\"fa fa-cloud\" aria-hidden=\"true\"></i> 可道云\n2. URL：mailto:rookie_l@icu007.work 标签：<i class=\"fa fa-envelope\" aria-hidden=\"true\"></i> 联系我\n3. URL：https://alist.icu007.work/ 标签：<i class=\"fa fa-hdd-o\" aria-hidden=\"true\"></i> 分享盘\n4. URL：https://drive.icu007.work/ 标签： <i class=\"fa fa-download\" aria-hidden=\"true\"></i> 下载盘\n5. URL：https://baidu.icu007.work 标签： <i class=\"fa fa-question\" aria-hidden=\"true\"></i> 百度一下\n6. URL： http://hiheya.github.io 标签： <i class=\"fa fa-user\" aria-hidden=\"true\"></i> 子站\n```\n\n---\n\n  \n","source":"_posts/WP备份.md","raw":"---\ntitle: WP备份\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 随想\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg'\ndate: 2022-08-25 22:43:48\nauthorAbout:\nauthorDesc:\ntags: WP\nkeywords:\ndescription:\n---\n\n## argon主题选项\n\n### 文本附加内容\n\n```markdown\n您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》\n非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。\n\n版权声明：\n1、本博客属个人所有，不涉及商业目的。\n2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！\n3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。\n4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。\n5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境\n6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。\n7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;\n\n```\n\n---\n\n### 页脚内容\n\n```markdown\n<p><b>Copyright  2022 Xiheya</b>, All Rights Reserved.</p> \n<p><b>本站已<del>稳定运行</b></del>:<span id=\"blog_running_days\" class=\"odometer\"></span> days , <span id=\"blog_running_hours\" class=\"odometer\"></span> h , <span id=\"blog_running_mins\" class=\"odometer\"></span> m , <span id=\"blog_running_secs\" class=\"odometer\"></span> s</p> \n<script no-pjax>\nvar blog_running_days=document.getElementById(\"blog_running_days\");\nvar blog_running_hours=document.getElementById(\"blog_running_hours\");\nvar blog_running_mins=document.getElementById(\"blog_running_mins\");\nvar blog_running_secs=document.getElementById(\"blog_running_secs\");\nfunction refresh_blog_running_time(){\n    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);\n    var d=parseInt(time/24/60/60/1000);\n    var h=parseInt(time%(24*60*60*1000)/60/60/1000);\n    var m=parseInt(time%(60*60*1000)/60/1000);\n    var s=parseInt(time%(60*1000)/1000);\n    blog_running_days.innerHTML=d;\n    blog_running_hours.innerHTML=h;\n    blog_running_mins.innerHTML=m;\n    blog_running_secs.innerHTML=s;\n}\nrefresh_blog_running_time();\nif (typeof(bottomTimeIntervalHasSet) == \"undefined\"){\n    var bottomTimeIntervalHasSet = true;\n    setInterval(function(){refresh_blog_running_time();},500);\n}\n</script>\n```\n\n---\n\n### 主题颜色\n\n```markdown\n#9a92b9\n\nbanner副标题：记录我的日常生活&学习笔记\n页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg\n```\n\n---\n\n### 左侧栏\n\n```markdown\n左侧栏标题\t\n与君共赴，万里征程。\n\n左侧栏子标题（格言）\t\n--hitokoto--\n\n左侧栏作者名称\t\n未可知.\n\n左侧栏作者头像地址\t\nhttps://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png\n\n```\n\n---\n\n## 留言板与友链\n\n### 留言板内容：\n\n```markdown\n留言规则\n\n留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n留言者承担因留言行为而直接或间接引起的法律责任;\n本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n如果你有任何问题或是要求，可以在这里给我发送消息;\n如在本博客目留言，即表明已阅读并接受了上述各项条款;\n```\n\n---\n\n### 友链内容\n\n```\n[friendlinks style=\"1-square\" sort=\"rand\"/]  \n//方形头像，随机排序\n```\n\n友链格式 :\n\n> 博客名称：Rookie_L’s Blog\n>\n> 描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&学习笔记\n>\n> 站点：https://solstice23.top\n>\n> Avatar (头像)：https://solstice23.top/friendlink_image/avatar/\n\n---\n\n## 菜单栏\n\n### 顶部导航标签\n\n```markdown\n<i class=\"fa fa-home\" aria-hidden=\"true\"></i> 首页\n<i class=\"fa fa-comments\" aria-hidden=\"true\"></i> 留言板\n<i class=\"fa fa-link\" aria-hidden=\"true\"></i> 友情链接\n<i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> 归档\n\n<i class=\"fa fa-star\" aria-hidden=\"true\"></i>分类 <i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n\n<i class=\"fa fa-tags\" aria-hidden=\"true\"></i> 标签<i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n```\n\n---\n\n### 左侧栏菜单导航\n\n```markdown\nurl：https://docs.oracle.com/javase/8/docs/api/\n标签：<i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> API帮助文档\n\nurl：https://leetcode-cn.com/\n标签：<i class=\"fa fa-code\" aria-hidden=\"true\"></i> LeetCode\n\nurl：https://codetop.cc/home\n标签：<i class=\"fa fa-codepen\" aria-hidden=\"true\"></i> CodeTop\n\nurl：https://github.com/\n标签：<i class=\"fa fa-github-alt\" aria-hidden=\"true\"></i> GayHub\n\nurl：https://www.programmercarl.com/\n标签：<i class=\"fa fa-eye\" aria-hidden=\"true\"></i> 代码随想录\n\nurl：https://www.runoob.com/\n标签：<i class=\"fa fa-child\" aria-hidden=\"true\"></i> 笨鸟先飞\n```\n\n---\n\n### 左侧个人链接：\n\n```markdown\n1. URL：https://cloud.icu007.work/ 标签： <i class=\"fa fa-cloud\" aria-hidden=\"true\"></i> 可道云\n2. URL：mailto:rookie_l@icu007.work 标签：<i class=\"fa fa-envelope\" aria-hidden=\"true\"></i> 联系我\n3. URL：https://alist.icu007.work/ 标签：<i class=\"fa fa-hdd-o\" aria-hidden=\"true\"></i> 分享盘\n4. URL：https://drive.icu007.work/ 标签： <i class=\"fa fa-download\" aria-hidden=\"true\"></i> 下载盘\n5. URL：https://baidu.icu007.work 标签： <i class=\"fa fa-question\" aria-hidden=\"true\"></i> 百度一下\n6. URL： http://hiheya.github.io 标签： <i class=\"fa fa-user\" aria-hidden=\"true\"></i> 子站\n```\n\n---\n\n  \n","slug":"WP备份","published":1,"updated":"2022-08-25T15:09:36.478Z","_id":"cl796hii10021gwrwz74cv88l","layout":"post","link":"","content":"<h2 id=\"argon主题选项\"><a href=\"#argon主题选项\" class=\"headerlink\" title=\"argon主题选项\"></a>argon主题选项</h2><h3 id=\"文本附加内容\"><a href=\"#文本附加内容\" class=\"headerlink\" title=\"文本附加内容\"></a>文本附加内容</h3><pre class=\" language-markdown\"><code class=\"language-markdown\">您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》\n非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。\n\n版权声明：\n1、本博客属个人所有，不涉及商业目的。\n2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！\n3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。\n4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。\n5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境\n6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。\n7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;\n\n</code></pre>\n<hr>\n<h3 id=\"页脚内容\"><a href=\"#页脚内容\" class=\"headerlink\" title=\"页脚内容\"></a>页脚内容</h3><pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>Copyright  2022 Xiheya<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>, All Rights Reserved.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>本站已<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>del</span><span class=\"token punctuation\">></span></span>稳定运行<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>del</span><span class=\"token punctuation\">></span></span>:&lt;span id=\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>days\" class=\"odometer\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> days , &lt;span id=\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>hours\" class=\"odometer\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> h , &lt;span id=\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>mins\" class=\"odometer\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> m , &lt;span id=\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>secs\" class=\"odometer\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> s<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">no-pjax</span><span class=\"token punctuation\">></span></span>\nvar blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>days=document.getElementById(\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>days\");\nvar blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>hours=document.getElementById(\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>hours\");\nvar blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>mins=document.getElementById(\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>mins\");\nvar blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>secs=document.getElementById(\"blog<span class=\"token italic\"><span class=\"token punctuation\">_</span>running<span class=\"token punctuation\">_</span></span>secs\");\nfunction refresh<span class=\"token italic\"><span class=\"token punctuation\">_</span>blog<span class=\"token punctuation\">_</span></span>running_time(){\n<span class=\"token code keyword\">    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);</span>\n<span class=\"token code keyword\">    var d=parseInt(time/24/60/60/1000);</span>\n<span class=\"token code keyword\">    var h=parseInt(time%(24*60*60*1000)/60/60/1000);</span>\n<span class=\"token code keyword\">    var m=parseInt(time%(60*60*1000)/60/1000);</span>\n<span class=\"token code keyword\">    var s=parseInt(time%(60*1000)/1000);</span>\n<span class=\"token code keyword\">    blog_running_days.innerHTML=d;</span>\n<span class=\"token code keyword\">    blog_running_hours.innerHTML=h;</span>\n<span class=\"token code keyword\">    blog_running_mins.innerHTML=m;</span>\n<span class=\"token code keyword\">    blog_running_secs.innerHTML=s;</span>\n}\nrefresh<span class=\"token italic\"><span class=\"token punctuation\">_</span>blog<span class=\"token punctuation\">_</span></span>running_time();\nif (typeof(bottomTimeIntervalHasSet) == \"undefined\"){\n<span class=\"token code keyword\">    var bottomTimeIntervalHasSet = true;</span>\n<span class=\"token code keyword\">    setInterval(function(){refresh_blog_running_time();},500);</span>\n}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<hr>\n<h3 id=\"主题颜色\"><a href=\"#主题颜色\" class=\"headerlink\" title=\"主题颜色\"></a>主题颜色</h3><pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span>9a92b9</span>\n\nbanner副标题：记录我的日常生活&amp;学习笔记\n页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg\n</code></pre>\n<hr>\n<h3 id=\"左侧栏\"><a href=\"#左侧栏\" class=\"headerlink\" title=\"左侧栏\"></a>左侧栏</h3><pre class=\" language-markdown\"><code class=\"language-markdown\">左侧栏标题    \n与君共赴，万里征程。\n\n左侧栏子标题（格言）    \n--hitokoto--\n\n左侧栏作者名称    \n未可知.\n\n左侧栏作者头像地址    \nhttps://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png\n\n</code></pre>\n<hr>\n<h2 id=\"留言板与友链\"><a href=\"#留言板与友链\" class=\"headerlink\" title=\"留言板与友链\"></a>留言板与友链</h2><h3 id=\"留言板内容：\"><a href=\"#留言板内容：\" class=\"headerlink\" title=\"留言板内容：\"></a>留言板内容：</h3><pre class=\" language-markdown\"><code class=\"language-markdown\">留言规则\n\n留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n留言者承担因留言行为而直接或间接引起的法律责任;\n本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n如果你有任何问题或是要求，可以在这里给我发送消息;\n如在本博客目留言，即表明已阅读并接受了上述各项条款;\n</code></pre>\n<hr>\n<h3 id=\"友链内容\"><a href=\"#友链内容\" class=\"headerlink\" title=\"友链内容\"></a>友链内容</h3><pre><code>[friendlinks style=&quot;1-square&quot; sort=&quot;rand&quot;/]  \n//方形头像，随机排序\n</code></pre><p>友链格式 :</p>\n<blockquote>\n<p>博客名称：Rookie_L’s Blog</p>\n<p>描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&amp;学习笔记</p>\n<p>站点：<a href=\"https://solstice23.top\" target=\"_blank\" rel=\"noopener\">https://solstice23.top</a></p>\n<p>Avatar (头像)：<a href=\"https://solstice23.top/friendlink_image/avatar/\" target=\"_blank\" rel=\"noopener\">https://solstice23.top/friendlink_image/avatar/</a></p>\n</blockquote>\n<hr>\n<h2 id=\"菜单栏\"><a href=\"#菜单栏\" class=\"headerlink\" title=\"菜单栏\"></a>菜单栏</h2><h3 id=\"顶部导航标签\"><a href=\"#顶部导航标签\" class=\"headerlink\" title=\"顶部导航标签\"></a>顶部导航标签</h3><pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-home<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 首页\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-comments<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 留言板\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 友情链接\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-clock-o<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 归档\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-star<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>分类 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-caret-down<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span>px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-tags<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-caret-down<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span>px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<hr>\n<h3 id=\"左侧栏菜单导航\"><a href=\"#左侧栏菜单导航\" class=\"headerlink\" title=\"左侧栏菜单导航\"></a>左侧栏菜单导航</h3><pre class=\" language-markdown\"><code class=\"language-markdown\">url：https://docs.oracle.com/javase/8/docs/api/\n标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-question-circle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> API帮助文档\n\nurl：https://leetcode-cn.com/\n标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-code<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> LeetCode\n\nurl：https://codetop.cc/home\n标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-codepen<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> CodeTop\n\nurl：https://github.com/\n标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-github-alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> GayHub\n\nurl：https://www.programmercarl.com/\n标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-eye<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 代码随想录\n\nurl：https://www.runoob.com/\n标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-child<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 笨鸟先飞\n</code></pre>\n<hr>\n<h3 id=\"左侧个人链接：\"><a href=\"#左侧个人链接：\" class=\"headerlink\" title=\"左侧个人链接：\"></a>左侧个人链接：</h3><pre class=\" language-markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">1.</span> URL：https://cloud.icu007.work/ 标签： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-cloud<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 可道云\n<span class=\"token list punctuation\">2.</span> URL：mailto:rookie_l@icu007.work 标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-envelope<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 联系我\n<span class=\"token list punctuation\">3.</span> URL：https://alist.icu007.work/ 标签：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-hdd-o<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 分享盘\n<span class=\"token list punctuation\">4.</span> URL：https://drive.icu007.work/ 标签： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-download<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 下载盘\n<span class=\"token list punctuation\">5.</span> URL：https://baidu.icu007.work 标签： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-question<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 百度一下\n<span class=\"token list punctuation\">6.</span> URL： http://hiheya.github.io 标签： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fa fa-user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-hidden</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span> 子站\n</code></pre>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"argon主题选项\"><a href=\"#argon主题选项\" class=\"headerlink\" title=\"argon主题选项\"></a>argon主题选项</h2><h3 id=\"文本附加内容\"><a href=\"#文本附加内容\" class=\"headerlink\" title=\"文本附加内容\"></a>文本附加内容</h3><pre><code class=\"markdown\">您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》\n非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。\n\n版权声明：\n1、本博客属个人所有，不涉及商业目的。\n2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！\n3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。\n4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。\n5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境\n6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。\n7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;\n\n</code></pre>\n<hr>\n<h3 id=\"页脚内容\"><a href=\"#页脚内容\" class=\"headerlink\" title=\"页脚内容\"></a>页脚内容</h3><pre><code class=\"markdown\">&lt;p&gt;&lt;b&gt;Copyright  2022 Xiheya&lt;/b&gt;, All Rights Reserved.&lt;/p&gt; \n&lt;p&gt;&lt;b&gt;本站已&lt;del&gt;稳定运行&lt;/b&gt;&lt;/del&gt;:&lt;span id=&quot;blog_running_days&quot; class=&quot;odometer&quot;&gt;&lt;/span&gt; days , &lt;span id=&quot;blog_running_hours&quot; class=&quot;odometer&quot;&gt;&lt;/span&gt; h , &lt;span id=&quot;blog_running_mins&quot; class=&quot;odometer&quot;&gt;&lt;/span&gt; m , &lt;span id=&quot;blog_running_secs&quot; class=&quot;odometer&quot;&gt;&lt;/span&gt; s&lt;/p&gt; \n&lt;script no-pjax&gt;\nvar blog_running_days=document.getElementById(&quot;blog_running_days&quot;);\nvar blog_running_hours=document.getElementById(&quot;blog_running_hours&quot;);\nvar blog_running_mins=document.getElementById(&quot;blog_running_mins&quot;);\nvar blog_running_secs=document.getElementById(&quot;blog_running_secs&quot;);\nfunction refresh_blog_running_time(){\n    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);\n    var d=parseInt(time/24/60/60/1000);\n    var h=parseInt(time%(24*60*60*1000)/60/60/1000);\n    var m=parseInt(time%(60*60*1000)/60/1000);\n    var s=parseInt(time%(60*1000)/1000);\n    blog_running_days.innerHTML=d;\n    blog_running_hours.innerHTML=h;\n    blog_running_mins.innerHTML=m;\n    blog_running_secs.innerHTML=s;\n}\nrefresh_blog_running_time();\nif (typeof(bottomTimeIntervalHasSet) == &quot;undefined&quot;){\n    var bottomTimeIntervalHasSet = true;\n    setInterval(function(){refresh_blog_running_time();},500);\n}\n&lt;/script&gt;\n</code></pre>\n<hr>\n<h3 id=\"主题颜色\"><a href=\"#主题颜色\" class=\"headerlink\" title=\"主题颜色\"></a>主题颜色</h3><pre><code class=\"markdown\">#9a92b9\n\nbanner副标题：记录我的日常生活&amp;学习笔记\n页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg\n</code></pre>\n<hr>\n<h3 id=\"左侧栏\"><a href=\"#左侧栏\" class=\"headerlink\" title=\"左侧栏\"></a>左侧栏</h3><pre><code class=\"markdown\">左侧栏标题    \n与君共赴，万里征程。\n\n左侧栏子标题（格言）    \n--hitokoto--\n\n左侧栏作者名称    \n未可知.\n\n左侧栏作者头像地址    \nhttps://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png\n\n</code></pre>\n<hr>\n<h2 id=\"留言板与友链\"><a href=\"#留言板与友链\" class=\"headerlink\" title=\"留言板与友链\"></a>留言板与友链</h2><h3 id=\"留言板内容：\"><a href=\"#留言板内容：\" class=\"headerlink\" title=\"留言板内容：\"></a>留言板内容：</h3><pre><code class=\"markdown\">留言规则\n\n留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n留言者承担因留言行为而直接或间接引起的法律责任;\n本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n如果你有任何问题或是要求，可以在这里给我发送消息;\n如在本博客目留言，即表明已阅读并接受了上述各项条款;\n</code></pre>\n<hr>\n<h3 id=\"友链内容\"><a href=\"#友链内容\" class=\"headerlink\" title=\"友链内容\"></a>友链内容</h3><pre><code>[friendlinks style=&quot;1-square&quot; sort=&quot;rand&quot;/]  \n//方形头像，随机排序\n</code></pre><p>友链格式 :</p>\n<blockquote>\n<p>博客名称：Rookie_L’s Blog</p>\n<p>描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&amp;学习笔记</p>\n<p>站点：<a href=\"https://solstice23.top\" target=\"_blank\" rel=\"noopener\">https://solstice23.top</a></p>\n<p>Avatar (头像)：<a href=\"https://solstice23.top/friendlink_image/avatar/\" target=\"_blank\" rel=\"noopener\">https://solstice23.top/friendlink_image/avatar/</a></p>\n</blockquote>\n<hr>\n<h2 id=\"菜单栏\"><a href=\"#菜单栏\" class=\"headerlink\" title=\"菜单栏\"></a>菜单栏</h2><h3 id=\"顶部导航标签\"><a href=\"#顶部导航标签\" class=\"headerlink\" title=\"顶部导航标签\"></a>顶部导航标签</h3><pre><code class=\"markdown\">&lt;i class=&quot;fa fa-home&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 首页\n&lt;i class=&quot;fa fa-comments&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 留言板\n&lt;i class=&quot;fa fa-link&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 友情链接\n&lt;i class=&quot;fa fa-clock-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 归档\n\n&lt;i class=&quot;fa fa-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;分类 &lt;i class=&quot;fa fa-caret-down&quot; style=&quot;margin-left:3px;&quot;&gt;&lt;/i&gt;\n\n&lt;i class=&quot;fa fa-tags&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 标签&lt;i class=&quot;fa fa-caret-down&quot; style=&quot;margin-left:3px;&quot;&gt;&lt;/i&gt;\n</code></pre>\n<hr>\n<h3 id=\"左侧栏菜单导航\"><a href=\"#左侧栏菜单导航\" class=\"headerlink\" title=\"左侧栏菜单导航\"></a>左侧栏菜单导航</h3><pre><code class=\"markdown\">url：https://docs.oracle.com/javase/8/docs/api/\n标签：&lt;i class=&quot;fa fa-question-circle&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; API帮助文档\n\nurl：https://leetcode-cn.com/\n标签：&lt;i class=&quot;fa fa-code&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; LeetCode\n\nurl：https://codetop.cc/home\n标签：&lt;i class=&quot;fa fa-codepen&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; CodeTop\n\nurl：https://github.com/\n标签：&lt;i class=&quot;fa fa-github-alt&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; GayHub\n\nurl：https://www.programmercarl.com/\n标签：&lt;i class=&quot;fa fa-eye&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 代码随想录\n\nurl：https://www.runoob.com/\n标签：&lt;i class=&quot;fa fa-child&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 笨鸟先飞\n</code></pre>\n<hr>\n<h3 id=\"左侧个人链接：\"><a href=\"#左侧个人链接：\" class=\"headerlink\" title=\"左侧个人链接：\"></a>左侧个人链接：</h3><pre><code class=\"markdown\">1. URL：https://cloud.icu007.work/ 标签： &lt;i class=&quot;fa fa-cloud&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 可道云\n2. URL：mailto:rookie_l@icu007.work 标签：&lt;i class=&quot;fa fa-envelope&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 联系我\n3. URL：https://alist.icu007.work/ 标签：&lt;i class=&quot;fa fa-hdd-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 分享盘\n4. URL：https://drive.icu007.work/ 标签： &lt;i class=&quot;fa fa-download&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 下载盘\n5. URL：https://baidu.icu007.work 标签： &lt;i class=&quot;fa fa-question&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 百度一下\n6. URL： http://hiheya.github.io 标签： &lt;i class=&quot;fa fa-user&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; 子站\n</code></pre>\n<hr>\n"},{"title":"常见dos命令","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqsevz4j21kw0w07ka.jpg"],"date":"2022-08-25T14:29:04.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 基本Dos命令及计算机发展史\n\n### 一、打开cmd窗口方式\n\n1. 开始 + 系统+命令提示符\n2. **Win键+R 输入cmd打开控制台**\n3. 在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口\n4. 资源管理器的地址栏前面加上cmd路径\n5. **管理员身份运行，选择以管理员身份运行**\n\n### 二、常用的Dos命令\n\n```shell\n#盘符切换\nD:\nC:\nE:\n\n#进入任意目录 cd change directory\n#跨盘：\ncd /d E:\\data\\usr\\root\n#不跨盘\ncd data\n#返回上一级目录\ncd ..\n\n#查看当前目录下所有文件\ndir \nll\nls\n\n#清理屏幕 cls clear screen\ncls\n\n#退出终端 exit\neixt\n\n#查看IP ipconfig\nipconfig\n\n#打开应用 calc 计算器；mspaint 画图软件； notepad 记事本\ncalc \nmspaint\nnotepad\n\n#文件操作\n#创建目录 md make directory\nmd test\n#创建文件\ncd>test.txt\n#删除文件\ndel test.txt\n#移除目录 rd remove directory\nrd test\n\n```\n\n## 计算机语言发展史\n\n### 一、第一代语言\n\n- 机器语言\n  - 计算机的基本计算方式都是基于*二进制*的方式\n  - 二进制：01010110100100101\n  - 这种代码是直接输入给计算机使用的，不经过任何转换\n\n### 二、第二代语言\n\n- 汇编语言\n  - 解决人类无法读懂机器语言的问题\n  - 指令代替二进制\n- 目前应用\n  - 逆向工程\n  - 机器人\n  - 病毒\n  - ...\n\n### 三、第三代语言\n\n- 摩尔定律\n  - 当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上\n- 高级语言\n  - 大体上分为：**面向过程**和**面向对象**两大类\n    - ***c语言***是经典的面向过程的语言，**c++和Java**是典型的面向对象的语言\n  - \n","source":"_posts/常见dos命令.md","raw":"---\ntitle: 常见dos命令\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqsevz4j21kw0w07ka.jpg'\ndate: 2022-08-25 22:29:04\nauthorAbout:\nauthorDesc:\ntags: \n- 随笔\n- Dos\nkeywords:\ndescription:\n---\n\n## 基本Dos命令及计算机发展史\n\n### 一、打开cmd窗口方式\n\n1. 开始 + 系统+命令提示符\n2. **Win键+R 输入cmd打开控制台**\n3. 在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口\n4. 资源管理器的地址栏前面加上cmd路径\n5. **管理员身份运行，选择以管理员身份运行**\n\n### 二、常用的Dos命令\n\n```shell\n#盘符切换\nD:\nC:\nE:\n\n#进入任意目录 cd change directory\n#跨盘：\ncd /d E:\\data\\usr\\root\n#不跨盘\ncd data\n#返回上一级目录\ncd ..\n\n#查看当前目录下所有文件\ndir \nll\nls\n\n#清理屏幕 cls clear screen\ncls\n\n#退出终端 exit\neixt\n\n#查看IP ipconfig\nipconfig\n\n#打开应用 calc 计算器；mspaint 画图软件； notepad 记事本\ncalc \nmspaint\nnotepad\n\n#文件操作\n#创建目录 md make directory\nmd test\n#创建文件\ncd>test.txt\n#删除文件\ndel test.txt\n#移除目录 rd remove directory\nrd test\n\n```\n\n## 计算机语言发展史\n\n### 一、第一代语言\n\n- 机器语言\n  - 计算机的基本计算方式都是基于*二进制*的方式\n  - 二进制：01010110100100101\n  - 这种代码是直接输入给计算机使用的，不经过任何转换\n\n### 二、第二代语言\n\n- 汇编语言\n  - 解决人类无法读懂机器语言的问题\n  - 指令代替二进制\n- 目前应用\n  - 逆向工程\n  - 机器人\n  - 病毒\n  - ...\n\n### 三、第三代语言\n\n- 摩尔定律\n  - 当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上\n- 高级语言\n  - 大体上分为：**面向过程**和**面向对象**两大类\n    - ***c语言***是经典的面向过程的语言，**c++和Java**是典型的面向对象的语言\n  - \n","slug":"常见dos命令","published":1,"updated":"2022-08-25T15:06:43.872Z","layout":"post","link":"","_id":"cl796hii20025gwrw6ao4yomf","content":"<h2 id=\"基本Dos命令及计算机发展史\"><a href=\"#基本Dos命令及计算机发展史\" class=\"headerlink\" title=\"基本Dos命令及计算机发展史\"></a>基本Dos命令及计算机发展史</h2><h3 id=\"一、打开cmd窗口方式\"><a href=\"#一、打开cmd窗口方式\" class=\"headerlink\" title=\"一、打开cmd窗口方式\"></a>一、打开cmd窗口方式</h3><ol>\n<li>开始 + 系统+命令提示符</li>\n<li><strong>Win键+R 输入cmd打开控制台</strong></li>\n<li>在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口</li>\n<li>资源管理器的地址栏前面加上cmd路径</li>\n<li><strong>管理员身份运行，选择以管理员身份运行</strong></li>\n</ol>\n<h3 id=\"二、常用的Dos命令\"><a href=\"#二、常用的Dos命令\" class=\"headerlink\" title=\"二、常用的Dos命令\"></a>二、常用的Dos命令</h3><pre class=\" language-shell\"><code class=\"language-shell\">#盘符切换\nD:\nC:\nE:\n\n#进入任意目录 cd change directory\n#跨盘：\ncd /d E:\\data\\usr\\root\n#不跨盘\ncd data\n#返回上一级目录\ncd ..\n\n#查看当前目录下所有文件\ndir \nll\nls\n\n#清理屏幕 cls clear screen\ncls\n\n#退出终端 exit\neixt\n\n#查看IP ipconfig\nipconfig\n\n#打开应用 calc 计算器；mspaint 画图软件； notepad 记事本\ncalc \nmspaint\nnotepad\n\n#文件操作\n#创建目录 md make directory\nmd test\n#创建文件\ncd>test.txt\n#删除文件\ndel test.txt\n#移除目录 rd remove directory\nrd test\n\n</code></pre>\n<h2 id=\"计算机语言发展史\"><a href=\"#计算机语言发展史\" class=\"headerlink\" title=\"计算机语言发展史\"></a>计算机语言发展史</h2><h3 id=\"一、第一代语言\"><a href=\"#一、第一代语言\" class=\"headerlink\" title=\"一、第一代语言\"></a>一、第一代语言</h3><ul>\n<li>机器语言<ul>\n<li>计算机的基本计算方式都是基于<em>二进制</em>的方式</li>\n<li>二进制：01010110100100101</li>\n<li>这种代码是直接输入给计算机使用的，不经过任何转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、第二代语言\"><a href=\"#二、第二代语言\" class=\"headerlink\" title=\"二、第二代语言\"></a>二、第二代语言</h3><ul>\n<li>汇编语言<ul>\n<li>解决人类无法读懂机器语言的问题</li>\n<li>指令代替二进制</li>\n</ul>\n</li>\n<li>目前应用<ul>\n<li>逆向工程</li>\n<li>机器人</li>\n<li>病毒</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、第三代语言\"><a href=\"#三、第三代语言\" class=\"headerlink\" title=\"三、第三代语言\"></a>三、第三代语言</h3><ul>\n<li>摩尔定律<ul>\n<li>当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上</li>\n</ul>\n</li>\n<li>高级语言<ul>\n<li>大体上分为：<strong>面向过程</strong>和<strong>面向对象</strong>两大类<ul>\n<li><strong><em>c语言</em></strong>是经典的面向过程的语言，<strong>c++和Java</strong>是典型的面向对象的语言</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本Dos命令及计算机发展史\"><a href=\"#基本Dos命令及计算机发展史\" class=\"headerlink\" title=\"基本Dos命令及计算机发展史\"></a>基本Dos命令及计算机发展史</h2><h3 id=\"一、打开cmd窗口方式\"><a href=\"#一、打开cmd窗口方式\" class=\"headerlink\" title=\"一、打开cmd窗口方式\"></a>一、打开cmd窗口方式</h3><ol>\n<li>开始 + 系统+命令提示符</li>\n<li><strong>Win键+R 输入cmd打开控制台</strong></li>\n<li>在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口</li>\n<li>资源管理器的地址栏前面加上cmd路径</li>\n<li><strong>管理员身份运行，选择以管理员身份运行</strong></li>\n</ol>\n<h3 id=\"二、常用的Dos命令\"><a href=\"#二、常用的Dos命令\" class=\"headerlink\" title=\"二、常用的Dos命令\"></a>二、常用的Dos命令</h3><pre><code class=\"shell\">#盘符切换\nD:\nC:\nE:\n\n#进入任意目录 cd change directory\n#跨盘：\ncd /d E:\\data\\usr\\root\n#不跨盘\ncd data\n#返回上一级目录\ncd ..\n\n#查看当前目录下所有文件\ndir \nll\nls\n\n#清理屏幕 cls clear screen\ncls\n\n#退出终端 exit\neixt\n\n#查看IP ipconfig\nipconfig\n\n#打开应用 calc 计算器；mspaint 画图软件； notepad 记事本\ncalc \nmspaint\nnotepad\n\n#文件操作\n#创建目录 md make directory\nmd test\n#创建文件\ncd&gt;test.txt\n#删除文件\ndel test.txt\n#移除目录 rd remove directory\nrd test\n\n</code></pre>\n<h2 id=\"计算机语言发展史\"><a href=\"#计算机语言发展史\" class=\"headerlink\" title=\"计算机语言发展史\"></a>计算机语言发展史</h2><h3 id=\"一、第一代语言\"><a href=\"#一、第一代语言\" class=\"headerlink\" title=\"一、第一代语言\"></a>一、第一代语言</h3><ul>\n<li>机器语言<ul>\n<li>计算机的基本计算方式都是基于<em>二进制</em>的方式</li>\n<li>二进制：01010110100100101</li>\n<li>这种代码是直接输入给计算机使用的，不经过任何转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、第二代语言\"><a href=\"#二、第二代语言\" class=\"headerlink\" title=\"二、第二代语言\"></a>二、第二代语言</h3><ul>\n<li>汇编语言<ul>\n<li>解决人类无法读懂机器语言的问题</li>\n<li>指令代替二进制</li>\n</ul>\n</li>\n<li>目前应用<ul>\n<li>逆向工程</li>\n<li>机器人</li>\n<li>病毒</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、第三代语言\"><a href=\"#三、第三代语言\" class=\"headerlink\" title=\"三、第三代语言\"></a>三、第三代语言</h3><ul>\n<li>摩尔定律<ul>\n<li>当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上</li>\n</ul>\n</li>\n<li>高级语言<ul>\n<li>大体上分为：<strong>面向过程</strong>和<strong>面向对象</strong>两大类<ul>\n<li><strong><em>c语言</em></strong>是经典的面向过程的语言，<strong>c++和Java</strong>是典型的面向对象的语言</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Markdown基本语法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqmdhn9j21kw0w07iu.jpg"],"date":"2022-08-25T14:33:19.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Markdown 基本语法\n\n### 一.标 题:\n\n```shell\n 1.1 一级标题 #+空格+文本+回车 \n\n 1.2 二级标题 ##+空格+文本+回车 \n\n 1.3 三级标题 ###+空格+文本+回车 \n\n .....以此类推\n```\n\n---\n\n\n\n### 二.字体\n\n```shell\n粗体：文本两边加**\neg: **Hello World**\n```\n\n**Hello World**\n\n---\n\n```shell\n斜体：文本两边加*\neg: *Hello World*\n```\n\n   *Hello World*\n\n---\n\n```shell\n粗体加斜体：文本两边加***\neg: ***Hello World***\n```\n\n***Hello World***\n\n---\n\n```shell\n中间横线：文本两边加~~\neg: ~~Hello World~~\n```\n\n ~~Hello World~~\n\n---\n\n\n\n### 三.引用\n\n```shell\n右箭头后面接上文本>\neg: >与君共赴，万里征程。\n```\n\n> 与君共赴，万里征程。\n\n---\n\n### 四.分割线\n\n```shell\n三个-（减号）表示分割线\neg: ---\n```\n\n---\n\n```shell\n三个*（减号）表示分割线\neg: ***\n```\n\n***\n\n### 五.图片\n\n```shell\n插入图片：!+[图片名字]+(图片路径)\neg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n```\n\n![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n\n---\n\n\n\n### 六. 超链接\n\n```shell\n语法：[标题](链接地址)\neg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)\n```\n\n[idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13)\n\n---\n\n### 七. 列表\n\n#### 有序列表\n\n```shell\n语法：1 + . + 空格\n```\n\n1. A\n2. B\n3. C\n\n#### 无序列表\n\n```shell\n语法： - + 空格\n```\n\n- A\n- B\n- C\n\n---\n\n### 八.表格\n\n```shell\n语法：\n| 名字 | 性别 | 生日     |\n\n| ---- | ---- | -------- |\n\n| 张三 | 男   | 2000.1.1 |\n```\n\n---\n\n| 名字 | 性别 | 生日     |\n| ---- | ---- | -------- |\n| 张三 | 男   | 2000.1.1 |\n\n### 九.代码\n\n```shell\n语法 ``` + 编程语言名称\neg ```shell\n```\n\n``` java\npublic\n```\n\n### 十.快捷键\n\n#### 文本编辑快捷键\n\n- 无序列表：输入-之后输入空格 / ctrl + shift + ] (对选中行可用)\n- 有序列表：输入数字 + “.”之后输入空格 / ctrl + shift + [ (对选中行可用)\n- 引用内容：> + 空格 / ctrl + shift + q (对选中内容可用)\n- 任务列表：-[空格]空格 文字\n- 标题：ctrl + 数字\n- 表格：ctrl + t\n- 目录：[TOC]\n- 任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）\n- 选中一整行：ctrl + l (字母L)\n- 选中单词：ctrl + d\n- 选中相同格式的文字：ctrl + e\n- 跳转到文章开头：ctrl + home\n- 跳转到文章结尾：ctrl + end\n- 搜索：ctrl + f\n- 替换：ctrl + h\n- 引用：输入>之后输入空格\n- 代码块： ctrl + shift + k\n- 行内代码：ctrl + shift + ` (对选中行可用)\n- 加粗：ctrl + b\n- 倾斜：ctrl + i\n- 下划线：ctrl + u\n- 删除线：alt + shift + 5\n- 插入链接：ctrl + k\n- 插入公式：ctrl + shift + m\n- 插入图片：ctrl + shift + i\n- 保存：ctrl + s\n- 另存为：ctrl + shift + s\n\n#### 编辑模式快捷键\n\n- 源码模式编辑切换：ctrl + /\n- 打字机模式切换：F9\n- 专注模式切换：F8\n- 全屏模式切换：F11\n- Typora内部窗口焦点切换：ctrl + tab\n- 侧边栏显示/隐藏切换：ctrl + shift + L\n","source":"_posts/Markdown基本语法.md","raw":"---\ntitle: Markdown基本语法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqmdhn9j21kw0w07iu.jpg'\ndate: 2022-08-25 22:33:19\nauthorAbout:\nauthorDesc:\ntags: Markdown\nkeywords:\ndescription:\n---\n\n## Markdown 基本语法\n\n### 一.标 题:\n\n```shell\n 1.1 一级标题 #+空格+文本+回车 \n\n 1.2 二级标题 ##+空格+文本+回车 \n\n 1.3 三级标题 ###+空格+文本+回车 \n\n .....以此类推\n```\n\n---\n\n\n\n### 二.字体\n\n```shell\n粗体：文本两边加**\neg: **Hello World**\n```\n\n**Hello World**\n\n---\n\n```shell\n斜体：文本两边加*\neg: *Hello World*\n```\n\n   *Hello World*\n\n---\n\n```shell\n粗体加斜体：文本两边加***\neg: ***Hello World***\n```\n\n***Hello World***\n\n---\n\n```shell\n中间横线：文本两边加~~\neg: ~~Hello World~~\n```\n\n ~~Hello World~~\n\n---\n\n\n\n### 三.引用\n\n```shell\n右箭头后面接上文本>\neg: >与君共赴，万里征程。\n```\n\n> 与君共赴，万里征程。\n\n---\n\n### 四.分割线\n\n```shell\n三个-（减号）表示分割线\neg: ---\n```\n\n---\n\n```shell\n三个*（减号）表示分割线\neg: ***\n```\n\n***\n\n### 五.图片\n\n```shell\n插入图片：!+[图片名字]+(图片路径)\neg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n```\n\n![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n\n---\n\n\n\n### 六. 超链接\n\n```shell\n语法：[标题](链接地址)\neg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)\n```\n\n[idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13)\n\n---\n\n### 七. 列表\n\n#### 有序列表\n\n```shell\n语法：1 + . + 空格\n```\n\n1. A\n2. B\n3. C\n\n#### 无序列表\n\n```shell\n语法： - + 空格\n```\n\n- A\n- B\n- C\n\n---\n\n### 八.表格\n\n```shell\n语法：\n| 名字 | 性别 | 生日     |\n\n| ---- | ---- | -------- |\n\n| 张三 | 男   | 2000.1.1 |\n```\n\n---\n\n| 名字 | 性别 | 生日     |\n| ---- | ---- | -------- |\n| 张三 | 男   | 2000.1.1 |\n\n### 九.代码\n\n```shell\n语法 ``` + 编程语言名称\neg ```shell\n```\n\n``` java\npublic\n```\n\n### 十.快捷键\n\n#### 文本编辑快捷键\n\n- 无序列表：输入-之后输入空格 / ctrl + shift + ] (对选中行可用)\n- 有序列表：输入数字 + “.”之后输入空格 / ctrl + shift + [ (对选中行可用)\n- 引用内容：> + 空格 / ctrl + shift + q (对选中内容可用)\n- 任务列表：-[空格]空格 文字\n- 标题：ctrl + 数字\n- 表格：ctrl + t\n- 目录：[TOC]\n- 任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）\n- 选中一整行：ctrl + l (字母L)\n- 选中单词：ctrl + d\n- 选中相同格式的文字：ctrl + e\n- 跳转到文章开头：ctrl + home\n- 跳转到文章结尾：ctrl + end\n- 搜索：ctrl + f\n- 替换：ctrl + h\n- 引用：输入>之后输入空格\n- 代码块： ctrl + shift + k\n- 行内代码：ctrl + shift + ` (对选中行可用)\n- 加粗：ctrl + b\n- 倾斜：ctrl + i\n- 下划线：ctrl + u\n- 删除线：alt + shift + 5\n- 插入链接：ctrl + k\n- 插入公式：ctrl + shift + m\n- 插入图片：ctrl + shift + i\n- 保存：ctrl + s\n- 另存为：ctrl + shift + s\n\n#### 编辑模式快捷键\n\n- 源码模式编辑切换：ctrl + /\n- 打字机模式切换：F9\n- 专注模式切换：F8\n- 全屏模式切换：F11\n- Typora内部窗口焦点切换：ctrl + tab\n- 侧边栏显示/隐藏切换：ctrl + shift + L\n","slug":"Markdown基本语法","published":1,"updated":"2022-08-25T15:01:01.864Z","layout":"post","link":"","_id":"cl796hii40029gwrwuwg7vgj3","content":"<h2 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h2><h3 id=\"一-标-题\"><a href=\"#一-标-题\" class=\"headerlink\" title=\"一.标 题:\"></a>一.标 题:</h3><pre class=\" language-shell\"><code class=\"language-shell\"> 1.1 一级标题 #+空格+文本+回车 \n\n 1.2 二级标题 ##+空格+文本+回车 \n\n 1.3 三级标题 ###+空格+文本+回车 \n\n .....以此类推\n</code></pre>\n<hr>\n<h3 id=\"二-字体\"><a href=\"#二-字体\" class=\"headerlink\" title=\"二.字体\"></a>二.字体</h3><pre class=\" language-shell\"><code class=\"language-shell\">粗体：文本两边加**\neg: **Hello World**\n</code></pre>\n<p><strong>Hello World</strong></p>\n<hr>\n<pre class=\" language-shell\"><code class=\"language-shell\">斜体：文本两边加*\neg: *Hello World*\n</code></pre>\n<p>   <em>Hello World</em></p>\n<hr>\n<pre class=\" language-shell\"><code class=\"language-shell\">粗体加斜体：文本两边加***\neg: ***Hello World***\n</code></pre>\n<p><strong><em>Hello World</em></strong></p>\n<hr>\n<pre class=\" language-shell\"><code class=\"language-shell\">中间横线：文本两边加~~\neg: ~~Hello World~~\n</code></pre>\n<p> <del>Hello World</del></p>\n<hr>\n<h3 id=\"三-引用\"><a href=\"#三-引用\" class=\"headerlink\" title=\"三.引用\"></a>三.引用</h3><pre class=\" language-shell\"><code class=\"language-shell\">右箭头后面接上文本>\neg: >与君共赴，万里征程。\n</code></pre>\n<blockquote>\n<p>与君共赴，万里征程。</p>\n</blockquote>\n<hr>\n<h3 id=\"四-分割线\"><a href=\"#四-分割线\" class=\"headerlink\" title=\"四.分割线\"></a>四.分割线</h3><pre class=\" language-shell\"><code class=\"language-shell\">三个-（减号）表示分割线\neg: ---\n</code></pre>\n<hr>\n<pre class=\" language-shell\"><code class=\"language-shell\">三个*（减号）表示分割线\neg: ***\n</code></pre>\n<hr>\n<h3 id=\"五-图片\"><a href=\"#五-图片\" class=\"headerlink\" title=\"五.图片\"></a>五.图片</h3><pre class=\" language-shell\"><code class=\"language-shell\">插入图片：!+[图片名字]+(图片路径)\neg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n</code></pre>\n<p><img src=\"https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80\" alt=\"示例1\"></p>\n<hr>\n<h3 id=\"六-超链接\"><a href=\"#六-超链接\" class=\"headerlink\" title=\"六. 超链接\"></a>六. 超链接</h3><pre class=\" language-shell\"><code class=\"language-shell\">语法：[标题](链接地址)\neg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)\n</code></pre>\n<p><a href=\"http://110.42.139.30:8000/index.php/2022/03/06/13\" target=\"_blank\" rel=\"noopener\">idea快捷键</a></p>\n<hr>\n<h3 id=\"七-列表\"><a href=\"#七-列表\" class=\"headerlink\" title=\"七. 列表\"></a>七. 列表</h3><h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><pre class=\" language-shell\"><code class=\"language-shell\">语法：1 + . + 空格\n</code></pre>\n<ol>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ol>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><pre class=\" language-shell\"><code class=\"language-shell\">语法： - + 空格\n</code></pre>\n<ul>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ul>\n<hr>\n<h3 id=\"八-表格\"><a href=\"#八-表格\" class=\"headerlink\" title=\"八.表格\"></a>八.表格</h3><pre class=\" language-shell\"><code class=\"language-shell\">语法：\n| 名字 | 性别 | 生日     |\n\n| ---- | ---- | -------- |\n\n| 张三 | 男   | 2000.1.1 |\n</code></pre>\n<hr>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>性别</th>\n<th>生日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>男</td>\n<td>2000.1.1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"九-代码\"><a href=\"#九-代码\" class=\"headerlink\" title=\"九.代码\"></a>九.代码</h3><pre class=\" language-shell\"><code class=\"language-shell\">语法 ``` + 编程语言名称\neg ```shell\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span>\n</code></pre>\n<h3 id=\"十-快捷键\"><a href=\"#十-快捷键\" class=\"headerlink\" title=\"十.快捷键\"></a>十.快捷键</h3><h4 id=\"文本编辑快捷键\"><a href=\"#文本编辑快捷键\" class=\"headerlink\" title=\"文本编辑快捷键\"></a>文本编辑快捷键</h4><ul>\n<li>无序列表：输入-之后输入空格 / ctrl + shift + ] (对选中行可用)</li>\n<li>有序列表：输入数字 + “.”之后输入空格 / ctrl + shift + [ (对选中行可用)</li>\n<li>引用内容：&gt; + 空格 / ctrl + shift + q (对选中内容可用)</li>\n<li>任务列表：-[空格]空格 文字</li>\n<li>标题：ctrl + 数字</li>\n<li>表格：ctrl + t</li>\n<li>目录：[TOC]</li>\n<li>任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）</li>\n<li>选中一整行：ctrl + l (字母L)</li>\n<li>选中单词：ctrl + d</li>\n<li>选中相同格式的文字：ctrl + e</li>\n<li>跳转到文章开头：ctrl + home</li>\n<li>跳转到文章结尾：ctrl + end</li>\n<li>搜索：ctrl + f</li>\n<li>替换：ctrl + h</li>\n<li>引用：输入&gt;之后输入空格</li>\n<li>代码块： ctrl + shift + k</li>\n<li>行内代码：ctrl + shift + ` (对选中行可用)</li>\n<li>加粗：ctrl + b</li>\n<li>倾斜：ctrl + i</li>\n<li>下划线：ctrl + u</li>\n<li>删除线：alt + shift + 5</li>\n<li>插入链接：ctrl + k</li>\n<li>插入公式：ctrl + shift + m</li>\n<li>插入图片：ctrl + shift + i</li>\n<li>保存：ctrl + s</li>\n<li>另存为：ctrl + shift + s</li>\n</ul>\n<h4 id=\"编辑模式快捷键\"><a href=\"#编辑模式快捷键\" class=\"headerlink\" title=\"编辑模式快捷键\"></a>编辑模式快捷键</h4><ul>\n<li>源码模式编辑切换：ctrl + /</li>\n<li>打字机模式切换：F9</li>\n<li>专注模式切换：F8</li>\n<li>全屏模式切换：F11</li>\n<li>Typora内部窗口焦点切换：ctrl + tab</li>\n<li>侧边栏显示/隐藏切换：ctrl + shift + L</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h2><h3 id=\"一-标-题\"><a href=\"#一-标-题\" class=\"headerlink\" title=\"一.标 题:\"></a>一.标 题:</h3><pre><code class=\"shell\"> 1.1 一级标题 #+空格+文本+回车 \n\n 1.2 二级标题 ##+空格+文本+回车 \n\n 1.3 三级标题 ###+空格+文本+回车 \n\n .....以此类推\n</code></pre>\n<hr>\n<h3 id=\"二-字体\"><a href=\"#二-字体\" class=\"headerlink\" title=\"二.字体\"></a>二.字体</h3><pre><code class=\"shell\">粗体：文本两边加**\neg: **Hello World**\n</code></pre>\n<p><strong>Hello World</strong></p>\n<hr>\n<pre><code class=\"shell\">斜体：文本两边加*\neg: *Hello World*\n</code></pre>\n<p>   <em>Hello World</em></p>\n<hr>\n<pre><code class=\"shell\">粗体加斜体：文本两边加***\neg: ***Hello World***\n</code></pre>\n<p><strong><em>Hello World</em></strong></p>\n<hr>\n<pre><code class=\"shell\">中间横线：文本两边加~~\neg: ~~Hello World~~\n</code></pre>\n<p> <del>Hello World</del></p>\n<hr>\n<h3 id=\"三-引用\"><a href=\"#三-引用\" class=\"headerlink\" title=\"三.引用\"></a>三.引用</h3><pre><code class=\"shell\">右箭头后面接上文本&gt;\neg: &gt;与君共赴，万里征程。\n</code></pre>\n<blockquote>\n<p>与君共赴，万里征程。</p>\n</blockquote>\n<hr>\n<h3 id=\"四-分割线\"><a href=\"#四-分割线\" class=\"headerlink\" title=\"四.分割线\"></a>四.分割线</h3><pre><code class=\"shell\">三个-（减号）表示分割线\neg: ---\n</code></pre>\n<hr>\n<pre><code class=\"shell\">三个*（减号）表示分割线\neg: ***\n</code></pre>\n<hr>\n<h3 id=\"五-图片\"><a href=\"#五-图片\" class=\"headerlink\" title=\"五.图片\"></a>五.图片</h3><pre><code class=\"shell\">插入图片：!+[图片名字]+(图片路径)\neg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80)\n</code></pre>\n<p><img src=\"https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80\" alt=\"示例1\"></p>\n<hr>\n<h3 id=\"六-超链接\"><a href=\"#六-超链接\" class=\"headerlink\" title=\"六. 超链接\"></a>六. 超链接</h3><pre><code class=\"shell\">语法：[标题](链接地址)\neg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)\n</code></pre>\n<p><a href=\"http://110.42.139.30:8000/index.php/2022/03/06/13\" target=\"_blank\" rel=\"noopener\">idea快捷键</a></p>\n<hr>\n<h3 id=\"七-列表\"><a href=\"#七-列表\" class=\"headerlink\" title=\"七. 列表\"></a>七. 列表</h3><h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><pre><code class=\"shell\">语法：1 + . + 空格\n</code></pre>\n<ol>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ol>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><pre><code class=\"shell\">语法： - + 空格\n</code></pre>\n<ul>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ul>\n<hr>\n<h3 id=\"八-表格\"><a href=\"#八-表格\" class=\"headerlink\" title=\"八.表格\"></a>八.表格</h3><pre><code class=\"shell\">语法：\n| 名字 | 性别 | 生日     |\n\n| ---- | ---- | -------- |\n\n| 张三 | 男   | 2000.1.1 |\n</code></pre>\n<hr>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>性别</th>\n<th>生日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>男</td>\n<td>2000.1.1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"九-代码\"><a href=\"#九-代码\" class=\"headerlink\" title=\"九.代码\"></a>九.代码</h3><pre><code class=\"shell\">语法 ``` + 编程语言名称\neg ```shell\n</code></pre>\n<pre><code class=\"java\">public\n</code></pre>\n<h3 id=\"十-快捷键\"><a href=\"#十-快捷键\" class=\"headerlink\" title=\"十.快捷键\"></a>十.快捷键</h3><h4 id=\"文本编辑快捷键\"><a href=\"#文本编辑快捷键\" class=\"headerlink\" title=\"文本编辑快捷键\"></a>文本编辑快捷键</h4><ul>\n<li>无序列表：输入-之后输入空格 / ctrl + shift + ] (对选中行可用)</li>\n<li>有序列表：输入数字 + “.”之后输入空格 / ctrl + shift + [ (对选中行可用)</li>\n<li>引用内容：&gt; + 空格 / ctrl + shift + q (对选中内容可用)</li>\n<li>任务列表：-[空格]空格 文字</li>\n<li>标题：ctrl + 数字</li>\n<li>表格：ctrl + t</li>\n<li>目录：[TOC]</li>\n<li>任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）</li>\n<li>选中一整行：ctrl + l (字母L)</li>\n<li>选中单词：ctrl + d</li>\n<li>选中相同格式的文字：ctrl + e</li>\n<li>跳转到文章开头：ctrl + home</li>\n<li>跳转到文章结尾：ctrl + end</li>\n<li>搜索：ctrl + f</li>\n<li>替换：ctrl + h</li>\n<li>引用：输入&gt;之后输入空格</li>\n<li>代码块： ctrl + shift + k</li>\n<li>行内代码：ctrl + shift + ` (对选中行可用)</li>\n<li>加粗：ctrl + b</li>\n<li>倾斜：ctrl + i</li>\n<li>下划线：ctrl + u</li>\n<li>删除线：alt + shift + 5</li>\n<li>插入链接：ctrl + k</li>\n<li>插入公式：ctrl + shift + m</li>\n<li>插入图片：ctrl + shift + i</li>\n<li>保存：ctrl + s</li>\n<li>另存为：ctrl + shift + s</li>\n</ul>\n<h4 id=\"编辑模式快捷键\"><a href=\"#编辑模式快捷键\" class=\"headerlink\" title=\"编辑模式快捷键\"></a>编辑模式快捷键</h4><ul>\n<li>源码模式编辑切换：ctrl + /</li>\n<li>打字机模式切换：F9</li>\n<li>专注模式切换：F8</li>\n<li>全屏模式切换：F11</li>\n<li>Typora内部窗口焦点切换：ctrl + tab</li>\n<li>侧边栏显示/隐藏切换：ctrl + shift + L</li>\n</ul>\n"},{"title":"计算机硬件知识","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"date":"2022-08-24T14:36:40.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqvhfrmj21kw0w0ne1.jpg"],"_content":"\n## 计算机硬件\n\n### 冯诺依曼体系结构\n\n![冯诺依曼体系结构](https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png)\n\n**冯诺依曼体系结构是现代计算机的基础**\n\n1. 输入数据和程序的**输入设备**\n2. 记忆程序和数据的**存储器**\n3. 完成数据加工处理的**运算器**\n4. 控制程序执行的**控制器**\n5. 输出处理结果的**输出设备**\n\n---\n\n\n**一、中央处理器**（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。\n\nCPU 包括\n\n1. **控制单元**：用于控制和协调其他组件\n2. **算术逻辑单元**：用于完成数值运算\n\n每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）\n\n1 Hz相当于一个脉冲。1KHz = 1024Hz；1MHz = 1024 KHz；\n\n---\n\n**二、存储设备**\n\n- 内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。\n- 存储设备主要有：\n\n1. **磁盘驱动器**                   ->硬盘\n2. **光盘驱动器**                   ->CD和DVD\n3. **USB闪存驱动器**           ->U盘\n\n---\n\n**三、内存**\n\n比特（bit）和字节（byte）\n\n- **一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。**\n- **计算机中最基本的存储单位是字节（byte） **\n\n​\t\t1Byte = 8 bit；\n\n​\t\t1KB = 1024B；\t\t1MB = 1024 KB；\n\n​\t\t1GB = 1024MB；\t1TB = 1024GB\n\n- **一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。**\n- 内存读取速度比硬盘读取速度快好多好多，**而CPU的读取速度比内存又要快好多好多**\n\n---\n\n**计算机输入输出设备**\n\n- 输入设备：鼠标 键盘\n- 输出设备：显示器和打印机\n\n---\n\n**计算机两大鼻鼻祖**\n\n1. 阿兰图灵：计算机科学之父和人工智能之父\n2. 冯诺依曼：计算机之父和博弈论之父\n\n---\n\n**操作系统**\n\n- 操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。\n- 硬件、操作系统、应用程序控制计算机的活动。\n","source":"_posts/计算机硬件知识.md","raw":"---\ntitle: 计算机硬件知识\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\ndate: 2022-08-24 22:36:40\nauthorAbout:\nauthorDesc:\ntags: 硬件\nkeywords:\ndescription:\nphotos: https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqvhfrmj21kw0w0ne1.jpg\n---\n\n## 计算机硬件\n\n### 冯诺依曼体系结构\n\n![冯诺依曼体系结构](https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png)\n\n**冯诺依曼体系结构是现代计算机的基础**\n\n1. 输入数据和程序的**输入设备**\n2. 记忆程序和数据的**存储器**\n3. 完成数据加工处理的**运算器**\n4. 控制程序执行的**控制器**\n5. 输出处理结果的**输出设备**\n\n---\n\n\n**一、中央处理器**（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。\n\nCPU 包括\n\n1. **控制单元**：用于控制和协调其他组件\n2. **算术逻辑单元**：用于完成数值运算\n\n每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）\n\n1 Hz相当于一个脉冲。1KHz = 1024Hz；1MHz = 1024 KHz；\n\n---\n\n**二、存储设备**\n\n- 内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。\n- 存储设备主要有：\n\n1. **磁盘驱动器**                   ->硬盘\n2. **光盘驱动器**                   ->CD和DVD\n3. **USB闪存驱动器**           ->U盘\n\n---\n\n**三、内存**\n\n比特（bit）和字节（byte）\n\n- **一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。**\n- **计算机中最基本的存储单位是字节（byte） **\n\n​\t\t1Byte = 8 bit；\n\n​\t\t1KB = 1024B；\t\t1MB = 1024 KB；\n\n​\t\t1GB = 1024MB；\t1TB = 1024GB\n\n- **一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。**\n- 内存读取速度比硬盘读取速度快好多好多，**而CPU的读取速度比内存又要快好多好多**\n\n---\n\n**计算机输入输出设备**\n\n- 输入设备：鼠标 键盘\n- 输出设备：显示器和打印机\n\n---\n\n**计算机两大鼻鼻祖**\n\n1. 阿兰图灵：计算机科学之父和人工智能之父\n2. 冯诺依曼：计算机之父和博弈论之父\n\n---\n\n**操作系统**\n\n- 操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。\n- 硬件、操作系统、应用程序控制计算机的活动。\n","slug":"计算机硬件知识","published":1,"updated":"2022-08-25T15:06:07.163Z","layout":"post","link":"","_id":"cl796hii5002dgwrwr741xxxi","content":"<h2 id=\"计算机硬件\"><a href=\"#计算机硬件\" class=\"headerlink\" title=\"计算机硬件\"></a>计算机硬件</h2><h3 id=\"冯诺依曼体系结构\"><a href=\"#冯诺依曼体系结构\" class=\"headerlink\" title=\"冯诺依曼体系结构\"></a>冯诺依曼体系结构</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png\" alt=\"冯诺依曼体系结构\"></p>\n<p><strong>冯诺依曼体系结构是现代计算机的基础</strong></p>\n<ol>\n<li>输入数据和程序的<strong>输入设备</strong></li>\n<li>记忆程序和数据的<strong>存储器</strong></li>\n<li>完成数据加工处理的<strong>运算器</strong></li>\n<li>控制程序执行的<strong>控制器</strong></li>\n<li>输出处理结果的<strong>输出设备</strong></li>\n</ol>\n<hr>\n<p><strong>一、中央处理器</strong>（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。</p>\n<p>CPU 包括</p>\n<ol>\n<li><strong>控制单元</strong>：用于控制和协调其他组件</li>\n<li><strong>算术逻辑单元</strong>：用于完成数值运算</li>\n</ol>\n<p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）</p>\n<p>1 Hz相当于一个脉冲。1KHz = 1024Hz；1MHz = 1024 KHz；</p>\n<hr>\n<p><strong>二、存储设备</strong></p>\n<ul>\n<li>内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。</li>\n<li>存储设备主要有：</li>\n</ul>\n<ol>\n<li><strong>磁盘驱动器</strong>                   -&gt;硬盘</li>\n<li><strong>光盘驱动器</strong>                   -&gt;CD和DVD</li>\n<li><strong>USB闪存驱动器</strong>           -&gt;U盘</li>\n</ol>\n<hr>\n<p><strong>三、内存</strong></p>\n<p>比特（bit）和字节（byte）</p>\n<ul>\n<li><strong>一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。</strong></li>\n<li><strong>计算机中最基本的存储单位是字节（byte） </strong></li>\n</ul>\n<p>​        1Byte = 8 bit；</p>\n<p>​        1KB = 1024B；        1MB = 1024 KB；</p>\n<p>​        1GB = 1024MB；    1TB = 1024GB</p>\n<ul>\n<li><strong>一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。</strong></li>\n<li>内存读取速度比硬盘读取速度快好多好多，<strong>而CPU的读取速度比内存又要快好多好多</strong></li>\n</ul>\n<hr>\n<p><strong>计算机输入输出设备</strong></p>\n<ul>\n<li>输入设备：鼠标 键盘</li>\n<li>输出设备：显示器和打印机</li>\n</ul>\n<hr>\n<p><strong>计算机两大鼻鼻祖</strong></p>\n<ol>\n<li>阿兰图灵：计算机科学之父和人工智能之父</li>\n<li>冯诺依曼：计算机之父和博弈论之父</li>\n</ol>\n<hr>\n<p><strong>操作系统</strong></p>\n<ul>\n<li>操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。</li>\n<li>硬件、操作系统、应用程序控制计算机的活动。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计算机硬件\"><a href=\"#计算机硬件\" class=\"headerlink\" title=\"计算机硬件\"></a>计算机硬件</h2><h3 id=\"冯诺依曼体系结构\"><a href=\"#冯诺依曼体系结构\" class=\"headerlink\" title=\"冯诺依曼体系结构\"></a>冯诺依曼体系结构</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png\" alt=\"冯诺依曼体系结构\"></p>\n<p><strong>冯诺依曼体系结构是现代计算机的基础</strong></p>\n<ol>\n<li>输入数据和程序的<strong>输入设备</strong></li>\n<li>记忆程序和数据的<strong>存储器</strong></li>\n<li>完成数据加工处理的<strong>运算器</strong></li>\n<li>控制程序执行的<strong>控制器</strong></li>\n<li>输出处理结果的<strong>输出设备</strong></li>\n</ol>\n<hr>\n<p><strong>一、中央处理器</strong>（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。</p>\n<p>CPU 包括</p>\n<ol>\n<li><strong>控制单元</strong>：用于控制和协调其他组件</li>\n<li><strong>算术逻辑单元</strong>：用于完成数值运算</li>\n</ol>\n<p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）</p>\n<p>1 Hz相当于一个脉冲。1KHz = 1024Hz；1MHz = 1024 KHz；</p>\n<hr>\n<p><strong>二、存储设备</strong></p>\n<ul>\n<li>内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。</li>\n<li>存储设备主要有：</li>\n</ul>\n<ol>\n<li><strong>磁盘驱动器</strong>                   -&gt;硬盘</li>\n<li><strong>光盘驱动器</strong>                   -&gt;CD和DVD</li>\n<li><strong>USB闪存驱动器</strong>           -&gt;U盘</li>\n</ol>\n<hr>\n<p><strong>三、内存</strong></p>\n<p>比特（bit）和字节（byte）</p>\n<ul>\n<li><strong>一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。</strong></li>\n<li><strong>计算机中最基本的存储单位是字节（byte） </strong></li>\n</ul>\n<p>​        1Byte = 8 bit；</p>\n<p>​        1KB = 1024B；        1MB = 1024 KB；</p>\n<p>​        1GB = 1024MB；    1TB = 1024GB</p>\n<ul>\n<li><strong>一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。</strong></li>\n<li>内存读取速度比硬盘读取速度快好多好多，<strong>而CPU的读取速度比内存又要快好多好多</strong></li>\n</ul>\n<hr>\n<p><strong>计算机输入输出设备</strong></p>\n<ul>\n<li>输入设备：鼠标 键盘</li>\n<li>输出设备：显示器和打印机</li>\n</ul>\n<hr>\n<p><strong>计算机两大鼻鼻祖</strong></p>\n<ol>\n<li>阿兰图灵：计算机科学之父和人工智能之父</li>\n<li>冯诺依曼：计算机之父和博弈论之父</li>\n</ol>\n<hr>\n<p><strong>操作系统</strong></p>\n<ul>\n<li>操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。</li>\n<li>硬件、操作系统、应用程序控制计算机的活动。</li>\n</ul>\n"},{"title":"排序算法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqi081jj21kw0w04cl.jpg"],"date":"2022-08-25T14:42:35.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 冒泡排序\n\n### 代码：\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 冒泡排序的优化\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {              //确定冒泡次数\n            //如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。\n            //冒泡步骤\n            boolean flag = true;\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    flag = false;\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if (flag){\n                break;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 选择排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:40\n * @Description\n */\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,-2,4,5};\n        selectSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void selectSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {          //开始选择排序\n            //初始 min = arr[i]; mindex = i;\n            int min = arr[i];\n            int mindex = i;\n            for (int j = i + 1; j < arr.length - 1 ; j++){\n                //将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标\n                if (min > arr[j]){\n                    min = arr[j];\n                    mindex = j;\n                }\n            }\n            //如果 最小值的下标不等于 i 则交换 这两个元素的值\n            if (mindex != i){\n                arr[mindex] = arr[i];\n                arr[i] = min;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![选择排序](https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png)\n\n---\n\n## 插入排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 18:08\n * @Description\n */\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,5,4,-1};\n        insertSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void insertSort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            //初始化insertdex  和  insertvalue\n            int insertdex = i;\n            int insertvalue = arr[i];\n            while (insertdex > 0 && insertvalue < arr[insertdex - 1]){      //while循环，当insertdex > 0 以及 insertvalue 小于 其前一个值时进入循环\n                // 将 前一个值 赋值给 下标为 insertdex的数组空间内\n                arr[insertdex] = arr[insertdex - 1];\n                // 下标往前移一位\n                insertdex--;\n            }\n            //当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]\n            arr[insertdex] = insertvalue;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![插入排序](https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png)\n\n---\n\n## 快速排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 19:34\n * @Description\n */\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] arr ={1,3,-2,4,5,6};\n        quickSort(arr,0,arr.length - 1);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void quickSort(int[] arr,int left, int right){\n        //递归退出条件\n        if (left >= right){\n            return;\n        }\n        //左指针与右指针\n        int l = left;\n        int r = right;\n        while (l < r){\n            while (l < r && arr[r] >= arr[left])r--;            //右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移\n            while (l < r && arr[l] <= arr[left])l++;            //左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移\n            if (l == r){                                        //当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据\n                int temp = arr[l];\n                arr[l] = arr[left];\n                arr[left] = temp;\n            }else{                                              //两个指针不相等时则交换 两指针内的数据 \n                int temp = arr[r];\n                arr[r] = arr[l];\n                arr[l] = temp;\n            }\n        }\n        quickSort(arr,left,l-1);                           //通过递归，将左边的元素进行快排\n        quickSort(arr,r+1,right);                           //通过递归，将右边的元素进行快排。\n    }\n}\n\n```\n\n### 运行结果\n\n![快速排序](https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png)\n\n---\n\n## 归并排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 23:53\n * @Description\n */\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,4,9,7};\n        int[] temp = new int[arr.length];\n        mergeSort(arr,0, arr.length - 1, temp);\n        System.out.println(Arrays.toString(arr));\n    }\n\n\n    public static void mergeSort(int[] arr, int left, int right, int[] temp){\n        if (left < right){\n            int mid = (left + right) / 2;\n            //分\n            mergeSort(arr,0,mid,temp);          //将左边部分继续分\n            mergeSort(arr,mid+1,right,temp);    //将右边部分继续分\n            //合\n            merge(arr,left,mid,right,temp);\n        }\n    }\n    //合\n    public static void merge(int[] arr, int left, int mid, int right, int[] temp) {\n        int i = left;\n        int j = mid+1;\n        int t = 0;                          //临时数组下标索引\n        //先将两部分合并\n        while (i <= mid && j <= right){\n            if (arr[i] <= arr[j]){\n                temp[t] = arr[i];\n                i++;t++;\n            }else {\n                temp[t] = arr[j];\n                j++;t++;\n            }\n        }\n        //如果左边没有合并完全，则接着i继续合并\n        while (i <= mid){\n            temp[t] = arr[i];\n            t++;i++;\n        }\n        //如果右边没有合并完全，则接着j继续合并\n        while (j <= right){\n            temp[t] = arr[j];\n            t++;j++;\n        }\n        //接着将temp中的数组填充到指定位置\n        t = 0;\n        int templeft = left;\n        while (templeft <= right){\n            arr[templeft] = temp[t];\n            t++;templeft++;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![归并排序](https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png)\n\n---\n\n## 基数排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/17/ 0:45\n * @Description\n */\npublic class RedixSort {\n    public static void main(String[] args) {\n        int[] arr = {10023,3225,302,155,9,3326,33,5987,663,15596};\n        redixSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void redixSort(int[] arr){\n        int[][] bucket = new int[10][arr.length - 1];               //桶里面所存的具体数值\n        int[] bucketElementCounts = new int[10];                    //每个桶所存的元素个数\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if(max < arr[i]) max = arr[i];\n        }\n\n        int maxCount = (max + \"\").length();                         //获取最大数的位数\n        for (int i = 0; i < maxCount; i++) {\n            //把数组中的数都放在桶里面\n            for (int k = 0; k < arr.length; k++) {\n                int value = arr[k] / (int) Math.pow(10, i) % 10;\n\n                bucket[value][bucketElementCounts[value]] = arr[k];\n                bucketElementCounts[value]++;\n            }\n            int index = 0;\n            for (int k = 0; k < bucketElementCounts.length; k++) {\n                if(bucketElementCounts[k] != 0){\n                    for (int x = 0; x < bucketElementCounts[k]; x++) {\n                        arr[index] = bucket[k][x];\n                        index++;\n                    }\n                }\n                bucketElementCounts[k] = 0;\n            }\n        }\n\n    }\n}\n```\n\n### 运行结果\n\n![基数排序](https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png)\n\n---\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqi081jj21kw0w04cl.jpg'\ndate: 2022-08-25 22:42:35\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- 排序算法\nkeywords:\ndescription:\n---\n\n## 冒泡排序\n\n### 代码：\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 冒泡排序的优化\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {              //确定冒泡次数\n            //如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。\n            //冒泡步骤\n            boolean flag = true;\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    flag = false;\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if (flag){\n                break;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 选择排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:40\n * @Description\n */\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,-2,4,5};\n        selectSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void selectSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {          //开始选择排序\n            //初始 min = arr[i]; mindex = i;\n            int min = arr[i];\n            int mindex = i;\n            for (int j = i + 1; j < arr.length - 1 ; j++){\n                //将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标\n                if (min > arr[j]){\n                    min = arr[j];\n                    mindex = j;\n                }\n            }\n            //如果 最小值的下标不等于 i 则交换 这两个元素的值\n            if (mindex != i){\n                arr[mindex] = arr[i];\n                arr[i] = min;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![选择排序](https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png)\n\n---\n\n## 插入排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 18:08\n * @Description\n */\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,5,4,-1};\n        insertSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void insertSort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            //初始化insertdex  和  insertvalue\n            int insertdex = i;\n            int insertvalue = arr[i];\n            while (insertdex > 0 && insertvalue < arr[insertdex - 1]){      //while循环，当insertdex > 0 以及 insertvalue 小于 其前一个值时进入循环\n                // 将 前一个值 赋值给 下标为 insertdex的数组空间内\n                arr[insertdex] = arr[insertdex - 1];\n                // 下标往前移一位\n                insertdex--;\n            }\n            //当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]\n            arr[insertdex] = insertvalue;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![插入排序](https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png)\n\n---\n\n## 快速排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 19:34\n * @Description\n */\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] arr ={1,3,-2,4,5,6};\n        quickSort(arr,0,arr.length - 1);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void quickSort(int[] arr,int left, int right){\n        //递归退出条件\n        if (left >= right){\n            return;\n        }\n        //左指针与右指针\n        int l = left;\n        int r = right;\n        while (l < r){\n            while (l < r && arr[r] >= arr[left])r--;            //右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移\n            while (l < r && arr[l] <= arr[left])l++;            //左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移\n            if (l == r){                                        //当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据\n                int temp = arr[l];\n                arr[l] = arr[left];\n                arr[left] = temp;\n            }else{                                              //两个指针不相等时则交换 两指针内的数据 \n                int temp = arr[r];\n                arr[r] = arr[l];\n                arr[l] = temp;\n            }\n        }\n        quickSort(arr,left,l-1);                           //通过递归，将左边的元素进行快排\n        quickSort(arr,r+1,right);                           //通过递归，将右边的元素进行快排。\n    }\n}\n\n```\n\n### 运行结果\n\n![快速排序](https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png)\n\n---\n\n## 归并排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 23:53\n * @Description\n */\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,4,9,7};\n        int[] temp = new int[arr.length];\n        mergeSort(arr,0, arr.length - 1, temp);\n        System.out.println(Arrays.toString(arr));\n    }\n\n\n    public static void mergeSort(int[] arr, int left, int right, int[] temp){\n        if (left < right){\n            int mid = (left + right) / 2;\n            //分\n            mergeSort(arr,0,mid,temp);          //将左边部分继续分\n            mergeSort(arr,mid+1,right,temp);    //将右边部分继续分\n            //合\n            merge(arr,left,mid,right,temp);\n        }\n    }\n    //合\n    public static void merge(int[] arr, int left, int mid, int right, int[] temp) {\n        int i = left;\n        int j = mid+1;\n        int t = 0;                          //临时数组下标索引\n        //先将两部分合并\n        while (i <= mid && j <= right){\n            if (arr[i] <= arr[j]){\n                temp[t] = arr[i];\n                i++;t++;\n            }else {\n                temp[t] = arr[j];\n                j++;t++;\n            }\n        }\n        //如果左边没有合并完全，则接着i继续合并\n        while (i <= mid){\n            temp[t] = arr[i];\n            t++;i++;\n        }\n        //如果右边没有合并完全，则接着j继续合并\n        while (j <= right){\n            temp[t] = arr[j];\n            t++;j++;\n        }\n        //接着将temp中的数组填充到指定位置\n        t = 0;\n        int templeft = left;\n        while (templeft <= right){\n            arr[templeft] = temp[t];\n            t++;templeft++;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![归并排序](https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png)\n\n---\n\n## 基数排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/17/ 0:45\n * @Description\n */\npublic class RedixSort {\n    public static void main(String[] args) {\n        int[] arr = {10023,3225,302,155,9,3326,33,5987,663,15596};\n        redixSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void redixSort(int[] arr){\n        int[][] bucket = new int[10][arr.length - 1];               //桶里面所存的具体数值\n        int[] bucketElementCounts = new int[10];                    //每个桶所存的元素个数\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if(max < arr[i]) max = arr[i];\n        }\n\n        int maxCount = (max + \"\").length();                         //获取最大数的位数\n        for (int i = 0; i < maxCount; i++) {\n            //把数组中的数都放在桶里面\n            for (int k = 0; k < arr.length; k++) {\n                int value = arr[k] / (int) Math.pow(10, i) % 10;\n\n                bucket[value][bucketElementCounts[value]] = arr[k];\n                bucketElementCounts[value]++;\n            }\n            int index = 0;\n            for (int k = 0; k < bucketElementCounts.length; k++) {\n                if(bucketElementCounts[k] != 0){\n                    for (int x = 0; x < bucketElementCounts[k]; x++) {\n                        arr[index] = bucket[k][x];\n                        index++;\n                    }\n                }\n                bucketElementCounts[k] = 0;\n            }\n        }\n\n    }\n}\n```\n\n### 运行结果\n\n![基数排序](https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png)\n\n---\n","slug":"排序算法","published":1,"updated":"2022-08-25T15:05:37.578Z","layout":"post","link":"","_id":"cl796hii6002ggwrw466qmtes","content":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish: [\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"冒泡排序的优化\"><a href=\"#冒泡排序的优化\" class=\"headerlink\" title=\"冒泡排序的优化\"></a>冒泡排序的优化</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish: [\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>              <span class=\"token comment\" spellcheck=\"true\">//确定冒泡次数</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。</span>\n            <span class=\"token comment\" spellcheck=\"true\">//冒泡步骤</span>\n            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:40\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SelectSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>          <span class=\"token comment\" spellcheck=\"true\">//开始选择排序</span>\n            <span class=\"token comment\" spellcheck=\"true\">//初始 min = arr[i]; mindex = i;</span>\n            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> mindex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    mindex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果 最小值的下标不等于 i 则交换 这两个元素的值</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mindex <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>mindex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png\" alt=\"选择排序\"></p>\n<hr>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 18:08\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//初始化insertdex  和  insertvalue</span>\n            <span class=\"token keyword\">int</span> insertdex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> insertvalue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>insertdex <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> insertvalue <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>insertdex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token comment\" spellcheck=\"true\">//while循环，当insertdex > 0 以及 insertvalue 小于 其前一个值时进入循环</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 将 前一个值 赋值给 下标为 insertdex的数组空间内</span>\n                arr<span class=\"token punctuation\">[</span>insertdex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>insertdex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 下标往前移一位</span>\n                insertdex<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]</span>\n            arr<span class=\"token punctuation\">[</span>insertdex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> insertvalue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"运行结果-3\"><a href=\"#运行结果-3\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png\" alt=\"插入排序\"></p>\n<hr>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 19:34\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//递归退出条件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//左指针与右指针</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                                        <span class=\"token comment\" spellcheck=\"true\">//当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>                                              <span class=\"token comment\" spellcheck=\"true\">//两个指针不相等时则交换 两指针内的数据 </span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>l<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\" spellcheck=\"true\">//通过递归，将左边的元素进行快排</span>\n        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\" spellcheck=\"true\">//通过递归，将右边的元素进行快排。</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3 id=\"运行结果-4\"><a href=\"#运行结果-4\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png\" alt=\"快速排序\"></p>\n<hr>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Arrays<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 23:53\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergeSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//分</span>\n            <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">//将左边部分继续分</span>\n            <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//将右边部分继续分</span>\n            <span class=\"token comment\" spellcheck=\"true\">//合</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//合</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\" spellcheck=\"true\">//临时数组下标索引</span>\n        <span class=\"token comment\" spellcheck=\"true\">//先将两部分合并</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果左边没有合并完全，则接着i继续合并</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果右边没有合并完全，则接着j继续合并</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//接着将temp中的数组填充到指定位置</span>\n        t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> templeft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>templeft <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            arr<span class=\"token punctuation\">[</span>templeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>templeft<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"运行结果-5\"><a href=\"#运行结果-5\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png\" alt=\"归并排序\"></p>\n<hr>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Arrays<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/17/ 0:45\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedixSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10023</span><span class=\"token punctuation\">,</span><span class=\"token number\">3225</span><span class=\"token punctuation\">,</span><span class=\"token number\">302</span><span class=\"token punctuation\">,</span><span class=\"token number\">155</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">3326</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">5987</span><span class=\"token punctuation\">,</span><span class=\"token number\">663</span><span class=\"token punctuation\">,</span><span class=\"token number\">15596</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">redixSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">redixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\" spellcheck=\"true\">//桶里面所存的具体数值</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucketElementCounts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">//每个桶所存的元素个数</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> maxCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\" spellcheck=\"true\">//获取最大数的位数</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//把数组中的数都放在桶里面</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n                bucket<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bucketElementCounts<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                bucketElementCounts<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"运行结果-6\"><a href=\"#运行结果-6\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png\" alt=\"基数排序\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><pre><code class=\"java\">package com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(&quot;finish: [&quot; );\n        for (int x : arr) {\n            System.out.print(x + &quot;\\t&quot;);\n        }\n        System.out.println(&quot;]&quot;);\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i &lt; arr.length - 1; i++) {\n            for (int j = 0; j &lt; arr.length - 1 -i; j++){\n                if (arr[j] &gt; arr[j+1])\n                {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"冒泡排序的优化\"><a href=\"#冒泡排序的优化\" class=\"headerlink\" title=\"冒泡排序的优化\"></a>冒泡排序的优化</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(&quot;finish: [&quot; );\n        for (int x : arr) {\n            System.out.print(x + &quot;\\t&quot;);\n        }\n        System.out.println(&quot;]&quot;);\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i &lt; arr.length - 1; i++) {              //确定冒泡次数\n            //如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。\n            //冒泡步骤\n            boolean flag = true;\n            for (int j = 0; j &lt; arr.length - 1 -i; j++){\n                if (arr[j] &gt; arr[j+1])\n                {\n                    flag = false;\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if (flag){\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:40\n * @Description\n */\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,-2,4,5};\n        selectSort(arr);\n        for (int i : arr) {\n            System.out.print(i + &quot; &quot;);\n        }\n    }\n\n    public static void selectSort(int[] arr){\n        for (int i = 0; i &lt; arr.length - 1; i++) {          //开始选择排序\n            //初始 min = arr[i]; mindex = i;\n            int min = arr[i];\n            int mindex = i;\n            for (int j = i + 1; j &lt; arr.length - 1 ; j++){\n                //将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标\n                if (min &gt; arr[j]){\n                    min = arr[j];\n                    mindex = j;\n                }\n            }\n            //如果 最小值的下标不等于 i 则交换 这两个元素的值\n            if (mindex != i){\n                arr[mindex] = arr[i];\n                arr[i] = min;\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png\" alt=\"选择排序\"></p>\n<hr>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 18:08\n * @Description\n */\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,5,4,-1};\n        insertSort(arr);\n        for (int i : arr) {\n            System.out.print(i + &quot; &quot;);\n        }\n    }\n\n    public static void insertSort(int[] arr) {\n        for (int i = 1; i &lt; arr.length; i++) {\n            //初始化insertdex  和  insertvalue\n            int insertdex = i;\n            int insertvalue = arr[i];\n            while (insertdex &gt; 0 &amp;&amp; insertvalue &lt; arr[insertdex - 1]){      //while循环，当insertdex &gt; 0 以及 insertvalue 小于 其前一个值时进入循环\n                // 将 前一个值 赋值给 下标为 insertdex的数组空间内\n                arr[insertdex] = arr[insertdex - 1];\n                // 下标往前移一位\n                insertdex--;\n            }\n            //当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]\n            arr[insertdex] = insertvalue;\n        }\n    }\n}\n</code></pre>\n<h3 id=\"运行结果-3\"><a href=\"#运行结果-3\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png\" alt=\"插入排序\"></p>\n<hr>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 19:34\n * @Description\n */\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] arr ={1,3,-2,4,5,6};\n        quickSort(arr,0,arr.length - 1);\n        for (int i : arr) {\n            System.out.print(i + &quot; &quot;);\n        }\n    }\n\n    public static void quickSort(int[] arr,int left, int right){\n        //递归退出条件\n        if (left &gt;= right){\n            return;\n        }\n        //左指针与右指针\n        int l = left;\n        int r = right;\n        while (l &lt; r){\n            while (l &lt; r &amp;&amp; arr[r] &gt;= arr[left])r--;            //右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移\n            while (l &lt; r &amp;&amp; arr[l] &lt;= arr[left])l++;            //左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移\n            if (l == r){                                        //当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据\n                int temp = arr[l];\n                arr[l] = arr[left];\n                arr[left] = temp;\n            }else{                                              //两个指针不相等时则交换 两指针内的数据 \n                int temp = arr[r];\n                arr[r] = arr[l];\n                arr[l] = temp;\n            }\n        }\n        quickSort(arr,left,l-1);                           //通过递归，将左边的元素进行快排\n        quickSort(arr,r+1,right);                           //通过递归，将右边的元素进行快排。\n    }\n}\n\n</code></pre>\n<h3 id=\"运行结果-4\"><a href=\"#运行结果-4\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png\" alt=\"快速排序\"></p>\n<hr>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 23:53\n * @Description\n */\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,4,9,7};\n        int[] temp = new int[arr.length];\n        mergeSort(arr,0, arr.length - 1, temp);\n        System.out.println(Arrays.toString(arr));\n    }\n\n\n    public static void mergeSort(int[] arr, int left, int right, int[] temp){\n        if (left &lt; right){\n            int mid = (left + right) / 2;\n            //分\n            mergeSort(arr,0,mid,temp);          //将左边部分继续分\n            mergeSort(arr,mid+1,right,temp);    //将右边部分继续分\n            //合\n            merge(arr,left,mid,right,temp);\n        }\n    }\n    //合\n    public static void merge(int[] arr, int left, int mid, int right, int[] temp) {\n        int i = left;\n        int j = mid+1;\n        int t = 0;                          //临时数组下标索引\n        //先将两部分合并\n        while (i &lt;= mid &amp;&amp; j &lt;= right){\n            if (arr[i] &lt;= arr[j]){\n                temp[t] = arr[i];\n                i++;t++;\n            }else {\n                temp[t] = arr[j];\n                j++;t++;\n            }\n        }\n        //如果左边没有合并完全，则接着i继续合并\n        while (i &lt;= mid){\n            temp[t] = arr[i];\n            t++;i++;\n        }\n        //如果右边没有合并完全，则接着j继续合并\n        while (j &lt;= right){\n            temp[t] = arr[j];\n            t++;j++;\n        }\n        //接着将temp中的数组填充到指定位置\n        t = 0;\n        int templeft = left;\n        while (templeft &lt;= right){\n            arr[templeft] = temp[t];\n            t++;templeft++;\n        }\n    }\n}\n</code></pre>\n<h3 id=\"运行结果-5\"><a href=\"#运行结果-5\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png\" alt=\"归并排序\"></p>\n<hr>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"java\">package com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/17/ 0:45\n * @Description\n */\npublic class RedixSort {\n    public static void main(String[] args) {\n        int[] arr = {10023,3225,302,155,9,3326,33,5987,663,15596};\n        redixSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void redixSort(int[] arr){\n        int[][] bucket = new int[10][arr.length - 1];               //桶里面所存的具体数值\n        int[] bucketElementCounts = new int[10];                    //每个桶所存的元素个数\n        int max = arr[0];\n        for (int i = 1; i &lt; arr.length; i++) {\n            if(max &lt; arr[i]) max = arr[i];\n        }\n\n        int maxCount = (max + &quot;&quot;).length();                         //获取最大数的位数\n        for (int i = 0; i &lt; maxCount; i++) {\n            //把数组中的数都放在桶里面\n            for (int k = 0; k &lt; arr.length; k++) {\n                int value = arr[k] / (int) Math.pow(10, i) % 10;\n\n                bucket[value][bucketElementCounts[value]] = arr[k];\n                bucketElementCounts[value]++;\n            }\n            int index = 0;\n            for (int k = 0; k &lt; bucketElementCounts.length; k++) {\n                if(bucketElementCounts[k] != 0){\n                    for (int x = 0; x &lt; bucketElementCounts[k]; x++) {\n                        arr[index] = bucket[k][x];\n                        index++;\n                    }\n                }\n                bucketElementCounts[k] = 0;\n            }\n        }\n\n    }\n}\n</code></pre>\n<h3 id=\"运行结果-6\"><a href=\"#运行结果-6\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png\" alt=\"基数排序\"></p>\n<hr>\n"},{"title":"记一次office无法联网解决方法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqq4k0okj21kw0w0dra.jpg"],"date":"2022-08-25T14:43:38.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 登录onedrive显示无法连接服务器解决方法\n\n今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：\n\n1. Cmd + r ：依次输入\n\n```shell\nnetsh int ip reset c:\\resetlog.txt\nnetsh winsock reset\nshutdown -r -t 0\n```\n\n2. 命令行解析：\n   1. netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络\n   2. shutdown -r -t 0 为0s后重启电脑。\n3. 重启电脑后再打开word就可以连上网啦！\n\n","source":"_posts/记一次office无法联网解决方法.md","raw":"---\ntitle: 记一次office无法联网解决方法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 生活\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqq4k0okj21kw0w0dra.jpg'\ndate: 2022-08-25 22:43:38\nauthorAbout:\nauthorDesc:\ntags: 随笔\nkeywords:\ndescription:\n---\n\n## 登录onedrive显示无法连接服务器解决方法\n\n今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：\n\n1. Cmd + r ：依次输入\n\n```shell\nnetsh int ip reset c:\\resetlog.txt\nnetsh winsock reset\nshutdown -r -t 0\n```\n\n2. 命令行解析：\n   1. netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络\n   2. shutdown -r -t 0 为0s后重启电脑。\n3. 重启电脑后再打开word就可以连上网啦！\n\n","slug":"记一次office无法联网解决方法","published":1,"updated":"2022-08-25T15:05:56.583Z","layout":"post","link":"","_id":"cl796hii8002kgwrwycnbj4j3","content":"<h2 id=\"登录onedrive显示无法连接服务器解决方法\"><a href=\"#登录onedrive显示无法连接服务器解决方法\" class=\"headerlink\" title=\"登录onedrive显示无法连接服务器解决方法\"></a>登录onedrive显示无法连接服务器解决方法</h2><p>今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：</p>\n<ol>\n<li>Cmd + r ：依次输入</li>\n</ol>\n<pre class=\" language-shell\"><code class=\"language-shell\">netsh int ip reset c:\\resetlog.txt\nnetsh winsock reset\nshutdown -r -t 0\n</code></pre>\n<ol start=\"2\">\n<li>命令行解析：<ol>\n<li>netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络</li>\n<li>shutdown -r -t 0 为0s后重启电脑。</li>\n</ol>\n</li>\n<li>重启电脑后再打开word就可以连上网啦！</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"登录onedrive显示无法连接服务器解决方法\"><a href=\"#登录onedrive显示无法连接服务器解决方法\" class=\"headerlink\" title=\"登录onedrive显示无法连接服务器解决方法\"></a>登录onedrive显示无法连接服务器解决方法</h2><p>今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：</p>\n<ol>\n<li>Cmd + r ：依次输入</li>\n</ol>\n<pre><code class=\"shell\">netsh int ip reset c:\\resetlog.txt\nnetsh winsock reset\nshutdown -r -t 0\n</code></pre>\n<ol start=\"2\">\n<li>命令行解析：<ol>\n<li>netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络</li>\n<li>shutdown -r -t 0 为0s后重启电脑。</li>\n</ol>\n</li>\n<li>重启电脑后再打开word就可以连上网啦！</li>\n</ol>\n"},{"title":"设计模式之结构型模式","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg"],"date":"2022-08-25T14:43:05.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 结构型模式\n\n### 作用\n\n- 从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。\n\n### 分类\n\n- 适配器模式\n- 代理模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n\n### 适配器模式\n\n- 将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。\n- 角色分析\n  - 目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。\n  - 需要适配的类：需要适配的类或适配者类。\n  - 适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。\n\n#### 优缺点\n\n##### 优点\n\n1. 一个对象适配器可以把多个不同的适配者适配到同一个目标\n2. 可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配\n\n##### 缺点\n\n1. 对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；\n2. 对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。\n\n##### 适用场景\n\n1. 系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。\n2. 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。\n\n#### 代码\n\n以网线适配器为例：\n\n```java\npackage com.design_patterns.adapter;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 23:06\n * @Description\n */\n//客户端类：电脑\npublic class Computer {\n    //我们的电脑需要连接上转接器才可以上网\n    public void net(NetToUsb adapter){\n        //上网的具体实现，找一个转接头\n        adapter.handleRequest();\n    }\n\n    public static void main(String[] args) {\n        //电脑\n        Computer computer = new Computer();\n        //网线\n        Adaptee adaptee = new Adaptee();\n        //适配器\n        Adapter adapter = new Adapter();\n\n        computer.net(adapter);\n        System.out.println(\"==========================\");\n        Adapter2 adapter2 = new Adapter2(adaptee);\n\n        computer.net(adapter2);\n    }\n}\n/**\n * //要被适配的类：网线\n * public class Adaptee {\n *     public void request(){\n *         System.out.println(\"连接网线开始上网\");\n *     }\n * }\n *\n * //接口转换器的抽象实现\n * public interface NetToUsb {\n *     //作用：处理请求  网线---》USB\n *     public void handleRequest();\n * }\n *\n * // 1. 继承（类适配器，单继承有局限性）\n * public class Adapter extends Adaptee implements NetToUsb{\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过类适配器实现的上网功能（继承）\");\n *         super.request();\n *     }\n * }\n * \n * // 2. 组合（对象适配器，常用）\n * public class Adapter2 implements NetToUsb{\n *     private Adaptee adaptee;\n *\n *     public Adapter2(Adaptee adaptee) {\n *         this.adaptee = adaptee;\n *     }\n *\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过对象适配器实现的上网功能（组合）\");\n *         adaptee.request();\n *     }\n * }\n */\n```\n\n#### 结果\n\n![适配器模式](https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png)\n\n#### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png)\n\n---\n\n### 桥接模式\n\n#### 定义\n\n桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。\n\n#### 实例模型\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png)\n\n分析：这个场景中有两个变化的维度：品牌，类型。\n\n#### 代码\n\n```java\npackage com.design_patterns.bridge;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/21/ 15:10\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //\n        Computer computer = new Desktop(new Apple());\n        computer.info();\n        //\n        Computer computer1 = new Laptop(new Lenovo());\n        computer1.info();\n        //\n        Computer computer2 = new Pad(new Apple());\n        computer2.info();\n    }\n}\n/**\n * public interface Brand {\n *\n *     void info();\n * }\n * \n * public class Apple implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"苹果\");\n *     }\n * }\n * \n * public class Lenovo implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"联想\");\n *     }\n * }\n * \n * public abstract class Computer {\n *     //组合 品牌\n *     protected Brand brand;\n *\n *     public Computer(Brand brand) {\n *         this.brand = brand;\n *     }\n *     //自带品牌\n *     public void info(){\n *         brand.info();\n *     }\n * }\n *\n * class Desktop extends Computer {\n *     public Desktop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"台式机\");\n *     }\n * }\n *\n * class Laptop extends Computer {\n *     public Laptop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"笔记本\");\n *     }\n * }\n *\n * class Pad extends Computer {\n *     public Pad(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"平板\");\n *     }\n * }\n */\n```\n\n#### 运行结果\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png)\n\n---\n\n#### 结构图\n\n![结构图](https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。\n- 桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合**开闭原则**，就像一座桥，可以把两个变化的维度连接起来。\n\n##### 缺点\n\n- 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n- 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性\n\n#### 适用场景\n\n1. 如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合\n\n2. 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n3. 虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。\n\n4. 场景\n\n   1. Java语言通过Java虚拟机实现了平台无关性，\n   2. AWT的Peer架构\n   3. JDBC驱动程序也是桥接模式的应用之一。\n\n   \n","source":"_posts/设计模式之结构型模式.md","raw":"---\ntitle: 设计模式之结构型模式\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg'\ndate: 2022-08-25 22:43:05\nauthorAbout:\nauthorDesc:\ntags: \n- Java\n- 设计模式\nkeywords:\ndescription:\n---\n\n## 结构型模式\n\n### 作用\n\n- 从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。\n\n### 分类\n\n- 适配器模式\n- 代理模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n\n### 适配器模式\n\n- 将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。\n- 角色分析\n  - 目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。\n  - 需要适配的类：需要适配的类或适配者类。\n  - 适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。\n\n#### 优缺点\n\n##### 优点\n\n1. 一个对象适配器可以把多个不同的适配者适配到同一个目标\n2. 可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配\n\n##### 缺点\n\n1. 对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；\n2. 对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。\n\n##### 适用场景\n\n1. 系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。\n2. 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。\n\n#### 代码\n\n以网线适配器为例：\n\n```java\npackage com.design_patterns.adapter;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 23:06\n * @Description\n */\n//客户端类：电脑\npublic class Computer {\n    //我们的电脑需要连接上转接器才可以上网\n    public void net(NetToUsb adapter){\n        //上网的具体实现，找一个转接头\n        adapter.handleRequest();\n    }\n\n    public static void main(String[] args) {\n        //电脑\n        Computer computer = new Computer();\n        //网线\n        Adaptee adaptee = new Adaptee();\n        //适配器\n        Adapter adapter = new Adapter();\n\n        computer.net(adapter);\n        System.out.println(\"==========================\");\n        Adapter2 adapter2 = new Adapter2(adaptee);\n\n        computer.net(adapter2);\n    }\n}\n/**\n * //要被适配的类：网线\n * public class Adaptee {\n *     public void request(){\n *         System.out.println(\"连接网线开始上网\");\n *     }\n * }\n *\n * //接口转换器的抽象实现\n * public interface NetToUsb {\n *     //作用：处理请求  网线---》USB\n *     public void handleRequest();\n * }\n *\n * // 1. 继承（类适配器，单继承有局限性）\n * public class Adapter extends Adaptee implements NetToUsb{\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过类适配器实现的上网功能（继承）\");\n *         super.request();\n *     }\n * }\n * \n * // 2. 组合（对象适配器，常用）\n * public class Adapter2 implements NetToUsb{\n *     private Adaptee adaptee;\n *\n *     public Adapter2(Adaptee adaptee) {\n *         this.adaptee = adaptee;\n *     }\n *\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过对象适配器实现的上网功能（组合）\");\n *         adaptee.request();\n *     }\n * }\n */\n```\n\n#### 结果\n\n![适配器模式](https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png)\n\n#### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png)\n\n---\n\n### 桥接模式\n\n#### 定义\n\n桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。\n\n#### 实例模型\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png)\n\n分析：这个场景中有两个变化的维度：品牌，类型。\n\n#### 代码\n\n```java\npackage com.design_patterns.bridge;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/21/ 15:10\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //\n        Computer computer = new Desktop(new Apple());\n        computer.info();\n        //\n        Computer computer1 = new Laptop(new Lenovo());\n        computer1.info();\n        //\n        Computer computer2 = new Pad(new Apple());\n        computer2.info();\n    }\n}\n/**\n * public interface Brand {\n *\n *     void info();\n * }\n * \n * public class Apple implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"苹果\");\n *     }\n * }\n * \n * public class Lenovo implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"联想\");\n *     }\n * }\n * \n * public abstract class Computer {\n *     //组合 品牌\n *     protected Brand brand;\n *\n *     public Computer(Brand brand) {\n *         this.brand = brand;\n *     }\n *     //自带品牌\n *     public void info(){\n *         brand.info();\n *     }\n * }\n *\n * class Desktop extends Computer {\n *     public Desktop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"台式机\");\n *     }\n * }\n *\n * class Laptop extends Computer {\n *     public Laptop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"笔记本\");\n *     }\n * }\n *\n * class Pad extends Computer {\n *     public Pad(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"平板\");\n *     }\n * }\n */\n```\n\n#### 运行结果\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png)\n\n---\n\n#### 结构图\n\n![结构图](https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。\n- 桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合**开闭原则**，就像一座桥，可以把两个变化的维度连接起来。\n\n##### 缺点\n\n- 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n- 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性\n\n#### 适用场景\n\n1. 如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合\n\n2. 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n3. 虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。\n\n4. 场景\n\n   1. Java语言通过Java虚拟机实现了平台无关性，\n   2. AWT的Peer架构\n   3. JDBC驱动程序也是桥接模式的应用之一。\n\n   \n","slug":"设计模式之结构型模式","published":1,"updated":"2022-08-25T15:05:10.907Z","layout":"post","link":"","_id":"cl796hii8002ngwrwamn7mdij","content":"<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>适配器模式</li>\n<li>代理模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n</ul>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><ul>\n<li>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</li>\n<li>角色分析<ul>\n<li>目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li>\n<li>需要适配的类：需要适配的类或适配者类。</li>\n<li>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li>\n<li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li>\n<li>对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。</li>\n</ol>\n<h5 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h5><ol>\n<li>系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。</li>\n<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>以网线适配器为例：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>design_patterns<span class=\"token punctuation\">.</span>adapter<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 23:06\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//客户端类：电脑</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//我们的电脑需要连接上转接器才可以上网</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">net</span><span class=\"token punctuation\">(</span>NetToUsb adapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//上网的具体实现，找一个转接头</span>\n        adapter<span class=\"token punctuation\">.</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//电脑</span>\n        Computer computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//网线</span>\n        Adaptee adaptee <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adaptee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//适配器</span>\n        Adapter adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        computer<span class=\"token punctuation\">.</span><span class=\"token function\">net</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Adapter2 adapter2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter2</span><span class=\"token punctuation\">(</span>adaptee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        computer<span class=\"token punctuation\">.</span><span class=\"token function\">net</span><span class=\"token punctuation\">(</span>adapter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * //要被适配的类：网线\n * public class Adaptee {\n *     public void request(){\n *         System.out.println(\"连接网线开始上网\");\n *     }\n * }\n *\n * //接口转换器的抽象实现\n * public interface NetToUsb {\n *     //作用：处理请求  网线---》USB\n *     public void handleRequest();\n * }\n *\n * // 1. 继承（类适配器，单继承有局限性）\n * public class Adapter extends Adaptee implements NetToUsb{\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过类适配器实现的上网功能（继承）\");\n *         super.request();\n *     }\n * }\n * \n * // 2. 组合（对象适配器，常用）\n * public class Adapter2 implements NetToUsb{\n *     private Adaptee adaptee;\n *\n *     public Adapter2(Adaptee adaptee) {\n *         this.adaptee = adaptee;\n *     }\n *\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过对象适配器实现的上网功能（组合）\");\n *         adaptee.request();\n *     }\n * }\n */</span>\n</code></pre>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png\" alt=\"适配器模式\"></p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。</p>\n<h4 id=\"实例模型\"><a href=\"#实例模型\" class=\"headerlink\" title=\"实例模型\"></a>实例模型</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png\" alt=\"桥接模式\"></p>\n<p>分析：这个场景中有两个变化的维度：品牌，类型。</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>design_patterns<span class=\"token punctuation\">.</span>bridge<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/21/ 15:10\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//</span>\n        Computer computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Desktop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        computer<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//</span>\n        Computer computer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Laptop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Lenovo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        computer1<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//</span>\n        Computer computer2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        computer2<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * public interface Brand {\n *\n *     void info();\n * }\n * \n * public class Apple implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"苹果\");\n *     }\n * }\n * \n * public class Lenovo implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"联想\");\n *     }\n * }\n * \n * public abstract class Computer {\n *     //组合 品牌\n *     protected Brand brand;\n *\n *     public Computer(Brand brand) {\n *         this.brand = brand;\n *     }\n *     //自带品牌\n *     public void info(){\n *         brand.info();\n *     }\n * }\n *\n * class Desktop extends Computer {\n *     public Desktop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"台式机\");\n *     }\n * }\n *\n * class Laptop extends Computer {\n *     public Laptop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"笔记本\");\n *     }\n * }\n *\n * class Pad extends Computer {\n *     public Pad(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"平板\");\n *     }\n * }\n */</span>\n</code></pre>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png\" alt=\"桥接模式\"></p>\n<hr>\n<h4 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png\" alt=\"结构图\"></p>\n<hr>\n<h4 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。</li>\n<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>，就像一座桥，可以把两个变化的维度连接起来。</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</li>\n</ul>\n<h4 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ol>\n<li><p>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</p>\n</li>\n<li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>\n</li>\n<li><p>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p>\n</li>\n<li><p>场景</p>\n<ol>\n<li>Java语言通过Java虚拟机实现了平台无关性，</li>\n<li>AWT的Peer架构</li>\n<li>JDBC驱动程序也是桥接模式的应用之一。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>适配器模式</li>\n<li>代理模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n</ul>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><ul>\n<li>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</li>\n<li>角色分析<ul>\n<li>目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li>\n<li>需要适配的类：需要适配的类或适配者类。</li>\n<li>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li>\n<li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li>\n<li>对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。</li>\n</ol>\n<h5 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h5><ol>\n<li>系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。</li>\n<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>以网线适配器为例：</p>\n<pre><code class=\"java\">package com.design_patterns.adapter;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 23:06\n * @Description\n */\n//客户端类：电脑\npublic class Computer {\n    //我们的电脑需要连接上转接器才可以上网\n    public void net(NetToUsb adapter){\n        //上网的具体实现，找一个转接头\n        adapter.handleRequest();\n    }\n\n    public static void main(String[] args) {\n        //电脑\n        Computer computer = new Computer();\n        //网线\n        Adaptee adaptee = new Adaptee();\n        //适配器\n        Adapter adapter = new Adapter();\n\n        computer.net(adapter);\n        System.out.println(&quot;==========================&quot;);\n        Adapter2 adapter2 = new Adapter2(adaptee);\n\n        computer.net(adapter2);\n    }\n}\n/**\n * //要被适配的类：网线\n * public class Adaptee {\n *     public void request(){\n *         System.out.println(&quot;连接网线开始上网&quot;);\n *     }\n * }\n *\n * //接口转换器的抽象实现\n * public interface NetToUsb {\n *     //作用：处理请求  网线---》USB\n *     public void handleRequest();\n * }\n *\n * // 1. 继承（类适配器，单继承有局限性）\n * public class Adapter extends Adaptee implements NetToUsb{\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(&quot;我是通过类适配器实现的上网功能（继承）&quot;);\n *         super.request();\n *     }\n * }\n * \n * // 2. 组合（对象适配器，常用）\n * public class Adapter2 implements NetToUsb{\n *     private Adaptee adaptee;\n *\n *     public Adapter2(Adaptee adaptee) {\n *         this.adaptee = adaptee;\n *     }\n *\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(&quot;我是通过对象适配器实现的上网功能（组合）&quot;);\n *         adaptee.request();\n *     }\n * }\n */\n</code></pre>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png\" alt=\"适配器模式\"></p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。</p>\n<h4 id=\"实例模型\"><a href=\"#实例模型\" class=\"headerlink\" title=\"实例模型\"></a>实例模型</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png\" alt=\"桥接模式\"></p>\n<p>分析：这个场景中有两个变化的维度：品牌，类型。</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre><code class=\"java\">package com.design_patterns.bridge;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/21/ 15:10\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //\n        Computer computer = new Desktop(new Apple());\n        computer.info();\n        //\n        Computer computer1 = new Laptop(new Lenovo());\n        computer1.info();\n        //\n        Computer computer2 = new Pad(new Apple());\n        computer2.info();\n    }\n}\n/**\n * public interface Brand {\n *\n *     void info();\n * }\n * \n * public class Apple implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(&quot;苹果&quot;);\n *     }\n * }\n * \n * public class Lenovo implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(&quot;联想&quot;);\n *     }\n * }\n * \n * public abstract class Computer {\n *     //组合 品牌\n *     protected Brand brand;\n *\n *     public Computer(Brand brand) {\n *         this.brand = brand;\n *     }\n *     //自带品牌\n *     public void info(){\n *         brand.info();\n *     }\n * }\n *\n * class Desktop extends Computer {\n *     public Desktop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(&quot;台式机&quot;);\n *     }\n * }\n *\n * class Laptop extends Computer {\n *     public Laptop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(&quot;笔记本&quot;);\n *     }\n * }\n *\n * class Pad extends Computer {\n *     public Pad(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(&quot;平板&quot;);\n *     }\n * }\n */\n</code></pre>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png\" alt=\"桥接模式\"></p>\n<hr>\n<h4 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png\" alt=\"结构图\"></p>\n<hr>\n<h4 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。</li>\n<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>，就像一座桥，可以把两个变化的维度连接起来。</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</li>\n</ul>\n<h4 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ol>\n<li><p>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</p>\n</li>\n<li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>\n</li>\n<li><p>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p>\n</li>\n<li><p>场景</p>\n<ol>\n<li>Java语言通过Java虚拟机实现了平台无关性，</li>\n<li>AWT的Peer架构</li>\n<li>JDBC驱动程序也是桥接模式的应用之一。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"设计模式之创建者模式","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg"],"date":"2022-08-25T14:42:54.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## GOF23\n\n### 创建型模式\n\n- 单例模式\n- 工厂模式\n- 抽象工厂模式\n- 建造者模式\n- 原型模式\n\n### 结构性模式\n\n- 适配器模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n- 代理模式\n\n### 行为型模式\n\n- 模板方法模式\n- 命令模式\n- 迭代器模式\n- 观察者模式\n- 中介者模式\n- 备忘录模式\n- 解释器模式\n- 状态模式\n- 策略模式\n- 职责链模式\n- 访问者模式\n\n## 创建型模式\n\n### 单例模式\n\n#### 饿汉单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 16:44\n * @Description\n */\n//饿汉单例模式\npublic class Hungry {\n    //可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n    private byte[] data1 = new byte[1024*1024];\n    private byte[] data2 = new byte[1024*1024];\n    private byte[] data3 = new byte[1024*1024];\n    private byte[] data4 = new byte[1024*1024];\n\n    private Hungry(){\n\n    }\n\n    private final static Hungry HUNGRY = new Hungry();\n\n    public static Hungry getInstance(){\n        return HUNGRY;\n    }\n\n}\n```\n\n##### 存在的问题\n\n 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n\n---\n\n#### 懒汉式单例\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 10:10\n * @Description\n */\npublic class LazyMan {\n    // 1.构造器私有化\n    private LazyMan(){\n\n    }\n    // 2.实例化对象\n    private volatile static LazyMan lazyMan;            //给lazyMan加上volatile可以避免指令重排  保证其原子性操作。\n    //双重检测锁模式的  懒汉式单例   DLC懒汉式\n    public static LazyMan getInstance(){\n        if (lazyMan == null){\n            synchronized (LazyMan.class){\n                if (lazyMan == null){\n                    lazyMan = new LazyMan();            //不是一个原子性操作\n                    /**\n                     *    1.分配内存空间\n                     *    2.执行构造方法，初始化对象\n                     *    3.把这个对象指向这个空间\n                     *    就有可能会出现指令重排现象\n                     *\n                     *    正常：123\n                     *    异常：132\n                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值\n                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象\n                     *\n                     */\n                }\n            }\n        }\n\n        return lazyMan;\n    }\n}\n```\n\n##### 注意点\n\n1. 懒汉模式对象如果不加volatile就会出现指令重排。\n2. 而我们要保证其多线程安全，就需要加上双重锁\n\n```java\nsynchronized (LazyMan.class){\n    if (lazyMan == null){\n        lazyMan = new LazyMan();            //不是一个原子性操作\n    }\n```\n\n---\n\n#### 静态内部类\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:13\n * @Description\n */\npublic class Holder {\n    //1.构造器私有化\n    private Holder(){\n\n    }\n    //从静态内部类里返回HOLDER；\n    public static Holder getInstance(){\n        return InnerClass.HOLDER;\n    }\n    \n    //静态内部类\n    public static class InnerClass{\n        private static final Holder HOLDER = new Holder();\n    }\n}\n```\n\n---\n\n> 单例不安全，因为有反射。反射会破坏单例\n\n所以为了解决这个问题我们使用枚举来实现单例模式。\n\n#### 枚举单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:19\n * @Description\n */\npublic enum EnumSingle {\n    INSTANCE;\n    public EnumSingle getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n因为反射不能破解枚举，所以我们使用枚举来实现单例模式。\n\n---\n\n### 工厂模式\n\n#### 作用\n\n- 实现了创建者和调用者的分离\n- 详细分类：\n  - 简单工厂模式\n  - 工厂方法模式\n  - 抽象工厂模式\n- OOP七大原则\n  - 开闭原则：一个软件的实体应当对扩展开放，对修改关闭。\n  - 依赖倒转原则：要针对接口编程，不要针对实现编程。\n  - 迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。\n- 核心本质\n  - 实例化对象不适用new，用工厂方法代替\n  - 将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦\n- 三种模式：\n  - 简单工厂模式\n    - 用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）\n  - 工厂方法模式\n    - 用来生产同一等级结构中的固定产品（支持增加任意产品）\n  - 抽象工厂模式\n    - 围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。\n\n#### 简单工厂模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.simple;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n//        Car car = new WuLing();\n//        Car car1 = new Tesla();\n        Car car = CarFactory.getCar(\"五菱\");\n        Car car1 = CarFactory.getCar(\"特斯拉\");\n        car.name();\n        car1.name();\n\n    }\n    \n}\n\n/**\n * \n * public interface Car {\n *     void name();\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class Tesla implements Car{\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class CarFactory {\n *     //方法一\n *     public static Car getCar(String car){\n *         if (car.equals(\"五菱\")){\n *             return new WuLing();\n *         }else if (car.equals(\"特斯拉\")){\n *             return new Tesla();\n *         }else {\n *             return null;\n *         }\n *     }\n *     //方法二\n *     public static Car getWuLing(){\n *         return new WuLing();\n *     }\n *     public static Car getTesla(){\n *         return new Tesla();\n *     }\n *\n * }\n */\n```\n\n##### 弊端\n\n> 未实现开闭原则\n\n##### 实现结果\n\n![简单工厂模式](https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png)\n\n---\n\n#### 工厂方法模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.method;\n\nimport com.xiheya.factory.simple.CarFactory;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        Car car = new TeslaFactory().getCar();\n        car.name();\n        Car car1 = new WuLingFactory().getCar();\n        car1.name();\n        Car car2 = new DaZhongFactory().getCar();\n        car2.name();\n    }\n\n}\n\n/**\n * public interface Car {\n *     void name();\n * }\n * \n * public interface CarFactory {\n *     Car getCar();\n * }\n * \n * public class DaZhong implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"DaZhong!\");\n *     }\n * }\n * \n * public class DaZhongFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new DaZhong();\n *     }\n * }\n * \n * public class Tesla implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class TeslaFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new Tesla();\n *     }\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class WuLingFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new WuLing();\n *     }\n * }\n * \n *\n */\n```\n\n##### 弊端\n\n> 虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。\n\n##### 实现结果\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png)\n\n##### 流程图\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png)\n\n---\n\n#### 小结\n\n- 简单工厂模式（静态工厂模式）\n\n  - 虽然某种程度上不符合设计原则，但实际使用最多！\n\n- 工厂方法模式\n\n  - 不修改已有类的前提下，通过新的工厂类实现扩展\n\n- 抽象工厂模式\n\n  - 不可以增加产品，可以增加产品族！\n\n- 应用场景\n\n  - JDK中的Calendar的getInstance方法\n  - JDBC中的Connection对象的获取\n  - Spring中IOC容器创建管理bean对象\n  - 反射中Class对象的newInstance方法\n\n  ---\n\n#### 抽象工厂模式\n\n##### 定义\n\n- 定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类\n- 适用场景\n  - 客户端（应用层）不依赖于产品类实例如何被创建、实现的细节\n  - 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。\n  - 提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现\n- 优点\n  - 具体产品在应用层的代码隔离，无需关心创建的细节\n  - 将一个系列的产品统一到一起创建\n- 缺点\n  - 规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；\n  - 增加了系统的抽象性和理解难度。\n\n##### 代码\n\n```java\npackage com.xiheya.factory.abstract1;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:00\n * @Description\n */\npublic class Client {\n    public static void main(String[] args) {\n        System.out.println(\"==============小米系列产品================\");\n        XiaomiFactory xiaomiFactory = new XiaomiFactory();\n        IPhoneProduct xiaomi = xiaomiFactory.iphoneProduct();\n        xiaomi.callup();\n        xiaomi.sendSMS();\n        IRouterProduct xiaomiRouter = xiaomiFactory.irouterProduct();\n        xiaomiRouter.openWifi();\n        xiaomiRouter.setting();\n\n        System.out.println(\"==============华为系列产品================\");\n        HuaweiFactory huaweiFactory = new HuaweiFactory();\n        IPhoneProduct huawei = huaweiFactory.iphoneProduct();\n        huawei.callup();\n        huawei.sendSMS();\n        IRouterProduct huaweiRouter = huaweiFactory.irouterProduct();\n        huaweiRouter.openWifi();\n        huaweiRouter.setting();\n\n\n    }\n}\n\n\n/**\n * //抽象产品工厂\n * public interface IProductFactory {\n *     //生产手机\n *     IPhoneProduct iphoneProduct();\n *     //生产路由器\n *     IRouterProduct irouterProduct();\n * }\n * \n * //手机产品接口\n * public interface IPhoneProduct {\n *     void start();\n *     void shutdown();\n *     void callup();\n *     void sendSMS();\n * }\n * \n * //路由器产品接口\n * public interface IRouterProduct {\n *     void start();\n *     void shutdown();\n *     void openWifi();\n *     void setting();\n * }\n * \n * \n * //华为工厂\n * public class HuaweiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new HuaweiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new HuaweiRouter();\n *     }\n * }\n * \n * //华为手机\n * public class HuaweiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"Huawei  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"Huawei  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"Huawei   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"Huawei sendSMS\");\n *     }\n * }\n * \n * //华为路由器\n * public class HuaweiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动华为路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭华为路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"华为由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置华为路由器\");\n *     }\n * }\n * \n * //小米工厂\n * public class XiaomiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new XiaomiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new XiaomiRouter();\n *     }\n * }\n * \n * //小米手机\n * public class XiaomiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"xiaomi  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"xiaomi  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"xiaomi   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"xiaomi sendSMS\");\n *     }\n * }\n * \n * //小米路由器\n * public class XiaomiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动小米路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭小米路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"小米路由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置小米路由器\");\n *     }\n * }\n * \n */\n```\n\n##### 运行结果\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png)\n\n---\n\n### 建造者模式\n\n#### 定义\n\n- 建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。\n- 它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 主要作用\n\n在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。\n\n- 用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\n- 例子：\n  - 工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）\n  - 汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））\n\n#### 代码\n\n```java\npackage com.design_patterns.builder;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/19/ 15:15\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //新建一个指挥\n        Director director = new Director();\n        //指挥 工人盖房子\n        Product build = director.build(new Worker());\n        System.out.println(build.toString());\n\n    }\n}\n\n\n/**\n * //抽象的建造者方法：盖房子\n * public abstract class Builder {\n *\n *     abstract void builderA();               //地基\n *     abstract void builderB();               //钢筋工程\n *     abstract void builderC();               //铺电线\n *     abstract void builderD();               //粉刷\n *     //完工：得到产品\n *     abstract Product getProduct();\n * }\n * \n * public class Product {\n *     private String buildA;\n *     private String buildB;\n *     private String buildC;\n *     private String buildD;\n *\n *     public String getBuildA() {\n *         return buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return buildD;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         this.buildA = buildA;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         this.buildB = buildB;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         this.buildC = buildC;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         this.buildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"buildA='\" + buildA + '\\'' +\n *                 \", buildB='\" + buildB + '\\'' +\n *                 \", buildC='\" + buildC + '\\'' +\n *                 \", buildD='\" + buildD + '\\'' +\n *                 '}';\n *     }\n *\n * }\n * \n * //具体的建造者：工人\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();  //工人负责创建产品\n *     }\n *\n *     @Override\n *     void builderA() {\n *         product.setBuildA(\"打好了地基\");\n *         System.out.println(product.getBuildA());\n *     }\n *\n *     @Override\n *     void builderB() {\n *         product.setBuildB(\"铺好了钢筋\");\n *         System.out.println(product.getBuildB());\n *     }\n *\n *     @Override\n *     void builderC() {\n *         product.setBuildC(\"铺好了电线\");\n *         System.out.println(product.getBuildC());\n *     }\n *\n *     @Override\n *     void builderD() {\n *         product.setBuildD(\"粉好了墙壁\");\n *         System.out.println(product.getBuildD());\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n * \n * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。\n * public class Director {\n *\n * //    指挥工人建造房子\n *     public Product build(Builder builder){\n *         builder.builderA();\n *         builder.builderB();\n *         builder.builderC();\n *         builder.builderD();\n *         //建造完成后返回一个房子；\n *         return builder.getProduct();\n *     }\n * }\n * \n * \n */\n```\n\n#### 运行结果\n\n![建造者模式](https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png)\n\n---\n\n* 上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。\n* 通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。\n* 比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。\n\n#### 无指挥类的建造者模式\n\n##### 代码\n\n```java\npackage com.design_patterns.builder.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 20:54\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //服务员\n        Worker worker = new Worker();\n        //链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。\n        Product product = worker.buildA(\"炸鸡\").buildB(\"芬达\").getProduct();\n\n        System.out.println(product.toString());\n    }\n}\n/**\n * //建造者\n * public abstract class Builder {\n *     abstract Builder buildA(String msg);  //汉堡\n *     abstract Builder buildB(String msg);  //薯条\n *     abstract Builder buildC(String msg);  //可乐\n *     abstract Builder buildD(String msg);  //甜点\n *\n *     abstract Product getProduct();\n * }\n *\n * public class Product {\n *     private String BuildA = \"汉堡\";\n *     private String BuildB = \"可乐\";\n *     private String BuildC = \"薯条\";\n *     private String BuildD = \"甜点\";\n *\n *     public String getBuildA() {\n *         return BuildA;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         BuildA = buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return BuildB;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         BuildB = buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return BuildC;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         BuildC = buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return BuildD;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         BuildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"BuildA='\" + BuildA + '\\'' +\n *                 \", BuildB='\" + BuildB + '\\'' +\n *                 \", BuildC='\" + BuildC + '\\'' +\n *                 \", BuildD='\" + BuildD + '\\'' +\n *                 '}';\n *     }\n * }\n *\n * //具体的建造者\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();\n *     }\n *\n *     @Override\n *     Builder buildA(String msg) {\n *         product.setBuildA(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildB(String msg) {\n *         product.setBuildB(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildC(String msg) {\n *         product.setBuildC(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildD(String msg) {\n *         product.setBuildD(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n *\n */\n```\n\n##### 运行结果\n\n![建造者模式2](https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。\n- 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.\n- 具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”\n\n##### 缺点\n\n- 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。\n- 如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。\n\n#### 应用场景\n\n- 需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。\n- 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、\n- 适合于一个具有较多的零件（属性）的产品（对象）的创建过程。\n\n#### 建造者与抽象工厂模式的比较\n\n- 与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。\n- 在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。\n- 如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。\n\n---\n\n### 原型模式\n\n#### 实现步骤\n\n1. 实现一个接口：Cloneable;\n2. 重写一个方法：clone();\n3. 主要用于：Spring Bean：单例模式，原型模式\n4. 原型模式+工厂模式 ===> new <=> 原型模式\n\n#### 浅克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo01;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         return super.clone();\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![原型模式](https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png)\n\n---\n\n#### 深克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo02;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         Object obj = super.clone();\n *         //深克隆，序列化与反序列化\n *         Video v = (Video) obj;\n *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化\n *         return obj;\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![深克隆模式](https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png)\n\n---\n\n#### 浅克隆与深克隆对比\n\n1. 浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。\n2. 深克隆：克隆出来的对象会把原型的属性也克隆出来。\n\n![对比](https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png)\n\n---\n\n","source":"_posts/设计模式之创建者模式.md","raw":"---\ntitle: 设计模式之创建者模式\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg'\ndate: 2022-08-25 22:42:54\nauthorAbout:\nauthorDesc:\ntags:\n- Java\n- 设计模式\nkeywords:\ndescription:\n---\n\n## GOF23\n\n### 创建型模式\n\n- 单例模式\n- 工厂模式\n- 抽象工厂模式\n- 建造者模式\n- 原型模式\n\n### 结构性模式\n\n- 适配器模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n- 代理模式\n\n### 行为型模式\n\n- 模板方法模式\n- 命令模式\n- 迭代器模式\n- 观察者模式\n- 中介者模式\n- 备忘录模式\n- 解释器模式\n- 状态模式\n- 策略模式\n- 职责链模式\n- 访问者模式\n\n## 创建型模式\n\n### 单例模式\n\n#### 饿汉单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 16:44\n * @Description\n */\n//饿汉单例模式\npublic class Hungry {\n    //可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n    private byte[] data1 = new byte[1024*1024];\n    private byte[] data2 = new byte[1024*1024];\n    private byte[] data3 = new byte[1024*1024];\n    private byte[] data4 = new byte[1024*1024];\n\n    private Hungry(){\n\n    }\n\n    private final static Hungry HUNGRY = new Hungry();\n\n    public static Hungry getInstance(){\n        return HUNGRY;\n    }\n\n}\n```\n\n##### 存在的问题\n\n 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n\n---\n\n#### 懒汉式单例\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 10:10\n * @Description\n */\npublic class LazyMan {\n    // 1.构造器私有化\n    private LazyMan(){\n\n    }\n    // 2.实例化对象\n    private volatile static LazyMan lazyMan;            //给lazyMan加上volatile可以避免指令重排  保证其原子性操作。\n    //双重检测锁模式的  懒汉式单例   DLC懒汉式\n    public static LazyMan getInstance(){\n        if (lazyMan == null){\n            synchronized (LazyMan.class){\n                if (lazyMan == null){\n                    lazyMan = new LazyMan();            //不是一个原子性操作\n                    /**\n                     *    1.分配内存空间\n                     *    2.执行构造方法，初始化对象\n                     *    3.把这个对象指向这个空间\n                     *    就有可能会出现指令重排现象\n                     *\n                     *    正常：123\n                     *    异常：132\n                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值\n                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象\n                     *\n                     */\n                }\n            }\n        }\n\n        return lazyMan;\n    }\n}\n```\n\n##### 注意点\n\n1. 懒汉模式对象如果不加volatile就会出现指令重排。\n2. 而我们要保证其多线程安全，就需要加上双重锁\n\n```java\nsynchronized (LazyMan.class){\n    if (lazyMan == null){\n        lazyMan = new LazyMan();            //不是一个原子性操作\n    }\n```\n\n---\n\n#### 静态内部类\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:13\n * @Description\n */\npublic class Holder {\n    //1.构造器私有化\n    private Holder(){\n\n    }\n    //从静态内部类里返回HOLDER；\n    public static Holder getInstance(){\n        return InnerClass.HOLDER;\n    }\n    \n    //静态内部类\n    public static class InnerClass{\n        private static final Holder HOLDER = new Holder();\n    }\n}\n```\n\n---\n\n> 单例不安全，因为有反射。反射会破坏单例\n\n所以为了解决这个问题我们使用枚举来实现单例模式。\n\n#### 枚举单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:19\n * @Description\n */\npublic enum EnumSingle {\n    INSTANCE;\n    public EnumSingle getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n因为反射不能破解枚举，所以我们使用枚举来实现单例模式。\n\n---\n\n### 工厂模式\n\n#### 作用\n\n- 实现了创建者和调用者的分离\n- 详细分类：\n  - 简单工厂模式\n  - 工厂方法模式\n  - 抽象工厂模式\n- OOP七大原则\n  - 开闭原则：一个软件的实体应当对扩展开放，对修改关闭。\n  - 依赖倒转原则：要针对接口编程，不要针对实现编程。\n  - 迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。\n- 核心本质\n  - 实例化对象不适用new，用工厂方法代替\n  - 将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦\n- 三种模式：\n  - 简单工厂模式\n    - 用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）\n  - 工厂方法模式\n    - 用来生产同一等级结构中的固定产品（支持增加任意产品）\n  - 抽象工厂模式\n    - 围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。\n\n#### 简单工厂模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.simple;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n//        Car car = new WuLing();\n//        Car car1 = new Tesla();\n        Car car = CarFactory.getCar(\"五菱\");\n        Car car1 = CarFactory.getCar(\"特斯拉\");\n        car.name();\n        car1.name();\n\n    }\n    \n}\n\n/**\n * \n * public interface Car {\n *     void name();\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class Tesla implements Car{\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class CarFactory {\n *     //方法一\n *     public static Car getCar(String car){\n *         if (car.equals(\"五菱\")){\n *             return new WuLing();\n *         }else if (car.equals(\"特斯拉\")){\n *             return new Tesla();\n *         }else {\n *             return null;\n *         }\n *     }\n *     //方法二\n *     public static Car getWuLing(){\n *         return new WuLing();\n *     }\n *     public static Car getTesla(){\n *         return new Tesla();\n *     }\n *\n * }\n */\n```\n\n##### 弊端\n\n> 未实现开闭原则\n\n##### 实现结果\n\n![简单工厂模式](https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png)\n\n---\n\n#### 工厂方法模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.method;\n\nimport com.xiheya.factory.simple.CarFactory;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        Car car = new TeslaFactory().getCar();\n        car.name();\n        Car car1 = new WuLingFactory().getCar();\n        car1.name();\n        Car car2 = new DaZhongFactory().getCar();\n        car2.name();\n    }\n\n}\n\n/**\n * public interface Car {\n *     void name();\n * }\n * \n * public interface CarFactory {\n *     Car getCar();\n * }\n * \n * public class DaZhong implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"DaZhong!\");\n *     }\n * }\n * \n * public class DaZhongFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new DaZhong();\n *     }\n * }\n * \n * public class Tesla implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class TeslaFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new Tesla();\n *     }\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class WuLingFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new WuLing();\n *     }\n * }\n * \n *\n */\n```\n\n##### 弊端\n\n> 虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。\n\n##### 实现结果\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png)\n\n##### 流程图\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png)\n\n---\n\n#### 小结\n\n- 简单工厂模式（静态工厂模式）\n\n  - 虽然某种程度上不符合设计原则，但实际使用最多！\n\n- 工厂方法模式\n\n  - 不修改已有类的前提下，通过新的工厂类实现扩展\n\n- 抽象工厂模式\n\n  - 不可以增加产品，可以增加产品族！\n\n- 应用场景\n\n  - JDK中的Calendar的getInstance方法\n  - JDBC中的Connection对象的获取\n  - Spring中IOC容器创建管理bean对象\n  - 反射中Class对象的newInstance方法\n\n  ---\n\n#### 抽象工厂模式\n\n##### 定义\n\n- 定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类\n- 适用场景\n  - 客户端（应用层）不依赖于产品类实例如何被创建、实现的细节\n  - 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。\n  - 提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现\n- 优点\n  - 具体产品在应用层的代码隔离，无需关心创建的细节\n  - 将一个系列的产品统一到一起创建\n- 缺点\n  - 规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；\n  - 增加了系统的抽象性和理解难度。\n\n##### 代码\n\n```java\npackage com.xiheya.factory.abstract1;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:00\n * @Description\n */\npublic class Client {\n    public static void main(String[] args) {\n        System.out.println(\"==============小米系列产品================\");\n        XiaomiFactory xiaomiFactory = new XiaomiFactory();\n        IPhoneProduct xiaomi = xiaomiFactory.iphoneProduct();\n        xiaomi.callup();\n        xiaomi.sendSMS();\n        IRouterProduct xiaomiRouter = xiaomiFactory.irouterProduct();\n        xiaomiRouter.openWifi();\n        xiaomiRouter.setting();\n\n        System.out.println(\"==============华为系列产品================\");\n        HuaweiFactory huaweiFactory = new HuaweiFactory();\n        IPhoneProduct huawei = huaweiFactory.iphoneProduct();\n        huawei.callup();\n        huawei.sendSMS();\n        IRouterProduct huaweiRouter = huaweiFactory.irouterProduct();\n        huaweiRouter.openWifi();\n        huaweiRouter.setting();\n\n\n    }\n}\n\n\n/**\n * //抽象产品工厂\n * public interface IProductFactory {\n *     //生产手机\n *     IPhoneProduct iphoneProduct();\n *     //生产路由器\n *     IRouterProduct irouterProduct();\n * }\n * \n * //手机产品接口\n * public interface IPhoneProduct {\n *     void start();\n *     void shutdown();\n *     void callup();\n *     void sendSMS();\n * }\n * \n * //路由器产品接口\n * public interface IRouterProduct {\n *     void start();\n *     void shutdown();\n *     void openWifi();\n *     void setting();\n * }\n * \n * \n * //华为工厂\n * public class HuaweiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new HuaweiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new HuaweiRouter();\n *     }\n * }\n * \n * //华为手机\n * public class HuaweiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"Huawei  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"Huawei  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"Huawei   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"Huawei sendSMS\");\n *     }\n * }\n * \n * //华为路由器\n * public class HuaweiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动华为路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭华为路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"华为由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置华为路由器\");\n *     }\n * }\n * \n * //小米工厂\n * public class XiaomiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new XiaomiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new XiaomiRouter();\n *     }\n * }\n * \n * //小米手机\n * public class XiaomiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"xiaomi  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"xiaomi  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"xiaomi   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"xiaomi sendSMS\");\n *     }\n * }\n * \n * //小米路由器\n * public class XiaomiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动小米路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭小米路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"小米路由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置小米路由器\");\n *     }\n * }\n * \n */\n```\n\n##### 运行结果\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png)\n\n---\n\n### 建造者模式\n\n#### 定义\n\n- 建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。\n- 它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 主要作用\n\n在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。\n\n- 用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\n- 例子：\n  - 工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）\n  - 汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））\n\n#### 代码\n\n```java\npackage com.design_patterns.builder;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/19/ 15:15\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //新建一个指挥\n        Director director = new Director();\n        //指挥 工人盖房子\n        Product build = director.build(new Worker());\n        System.out.println(build.toString());\n\n    }\n}\n\n\n/**\n * //抽象的建造者方法：盖房子\n * public abstract class Builder {\n *\n *     abstract void builderA();               //地基\n *     abstract void builderB();               //钢筋工程\n *     abstract void builderC();               //铺电线\n *     abstract void builderD();               //粉刷\n *     //完工：得到产品\n *     abstract Product getProduct();\n * }\n * \n * public class Product {\n *     private String buildA;\n *     private String buildB;\n *     private String buildC;\n *     private String buildD;\n *\n *     public String getBuildA() {\n *         return buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return buildD;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         this.buildA = buildA;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         this.buildB = buildB;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         this.buildC = buildC;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         this.buildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"buildA='\" + buildA + '\\'' +\n *                 \", buildB='\" + buildB + '\\'' +\n *                 \", buildC='\" + buildC + '\\'' +\n *                 \", buildD='\" + buildD + '\\'' +\n *                 '}';\n *     }\n *\n * }\n * \n * //具体的建造者：工人\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();  //工人负责创建产品\n *     }\n *\n *     @Override\n *     void builderA() {\n *         product.setBuildA(\"打好了地基\");\n *         System.out.println(product.getBuildA());\n *     }\n *\n *     @Override\n *     void builderB() {\n *         product.setBuildB(\"铺好了钢筋\");\n *         System.out.println(product.getBuildB());\n *     }\n *\n *     @Override\n *     void builderC() {\n *         product.setBuildC(\"铺好了电线\");\n *         System.out.println(product.getBuildC());\n *     }\n *\n *     @Override\n *     void builderD() {\n *         product.setBuildD(\"粉好了墙壁\");\n *         System.out.println(product.getBuildD());\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n * \n * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。\n * public class Director {\n *\n * //    指挥工人建造房子\n *     public Product build(Builder builder){\n *         builder.builderA();\n *         builder.builderB();\n *         builder.builderC();\n *         builder.builderD();\n *         //建造完成后返回一个房子；\n *         return builder.getProduct();\n *     }\n * }\n * \n * \n */\n```\n\n#### 运行结果\n\n![建造者模式](https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png)\n\n---\n\n* 上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。\n* 通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。\n* 比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。\n\n#### 无指挥类的建造者模式\n\n##### 代码\n\n```java\npackage com.design_patterns.builder.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 20:54\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //服务员\n        Worker worker = new Worker();\n        //链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。\n        Product product = worker.buildA(\"炸鸡\").buildB(\"芬达\").getProduct();\n\n        System.out.println(product.toString());\n    }\n}\n/**\n * //建造者\n * public abstract class Builder {\n *     abstract Builder buildA(String msg);  //汉堡\n *     abstract Builder buildB(String msg);  //薯条\n *     abstract Builder buildC(String msg);  //可乐\n *     abstract Builder buildD(String msg);  //甜点\n *\n *     abstract Product getProduct();\n * }\n *\n * public class Product {\n *     private String BuildA = \"汉堡\";\n *     private String BuildB = \"可乐\";\n *     private String BuildC = \"薯条\";\n *     private String BuildD = \"甜点\";\n *\n *     public String getBuildA() {\n *         return BuildA;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         BuildA = buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return BuildB;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         BuildB = buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return BuildC;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         BuildC = buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return BuildD;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         BuildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"BuildA='\" + BuildA + '\\'' +\n *                 \", BuildB='\" + BuildB + '\\'' +\n *                 \", BuildC='\" + BuildC + '\\'' +\n *                 \", BuildD='\" + BuildD + '\\'' +\n *                 '}';\n *     }\n * }\n *\n * //具体的建造者\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();\n *     }\n *\n *     @Override\n *     Builder buildA(String msg) {\n *         product.setBuildA(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildB(String msg) {\n *         product.setBuildB(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildC(String msg) {\n *         product.setBuildC(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildD(String msg) {\n *         product.setBuildD(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n *\n */\n```\n\n##### 运行结果\n\n![建造者模式2](https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。\n- 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.\n- 具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”\n\n##### 缺点\n\n- 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。\n- 如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。\n\n#### 应用场景\n\n- 需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。\n- 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、\n- 适合于一个具有较多的零件（属性）的产品（对象）的创建过程。\n\n#### 建造者与抽象工厂模式的比较\n\n- 与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。\n- 在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。\n- 如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。\n\n---\n\n### 原型模式\n\n#### 实现步骤\n\n1. 实现一个接口：Cloneable;\n2. 重写一个方法：clone();\n3. 主要用于：Spring Bean：单例模式，原型模式\n4. 原型模式+工厂模式 ===> new <=> 原型模式\n\n#### 浅克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo01;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         return super.clone();\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![原型模式](https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png)\n\n---\n\n#### 深克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo02;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         Object obj = super.clone();\n *         //深克隆，序列化与反序列化\n *         Video v = (Video) obj;\n *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化\n *         return obj;\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![深克隆模式](https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png)\n\n---\n\n#### 浅克隆与深克隆对比\n\n1. 浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。\n2. 深克隆：克隆出来的对象会把原型的属性也克隆出来。\n\n![对比](https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png)\n\n---\n\n","slug":"设计模式之创建者模式","published":1,"updated":"2022-08-25T15:05:24.933Z","layout":"post","link":"","_id":"cl796hiia002sgwrwag5gus64","content":"<h2 id=\"GOF23\"><a href=\"#GOF23\" class=\"headerlink\" title=\"GOF23\"></a>GOF23</h2><h3 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h3><ul>\n<li>单例模式</li>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n</ul>\n<h3 id=\"结构性模式\"><a href=\"#结构性模式\" class=\"headerlink\" title=\"结构性模式\"></a>结构性模式</h3><ul>\n<li>适配器模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><ul>\n<li>模板方法模式</li>\n<li>命令模式</li>\n<li>迭代器模式</li>\n<li>观察者模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>解释器模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>职责链模式</li>\n<li>访问者模式</li>\n</ul>\n<h2 id=\"创建型模式-1\"><a href=\"#创建型模式-1\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><h4 id=\"饿汉单例模式\"><a href=\"#饿汉单例模式\" class=\"headerlink\" title=\"饿汉单例模式\"></a>饿汉单例模式</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 16:44\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//饿汉单例模式</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hungry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Hungry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> Hungry HUNGRY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hungry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Hungry <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> HUNGRY<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h5><p> 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</p>\n<hr>\n<h4 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 10:10\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyMan</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 1.构造器私有化</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">LazyMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 2.实例化对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> LazyMan lazyMan<span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//给lazyMan加上volatile可以避免指令重排  保证其原子性操作。</span>\n    <span class=\"token comment\" spellcheck=\"true\">//双重检测锁模式的  懒汉式单例   DLC懒汉式</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> LazyMan <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyMan <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>LazyMan<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyMan <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    lazyMan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//不是一个原子性操作</span>\n                    <span class=\"token comment\" spellcheck=\"true\">/**\n                     *    1.分配内存空间\n                     *    2.执行构造方法，初始化对象\n                     *    3.把这个对象指向这个空间\n                     *    就有可能会出现指令重排现象\n                     *\n                     *    正常：123\n                     *    异常：132\n                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值\n                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象\n                     *\n                     */</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> lazyMan<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><ol>\n<li>懒汉模式对象如果不加volatile就会出现指令重排。</li>\n<li>而我们要保证其多线程安全，就需要加上双重锁</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>LazyMan<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyMan <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        lazyMan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazyMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//不是一个原子性操作</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><h5 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:13\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Holder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//1.构造器私有化</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Holder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//从静态内部类里返回HOLDER；</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Holder <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> InnerClass<span class=\"token punctuation\">.</span>HOLDER<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//静态内部类</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Holder HOLDER <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Holder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<blockquote>\n<p>单例不安全，因为有反射。反射会破坏单例</p>\n</blockquote>\n<p>所以为了解决这个问题我们使用枚举来实现单例模式。</p>\n<h4 id=\"枚举单例模式\"><a href=\"#枚举单例模式\" class=\"headerlink\" title=\"枚举单例模式\"></a>枚举单例模式</h4><h5 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:19\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> EnumSingle <span class=\"token punctuation\">{</span>\n    INSTANCE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> EnumSingle <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>因为反射不能破解枚举，所以我们使用枚举来实现单例模式。</p>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>实现了创建者和调用者的分离</li>\n<li>详细分类：<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n</li>\n<li>OOP七大原则<ul>\n<li>开闭原则：一个软件的实体应当对扩展开放，对修改关闭。</li>\n<li>依赖倒转原则：要针对接口编程，不要针对实现编程。</li>\n<li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。</li>\n</ul>\n</li>\n<li>核心本质<ul>\n<li>实例化对象不适用new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</li>\n</ul>\n</li>\n<li>三种模式：<ul>\n<li>简单工厂模式<ul>\n<li>用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）</li>\n</ul>\n</li>\n<li>工厂方法模式<ul>\n<li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li>\n</ul>\n</li>\n<li>抽象工厂模式<ul>\n<li>围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><h5 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>simple<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Car car = new WuLing();</span>\n<span class=\"token comment\" spellcheck=\"true\">//        Car car1 = new Tesla();</span>\n        Car car <span class=\"token operator\">=</span> CarFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"五菱\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Car car1 <span class=\"token operator\">=</span> CarFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"特斯拉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car1<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * \n * public interface Car {\n *     void name();\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class Tesla implements Car{\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class CarFactory {\n *     //方法一\n *     public static Car getCar(String car){\n *         if (car.equals(\"五菱\")){\n *             return new WuLing();\n *         }else if (car.equals(\"特斯拉\")){\n *             return new Tesla();\n *         }else {\n *             return null;\n *         }\n *     }\n *     //方法二\n *     public static Car getWuLing(){\n *         return new WuLing();\n *     }\n *     public static Car getTesla(){\n *         return new Tesla();\n *     }\n *\n * }\n */</span>\n</code></pre>\n<h5 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>未实现开闭原则</p>\n</blockquote>\n<h5 id=\"实现结果\"><a href=\"#实现结果\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png\" alt=\"简单工厂模式\"></p>\n<h5 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png\" alt=\"流程图\"></p>\n<hr>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><h5 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>simple<span class=\"token punctuation\">.</span>CarFactory<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Car car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TeslaFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Car car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WuLingFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car1<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Car car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaZhongFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        car2<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * public interface Car {\n *     void name();\n * }\n * \n * public interface CarFactory {\n *     Car getCar();\n * }\n * \n * public class DaZhong implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"DaZhong!\");\n *     }\n * }\n * \n * public class DaZhongFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new DaZhong();\n *     }\n * }\n * \n * public class Tesla implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class TeslaFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new Tesla();\n *     }\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class WuLingFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new WuLing();\n *     }\n * }\n * \n *\n */</span>\n</code></pre>\n<h5 id=\"弊端-1\"><a href=\"#弊端-1\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。</p>\n</blockquote>\n<h5 id=\"实现结果-1\"><a href=\"#实现结果-1\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png\" alt=\"工厂方法模式\"></p>\n<h5 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png\" alt=\"工厂方法模式\"></p>\n<hr>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><p>简单工厂模式（静态工厂模式）</p>\n<ul>\n<li>虽然某种程度上不符合设计原则，但实际使用最多！</li>\n</ul>\n</li>\n<li><p>工厂方法模式</p>\n<ul>\n<li>不修改已有类的前提下，通过新的工厂类实现扩展</li>\n</ul>\n</li>\n<li><p>抽象工厂模式</p>\n<ul>\n<li>不可以增加产品，可以增加产品族！</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li>JDK中的Calendar的getInstance方法</li>\n<li>JDBC中的Connection对象的获取</li>\n<li>Spring中IOC容器创建管理bean对象</li>\n<li>反射中Class对象的newInstance方法</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><ul>\n<li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类</li>\n<li>适用场景<ul>\n<li>客户端（应用层）不依赖于产品类实例如何被创建、实现的细节</li>\n<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li>\n<li>提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>\n</ul>\n</li>\n<li>优点<ul>\n<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>\n<li>将一个系列的产品统一到一起创建</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li>\n<li>增加了系统的抽象性和理解难度。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>xiheya<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>abstract1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:00\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============小米系列产品================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        XiaomiFactory xiaomiFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XiaomiFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        IPhoneProduct xiaomi <span class=\"token operator\">=</span> xiaomiFactory<span class=\"token punctuation\">.</span><span class=\"token function\">iphoneProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        xiaomi<span class=\"token punctuation\">.</span><span class=\"token function\">callup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        xiaomi<span class=\"token punctuation\">.</span><span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        IRouterProduct xiaomiRouter <span class=\"token operator\">=</span> xiaomiFactory<span class=\"token punctuation\">.</span><span class=\"token function\">irouterProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        xiaomiRouter<span class=\"token punctuation\">.</span><span class=\"token function\">openWifi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        xiaomiRouter<span class=\"token punctuation\">.</span><span class=\"token function\">setting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============华为系列产品================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        HuaweiFactory huaweiFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HuaweiFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        IPhoneProduct huawei <span class=\"token operator\">=</span> huaweiFactory<span class=\"token punctuation\">.</span><span class=\"token function\">iphoneProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        huawei<span class=\"token punctuation\">.</span><span class=\"token function\">callup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        huawei<span class=\"token punctuation\">.</span><span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        IRouterProduct huaweiRouter <span class=\"token operator\">=</span> huaweiFactory<span class=\"token punctuation\">.</span><span class=\"token function\">irouterProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        huaweiRouter<span class=\"token punctuation\">.</span><span class=\"token function\">openWifi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        huaweiRouter<span class=\"token punctuation\">.</span><span class=\"token function\">setting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * //抽象产品工厂\n * public interface IProductFactory {\n *     //生产手机\n *     IPhoneProduct iphoneProduct();\n *     //生产路由器\n *     IRouterProduct irouterProduct();\n * }\n * \n * //手机产品接口\n * public interface IPhoneProduct {\n *     void start();\n *     void shutdown();\n *     void callup();\n *     void sendSMS();\n * }\n * \n * //路由器产品接口\n * public interface IRouterProduct {\n *     void start();\n *     void shutdown();\n *     void openWifi();\n *     void setting();\n * }\n * \n * \n * //华为工厂\n * public class HuaweiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new HuaweiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new HuaweiRouter();\n *     }\n * }\n * \n * //华为手机\n * public class HuaweiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"Huawei  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"Huawei  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"Huawei   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"Huawei sendSMS\");\n *     }\n * }\n * \n * //华为路由器\n * public class HuaweiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动华为路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭华为路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"华为由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置华为路由器\");\n *     }\n * }\n * \n * //小米工厂\n * public class XiaomiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new XiaomiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new XiaomiRouter();\n *     }\n * }\n * \n * //小米手机\n * public class XiaomiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"xiaomi  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"xiaomi  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"xiaomi   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"xiaomi sendSMS\");\n *     }\n * }\n * \n * //小米路由器\n * public class XiaomiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动小米路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭小米路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"小米路由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置小米路由器\");\n *     }\n * }\n * \n */</span>\n</code></pre>\n<h5 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png\" alt=\"运行结果\"></p>\n<h5 id=\"流程图-2\"><a href=\"#流程图-2\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。</li>\n<li>它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</li>\n</ul>\n<h4 id=\"主要作用\"><a href=\"#主要作用\" class=\"headerlink\" title=\"主要作用\"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p>\n<ul>\n<li>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li>\n<li>例子：<ul>\n<li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li>\n<li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>design_patterns<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/19/ 15:15\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//新建一个指挥</span>\n        Director director <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Director</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//指挥 工人盖房子</span>\n        Product build <span class=\"token operator\">=</span> director<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>build<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * //抽象的建造者方法：盖房子\n * public abstract class Builder {\n *\n *     abstract void builderA();               //地基\n *     abstract void builderB();               //钢筋工程\n *     abstract void builderC();               //铺电线\n *     abstract void builderD();               //粉刷\n *     //完工：得到产品\n *     abstract Product getProduct();\n * }\n * \n * public class Product {\n *     private String buildA;\n *     private String buildB;\n *     private String buildC;\n *     private String buildD;\n *\n *     public String getBuildA() {\n *         return buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return buildD;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         this.buildA = buildA;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         this.buildB = buildB;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         this.buildC = buildC;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         this.buildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"buildA='\" + buildA + '\\'' +\n *                 \", buildB='\" + buildB + '\\'' +\n *                 \", buildC='\" + buildC + '\\'' +\n *                 \", buildD='\" + buildD + '\\'' +\n *                 '}';\n *     }\n *\n * }\n * \n * //具体的建造者：工人\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();  //工人负责创建产品\n *     }\n *\n *     @Override\n *     void builderA() {\n *         product.setBuildA(\"打好了地基\");\n *         System.out.println(product.getBuildA());\n *     }\n *\n *     @Override\n *     void builderB() {\n *         product.setBuildB(\"铺好了钢筋\");\n *         System.out.println(product.getBuildB());\n *     }\n *\n *     @Override\n *     void builderC() {\n *         product.setBuildC(\"铺好了电线\");\n *         System.out.println(product.getBuildC());\n *     }\n *\n *     @Override\n *     void builderD() {\n *         product.setBuildD(\"粉好了墙壁\");\n *         System.out.println(product.getBuildD());\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n * \n * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。\n * public class Director {\n *\n * //    指挥工人建造房子\n *     public Product build(Builder builder){\n *         builder.builderA();\n *         builder.builderB();\n *         builder.builderC();\n *         builder.builderD();\n *         //建造完成后返回一个房子；\n *         return builder.getProduct();\n *     }\n * }\n * \n * \n */</span>\n</code></pre>\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png\" alt=\"建造者模式\"></p>\n<hr>\n<ul>\n<li>上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</li>\n<li>通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。</li>\n<li>比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</li>\n</ul>\n<h4 id=\"无指挥类的建造者模式\"><a href=\"#无指挥类的建造者模式\" class=\"headerlink\" title=\"无指挥类的建造者模式\"></a>无指挥类的建造者模式</h4><h5 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>design_patterns<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span>demo02<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 20:54\n * @Description\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//服务员</span>\n        Worker worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。</span>\n        Product product <span class=\"token operator\">=</span> worker<span class=\"token punctuation\">.</span><span class=\"token function\">buildA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"炸鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"芬达\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * //建造者\n * public abstract class Builder {\n *     abstract Builder buildA(String msg);  //汉堡\n *     abstract Builder buildB(String msg);  //薯条\n *     abstract Builder buildC(String msg);  //可乐\n *     abstract Builder buildD(String msg);  //甜点\n *\n *     abstract Product getProduct();\n * }\n *\n * public class Product {\n *     private String BuildA = \"汉堡\";\n *     private String BuildB = \"可乐\";\n *     private String BuildC = \"薯条\";\n *     private String BuildD = \"甜点\";\n *\n *     public String getBuildA() {\n *         return BuildA;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         BuildA = buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return BuildB;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         BuildB = buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return BuildC;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         BuildC = buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return BuildD;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         BuildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"BuildA='\" + BuildA + '\\'' +\n *                 \", BuildB='\" + BuildB + '\\'' +\n *                 \", BuildC='\" + BuildC + '\\'' +\n *                 \", BuildD='\" + BuildD + '\\'' +\n *                 '}';\n *     }\n * }\n *\n * //具体的建造者\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();\n *     }\n *\n *     @Override\n *     Builder buildA(String msg) {\n *         product.setBuildA(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildB(String msg) {\n *         product.setBuildB(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildC(String msg) {\n *         product.setBuildC(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildD(String msg) {\n *         product.setBuildD(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n *\n */</span>\n</code></pre>\n<h5 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png\" alt=\"建造者模式2\"></p>\n<hr>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li>\n<li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.</li>\n<li>具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。</li>\n<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。</li>\n</ul>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、</li>\n<li>适合于一个具有较多的零件（属性）的产品（对象）的创建过程。</li>\n</ul>\n<h4 id=\"建造者与抽象工厂模式的比较\"><a href=\"#建造者与抽象工厂模式的比较\" class=\"headerlink\" title=\"建造者与抽象工厂模式的比较\"></a>建造者与抽象工厂模式的比较</h4><ul>\n<li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li>\n<li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li>\n<li>如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</li>\n</ul>\n<hr>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><ol>\n<li>实现一个接口：Cloneable;</li>\n<li>重写一个方法：clone();</li>\n<li>主要用于：Spring Bean：单例模式，原型模式</li>\n<li>原型模式+工厂模式 ===&gt; new &lt;=&gt; 原型模式</li>\n</ol>\n<h4 id=\"浅克隆模式\"><a href=\"#浅克隆模式\" class=\"headerlink\" title=\"浅克隆模式\"></a>浅克隆模式</h4><h5 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>design_patterns<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>demo01<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//客户端</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bilibili</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> CloneNotSupportedException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//原型对象 v1</span>\n        Date date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Video v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Video</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiheya\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//克隆对象 v2</span>\n        Video v2 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Video<span class=\"token punctuation\">)</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:hashcode-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:hashcode-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:hashcode-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:hashcode-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         return super.clone();\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */</span>\n</code></pre>\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png\" alt=\"原型模式\"></p>\n<hr>\n<h4 id=\"深克隆模式\"><a href=\"#深克隆模式\" class=\"headerlink\" title=\"深克隆模式\"></a>深克隆模式</h4><h5 id=\"代码-10\"><a href=\"#代码-10\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>design_patterns<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>demo02<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */</span>\n<span class=\"token comment\" spellcheck=\"true\">//客户端</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bilibili</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> CloneNotSupportedException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//原型对象 v1</span>\n        Date date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Video v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Video</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xiheya\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//克隆对象 v2</span>\n        Video v2 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Video<span class=\"token punctuation\">)</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:hashcode-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:hashcode-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1:hashcode-->\"</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2:hashcode-->\"</span> <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         Object obj = super.clone();\n *         //深克隆，序列化与反序列化\n *         Video v = (Video) obj;\n *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化\n *         return obj;\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */</span>\n</code></pre>\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png\" alt=\"深克隆模式\"></p>\n<hr>\n<h4 id=\"浅克隆与深克隆对比\"><a href=\"#浅克隆与深克隆对比\" class=\"headerlink\" title=\"浅克隆与深克隆对比\"></a>浅克隆与深克隆对比</h4><ol>\n<li>浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。</li>\n<li>深克隆：克隆出来的对象会把原型的属性也克隆出来。</li>\n</ol>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png\" alt=\"对比\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GOF23\"><a href=\"#GOF23\" class=\"headerlink\" title=\"GOF23\"></a>GOF23</h2><h3 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h3><ul>\n<li>单例模式</li>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n</ul>\n<h3 id=\"结构性模式\"><a href=\"#结构性模式\" class=\"headerlink\" title=\"结构性模式\"></a>结构性模式</h3><ul>\n<li>适配器模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><ul>\n<li>模板方法模式</li>\n<li>命令模式</li>\n<li>迭代器模式</li>\n<li>观察者模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>解释器模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>职责链模式</li>\n<li>访问者模式</li>\n</ul>\n<h2 id=\"创建型模式-1\"><a href=\"#创建型模式-1\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><h4 id=\"饿汉单例模式\"><a href=\"#饿汉单例模式\" class=\"headerlink\" title=\"饿汉单例模式\"></a>饿汉单例模式</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 16:44\n * @Description\n */\n//饿汉单例模式\npublic class Hungry {\n    //可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n    private byte[] data1 = new byte[1024*1024];\n    private byte[] data2 = new byte[1024*1024];\n    private byte[] data3 = new byte[1024*1024];\n    private byte[] data4 = new byte[1024*1024];\n\n    private Hungry(){\n\n    }\n\n    private final static Hungry HUNGRY = new Hungry();\n\n    public static Hungry getInstance(){\n        return HUNGRY;\n    }\n\n}\n</code></pre>\n<h5 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h5><p> 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</p>\n<hr>\n<h4 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 10:10\n * @Description\n */\npublic class LazyMan {\n    // 1.构造器私有化\n    private LazyMan(){\n\n    }\n    // 2.实例化对象\n    private volatile static LazyMan lazyMan;            //给lazyMan加上volatile可以避免指令重排  保证其原子性操作。\n    //双重检测锁模式的  懒汉式单例   DLC懒汉式\n    public static LazyMan getInstance(){\n        if (lazyMan == null){\n            synchronized (LazyMan.class){\n                if (lazyMan == null){\n                    lazyMan = new LazyMan();            //不是一个原子性操作\n                    /**\n                     *    1.分配内存空间\n                     *    2.执行构造方法，初始化对象\n                     *    3.把这个对象指向这个空间\n                     *    就有可能会出现指令重排现象\n                     *\n                     *    正常：123\n                     *    异常：132\n                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值\n                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象\n                     *\n                     */\n                }\n            }\n        }\n\n        return lazyMan;\n    }\n}\n</code></pre>\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><ol>\n<li>懒汉模式对象如果不加volatile就会出现指令重排。</li>\n<li>而我们要保证其多线程安全，就需要加上双重锁</li>\n</ol>\n<pre><code class=\"java\">synchronized (LazyMan.class){\n    if (lazyMan == null){\n        lazyMan = new LazyMan();            //不是一个原子性操作\n    }\n</code></pre>\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><h5 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:13\n * @Description\n */\npublic class Holder {\n    //1.构造器私有化\n    private Holder(){\n\n    }\n    //从静态内部类里返回HOLDER；\n    public static Holder getInstance(){\n        return InnerClass.HOLDER;\n    }\n\n    //静态内部类\n    public static class InnerClass{\n        private static final Holder HOLDER = new Holder();\n    }\n}\n</code></pre>\n<hr>\n<blockquote>\n<p>单例不安全，因为有反射。反射会破坏单例</p>\n</blockquote>\n<p>所以为了解决这个问题我们使用枚举来实现单例模式。</p>\n<h4 id=\"枚举单例模式\"><a href=\"#枚举单例模式\" class=\"headerlink\" title=\"枚举单例模式\"></a>枚举单例模式</h4><h5 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:19\n * @Description\n */\npublic enum EnumSingle {\n    INSTANCE;\n    public EnumSingle getInstance(){\n        return INSTANCE;\n    }\n}\n</code></pre>\n<p>因为反射不能破解枚举，所以我们使用枚举来实现单例模式。</p>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>实现了创建者和调用者的分离</li>\n<li>详细分类：<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n</li>\n<li>OOP七大原则<ul>\n<li>开闭原则：一个软件的实体应当对扩展开放，对修改关闭。</li>\n<li>依赖倒转原则：要针对接口编程，不要针对实现编程。</li>\n<li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。</li>\n</ul>\n</li>\n<li>核心本质<ul>\n<li>实例化对象不适用new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</li>\n</ul>\n</li>\n<li>三种模式：<ul>\n<li>简单工厂模式<ul>\n<li>用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）</li>\n</ul>\n</li>\n<li>工厂方法模式<ul>\n<li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li>\n</ul>\n</li>\n<li>抽象工厂模式<ul>\n<li>围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><h5 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.factory.simple;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n//        Car car = new WuLing();\n//        Car car1 = new Tesla();\n        Car car = CarFactory.getCar(&quot;五菱&quot;);\n        Car car1 = CarFactory.getCar(&quot;特斯拉&quot;);\n        car.name();\n        car1.name();\n\n    }\n\n}\n\n/**\n * \n * public interface Car {\n *     void name();\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(&quot;wuling&quot;);\n *     }\n * }\n * \n * public class Tesla implements Car{\n *     @Override\n *     public void name() {\n *         System.out.println(&quot;Tesla!&quot;);\n *     }\n * }\n * \n * public class CarFactory {\n *     //方法一\n *     public static Car getCar(String car){\n *         if (car.equals(&quot;五菱&quot;)){\n *             return new WuLing();\n *         }else if (car.equals(&quot;特斯拉&quot;)){\n *             return new Tesla();\n *         }else {\n *             return null;\n *         }\n *     }\n *     //方法二\n *     public static Car getWuLing(){\n *         return new WuLing();\n *     }\n *     public static Car getTesla(){\n *         return new Tesla();\n *     }\n *\n * }\n */\n</code></pre>\n<h5 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>未实现开闭原则</p>\n</blockquote>\n<h5 id=\"实现结果\"><a href=\"#实现结果\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png\" alt=\"简单工厂模式\"></p>\n<h5 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png\" alt=\"流程图\"></p>\n<hr>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><h5 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.factory.method;\n\nimport com.xiheya.factory.simple.CarFactory;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        Car car = new TeslaFactory().getCar();\n        car.name();\n        Car car1 = new WuLingFactory().getCar();\n        car1.name();\n        Car car2 = new DaZhongFactory().getCar();\n        car2.name();\n    }\n\n}\n\n/**\n * public interface Car {\n *     void name();\n * }\n * \n * public interface CarFactory {\n *     Car getCar();\n * }\n * \n * public class DaZhong implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(&quot;DaZhong!&quot;);\n *     }\n * }\n * \n * public class DaZhongFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new DaZhong();\n *     }\n * }\n * \n * public class Tesla implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(&quot;Tesla!&quot;);\n *     }\n * }\n * \n * public class TeslaFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new Tesla();\n *     }\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(&quot;wuling&quot;);\n *     }\n * }\n * \n * public class WuLingFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new WuLing();\n *     }\n * }\n * \n *\n */\n</code></pre>\n<h5 id=\"弊端-1\"><a href=\"#弊端-1\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。</p>\n</blockquote>\n<h5 id=\"实现结果-1\"><a href=\"#实现结果-1\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png\" alt=\"工厂方法模式\"></p>\n<h5 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png\" alt=\"工厂方法模式\"></p>\n<hr>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><p>简单工厂模式（静态工厂模式）</p>\n<ul>\n<li>虽然某种程度上不符合设计原则，但实际使用最多！</li>\n</ul>\n</li>\n<li><p>工厂方法模式</p>\n<ul>\n<li>不修改已有类的前提下，通过新的工厂类实现扩展</li>\n</ul>\n</li>\n<li><p>抽象工厂模式</p>\n<ul>\n<li>不可以增加产品，可以增加产品族！</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li>JDK中的Calendar的getInstance方法</li>\n<li>JDBC中的Connection对象的获取</li>\n<li>Spring中IOC容器创建管理bean对象</li>\n<li>反射中Class对象的newInstance方法</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><ul>\n<li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类</li>\n<li>适用场景<ul>\n<li>客户端（应用层）不依赖于产品类实例如何被创建、实现的细节</li>\n<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li>\n<li>提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>\n</ul>\n</li>\n<li>优点<ul>\n<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>\n<li>将一个系列的产品统一到一起创建</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li>\n<li>增加了系统的抽象性和理解难度。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.xiheya.factory.abstract1;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:00\n * @Description\n */\npublic class Client {\n    public static void main(String[] args) {\n        System.out.println(&quot;==============小米系列产品================&quot;);\n        XiaomiFactory xiaomiFactory = new XiaomiFactory();\n        IPhoneProduct xiaomi = xiaomiFactory.iphoneProduct();\n        xiaomi.callup();\n        xiaomi.sendSMS();\n        IRouterProduct xiaomiRouter = xiaomiFactory.irouterProduct();\n        xiaomiRouter.openWifi();\n        xiaomiRouter.setting();\n\n        System.out.println(&quot;==============华为系列产品================&quot;);\n        HuaweiFactory huaweiFactory = new HuaweiFactory();\n        IPhoneProduct huawei = huaweiFactory.iphoneProduct();\n        huawei.callup();\n        huawei.sendSMS();\n        IRouterProduct huaweiRouter = huaweiFactory.irouterProduct();\n        huaweiRouter.openWifi();\n        huaweiRouter.setting();\n\n\n    }\n}\n\n\n/**\n * //抽象产品工厂\n * public interface IProductFactory {\n *     //生产手机\n *     IPhoneProduct iphoneProduct();\n *     //生产路由器\n *     IRouterProduct irouterProduct();\n * }\n * \n * //手机产品接口\n * public interface IPhoneProduct {\n *     void start();\n *     void shutdown();\n *     void callup();\n *     void sendSMS();\n * }\n * \n * //路由器产品接口\n * public interface IRouterProduct {\n *     void start();\n *     void shutdown();\n *     void openWifi();\n *     void setting();\n * }\n * \n * \n * //华为工厂\n * public class HuaweiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new HuaweiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new HuaweiRouter();\n *     }\n * }\n * \n * //华为手机\n * public class HuaweiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(&quot;Huawei  start&quot;);\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(&quot;Huawei  shutdown&quot;);\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(&quot;Huawei   callup&quot;);\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(&quot;Huawei sendSMS&quot;);\n *     }\n * }\n * \n * //华为路由器\n * public class HuaweiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(&quot;启动华为路由器&quot;);\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(&quot;关闭华为路由器&quot;);\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(&quot;华为由器打开WiFi&quot;);\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(&quot;配置华为路由器&quot;);\n *     }\n * }\n * \n * //小米工厂\n * public class XiaomiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new XiaomiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new XiaomiRouter();\n *     }\n * }\n * \n * //小米手机\n * public class XiaomiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(&quot;xiaomi  start&quot;);\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(&quot;xiaomi  shutdown&quot;);\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(&quot;xiaomi   callup&quot;);\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(&quot;xiaomi sendSMS&quot;);\n *     }\n * }\n * \n * //小米路由器\n * public class XiaomiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(&quot;启动小米路由器&quot;);\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(&quot;关闭小米路由器&quot;);\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(&quot;小米路由器打开WiFi&quot;);\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(&quot;配置小米路由器&quot;);\n *     }\n * }\n * \n */\n</code></pre>\n<h5 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png\" alt=\"运行结果\"></p>\n<h5 id=\"流程图-2\"><a href=\"#流程图-2\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。</li>\n<li>它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</li>\n</ul>\n<h4 id=\"主要作用\"><a href=\"#主要作用\" class=\"headerlink\" title=\"主要作用\"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p>\n<ul>\n<li>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li>\n<li>例子：<ul>\n<li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li>\n<li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h4><pre><code class=\"java\">package com.design_patterns.builder;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/19/ 15:15\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //新建一个指挥\n        Director director = new Director();\n        //指挥 工人盖房子\n        Product build = director.build(new Worker());\n        System.out.println(build.toString());\n\n    }\n}\n\n\n/**\n * //抽象的建造者方法：盖房子\n * public abstract class Builder {\n *\n *     abstract void builderA();               //地基\n *     abstract void builderB();               //钢筋工程\n *     abstract void builderC();               //铺电线\n *     abstract void builderD();               //粉刷\n *     //完工：得到产品\n *     abstract Product getProduct();\n * }\n * \n * public class Product {\n *     private String buildA;\n *     private String buildB;\n *     private String buildC;\n *     private String buildD;\n *\n *     public String getBuildA() {\n *         return buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return buildD;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         this.buildA = buildA;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         this.buildB = buildB;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         this.buildC = buildC;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         this.buildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return &quot;Product{&quot; +\n *                 &quot;buildA=&#39;&quot; + buildA + &#39;\\&#39;&#39; +\n *                 &quot;, buildB=&#39;&quot; + buildB + &#39;\\&#39;&#39; +\n *                 &quot;, buildC=&#39;&quot; + buildC + &#39;\\&#39;&#39; +\n *                 &quot;, buildD=&#39;&quot; + buildD + &#39;\\&#39;&#39; +\n *                 &#39;}&#39;;\n *     }\n *\n * }\n * \n * //具体的建造者：工人\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();  //工人负责创建产品\n *     }\n *\n *     @Override\n *     void builderA() {\n *         product.setBuildA(&quot;打好了地基&quot;);\n *         System.out.println(product.getBuildA());\n *     }\n *\n *     @Override\n *     void builderB() {\n *         product.setBuildB(&quot;铺好了钢筋&quot;);\n *         System.out.println(product.getBuildB());\n *     }\n *\n *     @Override\n *     void builderC() {\n *         product.setBuildC(&quot;铺好了电线&quot;);\n *         System.out.println(product.getBuildC());\n *     }\n *\n *     @Override\n *     void builderD() {\n *         product.setBuildD(&quot;粉好了墙壁&quot;);\n *         System.out.println(product.getBuildD());\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n * \n * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。\n * public class Director {\n *\n * //    指挥工人建造房子\n *     public Product build(Builder builder){\n *         builder.builderA();\n *         builder.builderB();\n *         builder.builderC();\n *         builder.builderD();\n *         //建造完成后返回一个房子；\n *         return builder.getProduct();\n *     }\n * }\n * \n * \n */\n</code></pre>\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png\" alt=\"建造者模式\"></p>\n<hr>\n<ul>\n<li>上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</li>\n<li>通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。</li>\n<li>比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</li>\n</ul>\n<h4 id=\"无指挥类的建造者模式\"><a href=\"#无指挥类的建造者模式\" class=\"headerlink\" title=\"无指挥类的建造者模式\"></a>无指挥类的建造者模式</h4><h5 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.design_patterns.builder.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 20:54\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //服务员\n        Worker worker = new Worker();\n        //链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。\n        Product product = worker.buildA(&quot;炸鸡&quot;).buildB(&quot;芬达&quot;).getProduct();\n\n        System.out.println(product.toString());\n    }\n}\n/**\n * //建造者\n * public abstract class Builder {\n *     abstract Builder buildA(String msg);  //汉堡\n *     abstract Builder buildB(String msg);  //薯条\n *     abstract Builder buildC(String msg);  //可乐\n *     abstract Builder buildD(String msg);  //甜点\n *\n *     abstract Product getProduct();\n * }\n *\n * public class Product {\n *     private String BuildA = &quot;汉堡&quot;;\n *     private String BuildB = &quot;可乐&quot;;\n *     private String BuildC = &quot;薯条&quot;;\n *     private String BuildD = &quot;甜点&quot;;\n *\n *     public String getBuildA() {\n *         return BuildA;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         BuildA = buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return BuildB;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         BuildB = buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return BuildC;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         BuildC = buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return BuildD;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         BuildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return &quot;Product{&quot; +\n *                 &quot;BuildA=&#39;&quot; + BuildA + &#39;\\&#39;&#39; +\n *                 &quot;, BuildB=&#39;&quot; + BuildB + &#39;\\&#39;&#39; +\n *                 &quot;, BuildC=&#39;&quot; + BuildC + &#39;\\&#39;&#39; +\n *                 &quot;, BuildD=&#39;&quot; + BuildD + &#39;\\&#39;&#39; +\n *                 &#39;}&#39;;\n *     }\n * }\n *\n * //具体的建造者\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();\n *     }\n *\n *     @Override\n *     Builder buildA(String msg) {\n *         product.setBuildA(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildB(String msg) {\n *         product.setBuildB(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildC(String msg) {\n *         product.setBuildC(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildD(String msg) {\n *         product.setBuildD(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n *\n */\n</code></pre>\n<h5 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png\" alt=\"建造者模式2\"></p>\n<hr>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li>\n<li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.</li>\n<li>具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。</li>\n<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。</li>\n</ul>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、</li>\n<li>适合于一个具有较多的零件（属性）的产品（对象）的创建过程。</li>\n</ul>\n<h4 id=\"建造者与抽象工厂模式的比较\"><a href=\"#建造者与抽象工厂模式的比较\" class=\"headerlink\" title=\"建造者与抽象工厂模式的比较\"></a>建造者与抽象工厂模式的比较</h4><ul>\n<li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li>\n<li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li>\n<li>如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</li>\n</ul>\n<hr>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><ol>\n<li>实现一个接口：Cloneable;</li>\n<li>重写一个方法：clone();</li>\n<li>主要用于：Spring Bean：单例模式，原型模式</li>\n<li>原型模式+工厂模式 ===&gt; new &lt;=&gt; 原型模式</li>\n</ol>\n<h4 id=\"浅克隆模式\"><a href=\"#浅克隆模式\" class=\"headerlink\" title=\"浅克隆模式\"></a>浅克隆模式</h4><h5 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.design_patterns.prototype.demo01;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(&quot;xiheya&quot;,date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(&quot;v1--&gt;&quot; + v1);\n        System.out.println(&quot;v1:hashcode--&gt;&quot; + v1.hashCode());\n        System.out.println(&quot;v2--&gt;&quot; + v2);\n        System.out.println(&quot;v2:hashcode--&gt;&quot; + v2.hashCode());\n        System.out.println(&quot;====================================&quot;);\n        date.setTime(123456);\n        System.out.println(&quot;v1--&gt;&quot; + v1);\n        System.out.println(&quot;v1:hashcode--&gt;&quot; + v1.hashCode());\n        System.out.println(&quot;v2--&gt;&quot; + v2);\n        System.out.println(&quot;v2:hashcode--&gt;&quot; + v2.hashCode());\n        System.out.println(&quot;====================================&quot;);\n    }\n}\n\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         return super.clone();\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return &quot;Video{&quot; +\n *                 &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n *                 &quot;, creatTime=&quot; + creatTime +\n *                 &#39;}&#39;;\n *     }\n * }\n */\n</code></pre>\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png\" alt=\"原型模式\"></p>\n<hr>\n<h4 id=\"深克隆模式\"><a href=\"#深克隆模式\" class=\"headerlink\" title=\"深克隆模式\"></a>深克隆模式</h4><h5 id=\"代码-10\"><a href=\"#代码-10\" class=\"headerlink\" title=\"代码\"></a>代码</h5><pre><code class=\"java\">package com.design_patterns.prototype.demo02;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(&quot;xiheya&quot;,date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(&quot;v1--&gt;&quot; + v1);\n        System.out.println(&quot;v1:hashcode--&gt;&quot; + v1.hashCode());\n        System.out.println(&quot;v2--&gt;&quot; + v2);\n        System.out.println(&quot;v2:hashcode--&gt;&quot; + v2.hashCode());\n        System.out.println(&quot;====================================&quot;);\n        date.setTime(123456);\n        System.out.println(&quot;v1--&gt;&quot; + v1);\n        System.out.println(&quot;v1:hashcode--&gt;&quot; + v1.hashCode());\n        System.out.println(&quot;v2--&gt;&quot; + v2);\n        System.out.println(&quot;v2:hashcode--&gt;&quot; + v2.hashCode());\n        System.out.println(&quot;====================================&quot;);\n    }\n}\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         Object obj = super.clone();\n *         //深克隆，序列化与反序列化\n *         Video v = (Video) obj;\n *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化\n *         return obj;\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return &quot;Video{&quot; +\n *                 &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n *                 &quot;, creatTime=&quot; + creatTime +\n *                 &#39;}&#39;;\n *     }\n * }\n */\n</code></pre>\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png\" alt=\"深克隆模式\"></p>\n<hr>\n<h4 id=\"浅克隆与深克隆对比\"><a href=\"#浅克隆与深克隆对比\" class=\"headerlink\" title=\"浅克隆与深克隆对比\"></a>浅克隆与深克隆对比</h4><ol>\n<li>浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。</li>\n<li>深克隆：克隆出来的对象会把原型的属性也克隆出来。</li>\n</ol>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png\" alt=\"对比\"></p>\n<hr>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl796higz0008gwrw48ml6q2v","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihd000hgwrw850okzyn"},{"post_id":"cl796higo0000gwrwg1sx3b39","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihg000mgwrwhbq9qqfy"},{"post_id":"cl796hih5000agwrww9ki6b0q","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihj000qgwrwr7jjiz2l"},{"post_id":"cl796hiha000egwrwsr32lo14","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihm000vgwrw9ppe395e"},{"post_id":"cl796higu0002gwrwzdghm2xs","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiho000zgwrwucss3mfa"},{"post_id":"cl796hihc000ggwrwmzmgpvyz","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihq0014gwrwfayj6f0q"},{"post_id":"cl796hihf000lgwrwmb4zd6fa","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihs0018gwrw26k9titx"},{"post_id":"cl796higx0006gwrwann98lnp","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiht001dgwrwxx7nj3jc"},{"post_id":"cl796hihi000pgwrwlu62g01o","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihu001fgwrwgtgp6bvo"},{"post_id":"cl796hihl000ugwrwsdu83kfd","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihv001igwrws4td4pnr"},{"post_id":"cl796hihn000ygwrwhcxcju02","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihw001lgwrwug4ajltv"},{"post_id":"cl796hihq0013gwrw1lgv5v65","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihx001pgwrwhzta4lio"},{"post_id":"cl796hihr0017gwrw2gmgxkgf","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hihz001sgwrw0y3d2p9o"},{"post_id":"cl796hiht001cgwrwwttycnuo","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii0001wgwrw8yg55vgg"},{"post_id":"cl796hihu001egwrwq1h154y3","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii1001zgwrwkhdybntt"},{"post_id":"cl796hihv001hgwrw9sae99fa","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii20022gwrwo6hz41ut"},{"post_id":"cl796hihw001kgwrw8k4yhk6q","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii30026gwrwmr14lxff"},{"post_id":"cl796hihx001ogwrwtjsb1im0","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii4002agwrw0pggqs9a"},{"post_id":"cl796hihy001rgwrwhod7k6ot","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii6002egwrwctlya2l1"},{"post_id":"cl796hihz001vgwrw3w74o61v","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii7002hgwrwea3avqeq"},{"post_id":"cl796hii0001ygwrwaov2qf8t","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii8002lgwrw4m4txbw5"},{"post_id":"cl796hii20025gwrw6ao4yomf","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hii9002ogwrwqja9tltw"},{"post_id":"cl796hii40029gwrwuwg7vgj3","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiib002tgwrwcjs0z5xk"},{"post_id":"cl796hii5002dgwrwr741xxxi","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiib002vgwrwe0hi5050"},{"post_id":"cl796hii10021gwrwz74cv88l","category_id":"cl796hii30028gwrwi3u8joay","_id":"cl796hiic002ygwrwmvs5jt6v"},{"post_id":"cl796hii6002ggwrw466qmtes","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiic0030gwrworsme83n"},{"post_id":"cl796hii8002ngwrwamn7mdij","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiid0033gwrw8nzhrg0z"},{"post_id":"cl796hiia002sgwrwag5gus64","category_id":"cl796higw0004gwrwqljg79g9","_id":"cl796hiid0035gwrw6sl1a1e1"},{"post_id":"cl796hii8002kgwrwycnbj4j3","category_id":"cl796hiia002rgwrwu86r3iuy","_id":"cl796hiid0038gwrwbsi13dz6"}],"PostTag":[{"post_id":"cl796higo0000gwrwg1sx3b39","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hihg000ngwrwaflgn9l9"},{"post_id":"cl796higo0000gwrwg1sx3b39","tag_id":"cl796hih7000cgwrwqyh7qal3","_id":"cl796hihj000rgwrwygmht642"},{"post_id":"cl796hihc000ggwrwmzmgpvyz","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hihm000wgwrw53q9f0o1"},{"post_id":"cl796hihc000ggwrwmzmgpvyz","tag_id":"cl796hih7000cgwrwqyh7qal3","_id":"cl796hiho0010gwrwib4n2om6"},{"post_id":"cl796higu0002gwrwzdghm2xs","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hihq0015gwrwcg5zmzwm"},{"post_id":"cl796higu0002gwrwzdghm2xs","tag_id":"cl796hih7000cgwrwqyh7qal3","_id":"cl796hihs0019gwrwdxp423pg"},{"post_id":"cl796higx0006gwrwann98lnp","tag_id":"cl796hihp0012gwrwo28ll3cx","_id":"cl796hihw001jgwrwolmtbop8"},{"post_id":"cl796higx0006gwrwann98lnp","tag_id":"cl796hihs001bgwrwl8vvgyzj","_id":"cl796hihx001mgwrwbg2xk4fp"},{"post_id":"cl796hihv001hgwrw9sae99fa","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hihy001qgwrwo20d0tzs"},{"post_id":"cl796higz0008gwrw48ml6q2v","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hihz001tgwrw4m9h1lo6"},{"post_id":"cl796higz0008gwrw48ml6q2v","tag_id":"cl796hih7000cgwrwqyh7qal3","_id":"cl796hii0001xgwrwfmj0yz03"},{"post_id":"cl796hih5000agwrww9ki6b0q","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hii10020gwrwxrteyzrb"},{"post_id":"cl796hih5000agwrww9ki6b0q","tag_id":"cl796hih7000cgwrwqyh7qal3","_id":"cl796hii20024gwrwdvngp7f1"},{"post_id":"cl796hiha000egwrwsr32lo14","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hii30027gwrwp7b9vlak"},{"post_id":"cl796hiha000egwrwsr32lo14","tag_id":"cl796hihz001ugwrwx7qice7z","_id":"cl796hii5002cgwrwvaom4mfu"},{"post_id":"cl796hihf000lgwrwmb4zd6fa","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hii6002fgwrw6akryo7q"},{"post_id":"cl796hihf000lgwrwmb4zd6fa","tag_id":"cl796hii20023gwrwiv9lbimu","_id":"cl796hii7002jgwrwgmqvgsl6"},{"post_id":"cl796hihi000pgwrwlu62g01o","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hii8002mgwrwkphji68s"},{"post_id":"cl796hihi000pgwrwlu62g01o","tag_id":"cl796hihz001ugwrwx7qice7z","_id":"cl796hiia002qgwrwvd6b7vil"},{"post_id":"cl796hihl000ugwrwsdu83kfd","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiib002ugwrwl1u1en9c"},{"post_id":"cl796hihl000ugwrwsdu83kfd","tag_id":"cl796hii20023gwrwiv9lbimu","_id":"cl796hiic002xgwrw2y01qzwb"},{"post_id":"cl796hihn000ygwrwhcxcju02","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiic002zgwrwpcsprps8"},{"post_id":"cl796hihn000ygwrwhcxcju02","tag_id":"cl796hii20023gwrwiv9lbimu","_id":"cl796hiid0032gwrwlk6gy887"},{"post_id":"cl796hihq0013gwrw1lgv5v65","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiid0034gwrwgyckowuz"},{"post_id":"cl796hihq0013gwrw1lgv5v65","tag_id":"cl796hiic002wgwrwxnlnjcs9","_id":"cl796hiid0036gwrwh9iqibxm"},{"post_id":"cl796hihr0017gwrw2gmgxkgf","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiie0039gwrw8b8vkubg"},{"post_id":"cl796hihr0017gwrw2gmgxkgf","tag_id":"cl796hiic0031gwrw41ikajfo","_id":"cl796hiif003agwrwbui1gpih"},{"post_id":"cl796hiht001cgwrwwttycnuo","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiif003cgwrw17scn5e4"},{"post_id":"cl796hiht001cgwrwwttycnuo","tag_id":"cl796hiid0037gwrwdrah80m1","_id":"cl796hiif003dgwrw4yio5d1c"},{"post_id":"cl796hihu001egwrwq1h154y3","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiig003fgwrw3s7ftn1l"},{"post_id":"cl796hihu001egwrwq1h154y3","tag_id":"cl796hiic0031gwrw41ikajfo","_id":"cl796hiig003ggwrwe8gx3l9p"},{"post_id":"cl796hihw001kgwrw8k4yhk6q","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiig003igwrwf644ak90"},{"post_id":"cl796hihw001kgwrw8k4yhk6q","tag_id":"cl796hiic0031gwrw41ikajfo","_id":"cl796hiig003jgwrw8i6e33ai"},{"post_id":"cl796hihx001ogwrwtjsb1im0","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiih003lgwrwxrk0f2d1"},{"post_id":"cl796hihx001ogwrwtjsb1im0","tag_id":"cl796hiig003hgwrwvbk74djt","_id":"cl796hiih003mgwrwpqv61s3u"},{"post_id":"cl796hihy001rgwrwhod7k6ot","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiii003ogwrw6s1g9fq5"},{"post_id":"cl796hihy001rgwrwhod7k6ot","tag_id":"cl796hiig003hgwrwvbk74djt","_id":"cl796hiii003pgwrw1ygmjoh5"},{"post_id":"cl796hihz001vgwrw3w74o61v","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiii003rgwrwndvv6unx"},{"post_id":"cl796hihz001vgwrw3w74o61v","tag_id":"cl796hiig003hgwrwvbk74djt","_id":"cl796hiii003sgwrw9wdzbe8r"},{"post_id":"cl796hii0001ygwrwaov2qf8t","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiij003ugwrw80az0iv2"},{"post_id":"cl796hii0001ygwrwaov2qf8t","tag_id":"cl796hiig003hgwrwvbk74djt","_id":"cl796hiij003vgwrw4sbqi0q6"},{"post_id":"cl796hii10021gwrwz74cv88l","tag_id":"cl796hiij003tgwrw9t87gy42","_id":"cl796hiij003xgwrw5sxzyfyx"},{"post_id":"cl796hii20025gwrw6ao4yomf","tag_id":"cl796hiij003wgwrwtx83k1lh","_id":"cl796hiik0040gwrwhpk0sm70"},{"post_id":"cl796hii20025gwrw6ao4yomf","tag_id":"cl796hiij003ygwrw6jod2bb9","_id":"cl796hiik0041gwrw781gd24b"},{"post_id":"cl796hii40029gwrwuwg7vgj3","tag_id":"cl796hiik003zgwrwnp8j5w0m","_id":"cl796hiik0043gwrwxhcvl6dg"},{"post_id":"cl796hii5002dgwrwr741xxxi","tag_id":"cl796hiik0042gwrw5khkgdj3","_id":"cl796hiil0045gwrw6edhga3o"},{"post_id":"cl796hii6002ggwrw466qmtes","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiil0047gwrwp0d6l6qe"},{"post_id":"cl796hii6002ggwrw466qmtes","tag_id":"cl796hiik0044gwrwncivr1vp","_id":"cl796hiil0048gwrw1mxtco8u"},{"post_id":"cl796hii8002kgwrwycnbj4j3","tag_id":"cl796hiij003wgwrwtx83k1lh","_id":"cl796hiim004agwrwkgfpcm30"},{"post_id":"cl796hii8002ngwrwamn7mdij","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiim004cgwrwajb2ii78"},{"post_id":"cl796hii8002ngwrwamn7mdij","tag_id":"cl796hiil0049gwrwspmz3kg5","_id":"cl796hiim004dgwrw3q8uynww"},{"post_id":"cl796hiia002sgwrwag5gus64","tag_id":"cl796higx0005gwrw0z0g5tqq","_id":"cl796hiin004egwrwpri3o0fg"},{"post_id":"cl796hiia002sgwrwag5gus64","tag_id":"cl796hiil0049gwrwspmz3kg5","_id":"cl796hiin004fgwrwzl8at14x"}],"Tag":[{"name":"Java","_id":"cl796higx0005gwrw0z0g5tqq"},{"name":"Java基础语法","_id":"cl796hih7000cgwrwqyh7qal3"},{"name":"web","_id":"cl796hihp0012gwrwo28ll3cx"},{"name":"悦读","_id":"cl796hihs001bgwrwl8vvgyzj"},{"name":"Java异常","_id":"cl796hihz001ugwrwx7qice7z"},{"name":"Java数组","_id":"cl796hii20023gwrwiv9lbimu"},{"name":"Java方法","_id":"cl796hiic002wgwrwxnlnjcs9"},{"name":"Java流程控制","_id":"cl796hiic0031gwrw41ikajfo"},{"name":"Java特性","_id":"cl796hiid0037gwrwdrah80m1"},{"name":"Java面向对象","_id":"cl796hiig003hgwrwvbk74djt"},{"name":"WP","_id":"cl796hiij003tgwrw9t87gy42"},{"name":"随笔","_id":"cl796hiij003wgwrwtx83k1lh"},{"name":"Dos","_id":"cl796hiij003ygwrw6jod2bb9"},{"name":"Markdown","_id":"cl796hiik003zgwrwnp8j5w0m"},{"name":"硬件","_id":"cl796hiik0042gwrw5khkgdj3"},{"name":"排序算法","_id":"cl796hiik0044gwrwncivr1vp"},{"name":"设计模式","_id":"cl796hiil0049gwrwspmz3kg5"}]}}