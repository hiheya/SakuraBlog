{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/people.html","path":"people.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/ariasakablog.css","path":"css/ariasakablog.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/commentBarrage.css","path":"css/commentBarrage.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/danmaku.css","path":"css/danmaku.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/iconfont.css","path":"css/iconfont.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/iconfont.ttf","path":"css/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/iconfont.woff","path":"css/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/iconfont.woff2","path":"css/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/people.css","path":"css/people.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/rightmenu.css","path":"css/rightmenu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/stylessimple.css","path":"css/stylessimple.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/swiper.min.css","path":"css/swiper.min.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/swiperstyle.css","path":"css/swiperstyle.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon1.png","path":"img/favicon1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/nyancat.gif","path":"img/nyancat.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/aplayersave.js","path":"js/aplayersave.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/baiduhistory.js","path":"js/baiduhistory.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/bbtalk.js","path":"js/bbtalk.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/bbtalklunbo.js","path":"js/bbtalklunbo.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/browser.js","path":"js/browser.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/calendar.js","path":"js/calendar.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/cate.js","path":"js/cate.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/commentBarrage.js","path":"js/commentBarrage.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/commentsCount.js","path":"js/commentsCount.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/countup.js","path":"js/countup.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/cursor.js","path":"js/cursor.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/danmaku.js","path":"js/danmaku.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/day.js","path":"js/day.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/dianzan.js","path":"js/dianzan.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/dis.js","path":"js/dis.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/fixbugpjax.js","path":"js/fixbugpjax.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/fixed_card_widget.js","path":"js/fixed_card_widget.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/fps.js","path":"js/fps.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/gitalker.js","path":"js/gitalker.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/heimu.js","path":"js/heimu.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/hide.show.js","path":"js/hide.show.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/languages.js","path":"js/languages.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/latest.js","path":"js/latest.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/lunar.js","path":"js/lunar.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/lyxTalk.js","path":"js/lyxTalk.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/nav.js","path":"js/nav.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/noie.js","path":"js/noie.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/owo.js","path":"js/owo.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/people.js","path":"js/people.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/randomFriend.js","path":"js/randomFriend.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/resizeTop.js","path":"js/resizeTop.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/rightmenu.js","path":"js/rightmenu.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sakura.js","path":"js/sakura.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/seo.js","path":"js/seo.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/settings.js","path":"js/settings.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sitetime.js","path":"js/sitetime.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/smooth-scrolling.js","path":"js/smooth-scrolling.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sw-toolbox.js","path":"js/sw-toolbox.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/swiperinit.js","path":"js/swiperinit.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/twikoo.all.min.js","path":"js/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/welcome.js","path":"js/welcome.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/welcomeconsole.js","path":"js/welcomeconsole.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mycss/background.css","path":"css/mycss/background.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img1.png","path":"img/setting/img1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mycss/bar.css","path":"css/mycss/bar.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mycss/people.css","path":"css/mycss/people.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mycss/setting.css","path":"css/mycss/setting.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img10.png","path":"img/setting/img10.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img11.png","path":"img/setting/img11.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img12.png","path":"img/setting/img12.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img13.png","path":"img/setting/img13.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img2.png","path":"img/setting/img2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img3.png","path":"img/setting/img3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img4.png","path":"img/setting/img4.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img5.png","path":"img/setting/img5.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img6.png","path":"img/setting/img6.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img7.png","path":"img/setting/img7.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img8.png","path":"img/setting/img8.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/setting/img9.png","path":"img/setting/img9.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/myjs/baiduhistory.js","path":"js/myjs/baiduhistory.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/myjs/banner.js","path":"js/myjs/banner.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/myjs/setting.js","path":"js/myjs/setting.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/myjs/people.js","path":"js/myjs/people.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Font-Awesome-Animation各个图标效果.md","hash":"7ac63483e02e3d7cdb3b4d9ccf215d5974bcb2fb","modified":1690807209538},{"_id":"source/_posts/Hexo-Theme-Sakura.md","hash":"252494c233264beb8001a3b3b5729d4b53204b3a","modified":1690807209541},{"_id":"source/_posts/Java基础小结.md","hash":"877c404c5a903b66b32ca5076765d69728cd27e7","modified":1690807209561},{"_id":"source/_posts/Java基础语法01.md","hash":"e7b5dc7ab3bb2f5b408373c6ecf9b4da26bc8ab0","modified":1690807209563},{"_id":"source/_posts/Java基础语法02.md","hash":"a87b7b0e7bd381039b6d9c4d8b00c9841bb3e314","modified":1690807209565},{"_id":"source/_posts/Java基础语法03.md","hash":"7ab28d42485a68090b125af7bea0f4ae0f0db50f","modified":1690807209567},{"_id":"source/_posts/Java基础语法04.md","hash":"de266e7096446c9bb34bdec48496c5f48d335fcc","modified":1690807209569},{"_id":"source/_posts/Java异常01.md","hash":"2be6d7b1137b4b95ff919e3033fc6445779d7c7c","modified":1690807209571},{"_id":"source/_posts/Java异常02.md","hash":"12d61e798ff75a344a33876260827c648760aa2e","modified":1690807209574},{"_id":"source/_posts/Java数组01.md","hash":"bf21b1047b7fb726271b825e83cd7719d0e7a588","modified":1690807209577},{"_id":"source/_posts/Java数组02.md","hash":"908487e699fed36ccef107c3985ff5e61ee6b24d","modified":1690807209579},{"_id":"source/_posts/Java数组03.md","hash":"64ae63e998ac56c3c06089f70e440a0c5d2d5ceb","modified":1690807209582},{"_id":"source/_posts/Java方法.md","hash":"83457a25cb46bcd1263095db1ee0af6b24b97897","modified":1690807209584},{"_id":"source/_posts/Java流程控制01.md","hash":"20d49ae9e20379a3534f9c344685699f0dc50d73","modified":1690807209586},{"_id":"source/_posts/Java流程控制02.md","hash":"7004755a74250b9ec908e4ffd0aeb613f97073fe","modified":1690807209588},{"_id":"source/_posts/Java流程控制03.md","hash":"4b36798342fdce00e3d8a0ceeec2892eb11d873e","modified":1690807209590},{"_id":"source/_posts/Java的特性与优势.md","hash":"ad40727588df04e9746ccd8087d7c5890a2d6528","modified":1690807209593},{"_id":"source/_posts/Java面向对象01.md","hash":"e77f15e7ddbf838dd01c7fec23a2c13544f2c8ef","modified":1690807209599},{"_id":"source/_posts/Java运行机制及IDEA安装教程.md","hash":"2cc9e82e1b4c2769e697f870262776161dcb71e0","modified":1690807209595},{"_id":"source/_posts/Java面向对象02.md","hash":"b4f453e9c44482e727e0a92503c172970733cc57","modified":1690807209603},{"_id":"source/_posts/Java面向对象03.md","hash":"c2309119fee8e3e0e7eaba7033104c32a6a90f35","modified":1690807209605},{"_id":"source/_posts/Markdown基本语法.md","hash":"9040e71c5bc2501253662f7ee5e9b98153c4ea3e","modified":1690807209608},{"_id":"source/_posts/Java面向对象04.md","hash":"c81156e5634d6ed408a2c450a5d23b291107d004","modified":1690807209611},{"_id":"source/_posts/WP备份.md","hash":"e8615533297dd8e17e87ba3df6586404073dff6f","modified":1690807209613},{"_id":"source/_posts/git-push时冲突解决方法.md","hash":"f0b861e4178e56fdc41e869506680c17addf86da","modified":1690807209631},{"_id":"source/_posts/xray面板安装.md","hash":"ef936cd500d7d67fa3e68f9ce17e68749b01a723","modified":1690807209628},{"_id":"source/_posts/使用Nginx反向代理服务器端口至二级域名.md","hash":"0518bfc80ee41f395ab8e175a96ddf6147c3be6b","modified":1690807209635},{"_id":"source/_posts/分析Android项目运行.md","hash":"b1af247045b0f25667c96d58c2b23154d761b395","modified":1690807209661},{"_id":"source/_posts/常见dos命令.md","hash":"7ad8be92da6177810b4494fe5d50c87e1386c4c7","modified":1690807209663},{"_id":"source/_posts/排序算法.md","hash":"9be73ed05a6cda0064c4f7717606d29b2717e476","modified":1690807209707},{"_id":"source/_posts/第一个Android程序.md","hash":"0cbde4579e06bfed0f1c52a2290c0d0957fb6455","modified":1690807209708},{"_id":"source/_posts/新增系统属性.md","hash":"22072cd3398de52aae617d6fc0edafd37395b9a9","modified":1690807209668},{"_id":"source/_posts/计算机硬件知识.md","hash":"5c15f6c8976f690189b737bc5b99b53040df57d7","modified":1690807209675},{"_id":"source/_posts/记一次office无法联网解决方法.md","hash":"7b032814e98255965322522a8a29fb3b5bf9259a","modified":1690807209716},{"_id":"source/_posts/记第一次完成业务需求.md","hash":"d63a8b367c98ef6f24b7125b0fdacdf69ae63aa8","modified":1690807209710},{"_id":"source/_posts/记第公司开发环境搭建.md","hash":"9df0ff74327c844f00031b0f8bd44038a5b8230a","modified":1690807209712},{"_id":"source/_posts/设计模式之创建者模式.md","hash":"5c03f2c0c9c580ae8574e108914d413315e2c11d","modified":1690807209719},{"_id":"source/_posts/设计模式之结构型模式.md","hash":"a002c78e43506f1243facc86648a8840b5d3bb29","modified":1690807209714},{"_id":"source/about/index.md","hash":"61a44bf0e0f1577803e33db88673f66e4898ac90","modified":1690895087496},{"_id":"source/_posts/预装APP安装过程.md","hash":"875628faa775c827bc8092f3e94208cb75d6c68e","modified":1690807209717},{"_id":"source/_posts/高通方案编译及刷机流程.md","hash":"aa05749e339b64f196c7d717306e2fbba1506d58","modified":1690807209722},{"_id":"source/dailynews/index.md","hash":"a49a7783b7d456850e59542b28916d3e8542d74b","modified":1690895560887},{"_id":"source/categories/index.md","hash":"dc672fbe8c09f45cafad976e22a6c262fd84212a","modified":1690895151248},{"_id":"source/license/index.md","hash":"f32916191d00b39197b4470969fa69fb2902124e","modified":1690894909240},{"_id":"source/messageboard/index.md","hash":"44b403106b86fdadd73aedcf5f9cfb28e0713da6","modified":1690894757601},{"_id":"source/movies/index.md","hash":"f7d3a4d64137f00e602142b64c6be4bf0681e495","modified":1690973172010},{"_id":"source/tags/index.md","hash":"c9168907ccb090d96f755281cc2a740c15bbd68c","modified":1690895158440},{"_id":"source/links/index.md","hash":"a773d21868b666fce715a385d90766237a87fe77","modified":1690895389936},{"_id":"source/music/index.md","hash":"a2a1a9a0163ee87f271fd34b7c2351b367fc1608","modified":1690895194883},{"_id":"source/css/mycss/background.css","hash":"1229e89af569e9288611daff21871484f50bc558","modified":1690971126849},{"_id":"themes/butterfly/layout/includes/page/about.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690884709303},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1686065708000},{"_id":"themes/butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1686065708000},{"_id":"themes/butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1686065708000},{"_id":"themes/butterfly/_config.yml","hash":"4036e57451cd6eaf89b3e9a49d7a5a199135b302","modified":1690981886010},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1686065708000},{"_id":"themes/butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1686065708000},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1686065708000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1686065708000},{"_id":"themes/butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1686065708000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1686065708000},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1686065708000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1686065708000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1686065708000},{"_id":"themes/butterfly/layout/page.pug","hash":"7b70bcec145bf9b5ea0601b671a9db406a4df482","modified":1690883891694},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1686065708000},{"_id":"themes/butterfly/source/people.html","hash":"312ebbbee57dce7a33422abc751c793fb7f48dc2","modified":1690873545609},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1686065708000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1686065708000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1686065708000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1686065708000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1686065708000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"152054f419e80719cd2607e13e41b08f181a7335","modified":1690881285940},{"_id":"themes/butterfly/layout/includes/homeTop.pug","hash":"86aa64f5c85957afa7adc7fd92d56028d505b901","modified":1690876870652},{"_id":"themes/butterfly/layout/includes/random.pug","hash":"7aaf1799bd511fd18c8e27ac08002e02aaa27742","modified":1690876785682},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/rightmenu.pug","hash":"3e0486721ff0b9944e11470bc16d6a2e1a0180b3","modified":1690973106485},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1686065708000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1686065708000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1686065708000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/setting.pug","hash":"d03164b81d0602bedb26721bd66899e42f1c700a","modified":1690881416641},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1686065708000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1686065708000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1686065708000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1686065708000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1686065708000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1686065708000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1686065708000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1686065708000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1686065708000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1686065708000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"17f83a5ecc215b32475f8b906c0a2568909c8868","modified":1690803735852},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1686065708000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1686065708000},{"_id":"themes/butterfly/source/css/danmaku.css","hash":"5af51f5a1e9897bf14bc3742185d6cc49fce278f","modified":1672308436000},{"_id":"themes/butterfly/source/css/commentBarrage.css","hash":"3049e9a21192573efaca391303464edece2eb153","modified":1672308436000},{"_id":"themes/butterfly/source/css/iconfont.css","hash":"dbf6cd27a2b13b4ec570eb6977a749fbc16cc22c","modified":1659311976000},{"_id":"themes/butterfly/source/css/iconfont.ttf","hash":"77c9046fe21f05606e245f04de5074dd0274766c","modified":1659311976000},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1686065708000},{"_id":"themes/butterfly/source/css/iconfont.woff2","hash":"826b152984fbc95747ab3de52dd92339a7108e6f","modified":1659311976000},{"_id":"themes/butterfly/source/css/iconfont.woff","hash":"ef03d5f33fd2ee108f1779a0cf05a844721b6a69","modified":1659311976000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1686065708000},{"_id":"themes/butterfly/source/css/rightmenu.css","hash":"5e3a1b369a412b2956428db94efcc02b9ff5493c","modified":1690808101672},{"_id":"themes/butterfly/source/css/people.css","hash":"68616ea98561a7ed31c3f6e213bf70885851105a","modified":1672308436000},{"_id":"themes/butterfly/source/css/stylessimple.css","hash":"c3df9d28697d7d5c88f49c8757d39c4b6181db35","modified":1690945723174},{"_id":"themes/butterfly/source/css/swiper.min.css","hash":"e5cfdad1e61ed33b54660abf8f018fdda1475dae","modified":1672308436000},{"_id":"themes/butterfly/source/css/swiperstyle.css","hash":"bd96c9c1ef59f87fc900851af918d10ffeffee01","modified":1672308436000},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1686065708000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"2590eb1a7eb08d3fef10782faaa59372cb5f5acf","modified":1647512988000},{"_id":"themes/butterfly/source/img/favicon1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1686065708000},{"_id":"themes/butterfly/source/js/aplayersave.js","hash":"2c5b928e193bc3d4da3e0a8363404b5f7a12b3d3","modified":1672308436000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1686065708000},{"_id":"themes/butterfly/source/img/nyancat.gif","hash":"747d8794e9a8f631b09ebed451a768aea959a58d","modified":1690804272609},{"_id":"themes/butterfly/source/js/bbtalklunbo.js","hash":"bbe477dc435689e49f301ae16f3b70ae9f576c05","modified":1672308436000},{"_id":"themes/butterfly/source/js/baiduhistory.js","hash":"5aa6564ff5a74295dcb48a081c7859309e8379c0","modified":1672308436000},{"_id":"themes/butterfly/source/js/browser.js","hash":"ea2b973f9f2133900121dc50a184c4bdea77d2f7","modified":1672308436000},{"_id":"themes/butterfly/source/js/calendar.js","hash":"13c40c66697e9b716d7548fce4aa27566c458c60","modified":1672308436000},{"_id":"themes/butterfly/source/js/cate.js","hash":"af35a2ea334e5af28586d14b8574f6da83ed8095","modified":1672308436000},{"_id":"themes/butterfly/source/js/commentsCount.js","hash":"cf2b326cb2341d0159f065f27531de3a14d7ddc6","modified":1672308436000},{"_id":"themes/butterfly/source/js/commentBarrage.js","hash":"e3ed7cd8b28ae7a22df8c5f62d58b1c613e97182","modified":1672308436000},{"_id":"themes/butterfly/source/js/countup.js","hash":"89388b8b14405b13257da96356312a5f37f94841","modified":1672308436000},{"_id":"themes/butterfly/source/js/copy.js","hash":"d549dfed12e4953d6c7693ba71148ac6c2cf23d3","modified":1672308436000},{"_id":"themes/butterfly/source/js/cursor.js","hash":"064a76af7efc6f378c96ccaaa30bccd724dccd71","modified":1672308436000},{"_id":"themes/butterfly/source/js/day.js","hash":"dce34c73ca3d85431269e91d6d8d013c8d4e41c3","modified":1672308436000},{"_id":"themes/butterfly/source/js/dis.js","hash":"8f371f60eaf5f1648db754d0cef7abd64a771c9f","modified":1690956704803},{"_id":"themes/butterfly/source/js/dianzan.js","hash":"03ad4dc88869ed5570c2e7556177656fbc71fa7f","modified":1672308436000},{"_id":"themes/butterfly/source/js/danmaku.js","hash":"699c81fa39471b3f10266fc2fbf3be350110431f","modified":1672308436000},{"_id":"themes/butterfly/source/js/fixbugpjax.js","hash":"4d440ed1dfb2bede2db96a647670b776179541f3","modified":1672308436000},{"_id":"themes/butterfly/source/js/fps.js","hash":"a8320fe238d8863ce74f1371a0149c8032ac5b1a","modified":1672308436000},{"_id":"themes/butterfly/source/js/fixed_card_widget.js","hash":"d2c481ba0f16c29019b30805be6fbc35db0762a0","modified":1672308436000},{"_id":"themes/butterfly/source/js/gitalker.js","hash":"265a1663d4a57febcbf2ffdc0ce7b2a1c29d9445","modified":1672308436000},{"_id":"themes/butterfly/source/js/heimu.js","hash":"87e0da37e658c9d87cbe45a548ed460821529a90","modified":1672308436000},{"_id":"themes/butterfly/source/js/hide.show.js","hash":"b3f53672383108c3dcf2954659a76ce4f11f05da","modified":1672308436000},{"_id":"themes/butterfly/source/js/languages.js","hash":"e3e117378358426607ac29546689e2b8046abd2f","modified":1672308436000},{"_id":"themes/butterfly/source/js/latest.js","hash":"1012aa0cf451d2a2dee4323934c6cb5520ffc1aa","modified":1672308436000},{"_id":"themes/butterfly/source/js/local-search.js","hash":"58c87e36a0d7a31b5addc213d67960d89b0bfed3","modified":1672308436000},{"_id":"themes/butterfly/source/js/lyxTalk.js","hash":"a04c0bb45139048f1060f51a5c40b19069e9f121","modified":1672308436000},{"_id":"themes/butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1686065708000},{"_id":"themes/butterfly/source/js/nav.js","hash":"65bdc7d1d4d50c68fab324ef5982c0dddc9c0b7c","modified":1672308436000},{"_id":"themes/butterfly/source/js/noie.js","hash":"89068cb5cd118de77d7f8c88015cc3ca979a3ec9","modified":1672308436000},{"_id":"themes/butterfly/source/js/owo.js","hash":"fcccdb757d8d956fdee03c1f53063b2ca1d4f7d4","modified":1672308436000},{"_id":"themes/butterfly/source/js/people.js","hash":"7f54ebeb135bbdb389171a7b9303ad0d3189caa4","modified":1672308436000},{"_id":"themes/butterfly/source/js/randomFriend.js","hash":"656b0235bcee9bb770695c34dfdf32dda0466945","modified":1672308436000},{"_id":"themes/butterfly/source/js/resizeTop.js","hash":"2c3370d0b7073b39efd84650d12bf80ac838fce8","modified":1672308436000},{"_id":"themes/butterfly/source/js/seo.js","hash":"2b389b68da7509308f7b1038b822fb8e4a064a91","modified":1672308436000},{"_id":"themes/butterfly/source/js/rightmenu.js","hash":"c545370b4644554670eb86ae0f960c37ca60edf1","modified":1690979161415},{"_id":"themes/butterfly/source/js/settings.js","hash":"bc7379b0f540385f3616c59bf5f46a4ae52d4a47","modified":1672308436000},{"_id":"themes/butterfly/source/js/sitetime.js","hash":"a65063af3e99f3f0a9c51af87499eeae5e792c54","modified":1672308436000},{"_id":"themes/butterfly/source/js/smooth-scrolling.js","hash":"187d332a5242f2f52090d6ad3fac501307866d93","modified":1672308436000},{"_id":"themes/butterfly/source/js/sw-toolbox.js","hash":"e7936268344280b501dfe0e79de355df91b9a5d0","modified":1672308436000},{"_id":"themes/butterfly/source/js/swiperinit.js","hash":"0cdacaca879a35effc93cfe1cfa3d89b359f9d11","modified":1672308436000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1686065708000},{"_id":"themes/butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1686065708000},{"_id":"themes/butterfly/source/js/welcome.js","hash":"8f2684da3eef4aed55e17d961bafdfec23a72120","modified":1690979134342},{"_id":"themes/butterfly/source/js/welcomeconsole.js","hash":"1f0dac070d180b4253d7cb1237d87202136c223b","modified":1672308436000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"47414cd8281afb987368fdc3554ec3a6423080f6","modified":1690877746970},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"07c8b8e0f3098bbe213ad73ada8e7de06af6175f","modified":1690804574560},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"e986361803ab8cd6202aace15abb59623d8a0946","modified":1690804059836},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"f5df7aea402a48574ee3bba677b43bf3294b2c12","modified":1690804188639},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1690883908053},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_history.pug","hash":"543a7929b35d17ae03d39bf28d7ca8417fff92ca","modified":1690980519783},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"5786b9d944b9b79d8acd20b98609a9f107253afa","modified":1690857222982},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/widget/card_weather.pug","hash":"0eee187e2545c1252b707d7d0785b5c6403c7789","modified":1690981378491},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"9473cb72347ce029aa28cd7d7593b17c38398f4e","modified":1690981959235},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1686065708000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1686065708000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1686065708000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"5b1009f5ac00f5247107c7f89e2452cdf8939b56","modified":1690854918890},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1686065708000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"f5e390f74ac1a3d94d5e5f1e616dcd14859ff810","modified":1690796006149},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1686065708000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8215c00060d11d4bbae33f17fa0f5a764c36da14","modified":1690954843418},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"a1a3da105645501eb34813ccd2d7af828b9c0926","modified":1690803916035},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7c7dbc03a4d937ea6c382e6f3dc3a2967509560d","modified":1690796263621},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fd290eb5263be4993ff4170a9d6da12c4189413a","modified":1690855324652},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1686065708000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"8d46b36381797a8d4ee57fe9f0c6f4b08b58e812","modified":1690855508876},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1686065708000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1686065708000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1686065708000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1686065708000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1686065708000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1686065708000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1686065708000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1686065708000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"7ae064a16aafee8f258ff92bdbbea50715c7120a","modified":1690795728120},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1686065708000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1686065708000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1686065708000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1686065708000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1686065708000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1686065708000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"385a3627a1d335aaf976d1f4a985a003f176067b","modified":1690776962074},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1686065708000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1686065708000},{"_id":"themes/butterfly/source/css/mycss/background.css","hash":"a94edd4cbe0b52eb16eef8e276bf09fc187639a4","modified":1690774956391},{"_id":"themes/butterfly/source/css/mycss/people.css","hash":"be73f7b405d22f1ae50c754b6a15322a78da551e","modified":1690873530739},{"_id":"themes/butterfly/source/css/mycss/bar.css","hash":"5103305350b4bb4a4ae6481ba84ec8b55aa00275","modified":1690960567124},{"_id":"themes/butterfly/source/css/mycss/setting.css","hash":"68507665ef3e69606ea0a5e81a136a230d8c636a","modified":1690871906306},{"_id":"themes/butterfly/source/js/myjs/baiduhistory.js","hash":"0fce6e5d95a456b970754f2d74de2f9a0830aa54","modified":1690965713159},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1686065708000},{"_id":"themes/butterfly/source/js/myjs/banner.js","hash":"42e608cb6d2e53edcd611d3daf06b3b4a718904f","modified":1690808732469},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1686065708000},{"_id":"themes/butterfly/source/js/myjs/setting.js","hash":"b0d87b18871fc0d042eb8197e6e0c72f199897e0","modified":1690879004295},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1686065708000},{"_id":"themes/butterfly/source/js/myjs/people.js","hash":"edc2ba1ebedbc1d8e68f44556c024b0c8ed9b2f2","modified":1690873592189},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1686065708000},{"_id":"themes/butterfly/source/js/sakura.js","hash":"6ca567eb87b7698b57b04b505ba2bf8db63bee37","modified":1672308436000},{"_id":"themes/butterfly/source/js/lunar.js","hash":"cd9a6debfb8a0c3cc814add3f3b9b63368364cfd","modified":1672308436000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1686065708000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1686065708000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1686065708000},{"_id":"themes/butterfly/source/css/ariasakablog.css","hash":"49eca6b09833109ccf5b42bf3a1906b283eb0fa1","modified":1690981614588},{"_id":"themes/butterfly/source/img/alipay.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/butterfly/source/img/wechat.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1661272270000},{"_id":"themes/butterfly/source/js/bbtalk.js","hash":"10eb53c57638a498de78701625998b37535d6ac7","modified":1672308436000},{"_id":"themes/butterfly/source/js/twikoo.all.min.js","hash":"0894ffbe932c0b1e6ad2bfaebdd3b552bbee7de5","modified":1672308436000},{"_id":"themes/butterfly/source/img/setting/img3.png","hash":"ee3be0e7a6be061b2f11e3acd84bdbe110b8c34a","modified":1690871985077},{"_id":"themes/butterfly/source/img/setting/img9.png","hash":"2f8c9dae56a96f8b418e664b2457d866d28c55fd","modified":1690872459100},{"_id":"themes/butterfly/source/img/setting/img12.png","hash":"653db900442a7b0b779d7f55716308d423c9dac0","modified":1690872666476},{"_id":"themes/butterfly/source/img/setting/img13.png","hash":"966070e3c949e68b2ff9ab9d0583f4208f69d0f6","modified":1690872731673},{"_id":"themes/butterfly/source/img/setting/img2.png","hash":"ed43c612eb5d34afc798ca04869cb35b1cbc2623","modified":1690870523050},{"_id":"themes/butterfly/source/img/setting/img5.png","hash":"b8da634e70a7b2b8a6c880ed7f1b7d8aa313e6c0","modified":1690872264306},{"_id":"themes/butterfly/source/img/setting/img6.png","hash":"5e6e28220143a9cf9b7f0f4908481642d818b74e","modified":1690872312387},{"_id":"themes/butterfly/source/img/setting/img7.png","hash":"0c564066483e1ab4b473f7e56de84d8f22705603","modified":1690872361214},{"_id":"themes/butterfly/source/img/setting/img11.png","hash":"4781f0222bcf2162f48b3d371f152eac68b9d4db","modified":1690872584635},{"_id":"themes/butterfly/source/img/setting/img4.png","hash":"5b251c2ae1dabe4216b947199833dd9da87eb236","modified":1690872207409},{"_id":"themes/butterfly/source/img/setting/img8.png","hash":"9527c6fdfe8d58618efcb7c73404f81e94fc1103","modified":1690872406328},{"_id":"themes/butterfly/source/img/setting/img1.png","hash":"58965385f15dfbcb00598268305c1f6c5768f692","modified":1690872171989},{"_id":"themes/butterfly/source/img/setting/img10.png","hash":"c2c4c890035307a255e303b8f14e99b766457317","modified":1690872518056},{"_id":"public/css/mycss/background.css","hash":"04ce3de366f04ff3ff812f0ada6d373d96e58144","modified":1690982181588},{"_id":"public/atom.xml","hash":"98c1bdb8a09bf3b147dc86cd6991cc5d0c1bb908","modified":1690982181588},{"_id":"public/sitemap.xml","hash":"026d4069879c5a7287a1a1d3ea39e2558afafb3c","modified":1690982181588},{"_id":"public/sitemap.txt","hash":"d40dabfc2f0b45ab9dd472de9017940ad0f0e00b","modified":1690982181588},{"_id":"public/dailynews/index.html","hash":"c347dbbca0e058bd0a8f7af4cc4941dda882b7d2","modified":1690982181588},{"_id":"public/about/index.html","hash":"cc8a84f32f36d00894f3b873fb1eb65299d0be63","modified":1690982181588},{"_id":"public/categories/index.html","hash":"338c05c55ddc6a81923b661a045c75e68c111f74","modified":1690982181588},{"_id":"public/license/index.html","hash":"5a04542a17aefa6e0e865d79005f98601c34afcf","modified":1690982181588},{"_id":"public/links/index.html","hash":"2d149a7d9408396ee4fcb068396d7965cac9ad41","modified":1690982181588},{"_id":"public/messageboard/index.html","hash":"85638321228063b3ffdcda82788d6d282005fb61","modified":1690982181588},{"_id":"public/movies/index.html","hash":"b416a4007d1a5d76dd7f0cf66be9eb59ec04fd77","modified":1690982181588},{"_id":"public/tags/index.html","hash":"3c79f943d9d4fcb6ecd31df11ca1a889decb3972","modified":1690982181588},{"_id":"public/music/index.html","hash":"a8e1a05596889fe0bd8d49ea50965c8958947746","modified":1690982181588},{"_id":"public/archives/13767a3a.html","hash":"73cb6bf02cc9cdabe7f570a965388ff8a1904238","modified":1690982181588},{"_id":"public/archives/82958ed6.html","hash":"9d40074e5f2e130d4e9b50fc5e2136392d07a20f","modified":1690982181588},{"_id":"public/archives/7d2e59d3.html","hash":"7e6f43f47c353ecf25a532f6bca61a0c4f7eea9c","modified":1690982181588},{"_id":"public/archives/c521edc1.html","hash":"8f5ef40d385c5faf97e6bb81f34473d81773e92b","modified":1690982181588},{"_id":"public/archives/25e76629.html","hash":"2066d8d76fa94e1121b0cc0703a0808ce81dbcd6","modified":1690982181588},{"_id":"public/archives/3e55a450.html","hash":"a7f4a0f543f4308f35111a5dc24cbb50f5f8d1f2","modified":1690982181588},{"_id":"public/archives/12ce6b69.html","hash":"f137623102bf5ff1444747ec49e259efccd2e65c","modified":1690982181588},{"_id":"public/archives/55cbdc7c.html","hash":"fbb63bbd83f14c62ae0e153ab73674aca923ca09","modified":1690982181588},{"_id":"public/archives/80c83deb.html","hash":"3d80a8bb9fdbc3e29ebfa53f02e28370f25918e5","modified":1690982181588},{"_id":"public/archives/b6be31da.html","hash":"c95ff2eab8c81d690dc2cc0debc017737ae33f0e","modified":1690982181588},{"_id":"public/archives/eacc0609.html","hash":"be052620519fdeaccaf08bbe8565c1d083a05f90","modified":1690982181588},{"_id":"public/archives/eea0cb26.html","hash":"7f28bf95882e66444fc0eefa72130d652fe44b90","modified":1690982181588},{"_id":"public/archives/f5bc3448.html","hash":"cb4cba8bed7eb01fc903cbb32d2b6d974d721324","modified":1690982181588},{"_id":"public/archives/735e5788.html","hash":"67db492ff38e60dc82121c1e7d801cd464f96ee8","modified":1690982181588},{"_id":"public/archives/9e3ebe18.html","hash":"399b4378917f911b884bf147b1e5efe7c2dc9cd7","modified":1690982181588},{"_id":"public/archives/1b27ed3d.html","hash":"00f616fcf9ce33b83e1ff05df26bad2c5c1e0ebe","modified":1690982181588},{"_id":"public/archives/822ebc87.html","hash":"187fbfa09656e42116ea3df74829af3cbc7d73b6","modified":1690982181588},{"_id":"public/archives/bc05bf18.html","hash":"5fb8dbdb348594a649dea44fb43eb7115e81678a","modified":1690982181588},{"_id":"public/archives/22612abb.html","hash":"3f14abb0e8aa185f40486eb35e084b302ef363de","modified":1690982181588},{"_id":"public/archives/55661a2d.html","hash":"33f42f6abeccdfa26675fb1b4c6f8b5b9659a56d","modified":1690982181588},{"_id":"public/archives/cc6f4b97.html","hash":"08873aa08523e79f86cedeba937cd1c7275837f4","modified":1690982181588},{"_id":"public/archives/b43ce0db.html","hash":"d30fe81e4853e49cc83b37fe03f4a55f1dfa7ab9","modified":1690982181588},{"_id":"public/archives/c33bd04d.html","hash":"776fefee65a16acce3b1ee5d9f3b1bd384c85e53","modified":1690982181588},{"_id":"public/archives/5a3281f7.html","hash":"e24b15652b76b22498965131af3bba1b3a7bda0d","modified":1690982181588},{"_id":"public/archives/7a37a823.html","hash":"e41a91d8407c55b1e7a6c6c90f5cb63624a22a63","modified":1690982181588},{"_id":"public/archives/5ac22c70.html","hash":"0bd8de5e29b91891e445f0b4fb5de16ad3226439","modified":1690982181588},{"_id":"public/archives/2dc51ce6.html","hash":"f828d99fd83058cf86df2e515a4b39915df3980f","modified":1690982181588},{"_id":"public/archives/b4cc4d5c.html","hash":"102ef55f1a50417ded3c966a682bbd4fb07501b6","modified":1690982181588},{"_id":"public/archives/ad476873.html","hash":"9adce29aa2b42ae82c7b659932fffa1e3dbd10ef","modified":1690982181588},{"_id":"public/archives/3323fdd0.html","hash":"b59442a471616a9941fcdaa1e40915bd8bc476e6","modified":1690982181588},{"_id":"public/archives/4424cd46.html","hash":"3097f395e429fe87a88631a0b42e37995de209cc","modified":1690982181588},{"_id":"public/archives/dd2d9cfc.html","hash":"52d906409ba832ccf9df3b4bddabd19afe0207fa","modified":1690982181588},{"_id":"public/archives/5d36ff15.html","hash":"0e825503d7ac92168d99fc35c880a64379ed0f32","modified":1690982181588},{"_id":"public/archives/6b48db66.html","hash":"a5013b33a30bc91fb0541c859699bc9aea1ad568","modified":1690982181588},{"_id":"public/archives/ef009d9b.html","hash":"70fcc9c29b617d0daa3749b938c48117236c8836","modified":1690982181588},{"_id":"public/archives/794bccc2.html","hash":"3686d8b164afd9753a482a91629273d491ae1015","modified":1690982181588},{"_id":"public/archives/51d15a97.html","hash":"fc54ace470418439df6edb239f83acec03abc1c7","modified":1690982181588},{"_id":"public/archives/c81dbfc9.html","hash":"d72ab6a7b6da86a55bfb186dbbcada27f878a055","modified":1690982181588},{"_id":"public/archives/3b092706.html","hash":"6ed6659b35e2d3c369d27af406f790ee087d3494","modified":1690982181588},{"_id":"public/archives/186f70d4.html","hash":"049b2f375b45c6a808812d730350e47c71543e8d","modified":1690982181588},{"_id":"public/archives/index.html","hash":"6ffcbd0b20dc5533a4dbbf7c32767da7d241f2fe","modified":1690982181588},{"_id":"public/archives/page/2/index.html","hash":"5e8ddcd5c6cf03825e4638ece523c17559bedeed","modified":1690982181588},{"_id":"public/archives/2022/index.html","hash":"51306a53ff5993f362a0956aeca91f2e5aa35e13","modified":1690982181588},{"_id":"public/archives/page/3/index.html","hash":"bab64c631b850d40e9362f7dd40c57985d199374","modified":1690982181588},{"_id":"public/archives/2022/page/2/index.html","hash":"6018ef9f8def4bbe1ee4ad24c744662babd813aa","modified":1690982181588},{"_id":"public/archives/2022/page/3/index.html","hash":"0f8eca6dff07858bdc6d8cb6261a254108273cd1","modified":1690982181588},{"_id":"public/archives/2022/08/index.html","hash":"6650f481c3a376ee340b7bd161b0a06a4875a379","modified":1690982181588},{"_id":"public/archives/2022/08/page/2/index.html","hash":"7fe816b644d2e7abbfbaa0186b21182d809ca4c8","modified":1690982181588},{"_id":"public/archives/2022/08/page/3/index.html","hash":"daafda104d7798819c0211753b1008ce2cec6816","modified":1690982181588},{"_id":"public/archives/2023/index.html","hash":"71501afdc22ee6191ef3ee8db0e36ccf78cf7772","modified":1690982181588},{"_id":"public/archives/2023/04/index.html","hash":"dbe1089bef96b6305dcad033b2e85efc2c30e35c","modified":1690982181588},{"_id":"public/categories/资源/index.html","hash":"afe5db3d11580c42d047bd70dbbd172064acb500","modified":1690982181588},{"_id":"public/categories/技术/index.html","hash":"6436c8b7f5159424d7ba8060dd00308355a3a37b","modified":1690982181588},{"_id":"public/categories/技术/page/2/index.html","hash":"ca5f9df25be752c57a2b0714602292c3569f9d54","modified":1690982181588},{"_id":"public/categories/技术/page/3/index.html","hash":"8e1ff15f0550f61da627da929aa55246e9b1dfbf","modified":1690982181588},{"_id":"public/index.html","hash":"3cddb962fa7cb95f96bfa138f571186e6e9d0bcf","modified":1690982181588},{"_id":"public/categories/随想/index.html","hash":"ab6ffda1a93077444ac6007ba9ff0b2b1d7da3a5","modified":1690982181588},{"_id":"public/categories/生活/index.html","hash":"9b58514798a2fbdb8a0cb93d3a52995f538288af","modified":1690982181588},{"_id":"public/page/3/index.html","hash":"63c600d08a8fd8441d5a4dbf6b5ee7988ada5762","modified":1690982181588},{"_id":"public/page/2/index.html","hash":"a4bfc2c0fd7885b4c809955ba1f9553ce6833d0d","modified":1690982181588},{"_id":"public/tags/随笔/index.html","hash":"09c744c2d2dd63ac7a089835ca94746074507b5c","modified":1690982181588},{"_id":"public/tags/Java/index.html","hash":"382d5a8e6da7953921230c062afa4db190b6e9db","modified":1690982181588},{"_id":"public/tags/Java/page/2/index.html","hash":"63d351c48e3d45e0cdba33e561b5085e9f1a6433","modified":1690982181588},{"_id":"public/tags/Java基础语法/index.html","hash":"f508d88aedf29d410a8f9ebe3567a4fe9a898af0","modified":1690982181588},{"_id":"public/tags/web/index.html","hash":"5e5317cd842d5aeb1da8f86a55db53c7bc8d414c","modified":1690982181588},{"_id":"public/tags/悦读/index.html","hash":"1c2435efe753b2305e7212f4ade1462a93b2626e","modified":1690982181588},{"_id":"public/tags/Java异常/index.html","hash":"f942305aca705f4f9c8309c64a67461f2c97a1c0","modified":1690982181588},{"_id":"public/tags/Java数组/index.html","hash":"8eeaa8ccb5bf5bb8db1a48f434cb8f5d277e2bb1","modified":1690982181588},{"_id":"public/tags/Java方法/index.html","hash":"a526df7766a2eda8e7100f675f109fcc150f81cb","modified":1690982181588},{"_id":"public/tags/Java流程控制/index.html","hash":"9835b691ce57875b5c99366c9ed3b16bbc628288","modified":1690982181588},{"_id":"public/tags/Java特性/index.html","hash":"f4eae0f86f9a699ac0b852ce75d993c18ffc3da1","modified":1690982181588},{"_id":"public/tags/Java面向对象/index.html","hash":"51f829c78e1957703946b6a46c492385f2dc558a","modified":1690982181588},{"_id":"public/tags/Markdown/index.html","hash":"4c0ddd3546aff24b3ff5c12aee4b3698f7560595","modified":1690982181588},{"_id":"public/tags/WP/index.html","hash":"e7144fcd8d7809e5df74301ecbdfbc2b9cbc0466","modified":1690982181588},{"_id":"public/tags/git/index.html","hash":"3783ae9a5a1025e98e4058d40286f1fcf0d29f50","modified":1690982181588},{"_id":"public/tags/Dos/index.html","hash":"d475e7f1963b27e42e45c8db630e08c02028d2a3","modified":1690982181588},{"_id":"public/tags/排序算法/index.html","hash":"a39bb57127dd10625113a557808558448728a429","modified":1690982181588},{"_id":"public/tags/Android/index.html","hash":"0493881721ce97a0cc820df8951c22919ba28ae7","modified":1690982181588},{"_id":"public/tags/硬件/index.html","hash":"20f15a6e78b9f57751aecc948e6797eab7f0bfc9","modified":1690982181588},{"_id":"public/tags/设计模式/index.html","hash":"b934019a9e92d34b01b9d2d54fb7731b753e246f","modified":1690982181588},{"_id":"public/css/iconfont.ttf","hash":"77c9046fe21f05606e245f04de5074dd0274766c","modified":1690982181588},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690982181588},{"_id":"public/css/iconfont.woff","hash":"ef03d5f33fd2ee108f1779a0cf05a844721b6a69","modified":1690982181588},{"_id":"public/css/iconfont.woff2","hash":"826b152984fbc95747ab3de52dd92339a7108e6f","modified":1690982181588},{"_id":"public/img/favicon.png","hash":"2590eb1a7eb08d3fef10782faaa59372cb5f5acf","modified":1690982181588},{"_id":"public/img/favicon1.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690982181588},{"_id":"public/img/nyancat.gif","hash":"747d8794e9a8f631b09ebed451a768aea959a58d","modified":1690982181588},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690982181588},{"_id":"public/people.html","hash":"4cd36b364dfc80ca350104c3705c603bcbd3e3a5","modified":1690982181588},{"_id":"public/css/danmaku.css","hash":"5af51f5a1e9897bf14bc3742185d6cc49fce278f","modified":1690982181588},{"_id":"public/css/commentBarrage.css","hash":"3049e9a21192573efaca391303464edece2eb153","modified":1690982181588},{"_id":"public/css/iconfont.css","hash":"dbf6cd27a2b13b4ec570eb6977a749fbc16cc22c","modified":1690982181588},{"_id":"public/css/index.css","hash":"eae75ea18506014aad00b074d8b30836f3f2b485","modified":1690982181588},{"_id":"public/css/ariasakablog.css","hash":"49eca6b09833109ccf5b42bf3a1906b283eb0fa1","modified":1690982181588},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1690982181588},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1690982181588},{"_id":"public/css/rightmenu.css","hash":"f615db0d6cb6ae1e90d6feef12e531e47a4355dc","modified":1690982181588},{"_id":"public/css/people.css","hash":"68616ea98561a7ed31c3f6e213bf70885851105a","modified":1690982181588},{"_id":"public/css/stylessimple.css","hash":"c3df9d28697d7d5c88f49c8757d39c4b6181db35","modified":1690982181588},{"_id":"public/js/aplayersave.js","hash":"2c5b928e193bc3d4da3e0a8363404b5f7a12b3d3","modified":1690982181588},{"_id":"public/css/swiperstyle.css","hash":"bd96c9c1ef59f87fc900851af918d10ffeffee01","modified":1690982181588},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690982181588},{"_id":"public/js/baiduhistory.js","hash":"5aa6564ff5a74295dcb48a081c7859309e8379c0","modified":1690982181588},{"_id":"public/js/browser.js","hash":"ea2b973f9f2133900121dc50a184c4bdea77d2f7","modified":1690982181588},{"_id":"public/js/bbtalklunbo.js","hash":"bbe477dc435689e49f301ae16f3b70ae9f576c05","modified":1690982181588},{"_id":"public/js/cate.js","hash":"af35a2ea334e5af28586d14b8574f6da83ed8095","modified":1690982181588},{"_id":"public/js/commentBarrage.js","hash":"e3ed7cd8b28ae7a22df8c5f62d58b1c613e97182","modified":1690982181588},{"_id":"public/js/calendar.js","hash":"13c40c66697e9b716d7548fce4aa27566c458c60","modified":1690982181588},{"_id":"public/js/commentsCount.js","hash":"cf2b326cb2341d0159f065f27531de3a14d7ddc6","modified":1690982181588},{"_id":"public/js/copy.js","hash":"d549dfed12e4953d6c7693ba71148ac6c2cf23d3","modified":1690982181588},{"_id":"public/js/countup.js","hash":"89388b8b14405b13257da96356312a5f37f94841","modified":1690982181588},{"_id":"public/js/cursor.js","hash":"064a76af7efc6f378c96ccaaa30bccd724dccd71","modified":1690982181588},{"_id":"public/js/danmaku.js","hash":"699c81fa39471b3f10266fc2fbf3be350110431f","modified":1690982181588},{"_id":"public/js/day.js","hash":"dce34c73ca3d85431269e91d6d8d013c8d4e41c3","modified":1690982181588},{"_id":"public/js/dianzan.js","hash":"03ad4dc88869ed5570c2e7556177656fbc71fa7f","modified":1690982181588},{"_id":"public/js/dis.js","hash":"8f371f60eaf5f1648db754d0cef7abd64a771c9f","modified":1690982181588},{"_id":"public/js/fixbugpjax.js","hash":"4d440ed1dfb2bede2db96a647670b776179541f3","modified":1690982181588},{"_id":"public/js/fixed_card_widget.js","hash":"d2c481ba0f16c29019b30805be6fbc35db0762a0","modified":1690982181588},{"_id":"public/js/heimu.js","hash":"87e0da37e658c9d87cbe45a548ed460821529a90","modified":1690982181588},{"_id":"public/js/hide.show.js","hash":"b3f53672383108c3dcf2954659a76ce4f11f05da","modified":1690982181588},{"_id":"public/js/latest.js","hash":"1012aa0cf451d2a2dee4323934c6cb5520ffc1aa","modified":1690982181588},{"_id":"public/js/gitalker.js","hash":"265a1663d4a57febcbf2ffdc0ce7b2a1c29d9445","modified":1690982181588},{"_id":"public/js/fps.js","hash":"a8320fe238d8863ce74f1371a0149c8032ac5b1a","modified":1690982181588},{"_id":"public/js/nav.js","hash":"65bdc7d1d4d50c68fab324ef5982c0dddc9c0b7c","modified":1690982181588},{"_id":"public/js/lyxTalk.js","hash":"a04c0bb45139048f1060f51a5c40b19069e9f121","modified":1690982181588},{"_id":"public/js/owo.js","hash":"fcccdb757d8d956fdee03c1f53063b2ca1d4f7d4","modified":1690982181588},{"_id":"public/js/noie.js","hash":"89068cb5cd118de77d7f8c88015cc3ca979a3ec9","modified":1690982181588},{"_id":"public/js/resizeTop.js","hash":"2c3370d0b7073b39efd84650d12bf80ac838fce8","modified":1690982181588},{"_id":"public/js/people.js","hash":"7f54ebeb135bbdb389171a7b9303ad0d3189caa4","modified":1690982181588},{"_id":"public/js/randomFriend.js","hash":"656b0235bcee9bb770695c34dfdf32dda0466945","modified":1690982181588},{"_id":"public/js/settings.js","hash":"bc7379b0f540385f3616c59bf5f46a4ae52d4a47","modified":1690982181588},{"_id":"public/js/rightmenu.js","hash":"5290fc24c72a989e03ddfcf946502197322f8efb","modified":1690982181588},{"_id":"public/js/seo.js","hash":"2b389b68da7509308f7b1038b822fb8e4a064a91","modified":1690982181588},{"_id":"public/js/sitetime.js","hash":"a65063af3e99f3f0a9c51af87499eeae5e792c54","modified":1690982181588},{"_id":"public/js/sw-toolbox.js","hash":"e7936268344280b501dfe0e79de355df91b9a5d0","modified":1690982181588},{"_id":"public/js/swiperinit.js","hash":"0cdacaca879a35effc93cfe1cfa3d89b359f9d11","modified":1690982181588},{"_id":"public/js/welcomeconsole.js","hash":"1f0dac070d180b4253d7cb1237d87202136c223b","modified":1690982181588},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690982181588},{"_id":"public/css/mycss/bar.css","hash":"a7864ad6cfa91f7b1bd90e09e6c38b7a3826aff2","modified":1690982181588},{"_id":"public/js/welcome.js","hash":"8f2684da3eef4aed55e17d961bafdfec23a72120","modified":1690982181588},{"_id":"public/css/mycss/people.css","hash":"1fb20e73ee0efa7adc56b36ff2c76335a749a55f","modified":1690982181588},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690982181588},{"_id":"public/css/mycss/setting.css","hash":"65514bb83d59798c0a0f37befe92f0229aff4e31","modified":1690982181588},{"_id":"public/js/myjs/baiduhistory.js","hash":"5aa6564ff5a74295dcb48a081c7859309e8379c0","modified":1690982181588},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690982181588},{"_id":"public/js/myjs/banner.js","hash":"e47ca44029ee990b33884f050100c213f4d26797","modified":1690982181588},{"_id":"public/js/myjs/setting.js","hash":"486e6811748b635059fe9185949f340b8e990d3b","modified":1690982181588},{"_id":"public/js/myjs/people.js","hash":"af05d76526cd266574b1c6119a573cd32639dcf3","modified":1690982181588},{"_id":"public/css/swiper.min.css","hash":"e5cfdad1e61ed33b54660abf8f018fdda1475dae","modified":1690982181588},{"_id":"public/js/bbtalk.js","hash":"10eb53c57638a498de78701625998b37535d6ac7","modified":1690982181588},{"_id":"public/js/languages.js","hash":"e3e117378358426607ac29546689e2b8046abd2f","modified":1690982181588},{"_id":"public/js/local-search.js","hash":"58c87e36a0d7a31b5addc213d67960d89b0bfed3","modified":1690982181588},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690982181588},{"_id":"public/js/lunar.js","hash":"cd9a6debfb8a0c3cc814add3f3b9b63368364cfd","modified":1690982181588},{"_id":"public/js/smooth-scrolling.js","hash":"187d332a5242f2f52090d6ad3fac501307866d93","modified":1690982181588},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690982181588},{"_id":"public/js/sakura.js","hash":"6ca567eb87b7698b57b04b505ba2bf8db63bee37","modified":1690982181588},{"_id":"public/img/alipay.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1690982181588},{"_id":"public/img/wechat.jpg","hash":"573ad51b3367849177a4b3d56f004f7c0c9e260f","modified":1690982181588},{"_id":"public/js/twikoo.all.min.js","hash":"0894ffbe932c0b1e6ad2bfaebdd3b552bbee7de5","modified":1690982181588},{"_id":"public/img/setting/img3.png","hash":"ee3be0e7a6be061b2f11e3acd84bdbe110b8c34a","modified":1690982181588},{"_id":"public/img/setting/img9.png","hash":"2f8c9dae56a96f8b418e664b2457d866d28c55fd","modified":1690982181588},{"_id":"public/img/setting/img12.png","hash":"653db900442a7b0b779d7f55716308d423c9dac0","modified":1690982181588},{"_id":"public/img/setting/img13.png","hash":"966070e3c949e68b2ff9ab9d0583f4208f69d0f6","modified":1690982181588},{"_id":"public/img/setting/img2.png","hash":"ed43c612eb5d34afc798ca04869cb35b1cbc2623","modified":1690982181588},{"_id":"public/img/setting/img5.png","hash":"b8da634e70a7b2b8a6c880ed7f1b7d8aa313e6c0","modified":1690982181588},{"_id":"public/img/setting/img6.png","hash":"5e6e28220143a9cf9b7f0f4908481642d818b74e","modified":1690982181588},{"_id":"public/img/setting/img7.png","hash":"0c564066483e1ab4b473f7e56de84d8f22705603","modified":1690982181588},{"_id":"public/img/setting/img11.png","hash":"4781f0222bcf2162f48b3d371f152eac68b9d4db","modified":1690982181588},{"_id":"public/img/setting/img4.png","hash":"5b251c2ae1dabe4216b947199833dd9da87eb236","modified":1690982181588},{"_id":"public/img/setting/img8.png","hash":"9527c6fdfe8d58618efcb7c73404f81e94fc1103","modified":1690982181588},{"_id":"public/img/setting/img1.png","hash":"58965385f15dfbcb00598268305c1f6c5768f692","modified":1690982181588},{"_id":"public/img/setting/img10.png","hash":"c2c4c890035307a255e303b8f14e99b766457317","modified":1690982181588}],"Category":[{"name":"资源","_id":"clktr4qqx0004zsa0cjmketzf"},{"name":"技术","_id":"clktr4qr2000czsa0f8yebhan"},{"name":"随想","_id":"clktr4qrm0028zsa04oy3ewcs"},{"name":"生活","_id":"clktr4qsc004mzsa0a96w03zm"}],"Data":[],"Page":[{"title":"about","date":"2023-08-01T09:32:07.000Z","aside":false,"comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-08-01 17:32:07\naside: false\ncomments: false\n---\n","updated":"2023-08-01T13:04:47.496Z","path":"about/index.html","layout":"page","_id":"clktr4qqp0000zsa023nn8wp9","content":"","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":""},{"title":"分类","date":"2022-07-03T12:48:08.000Z","type":"categories","aside":false,"comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-07-03 20:48:08\ntype: \"categories\"\naside: false\ncomments: false\n---\n","updated":"2023-08-01T13:05:51.248Z","path":"categories/index.html","layout":"page","_id":"clktr4qqv0002zsa0cq0y9xyw","content":"","site":{"data":{}},"cover":"linear-gradient(to top,#a8edea 0%,#fed6e3 100%)","excerpt":"","more":""},{"title":"","date":"2023-08-01T12:51:13.000Z","type":"dailynews","aside":false,"comments":0,"_content":"\n<center><img src=\"https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image\" alt=\"每日新闻\"/></center>\n<!-- ![每日新闻](https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image) -->","source":"dailynews/index.md","raw":"---\ntitle: \ndate: 2023-08-01 20:51:13\ntype: \"dailynews\"\naside: false\ncomments: false\n---\n\n<center><img src=\"https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image\" alt=\"每日新闻\"/></center>\n<!-- ![每日新闻](https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image) -->","updated":"2023-08-01T13:12:40.887Z","path":"dailynews/index.html","layout":"page","_id":"clktr4qqz0006zsa0gijg32ta","content":"<center><img src=\"https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image\" alt=\"每日新闻\"/></center>\n<!-- ![每日新闻](https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image) -->","site":{"data":{}},"cover":"linear-gradient(to top,#cfd9df 0%,#e2ebf0 100%)","excerpt":"","more":"<center><img src=\"https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image\" alt=\"每日新闻\"/></center>\n<!-- ![每日新闻](https://v2.alapi.cn/api/zaobao?token=87bD0FttkS5YNN4F&format=image) -->"},{"title":"声明","date":"2022-07-10T03:13:49.000Z","seo_title":"声明","layout":"docs","bottom_meta":false,"aside":false,"_content":"Copyright(C) Rookie_l 2022\n\n# 声明 | 版权协议\n\n为了保持文章质量，并保持互联网的开放共享精神，保持页面流量的稳定，综合考虑下本站的所有原创文章均采用cc协议中比较严格的创作共用-非商业性-禁止演绎 4.0 国际标准。这篇文章主要想能够更加清楚明白的介绍本站的协议标准和要求。方便您合理的使用本站的文章。\n\n本站无广告嵌入和商业行为。违反协议的行为不仅会损害原作者的创作热情，而且会影响整个版权环境。强烈呼吁您能够在转载时遵守协议。遵守协议的行为几乎不会对您的目标产生负面影响，鼓励创作环境是每个创作者的期望。\n\n#### 博客的分类介绍\n\n经验分享包含原创内容，原创内容的非商用转载必须为完整转载且标注出处的带有超链接功能的完整url链接（需能点击）或访问原文之类字样的超链接。\n\n转载内容为转载内容，均标注了出处。建议使用原链接打开，尊重原作者。所有转载内容尽可能为完整转载（如果有部分内容有问题可能会由部分删减和补充）并进行样式调整以适合本博客。如果转载该部分内容需要联系原作者。\n\n#### 你可以做什么？\n\n只要您遵守本页的许可，您可以自由地共享文章的内容 — 在任何媒介以任何形式复制、发行本作品。并且无需通知作者。\n\n## 你需要遵守什么样的许可？\n\n#### 署名\n\n您必须标注内容的来源，您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接提升阅读体验）。\n\n#### 禁止商用\n\n本站内容免费向互联网所有用户提供，分享本站文章时禁止商业性使用、禁止在转载页面中插入广告（例如谷歌广告、百度广告）、禁止阅读的拦截行为（例如关注公众号、下载App后观看文章）。\n\n#### 禁止演绎\n\n* 分享全部内容（无修改）\n  您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接）\n* 分享部分截取内容或者衍生创作\n  目前本站全部原创文章的衍生品禁止公开分享和分发。如有更好的修改建议，可以在对应文章下留言。如有衍生创作需求，可以在评论中联系。\n\n## 什么内容会被版权保护\n\n#### 包括但不限于：\n\n* 文章封面图片\n* 文章标题和正文\n* 站点图片素材（不含主题自带素材）\n\n#### 例外情况\n\n本着友好互相进步的原则，被本站友链收录的博客允许博客文章内容的衍生品的分享和分发，但仍需标注出处。\n\n本着互联网开放精神，您可以在博客文章下方留言要求授权博文的衍生品的分享和分发，标注您的网站地址。\n\n## 作者原创代码及网站源代码协议\n\n网站所有代码采用MIT协议，如有不同，作者会进行标注\n\n随便扒站吧！","source":"license/index.md","raw":"---\ntitle: 声明\ndate: 2022-07-10 11:13:49\nseo_title: 声明\nlayout: docs\nbottom_meta: false\naside: false\n---\nCopyright(C) Rookie_l 2022\n\n# 声明 | 版权协议\n\n为了保持文章质量，并保持互联网的开放共享精神，保持页面流量的稳定，综合考虑下本站的所有原创文章均采用cc协议中比较严格的创作共用-非商业性-禁止演绎 4.0 国际标准。这篇文章主要想能够更加清楚明白的介绍本站的协议标准和要求。方便您合理的使用本站的文章。\n\n本站无广告嵌入和商业行为。违反协议的行为不仅会损害原作者的创作热情，而且会影响整个版权环境。强烈呼吁您能够在转载时遵守协议。遵守协议的行为几乎不会对您的目标产生负面影响，鼓励创作环境是每个创作者的期望。\n\n#### 博客的分类介绍\n\n经验分享包含原创内容，原创内容的非商用转载必须为完整转载且标注出处的带有超链接功能的完整url链接（需能点击）或访问原文之类字样的超链接。\n\n转载内容为转载内容，均标注了出处。建议使用原链接打开，尊重原作者。所有转载内容尽可能为完整转载（如果有部分内容有问题可能会由部分删减和补充）并进行样式调整以适合本博客。如果转载该部分内容需要联系原作者。\n\n#### 你可以做什么？\n\n只要您遵守本页的许可，您可以自由地共享文章的内容 — 在任何媒介以任何形式复制、发行本作品。并且无需通知作者。\n\n## 你需要遵守什么样的许可？\n\n#### 署名\n\n您必须标注内容的来源，您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接提升阅读体验）。\n\n#### 禁止商用\n\n本站内容免费向互联网所有用户提供，分享本站文章时禁止商业性使用、禁止在转载页面中插入广告（例如谷歌广告、百度广告）、禁止阅读的拦截行为（例如关注公众号、下载App后观看文章）。\n\n#### 禁止演绎\n\n* 分享全部内容（无修改）\n  您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接）\n* 分享部分截取内容或者衍生创作\n  目前本站全部原创文章的衍生品禁止公开分享和分发。如有更好的修改建议，可以在对应文章下留言。如有衍生创作需求，可以在评论中联系。\n\n## 什么内容会被版权保护\n\n#### 包括但不限于：\n\n* 文章封面图片\n* 文章标题和正文\n* 站点图片素材（不含主题自带素材）\n\n#### 例外情况\n\n本着友好互相进步的原则，被本站友链收录的博客允许博客文章内容的衍生品的分享和分发，但仍需标注出处。\n\n本着互联网开放精神，您可以在博客文章下方留言要求授权博文的衍生品的分享和分发，标注您的网站地址。\n\n## 作者原创代码及网站源代码协议\n\n网站所有代码采用MIT协议，如有不同，作者会进行标注\n\n随便扒站吧！","updated":"2023-08-01T13:01:49.240Z","path":"license/index.html","comments":1,"_id":"clktr4qr00008zsa06ddgga88","content":"<p>Copyright(C) Rookie_l 2022</p>\n<h1 id=\"声明-版权协议\"><a href=\"#声明-版权协议\" class=\"headerlink\" title=\"声明 | 版权协议\"></a>声明 | 版权协议</h1><p>为了保持文章质量，并保持互联网的开放共享精神，保持页面流量的稳定，综合考虑下本站的所有原创文章均采用cc协议中比较严格的创作共用-非商业性-禁止演绎 4.0 国际标准。这篇文章主要想能够更加清楚明白的介绍本站的协议标准和要求。方便您合理的使用本站的文章。</p>\n<p>本站无广告嵌入和商业行为。违反协议的行为不仅会损害原作者的创作热情，而且会影响整个版权环境。强烈呼吁您能够在转载时遵守协议。遵守协议的行为几乎不会对您的目标产生负面影响，鼓励创作环境是每个创作者的期望。</p>\n<h4 id=\"博客的分类介绍\"><a href=\"#博客的分类介绍\" class=\"headerlink\" title=\"博客的分类介绍\"></a>博客的分类介绍</h4><p>经验分享包含原创内容，原创内容的非商用转载必须为完整转载且标注出处的带有超链接功能的完整url链接（需能点击）或访问原文之类字样的超链接。</p>\n<p>转载内容为转载内容，均标注了出处。建议使用原链接打开，尊重原作者。所有转载内容尽可能为完整转载（如果有部分内容有问题可能会由部分删减和补充）并进行样式调整以适合本博客。如果转载该部分内容需要联系原作者。</p>\n<h4 id=\"你可以做什么？\"><a href=\"#你可以做什么？\" class=\"headerlink\" title=\"你可以做什么？\"></a>你可以做什么？</h4><p>只要您遵守本页的许可，您可以自由地共享文章的内容 — 在任何媒介以任何形式复制、发行本作品。并且无需通知作者。</p>\n<h2 id=\"你需要遵守什么样的许可？\"><a href=\"#你需要遵守什么样的许可？\" class=\"headerlink\" title=\"你需要遵守什么样的许可？\"></a>你需要遵守什么样的许可？</h2><h4 id=\"署名\"><a href=\"#署名\" class=\"headerlink\" title=\"署名\"></a>署名</h4><p>您必须标注内容的来源，您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接提升阅读体验）。</p>\n<h4 id=\"禁止商用\"><a href=\"#禁止商用\" class=\"headerlink\" title=\"禁止商用\"></a>禁止商用</h4><p>本站内容免费向互联网所有用户提供，分享本站文章时禁止商业性使用、禁止在转载页面中插入广告（例如谷歌广告、百度广告）、禁止阅读的拦截行为（例如关注公众号、下载App后观看文章）。</p>\n<h4 id=\"禁止演绎\"><a href=\"#禁止演绎\" class=\"headerlink\" title=\"禁止演绎\"></a>禁止演绎</h4><ul>\n<li>分享全部内容（无修改）<br>您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接）</li>\n<li>分享部分截取内容或者衍生创作<br>目前本站全部原创文章的衍生品禁止公开分享和分发。如有更好的修改建议，可以在对应文章下留言。如有衍生创作需求，可以在评论中联系。</li>\n</ul>\n<h2 id=\"什么内容会被版权保护\"><a href=\"#什么内容会被版权保护\" class=\"headerlink\" title=\"什么内容会被版权保护\"></a>什么内容会被版权保护</h2><h4 id=\"包括但不限于：\"><a href=\"#包括但不限于：\" class=\"headerlink\" title=\"包括但不限于：\"></a>包括但不限于：</h4><ul>\n<li>文章封面图片</li>\n<li>文章标题和正文</li>\n<li>站点图片素材（不含主题自带素材）</li>\n</ul>\n<h4 id=\"例外情况\"><a href=\"#例外情况\" class=\"headerlink\" title=\"例外情况\"></a>例外情况</h4><p>本着友好互相进步的原则，被本站友链收录的博客允许博客文章内容的衍生品的分享和分发，但仍需标注出处。</p>\n<p>本着互联网开放精神，您可以在博客文章下方留言要求授权博文的衍生品的分享和分发，标注您的网站地址。</p>\n<h2 id=\"作者原创代码及网站源代码协议\"><a href=\"#作者原创代码及网站源代码协议\" class=\"headerlink\" title=\"作者原创代码及网站源代码协议\"></a>作者原创代码及网站源代码协议</h2><p>网站所有代码采用MIT协议，如有不同，作者会进行标注</p>\n<p>随便扒站吧！</p>\n","site":{"data":{}},"cover":"linear-gradient(to top,#cfd9df 0%,#e2ebf0 100%)","excerpt":"","more":"<p>Copyright(C) Rookie_l 2022</p>\n<h1 id=\"声明-版权协议\"><a href=\"#声明-版权协议\" class=\"headerlink\" title=\"声明 | 版权协议\"></a>声明 | 版权协议</h1><p>为了保持文章质量，并保持互联网的开放共享精神，保持页面流量的稳定，综合考虑下本站的所有原创文章均采用cc协议中比较严格的创作共用-非商业性-禁止演绎 4.0 国际标准。这篇文章主要想能够更加清楚明白的介绍本站的协议标准和要求。方便您合理的使用本站的文章。</p>\n<p>本站无广告嵌入和商业行为。违反协议的行为不仅会损害原作者的创作热情，而且会影响整个版权环境。强烈呼吁您能够在转载时遵守协议。遵守协议的行为几乎不会对您的目标产生负面影响，鼓励创作环境是每个创作者的期望。</p>\n<h4 id=\"博客的分类介绍\"><a href=\"#博客的分类介绍\" class=\"headerlink\" title=\"博客的分类介绍\"></a>博客的分类介绍</h4><p>经验分享包含原创内容，原创内容的非商用转载必须为完整转载且标注出处的带有超链接功能的完整url链接（需能点击）或访问原文之类字样的超链接。</p>\n<p>转载内容为转载内容，均标注了出处。建议使用原链接打开，尊重原作者。所有转载内容尽可能为完整转载（如果有部分内容有问题可能会由部分删减和补充）并进行样式调整以适合本博客。如果转载该部分内容需要联系原作者。</p>\n<h4 id=\"你可以做什么？\"><a href=\"#你可以做什么？\" class=\"headerlink\" title=\"你可以做什么？\"></a>你可以做什么？</h4><p>只要您遵守本页的许可，您可以自由地共享文章的内容 — 在任何媒介以任何形式复制、发行本作品。并且无需通知作者。</p>\n<h2 id=\"你需要遵守什么样的许可？\"><a href=\"#你需要遵守什么样的许可？\" class=\"headerlink\" title=\"你需要遵守什么样的许可？\"></a>你需要遵守什么样的许可？</h2><h4 id=\"署名\"><a href=\"#署名\" class=\"headerlink\" title=\"署名\"></a>署名</h4><p>您必须标注内容的来源，您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接提升阅读体验）。</p>\n<h4 id=\"禁止商用\"><a href=\"#禁止商用\" class=\"headerlink\" title=\"禁止商用\"></a>禁止商用</h4><p>本站内容免费向互联网所有用户提供，分享本站文章时禁止商业性使用、禁止在转载页面中插入广告（例如谷歌广告、百度广告）、禁止阅读的拦截行为（例如关注公众号、下载App后观看文章）。</p>\n<h4 id=\"禁止演绎\"><a href=\"#禁止演绎\" class=\"headerlink\" title=\"禁止演绎\"></a>禁止演绎</h4><ul>\n<li>分享全部内容（无修改）<br>您需要在文章开头部分（或者明显位置）标注原文章链接（建议使用超链接）</li>\n<li>分享部分截取内容或者衍生创作<br>目前本站全部原创文章的衍生品禁止公开分享和分发。如有更好的修改建议，可以在对应文章下留言。如有衍生创作需求，可以在评论中联系。</li>\n</ul>\n<h2 id=\"什么内容会被版权保护\"><a href=\"#什么内容会被版权保护\" class=\"headerlink\" title=\"什么内容会被版权保护\"></a>什么内容会被版权保护</h2><h4 id=\"包括但不限于：\"><a href=\"#包括但不限于：\" class=\"headerlink\" title=\"包括但不限于：\"></a>包括但不限于：</h4><ul>\n<li>文章封面图片</li>\n<li>文章标题和正文</li>\n<li>站点图片素材（不含主题自带素材）</li>\n</ul>\n<h4 id=\"例外情况\"><a href=\"#例外情况\" class=\"headerlink\" title=\"例外情况\"></a>例外情况</h4><p>本着友好互相进步的原则，被本站友链收录的博客允许博客文章内容的衍生品的分享和分发，但仍需标注出处。</p>\n<p>本着互联网开放精神，您可以在博客文章下方留言要求授权博文的衍生品的分享和分发，标注您的网站地址。</p>\n<h2 id=\"作者原创代码及网站源代码协议\"><a href=\"#作者原创代码及网站源代码协议\" class=\"headerlink\" title=\"作者原创代码及网站源代码协议\"></a>作者原创代码及网站源代码协议</h2><p>网站所有代码采用MIT协议，如有不同，作者会进行标注</p>\n<p>随便扒站吧！</p>\n"},{"title":"友链","date":"2022-07-03T12:40:57.000Z","type":"links","aside":false,"_content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn1.tianli0.top/gh/zhheo/JS-Heo@main/moments/random-friends-post.css\">\n<!-- 一个友链例子 -->\n\n\n{% flink %}\n- class_name: <a href=\"https://github.com/Rock-Candy-Tea\">个人站 </a>\n  class_desc: 我的主站和副站\n  link_list:\n  - name: 主站\n    link: https://icu007.work\n    avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n    descr: 记录我的个人生活和学习笔记\n  - name: 副站\n    link: https://icu007work.gitee.io/\n    avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n    descr: 偷得浮生半日闲\n\n{% endflink %}\n\n\n{% hideToggle 我的信息 %}\n\n{% tabs  %}\n<!-- tab Butterfly & MengD -->\n```yaml\n- name: Rookie_l's Blog\n  link: https://icu007.work\n  avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n  descr: 记录我的个人生活和学习笔记\n```\n<!-- endtab -->\n\n<!-- tab fluid -->\n```yaml\n- {\n  title: 'Rookie_l's Blog',\n  intro: '记录我的个人生活和学习笔记',\n  link: 'https://icu007.work',\n  image: 'https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg'\n}\n```\n<!-- endtab -->\n\n<!-- tab volantis -->\n```yaml\n- title: Rookie_l's Blog\n  avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n  url: https://icu007.work\n  screenshot: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n  keywords: 个人博客\n  description: 记录我的个人生活和学习笔记\n```\n<!-- endtab -->\n\n<!-- tab html -->\n```html\n<a href=\"https://icu007.work\"><img src=\"https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\" alt=\"avatar\">Rookie_l's Blog</a>\n```\n<!-- endtab -->\n\n{% endtabs  %}\n\n{% endhideToggle %}\n\n{% hideToggle 推荐标签衡量标准 %}\n\n1.网站没有不良内容\n\n2.文章质量较高\n\n3.文章较多/或者质量过硬\n\n{% endhideToggle %}\n\n<h1>如何申请友链？</h1>\n\n点下面的按钮！\n在下方按格式留言你的友链申请，即可申请。\n","source":"links/index.md","raw":"---\ntitle: 友链\ndate: 2022-07-03 20:40:57\ntype: \"links\"\naside: false\n---\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn1.tianli0.top/gh/zhheo/JS-Heo@main/moments/random-friends-post.css\">\n<!-- 一个友链例子 -->\n\n\n{% flink %}\n- class_name: <a href=\"https://github.com/Rock-Candy-Tea\">个人站 </a>\n  class_desc: 我的主站和副站\n  link_list:\n  - name: 主站\n    link: https://icu007.work\n    avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n    descr: 记录我的个人生活和学习笔记\n  - name: 副站\n    link: https://icu007work.gitee.io/\n    avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n    descr: 偷得浮生半日闲\n\n{% endflink %}\n\n\n{% hideToggle 我的信息 %}\n\n{% tabs  %}\n<!-- tab Butterfly & MengD -->\n```yaml\n- name: Rookie_l's Blog\n  link: https://icu007.work\n  avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n  descr: 记录我的个人生活和学习笔记\n```\n<!-- endtab -->\n\n<!-- tab fluid -->\n```yaml\n- {\n  title: 'Rookie_l's Blog',\n  intro: '记录我的个人生活和学习笔记',\n  link: 'https://icu007.work',\n  image: 'https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg'\n}\n```\n<!-- endtab -->\n\n<!-- tab volantis -->\n```yaml\n- title: Rookie_l's Blog\n  avatar: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n  url: https://icu007.work\n  screenshot: https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\n  keywords: 个人博客\n  description: 记录我的个人生活和学习笔记\n```\n<!-- endtab -->\n\n<!-- tab html -->\n```html\n<a href=\"https://icu007.work\"><img src=\"https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\" alt=\"avatar\">Rookie_l's Blog</a>\n```\n<!-- endtab -->\n\n{% endtabs  %}\n\n{% endhideToggle %}\n\n{% hideToggle 推荐标签衡量标准 %}\n\n1.网站没有不良内容\n\n2.文章质量较高\n\n3.文章较多/或者质量过硬\n\n{% endhideToggle %}\n\n<h1>如何申请友链？</h1>\n\n点下面的按钮！\n在下方按格式留言你的友链申请，即可申请。\n","updated":"2023-08-01T13:09:49.936Z","path":"links/index.html","comments":1,"layout":"page","_id":"clktr4qr1000azsa0cpm0hybd","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn1.tianli0.top/gh/zhheo/JS-Heo@main/moments/random-friends-post.css\">\n<!-- 一个友链例子 -->\n\n\n<div class=\"flink\"><div class=\"flink-name\"><a href=\"https://github.com/Rock-Candy-Tea\">个人站 </a></div><div class=\"flink-desc\">我的主站和副站</div> <div class=\"flink-list\">\n          <div class=\"flink-list-item\" style=\"background-color:#383838\">\n            <a href=\"https://icu007.work\" title=\"主站\" target=\"_blank\">\n              <div class=\"flink-item-icon\">\n                <img class=\"no-lightbox\" src=\"https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\" onerror='this.onerror=null;this.src=\"/img/friend_404.gif\"' alt=\"主站\" />\n              </div>\n              <div class=\"flink-item-name\">主站</div> \n              <div class=\"flink-item-desc\" title=\"记录我的个人生活和学习笔记\">记录我的个人生活和学习笔记</div>\n            </a>\n          </div>\n          <div class=\"flink-list-item\" style=\"background-color:#383838\">\n            <a href=\"https://icu007work.gitee.io/\" title=\"副站\" target=\"_blank\">\n              <div class=\"flink-item-icon\">\n                <img class=\"no-lightbox\" src=\"https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\" onerror='this.onerror=null;this.src=\"/img/friend_404.gif\"' alt=\"副站\" />\n              </div>\n              <div class=\"flink-item-name\">副站</div> \n              <div class=\"flink-item-desc\" title=\"偷得浮生半日闲\">偷得浮生半日闲</div>\n            </a>\n          </div></div></div>\n\n\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">我的信息</summary><div class=\"toggle-content\"><div class=\"tabs\" id=\"\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#-1\">Butterfly & MengD</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#-2\">fluid</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#-3\">volantis</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#-4\">html</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Rookie_l&#x27;s</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://icu007.work</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg</span></span><br><span class=\"line\">  <span class=\"attr\">descr:</span> <span class=\"string\">记录我的个人生活和学习笔记</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">&#x27;Rookie_l&#x27;</span><span class=\"string\">s</span> <span class=\"string\">Blog&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">intro:</span> <span class=\"string\">&#x27;记录我的个人生活和学习笔记&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">&#x27;https://icu007.work&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">&#x27;https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">Rookie_l&#x27;s</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">https://icu007.work</span></span><br><span class=\"line\">  <span class=\"attr\">screenshot:</span> <span class=\"string\">https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg</span></span><br><span class=\"line\">  <span class=\"attr\">keywords:</span> <span class=\"string\">个人博客</span></span><br><span class=\"line\">  <span class=\"attr\">description:</span> <span class=\"string\">记录我的个人生活和学习笔记</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"-4\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://icu007.work&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;avatar&quot;</span>&gt;</span>Rookie_l&#x27;s Blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n</div></details>\n\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">推荐标签衡量标准</summary><div class=\"toggle-content\"><p>1.网站没有不良内容</p>\n<p>2.文章质量较高</p>\n<p>3.文章较多&#x2F;或者质量过硬</p>\n</div></details>\n\n<h1>如何申请友链？</h1>\n\n<p>点下面的按钮！<br>在下方按格式留言你的友链申请，即可申请。</p>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#e0c3fc 0%,#8ec5fc 100%)","excerpt":"","more":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn1.tianli0.top/gh/zhheo/JS-Heo@main/moments/random-friends-post.css\">\n<!-- 一个友链例子 -->\n\n\n<div class=\"flink\"><div class=\"flink-name\"><a href=\"https://github.com/Rock-Candy-Tea\">个人站 </a></div><div class=\"flink-desc\">我的主站和副站</div> <div class=\"flink-list\">\n          <div class=\"flink-list-item\" style=\"background-color:#383838\">\n            <a href=\"https://icu007.work\" title=\"主站\" target=\"_blank\">\n              <div class=\"flink-item-icon\">\n                <img class=\"no-lightbox\" src=\"https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\" onerror='this.onerror=null;this.src=\"/img/friend_404.gif\"' alt=\"主站\" />\n              </div>\n              <div class=\"flink-item-name\">主站</div> \n              <div class=\"flink-item-desc\" title=\"记录我的个人生活和学习笔记\">记录我的个人生活和学习笔记</div>\n            </a>\n          </div>\n          <div class=\"flink-list-item\" style=\"background-color:#383838\">\n            <a href=\"https://icu007work.gitee.io/\" title=\"副站\" target=\"_blank\">\n              <div class=\"flink-item-icon\">\n                <img class=\"no-lightbox\" src=\"https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg\" onerror='this.onerror=null;this.src=\"/img/friend_404.gif\"' alt=\"副站\" />\n              </div>\n              <div class=\"flink-item-name\">副站</div> \n              <div class=\"flink-item-desc\" title=\"偷得浮生半日闲\">偷得浮生半日闲</div>\n            </a>\n          </div></div></div>\n\n\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">我的信息</summary><div class=\"toggle-content\"><div class=\"tabs\" id=\"\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#-1\">Butterfly & MengD</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#-2\">fluid</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#-3\">volantis</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#-4\">html</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Rookie_l&#x27;s</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://icu007.work</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg</span></span><br><span class=\"line\">  <span class=\"attr\">descr:</span> <span class=\"string\">记录我的个人生活和学习笔记</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">&#x27;Rookie_l&#x27;</span><span class=\"string\">s</span> <span class=\"string\">Blog&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">intro:</span> <span class=\"string\">&#x27;记录我的个人生活和学习笔记&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">&#x27;https://icu007.work&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">&#x27;https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">Rookie_l&#x27;s</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">https://icu007.work</span></span><br><span class=\"line\">  <span class=\"attr\">screenshot:</span> <span class=\"string\">https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg</span></span><br><span class=\"line\">  <span class=\"attr\">keywords:</span> <span class=\"string\">个人博客</span></span><br><span class=\"line\">  <span class=\"attr\">description:</span> <span class=\"string\">记录我的个人生活和学习笔记</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"-4\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://icu007.work&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://icu007.work/wp-content/uploads/2022/03/head-1.jpeg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;avatar&quot;</span>&gt;</span>Rookie_l&#x27;s Blog<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n</div></details>\n\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">推荐标签衡量标准</summary><div class=\"toggle-content\"><p>1.网站没有不良内容</p>\n<p>2.文章质量较高</p>\n<p>3.文章较多&#x2F;或者质量过硬</p>\n</div></details>\n\n<h1>如何申请友链？</h1>\n\n<p>点下面的按钮！<br>在下方按格式留言你的友链申请，即可申请。</p>\n"},{"title":"留言板","date":"2023-08-01T12:49:48.000Z","type":"messageboard","aside":false,"_content":"{% note info %}\n\n<div style=\"text-align: center; border-radius: 5px; \">\n留言规则\n</div>\n\n\n1. 留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n2. 留言者承担因留言行为而直接或间接引起的法律责任;\n3. 本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n4. 如果你有任何问题或是要求，可以在这里留言并留下你的邮箱;\n5. 如在本博客留言，即表明已阅读并接受了上述各项条款。\n\n{% endnote %}","source":"messageboard/index.md","raw":"---\ntitle: 留言板\ndate: 2023-08-01 20:49:48\ntype: \"messageboard\"\naside: false\n---\n{% note info %}\n\n<div style=\"text-align: center; border-radius: 5px; \">\n留言规则\n</div>\n\n\n1. 留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n2. 留言者承担因留言行为而直接或间接引起的法律责任;\n3. 本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n4. 如果你有任何问题或是要求，可以在这里留言并留下你的邮箱;\n5. 如在本博客留言，即表明已阅读并接受了上述各项条款。\n\n{% endnote %}","updated":"2023-08-01T12:59:17.601Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"clktr4qr3000fzsa0bueq5t4k","content":"<div class=\"note info flat\"><div style=\"text-align: center; border-radius: 5px; \">\n留言规则\n</div>\n\n\n<ol>\n<li>留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;</li>\n<li>留言者承担因留言行为而直接或间接引起的法律责任;</li>\n<li>本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;</li>\n<li>如果你有任何问题或是要求，可以在这里留言并留下你的邮箱;</li>\n<li>如在本博客留言，即表明已阅读并接受了上述各项条款。</li>\n</ol>\n</div>","site":{"data":{}},"cover":"linear-gradient(to top,#a18cd1 0%,#fbc2eb 100%)","excerpt":"","more":"<div class=\"note info flat\"><div style=\"text-align: center; border-radius: 5px; \">\n留言规则\n</div>\n\n\n<ol>\n<li>留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;</li>\n<li>留言者承担因留言行为而直接或间接引起的法律责任;</li>\n<li>本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;</li>\n<li>如果你有任何问题或是要求，可以在这里留言并留下你的邮箱;</li>\n<li>如在本博客留言，即表明已阅读并接受了上述各项条款。</li>\n</ol>\n</div>"},{"title":"电影","date":"2023-08-01T13:10:27.000Z","type":"movies","aside":false,"comments":0,"_content":"","source":"movies/index.md","raw":"---\ntitle: 电影\ndate: 2023-08-01 21:10:27\ntype: \"movies\"\naside: false\ncomments: false\n---\n","updated":"2023-08-02T10:46:12.010Z","path":"movies/index.html","layout":"page","_id":"clktr4qr4000hzsa05om7fn0r","content":"","site":{"data":{}},"cover":"linear-gradient(to top,#fdcbf1 0%,#fdcbf1 1%,#e6dee9 100%)","excerpt":"","more":""},{"title":"标签","date":"2022-07-03T12:51:29.000Z","type":"tags","aside":false,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-07-03 20:51:29\ntype: \"tags\"\naside: false\ncomments: false\n---\n","updated":"2023-08-01T13:05:58.440Z","path":"tags/index.html","layout":"page","_id":"clktr4qr7000mzsa043dw52dm","content":"","site":{"data":{}},"cover":"linear-gradient(to right,#ffecd2 0%,#fcb69f 100%)","excerpt":"","more":""},{"title":"好听的音乐","date":"2022-07-14T08:37:40.000Z","aside":false,"_content":"# 好听的歌\n\n{% tabs  %}\n{% endtabs %}\n\n# 歌曲排行榜\n\n博主会每隔一段时间将自己近期爱听的歌排行在下面\n\n{% hideToggle 2022-7 %}\n{% endhideToggle %}\n\n咕咕咕...\n你也可以在评论区留下你喜欢的音乐\n","source":"music/index.md","raw":"---\ntitle: 好听的音乐\ndate: 2022-07-14 16:37:40\naside: false\n---\n# 好听的歌\n\n{% tabs  %}\n{% endtabs %}\n\n# 歌曲排行榜\n\n博主会每隔一段时间将自己近期爱听的歌排行在下面\n\n{% hideToggle 2022-7 %}\n{% endhideToggle %}\n\n咕咕咕...\n你也可以在评论区留下你喜欢的音乐\n","updated":"2023-08-01T13:06:34.883Z","path":"music/index.html","comments":1,"layout":"page","_id":"clktr4qr9000ozsa0ak5j4f42","content":"<h1 id=\"好听的歌\"><a href=\"#好听的歌\" class=\"headerlink\" title=\"好听的歌\"></a>好听的歌</h1><div class=\"tabs\" id=\"\"><ul class=\"nav-tabs\"></ul><div class=\"tab-contents\"></div></div>\n\n<h1 id=\"歌曲排行榜\"><a href=\"#歌曲排行榜\" class=\"headerlink\" title=\"歌曲排行榜\"></a>歌曲排行榜</h1><p>博主会每隔一段时间将自己近期爱听的歌排行在下面</p>\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">2022-7</summary><div class=\"toggle-content\"></div></details>\n\n<p>咕咕咕…<br>你也可以在评论区留下你喜欢的音乐</p>\n","site":{"data":{}},"cover":"linear-gradient(to top,#fad0c4 0%,#fad0c4 1%,#ffd1ff 100%)","excerpt":"","more":"<h1 id=\"好听的歌\"><a href=\"#好听的歌\" class=\"headerlink\" title=\"好听的歌\"></a>好听的歌</h1><div class=\"tabs\" id=\"\"><ul class=\"nav-tabs\"></ul><div class=\"tab-contents\"></div></div>\n\n<h1 id=\"歌曲排行榜\"><a href=\"#歌曲排行榜\" class=\"headerlink\" title=\"歌曲排行榜\"></a>歌曲排行榜</h1><p>博主会每隔一段时间将自己近期爱听的歌排行在下面</p>\n<details class=\"toggle\" ><summary class=\"toggle-button\" style=\"\">2022-7</summary><div class=\"toggle-content\"></div></details>\n\n<p>咕咕咕…<br>你也可以在评论区留下你喜欢的音乐</p>\n"},{"_content":"/* 首页 卡片文章背景透明 */\n#recent-posts>.recent-post-item{\n  background: rgba(255,255,255,.5);\n}\n\n#recent-posts>.recent-post-item>#catalog_magnet>.magnet_item{\n  background: rgba(255,255,255,.5);\n}\n\n/* .layout_post>#post {\n  background: rgba(255,255,255,.5);\n} */\n\n/* 边栏透明 */\n#aside-content>.card-widget{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-recent-post{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-categories{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-tags{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-archives{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-webinfo{\n  background: rgba(255,255,255,.5);\n}\n\n#aside_content .layout_post>#post{\n  background: rgba(255, 255, 255, .3);\n}\n\n/* .layout_post>#post {\n    background: rgba(255,255,255,.6);\n} */\n\n.layout > div:first-child:not(.recent-posts) {\n  background: rgba(255,255,255,.5);\n}\n\n#page-header.not-top-img #nav {\n  background: rgba(255,255, 255, 0); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0);\n}\n\n#page-header.nav-fixed #nav {\n  background: rgba(255,255, 255, .5); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0.5);\n}\n\n#aside-content .card-info #card-info-btn {\n  border-radius: 5px;\n}\n\n#random-banner{\n  width:300px;\n  height:100%;\n  border-radius: 12px;\n  position: relative;\n  left: 65px;\n}\n/* 去除小横条动画 */\n#nav *::after{\n  background-color: transparent!important;\n}\n\n\n/* 子菜单横向 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\n/*\n  left:calc(-150%)!important;这是估算值，为了保持元素居中的，如果不合适可以自己调\n改为：*/\nleft:50%;\ntranslate:-50%;\n}\n\nelement.style {\n  border-radius: 5px;\n  background: rgba(255,255, 255, .2);\n}\n\n#aside-content .aside-list > .aside-list-item .thumbnail {\n  border-radius: 5px;\n}\n\n#footer {\n  top: 20px;\n  background: rgba(255,255, 255, .2);\n}\n\n#footer-wrap {\n  color: #000; /* 设置 #footer-wrap 元素内部文字颜色为红色 */\n}\n\n/* 添加额外的样式，可以为空 */\n/* #footer:not(.framework-info) {\n\n} */\n\n.framework-info {\n  display: none; /* 隐藏具有 class=\"framework-info\" 的元素 */\n}\n\n\n/* 滚动条 */\n::-webkit-scrollbar {\nwidth: 9px;\nheight: 7px;\n}\n\n::-webkit-scrollbar-track {\nbackground-color: rgba(73, 177, 245, 0.2);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\nbackground-color: #49b1f5;\nbackground-image: -webkit-linear-gradient(\n  45deg,\n  rgba(255, 255, 255, 0.4) 25%,\n  transparent 25%,\n  transparent 50%,\n  rgba(255, 255, 255, 0.4) 50%,\n  rgba(255, 255, 255, 0.4) 75%,\n  transparent 75%,\n  transparent\n);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\nbackground-color: transparent;\n}\n\n::-moz-selection {\ncolor: #fff;\nbackground-color: #49b1f5;\n}\n\n\n#article-container .flink .flink-list {\n  text-align: left!important;\n}\n.flink-item-name, .flink-item-desc {\n  color: white!important;\n}","source":"css/mycss/background.css","raw":"/* 首页 卡片文章背景透明 */\n#recent-posts>.recent-post-item{\n  background: rgba(255,255,255,.5);\n}\n\n#recent-posts>.recent-post-item>#catalog_magnet>.magnet_item{\n  background: rgba(255,255,255,.5);\n}\n\n/* .layout_post>#post {\n  background: rgba(255,255,255,.5);\n} */\n\n/* 边栏透明 */\n#aside-content>.card-widget{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-recent-post{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-categories{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-tags{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-archives{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-webinfo{\n  background: rgba(255,255,255,.5);\n}\n\n#aside_content .layout_post>#post{\n  background: rgba(255, 255, 255, .3);\n}\n\n/* .layout_post>#post {\n    background: rgba(255,255,255,.6);\n} */\n\n.layout > div:first-child:not(.recent-posts) {\n  background: rgba(255,255,255,.5);\n}\n\n#page-header.not-top-img #nav {\n  background: rgba(255,255, 255, 0); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0);\n}\n\n#page-header.nav-fixed #nav {\n  background: rgba(255,255, 255, .5); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0.5);\n}\n\n#aside-content .card-info #card-info-btn {\n  border-radius: 5px;\n}\n\n#random-banner{\n  width:300px;\n  height:100%;\n  border-radius: 12px;\n  position: relative;\n  left: 65px;\n}\n/* 去除小横条动画 */\n#nav *::after{\n  background-color: transparent!important;\n}\n\n\n/* 子菜单横向 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\n/*\n  left:calc(-150%)!important;这是估算值，为了保持元素居中的，如果不合适可以自己调\n改为：*/\nleft:50%;\ntranslate:-50%;\n}\n\nelement.style {\n  border-radius: 5px;\n  background: rgba(255,255, 255, .2);\n}\n\n#aside-content .aside-list > .aside-list-item .thumbnail {\n  border-radius: 5px;\n}\n\n#footer {\n  top: 20px;\n  background: rgba(255,255, 255, .2);\n}\n\n#footer-wrap {\n  color: #000; /* 设置 #footer-wrap 元素内部文字颜色为红色 */\n}\n\n/* 添加额外的样式，可以为空 */\n/* #footer:not(.framework-info) {\n\n} */\n\n.framework-info {\n  display: none; /* 隐藏具有 class=\"framework-info\" 的元素 */\n}\n\n\n/* 滚动条 */\n::-webkit-scrollbar {\nwidth: 9px;\nheight: 7px;\n}\n\n::-webkit-scrollbar-track {\nbackground-color: rgba(73, 177, 245, 0.2);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\nbackground-color: #49b1f5;\nbackground-image: -webkit-linear-gradient(\n  45deg,\n  rgba(255, 255, 255, 0.4) 25%,\n  transparent 25%,\n  transparent 50%,\n  rgba(255, 255, 255, 0.4) 50%,\n  rgba(255, 255, 255, 0.4) 75%,\n  transparent 75%,\n  transparent\n);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\nbackground-color: transparent;\n}\n\n::-moz-selection {\ncolor: #fff;\nbackground-color: #49b1f5;\n}\n\n\n#article-container .flink .flink-list {\n  text-align: left!important;\n}\n.flink-item-name, .flink-item-desc {\n  color: white!important;\n}","date":"2023-08-02T10:12:06.849Z","updated":"2023-08-02T10:12:06.849Z","path":"css/mycss/background.css","layout":"false","title":"","comments":1,"_id":"clktr4qrb000tzsa03vrq1twv","content":"/* 首页 卡片文章背景透明 */\n#recent-posts>.recent-post-item{\n  background: rgba(255,255,255,.5);\n}\n\n#recent-posts>.recent-post-item>#catalog_magnet>.magnet_item{\n  background: rgba(255,255,255,.5);\n}\n\n/* .layout_post>#post {\n  background: rgba(255,255,255,.5);\n} */\n\n/* 边栏透明 */\n#aside-content>.card-widget{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-recent-post{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-categories{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-tags{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-archives{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-webinfo{\n  background: rgba(255,255,255,.5);\n}\n\n#aside_content .layout_post>#post{\n  background: rgba(255, 255, 255, .3);\n}\n\n/* .layout_post>#post {\n    background: rgba(255,255,255,.6);\n} */\n\n.layout > div:first-child:not(.recent-posts) {\n  background: rgba(255,255,255,.5);\n}\n\n#page-header.not-top-img #nav {\n  background: rgba(255,255, 255, 0); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0);\n}\n\n#page-header.nav-fixed #nav {\n  background: rgba(255,255, 255, .5); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0.5);\n}\n\n#aside-content .card-info #card-info-btn {\n  border-radius: 5px;\n}\n\n#random-banner{\n  width:300px;\n  height:100%;\n  border-radius: 12px;\n  position: relative;\n  left: 65px;\n}\n/* 去除小横条动画 */\n#nav *::after{\n  background-color: transparent!important;\n}\n\n\n/* 子菜单横向 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\n/*\n  left:calc(-150%)!important;这是估算值，为了保持元素居中的，如果不合适可以自己调\n改为：*/\nleft:50%;\ntranslate:-50%;\n}\n\nelement.style {\n  border-radius: 5px;\n  background: rgba(255,255, 255, .2);\n}\n\n#aside-content .aside-list > .aside-list-item .thumbnail {\n  border-radius: 5px;\n}\n\n#footer {\n  top: 20px;\n  background: rgba(255,255, 255, .2);\n}\n\n#footer-wrap {\n  color: #000; /* 设置 #footer-wrap 元素内部文字颜色为红色 */\n}\n\n/* 添加额外的样式，可以为空 */\n/* #footer:not(.framework-info) {\n\n} */\n\n.framework-info {\n  display: none; /* 隐藏具有 class=\"framework-info\" 的元素 */\n}\n\n\n/* 滚动条 */\n::-webkit-scrollbar {\nwidth: 9px;\nheight: 7px;\n}\n\n::-webkit-scrollbar-track {\nbackground-color: rgba(73, 177, 245, 0.2);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\nbackground-color: #49b1f5;\nbackground-image: -webkit-linear-gradient(\n  45deg,\n  rgba(255, 255, 255, 0.4) 25%,\n  transparent 25%,\n  transparent 50%,\n  rgba(255, 255, 255, 0.4) 50%,\n  rgba(255, 255, 255, 0.4) 75%,\n  transparent 75%,\n  transparent\n);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\nbackground-color: transparent;\n}\n\n::-moz-selection {\ncolor: #fff;\nbackground-color: #49b1f5;\n}\n\n\n#article-container .flink .flink-list {\n  text-align: left!important;\n}\n.flink-item-name, .flink-item-desc {\n  color: white!important;\n}","site":{"data":{}},"cover":"linear-gradient(to top,#a18cd1 0%,#fbc2eb 100%)","excerpt":"","more":"/* 首页 卡片文章背景透明 */\n#recent-posts>.recent-post-item{\n  background: rgba(255,255,255,.5);\n}\n\n#recent-posts>.recent-post-item>#catalog_magnet>.magnet_item{\n  background: rgba(255,255,255,.5);\n}\n\n/* .layout_post>#post {\n  background: rgba(255,255,255,.5);\n} */\n\n/* 边栏透明 */\n#aside-content>.card-widget{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-recent-post{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-categories{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-tags{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-archives{\n  background: rgba(255,255,255,.5);\n}\n\n#aside-content>.sticky_layout>.card-webinfo{\n  background: rgba(255,255,255,.5);\n}\n\n#aside_content .layout_post>#post{\n  background: rgba(255, 255, 255, .3);\n}\n\n/* .layout_post>#post {\n    background: rgba(255,255,255,.6);\n} */\n\n.layout > div:first-child:not(.recent-posts) {\n  background: rgba(255,255,255,.5);\n}\n\n#page-header.not-top-img #nav {\n  background: rgba(255,255, 255, 0); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0);\n}\n\n#page-header.nav-fixed #nav {\n  background: rgba(255,255, 255, .5); /* 将背景颜色设置为透明 */\n  box-shadow: 0 0 0 0 rgba(0,0,0,0.5);\n}\n\n#aside-content .card-info #card-info-btn {\n  border-radius: 5px;\n}\n\n#random-banner{\n  width:300px;\n  height:100%;\n  border-radius: 12px;\n  position: relative;\n  left: 65px;\n}\n/* 去除小横条动画 */\n#nav *::after{\n  background-color: transparent!important;\n}\n\n\n/* 子菜单横向 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\n/*\n  left:calc(-150%)!important;这是估算值，为了保持元素居中的，如果不合适可以自己调\n改为：*/\nleft:50%;\ntranslate:-50%;\n}\n\nelement.style {\n  border-radius: 5px;\n  background: rgba(255,255, 255, .2);\n}\n\n#aside-content .aside-list > .aside-list-item .thumbnail {\n  border-radius: 5px;\n}\n\n#footer {\n  top: 20px;\n  background: rgba(255,255, 255, .2);\n}\n\n#footer-wrap {\n  color: #000; /* 设置 #footer-wrap 元素内部文字颜色为红色 */\n}\n\n/* 添加额外的样式，可以为空 */\n/* #footer:not(.framework-info) {\n\n} */\n\n.framework-info {\n  display: none; /* 隐藏具有 class=\"framework-info\" 的元素 */\n}\n\n\n/* 滚动条 */\n::-webkit-scrollbar {\nwidth: 9px;\nheight: 7px;\n}\n\n::-webkit-scrollbar-track {\nbackground-color: rgba(73, 177, 245, 0.2);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-thumb {\nbackground-color: #49b1f5;\nbackground-image: -webkit-linear-gradient(\n  45deg,\n  rgba(255, 255, 255, 0.4) 25%,\n  transparent 25%,\n  transparent 50%,\n  rgba(255, 255, 255, 0.4) 50%,\n  rgba(255, 255, 255, 0.4) 75%,\n  transparent 75%,\n  transparent\n);\nborder-radius: 2em;\n}\n\n::-webkit-scrollbar-corner {\nbackground-color: transparent;\n}\n\n::-moz-selection {\ncolor: #fff;\nbackground-color: #49b1f5;\n}\n\n\n#article-container .flink .flink-list {\n  text-align: left!important;\n}\n.flink-item-name, .flink-item-desc {\n  color: white!important;\n}"}],"Post":[{"title":"Font-Awesome-Animation各个图标效果","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqxw2orj21kw0w01a9.jpg"],"password":123456,"abbrlink":"82958ed6","date":"2022-08-27T03:35:26.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n# Font Awesome Animation各个图标效果\n\n| 编号 | 动画                | 效果                   |\n| ---- | ------------------- | ---------------------- |\n| 1    | faa-wrench          | faa-wrench             |\n| 2    | faa-ring            | 响铃                   |\n| 3    | faa-horizontal      | 左右震动               |\n| 4    | faa-vertical        | 上下震动               |\n| 5    | faa-flash           | 若隐若现               |\n| 6    | faa-bounce          | 跳高高                 |\n| 7    | faa-spin            | 顺时针旋转             |\n| 8    | faa-float           | 像气球一样悬浮         |\n| 9    | faa-pulse           | 像气球时而变大时而变小 |\n| 10   | faa-shake           | 摇头，和faa-wrench相似 |\n| 11   | faa-tada            | 时而靠近时而远离       |\n| 12   | faa-passing         | 从左边出现，从右边消失 |\n| 13   | faa-passing-reverse | 和faa-passing相反      |\n| 14   | faa-burst           | 变大后很快消失         |\n| 15   | faa-falling         | 下降                   |\n| 16   | faa-rising          | 上升                   |\n\n> [IconName] animated 加载时生效\n> [IconName] animated-hover 鼠标悬停在icon生效\n","source":"_posts/Font-Awesome-Animation各个图标效果.md","raw":"---\ntitle: Font-Awesome-Animation各个图标效果\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 资源\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqxw2orj21kw0w01a9.jpg'\ntags:\n  - 随笔\npassword: 123456\nabbrlink: 82958ed6\ndate: 2022-08-27 11:35:26\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n# Font Awesome Animation各个图标效果\n\n| 编号 | 动画                | 效果                   |\n| ---- | ------------------- | ---------------------- |\n| 1    | faa-wrench          | faa-wrench             |\n| 2    | faa-ring            | 响铃                   |\n| 3    | faa-horizontal      | 左右震动               |\n| 4    | faa-vertical        | 上下震动               |\n| 5    | faa-flash           | 若隐若现               |\n| 6    | faa-bounce          | 跳高高                 |\n| 7    | faa-spin            | 顺时针旋转             |\n| 8    | faa-float           | 像气球一样悬浮         |\n| 9    | faa-pulse           | 像气球时而变大时而变小 |\n| 10   | faa-shake           | 摇头，和faa-wrench相似 |\n| 11   | faa-tada            | 时而靠近时而远离       |\n| 12   | faa-passing         | 从左边出现，从右边消失 |\n| 13   | faa-passing-reverse | 和faa-passing相反      |\n| 14   | faa-burst           | 变大后很快消失         |\n| 15   | faa-falling         | 下降                   |\n| 16   | faa-rising          | 上升                   |\n\n> [IconName] animated 加载时生效\n> [IconName] animated-hover 鼠标悬停在icon生效\n","slug":"Font-Awesome-Animation各个图标效果","published":1,"updated":"2023-07-31T12:40:09.538Z","layout":"post","link":"","_id":"clktr4qqt0001zsa0cd8a5ug3","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，您输入的密码错误，请检查后重新输入。\" data-whm=\"抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"ca49ea4e6b2e163c41943e6d4088503e0bad743f947534be1b4b08aaf573d806\">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186d60d6b44f35333dfcdb5d68b77a4115e27f69914aa13f0d526237093837906edd4db4af16e401f54d17ab765a4640fbbff7024eacaa05660e465fe10965fdcc6e2dfe13d6e044eed5e5d7ae457afd454757b567b8fc9f6d43e8a6d869d17610ab9565f2908a7157ed9225989f5724bf0a180869151f0781f62268ab4db1191d99c1e144d566b8e009b14cca676d7d3435996eead3858cb060eb42cdd567d60db17f0d2cc82333895f69cd1501d73c94e146397bb4d0438d714af76ab77ef346b6b390a9c170c9cbd909040abaf98fbfc958eec1dfea9f0479d398fd278f34dff736d279d94874d7bc6f8dd757698fcaa2840809037e89c4e1855e324eda163acd48473cab5e75f9a03ecde1893581e30756cc3b1c77ef5632fd2599eb6f7860ec5743bb0d6c0b5e140e3c8f6ff301613877f3d44de935b47284eccf5522ed8751990a7a576a95bb812a1d1c51fc0953cfde2cb7ed2eaa5882b9f4eb36bf644b49b39d3e48bc2a5daf4b4104ca7cf6daa1118a8d763163bc2a81192abe9b3bce80b9dde24a60feb7b748ac73491343e98be0afdcb62203f3132d725577a27751dc3f3d110a299f0c320cc598014a5537d7da5484cad762de37c474fe048a418412ee995532a29cb26d898563474190432bfc05e2f1309eabc6c902a105cb377b0b5164bf4247fdc6d34c8457f5b03d19035069d37bb6fc04c2d9301e9b6a019900f59d93bcf23dc3ac5217974e6602a7337126aaa54ca89cac49d05e5e61c49c096d5565f78950c944d28ca7a0ccd6a4de4e0052b8124450805221f921c87b12e4ce22223d03a6b5d0444f42a9ce24c636a498cdad75eac3a3b9ed7e3ac20c3b404b149845c8607d7f3a5298ae2edaf979aaf00e6089cf733421af8dcc152eb3c11e6338d49e7b3ece5f74b3e88a932970d465ec2662288d1a08dec5954e94d08ef40df8395411417bad5612526f963898f9f26bd90fd00d641a983142c708d97d8702063b82799e60d95f606fbf217b0453d6e927509a10366b0ab2e8bc5ba35404f22eb6c65b110bd345ba22e721dec3d29675ab2ad8c434f4a8f208ce9d9909e752c7b3e92b37939366a234c5b7770c09c083d7b043fe7e8ae66a0a16e0107bcb029177fd9f45df2ed15cf78a7eea181c13e43dabfb1051f605acf2336dbffe68303da22cb50dadac3256d7aa861068c338a6f86d21653f0367e9b9f8cd926181eadfd5a8ffa5b79ee48311a8a62a03426728498ea04ef73e3e5bd22ad0197b408397e11fd0438f1145d067e1b184450d2421c56f78d84a058c40d5d6c6fbc505e55d6b0270972affa919310bf3687e483f7ceb884400add1a74e331399c7a1e0755ec7dd442a796582a68224fab8a1924e7d8796fa0753b7e8671f345621c972c9481866b50da3f787d85bafe8df7ec297db3d17a2fd5373ee0655ebfb46e8719fc05416a621f4130efedf3c3b180842a5e7625dc7d264c31dce176751a99ff6edacece691cd7230bcf2b82c213f2455ba26d0690a7fed79102c22abf580f2aaa1a70df53b18d89a466ef8d9b0472677470316e834e97f8d488757026d2888a72f12601055f462cb26091d7edb4866eafc20b205b8564329fc0490114231033367e2779fdec370bd906192b5b37fe72af0ab7491f7cf631dae4c44880b46f8e4156477ddd7e376f454e3e6468451416c49bb3cb535fb7221c2721e946c76378c9ec3545d067d685f1f4ad4138f54c0d6c7db58bae32d2500013cb5fe3dfc34e3c3d59216564ef3b3d2c080425e416c9b0d7628ee75f3d98f5e5fbb0de097758e8b19d1bf8daa159711d9521b223f140c36709334980de195645b336be9851b36067f25532a8637e004849e895bdd8ceb8c1eba3a3a93b4176b8b46c20e47b69844b39111dbfb2b018cff733d6986e61c3c67057d85c73a71eb4ddddd97d7e6f87e2c25cf93858442857468d067fc03e3fdb939372b3d88bacbefd3a4fd9877caa2d301e7aa64a9032efc5062b3a61ae1e9a4b56c2b06c370a12db877793fac8f94388c9b6268baeb35f88e30aaea674c3b64baaec28083f57911d88eb7c5ec9fd9c0ee725cb3fe465c6ac3edadfe6ccf7c0e4e926e6019fa5400786c59c71d4409d1cc0122bd27523adca0a11de9317b24f97ec484fc04bdfb48bcb565495de5617ae5440efa5f7845a739505d9d0697c19f1115369b9d49758633cc98869</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"cover":"linear-gradient(to right,#ffecd2 0%,#fcb69f 100%)","excerpt":"这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。","more":"这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。","origin":"<h1 id=\"Font-Awesome-Animation各个图标效果\"><a href=\"#Font-Awesome-Animation各个图标效果\" class=\"headerlink\" title=\"Font Awesome Animation各个图标效果\"></a>Font Awesome Animation各个图标效果</h1><table>\n<thead>\n<tr>\n<th>编号</th>\n<th>动画</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>faa-wrench</td>\n<td>faa-wrench</td>\n</tr>\n<tr>\n<td>2</td>\n<td>faa-ring</td>\n<td>响铃</td>\n</tr>\n<tr>\n<td>3</td>\n<td>faa-horizontal</td>\n<td>左右震动</td>\n</tr>\n<tr>\n<td>4</td>\n<td>faa-vertical</td>\n<td>上下震动</td>\n</tr>\n<tr>\n<td>5</td>\n<td>faa-flash</td>\n<td>若隐若现</td>\n</tr>\n<tr>\n<td>6</td>\n<td>faa-bounce</td>\n<td>跳高高</td>\n</tr>\n<tr>\n<td>7</td>\n<td>faa-spin</td>\n<td>顺时针旋转</td>\n</tr>\n<tr>\n<td>8</td>\n<td>faa-float</td>\n<td>像气球一样悬浮</td>\n</tr>\n<tr>\n<td>9</td>\n<td>faa-pulse</td>\n<td>像气球时而变大时而变小</td>\n</tr>\n<tr>\n<td>10</td>\n<td>faa-shake</td>\n<td>摇头，和faa-wrench相似</td>\n</tr>\n<tr>\n<td>11</td>\n<td>faa-tada</td>\n<td>时而靠近时而远离</td>\n</tr>\n<tr>\n<td>12</td>\n<td>faa-passing</td>\n<td>从左边出现，从右边消失</td>\n</tr>\n<tr>\n<td>13</td>\n<td>faa-passing-reverse</td>\n<td>和faa-passing相反</td>\n</tr>\n<tr>\n<td>14</td>\n<td>faa-burst</td>\n<td>变大后很快消失</td>\n</tr>\n<tr>\n<td>15</td>\n<td>faa-falling</td>\n<td>下降</td>\n</tr>\n<tr>\n<td>16</td>\n<td>faa-rising</td>\n<td>上升</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>[IconName] animated 加载时生效<br>[IconName] animated-hover 鼠标悬停在icon生效</p>\n</blockquote>\n","encrypt":true},{"title":"Java基础小结","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqshib2j21kw0w0apc.jpg"],"abbrlink":"9e3ebe18","date":"2022-08-25T14:42:17.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 面向过程 & 面向对象\n\n### 面向过程思想—>自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想—>自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象 —>将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**\n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n\n \n \n \n```\n\n------\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n\n \n \n \n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n------\n\n- this关键字\n\n## 类与对象的关系\n\n- 类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- 对象是抽象概念的具体实例\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n","source":"_posts/Java基础小结.md","raw":"---\ntitle: Java基础小结\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqshib2j21kw0w0apc.jpg'\ntags:\n  - Java\n  - Java基础语法\nabbrlink: 9e3ebe18\ndate: 2022-08-25 22:42:17\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 面向过程 & 面向对象\n\n### 面向过程思想—>自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想—>自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象 —>将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**\n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n\n \n \n \n```\n\n------\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n\n \n \n \n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n------\n\n- this关键字\n\n## 类与对象的关系\n\n- 类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- 对象是抽象概念的具体实例\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n","slug":"Java基础小结","published":1,"updated":"2023-07-31T12:40:09.561Z","layout":"post","link":"","_id":"clktr4qqw0003zsa08mfv1tus","content":"<h2 id=\"面向过程-面向对象\"><a href=\"#面向过程-面向对象\" class=\"headerlink\" title=\"面向过程 &amp; 面向对象\"></a>面向过程 &amp; 面向对象</h2><h3 id=\"面向过程思想—-自上而下\"><a href=\"#面向过程思想—-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-自下而上\"><a href=\"#面向对象思想—-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象 —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Author &#123;xiheya&#125;</span><br><span class=\"line\"> * @Date: 2022/03/12/ 22:30</span><br><span class=\"line\"> * @Description</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Demo02 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo02 demo02 = new Demo02();</span><br><span class=\"line\">        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static int add(int a,int b, int c)&#123;      //静态方法，main方法中可以直接调用。</span><br><span class=\"line\">        return a+b+c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int add(int a,int b)&#123;                    //非静态方法，调用的话需要实例化对象后才能调用。</span><br><span class=\"line\">        return a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Author &#123;xiheya&#125;</span><br><span class=\"line\"> * @Date: 2022/03/12/ 21:52</span><br><span class=\"line\"> * @Description</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 值传递和引用传递</span><br><span class=\"line\">public class Demo01 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int a = 1;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span><br><span class=\"line\">        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span><br><span class=\"line\">        Person person = new Person();       //实例化一个类，new一个Person类。</span><br><span class=\"line\">        System.out.println(person.name);</span><br><span class=\"line\">        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span><br><span class=\"line\">        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void change(int a)&#123;</span><br><span class=\"line\">        a = 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void changeName(Person person)&#123;</span><br><span class=\"line\">        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span><br><span class=\"line\">        person.name = &quot;xiheya&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。<ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li>对象是抽象概念的具体实例<ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"面向过程-面向对象\"><a href=\"#面向过程-面向对象\" class=\"headerlink\" title=\"面向过程 &amp; 面向对象\"></a>面向过程 &amp; 面向对象</h2><h3 id=\"面向过程思想—-自上而下\"><a href=\"#面向过程思想—-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-自下而上\"><a href=\"#面向对象思想—-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象 —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Author &#123;xiheya&#125;</span><br><span class=\"line\"> * @Date: 2022/03/12/ 22:30</span><br><span class=\"line\"> * @Description</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Demo02 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Demo02 demo02 = new Demo02();</span><br><span class=\"line\">        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static int add(int a,int b, int c)&#123;      //静态方法，main方法中可以直接调用。</span><br><span class=\"line\">        return a+b+c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int add(int a,int b)&#123;                    //非静态方法，调用的话需要实例化对象后才能调用。</span><br><span class=\"line\">        return a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Author &#123;xiheya&#125;</span><br><span class=\"line\"> * @Date: 2022/03/12/ 21:52</span><br><span class=\"line\"> * @Description</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 值传递和引用传递</span><br><span class=\"line\">public class Demo01 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int a = 1;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span><br><span class=\"line\">        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span><br><span class=\"line\">        Person person = new Person();       //实例化一个类，new一个Person类。</span><br><span class=\"line\">        System.out.println(person.name);</span><br><span class=\"line\">        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span><br><span class=\"line\">        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void change(int a)&#123;</span><br><span class=\"line\">        a = 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void changeName(Person person)&#123;</span><br><span class=\"line\">        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span><br><span class=\"line\">        person.name = &quot;xiheya&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。<ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li>对象是抽象概念的具体实例<ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n"},{"title":"Hexo-Theme-Sakura","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"keywords":"Sakura","description":"hexo-sakura主题使用教程","photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqp0vyrj21kw0w0h0v.jpg"],"abbrlink":"186f70d4","date":"2022-08-22T14:16:01.000Z","authorAbout":null,"authorDesc":null,"_content":"hexo-theme-sakura主题 [English document](https://github.com/honjun/hexo-theme-sakura/blob/master/README.md)\n\n基于WordPress主题[Sakura](https://github.com/mashirozx/Sakura/)修改成Hexo的主题。\n\n[demo预览](https://sakura.hojun.cn)\n\n正在开发中......\n\n![](https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg)\n\n\n\n## 主题特性\n\n - 首页大屏视频\n - 首页随机封面\n - 图片懒加载\n - valine评论\n - fancy-box相册\n - pjax支持，音乐不间断\n - aplayer音乐播放器\n - 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）\n\n\n## 赞赏作者\n如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！\n\n## 未完善的使用教程\n\n那啥？老实说我目前也不是很有条理233333333~\n\n## 1、主题下载安装\n\n[hexo-theme-sakura](https://github.com/honjun/hexo-theme-sakura)建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。\n\n下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行`npm i`安装依赖。\n\n## 2、主题配置\n\n### 博客根目录下的_config配置\n\n站点\n```yml\n# Site\ntitle: 你的站点名\nsubtitle:\ndescription: 站点简介\nkeywords:\nauthor: 作者名\nlanguage: zh-cn\ntimezone:\n```\n\n部署\n```yml\ndeploy:\n  type: git\n  repo: \n    github: 你的github仓库地址\n    # coding: 你的coding仓库地址\n  branch: master\n```\n\n备份 （使用hexo b发布备份到远程仓库）\n```yml\nbackup:\n  type: git\n  message: backup my blog of https://honjun.github.io/\n  repository:\n    # 你的github仓库地址,备份分支名  （建议新建backup分支）\n    github: https://github.com/honjun/honjun.github.io.git,backup\n    # coding: https://git.coding.net/hojun/hojun.git,backup\n\n```\n\n### 主题目录下的_config配置\n\n其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分\n```yml\n# site name\n# 站点名 【改】\nprefixName: さくら荘その\nsiteName: hojun\n\n# favicon and site master avatar\n# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】\nfavicon: /images/favicon.ico\navatar: /img/custom/avatar.jpg\n\n# 站点url 【改】\nurl: https://sakura.hojun.cn\n\n# 站点介绍（或者说是个人签名）【改】\ndescription: Live your life with passion! With some drive!\n\n# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg\ncdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6\n\n# 开启pjax 【选】\npjax: 1\n\n# 站点首页的公告信息 【改】\nnotice: hexo-Sakura主题已经开源，目前正在开发中...\n\n# 懒加载的加载中图片 【选】\nlazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg\n\n# 站点菜单配置 【选】\nmenus:\n  首页: { path: /, fa: fa-fort-awesome faa-shake }\n  归档: { path: /archives, fa: fa-archive faa-shake, submenus: { \n    技术: {path: /categories/技术/, fa: fa-code }, \n    生活: {path: /categories/生活/, fa: fa-file-text-o }, \n    资源: {path: /categories/资源/, fa: fa-cloud-download }, \n    随想: {path: /categories/随想/, fa: fa-commenting-o },\n    转载: {path: /categories/转载/, fa: fa-book }\n  } }\n  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { \n    书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, \n    番组: {path: /bangumi/, fa: fa-film faa-vertical }, \n    歌单: {path: /music/, fa: fa-headphones },\n    图集: {path: /tags/图集/, fa: fa-photo }\n  } }\n  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }\n  友人帐: { path: /links/, fa: fa-link faa-shake }\n  赞赏: { path: /donate/, fa: fa-heart faa-pulse }\n  关于: { path: /, fa: fa-leaf faa-wrench , submenus: { \n    我？: {path: /about/, fa: fa-meetup}, \n    主题: {path: /theme-sakura/, fa: iconfont icon-sakura },\n    Lab: {path: /lab/, fa: fa-cogs },\n  } }\n  客户端: { path: /client/, fa: fa-android faa-vertical }\n  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }\n\n# Home page sort type: -1: newer first，1: older first. 【非】\nhomePageSortType: -1\n\n# Home page article shown number) 【非】\nhomeArticleShown: 10\n\n# 背景图片 【选】\nbgn: 8\n\n# startdash面板 url, title, desc img 【改】\nstartdash: \n  - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}\n  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}\n  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}\n\n\n# your site build time or founded date\n# 你的站点建立日期 【改】\nsiteBuildingTime: 07/17/2018\n\n\n# 社交按钮(social)  url, img PC端配置 【改】\nsocial:\n  github: {url: http://github.com/honjun, img: /img/social/github.png}\n  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}\n  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}\n  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}\n  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}\n  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}\n\n# 社交按钮(msocial)  url, img 移动端配置 【改】\nmsocial:\n  github: {url: http://github.com/honjun, fa: fa-github, color: 333}\n  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}\n  qq: {url: https://wpa.qq.com/msgrd?v=3&uin=954655431&site=qq&menu=yes, fa: fa-qq, color: 25c6fe}\n\n# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】\ndonate:\n  alipay: /img/custom/donate/AliPayQR.jpg\n  wechat: /img/custom/donate/WeChanQR.jpg\n  wechatSQ: /img/custom/donate/WeChanSQ.jpg\n\n# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】\nmovies:\n  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2\n  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用\n  name: Unbroken.mp4\n\n# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】\naplayer: \n  id: 2660651585\n  server: netease\n  type: playlist\n  fixed: true\n  mini: false\n  autoplay: false\n  loop: all\n  order: random\n  preload: auto\n  volume: 0.7\n  mutex: true\n\n# Valine评论配置【改】\nvaline: true\nv_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz\nv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ\n```\n\n## 分类页和标签页配置\n\n### 分类页\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg)\n### 标签页\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg)\n\n配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。\n```yml\n#category\n# 按分类名创建\n技术:\n    #中文标题\n    zh: 野生技术协会 \n    # 英文标题\n    en: Geek – Only for Love\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg\n生活:\n    zh: 生活\n    en: live\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg\n\n#tag\n# 标签名即是标题\n悦读:\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg\n```\n\n## 单页面封面配置\n\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg)\n如留言板页面页面，位于source下的comment下，打开index.md如下：\n```md\n---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\n# 在这里配置单页面头部图片，自定义替换哦~\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg\n---\n```\n\n\n## 单页面配置\n\n### 番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg)\n\n```yml\n---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  # 番组图片\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n  # 番组名\n    title: 朝花夕誓——于离别之朝束起约定之花\n  # 追番状态 （追番ing/已追完）\n    status: 已追完\n  # 追番进度\n    progress: 100\n  # 番剧日文名称\n    jp: さよならの朝に約束の花をかざろう\n  # 放送时间\n    time: 放送时间: 2018-02-24 SUN.\n  # 番剧介绍\n    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n    title: 朝花夕誓——于离别之朝束起约定之花\n    status: 已追完\n    progress: 50\n    jp: さよならの朝に約束の花をかざろう\n    time: 放送时间: 2018-02-24 SUN.\n    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n---\n```\n\n### 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg)\n\n```yml\n---\nlayout: links\ntitle: links\n# 创建日期，可以改下\ndate: 2018-12-19 23:11:06 \n# 图片上的标题，自定义修改\nkeywords: 友人帐 \ndescription: \n# true/false 开启/关闭评论\ncomments: true \n# 页面头部图片，自定义修改\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg \n# 友链配置\nlinks: \n  # 类型分组\n  - group: 个人项目\n    # 类型简介\n    desc: 充分说明这家伙是条咸鱼 < (￣︶￣)>\n    items:\n    # 友链链接\n    - url: https://shino.cc/fgvf\n    # 友链头像\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n    # 友链站点名\n      name: Google\n    # 友链介绍  下面雷同\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n  # 类型分组...\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n---\n```\n\n## 写文章配置\n\n主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：\n```md\n{% bili video_id [page] %}\n```\n详细使用教程详见[hexo-tag-bili](https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md)。\n\nhexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：\n```md\n{% fb_img src [caption] %}\n```\n详细使用教程详见[hexo-tag-fancybox_img](https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md)\n\n## 还有啥，一时想不起来......\n\nTo be continued...","source":"_posts/Hexo-Theme-Sakura.md","raw":"---\ntitle: Hexo-Theme-Sakura\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\ntags:\n  - web\n  - 悦读\nkeywords: Sakura\ndescription: hexo-sakura主题使用教程\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqp0vyrj21kw0w0h0v.jpg'\nabbrlink: 186f70d4\ndate: 2022-08-22 22:16:01\nauthorAbout:\nauthorDesc:\n---\nhexo-theme-sakura主题 [English document](https://github.com/honjun/hexo-theme-sakura/blob/master/README.md)\n\n基于WordPress主题[Sakura](https://github.com/mashirozx/Sakura/)修改成Hexo的主题。\n\n[demo预览](https://sakura.hojun.cn)\n\n正在开发中......\n\n![](https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg)\n\n\n\n## 主题特性\n\n - 首页大屏视频\n - 首页随机封面\n - 图片懒加载\n - valine评论\n - fancy-box相册\n - pjax支持，音乐不间断\n - aplayer音乐播放器\n - 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）\n\n\n## 赞赏作者\n如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！\n\n## 未完善的使用教程\n\n那啥？老实说我目前也不是很有条理233333333~\n\n## 1、主题下载安装\n\n[hexo-theme-sakura](https://github.com/honjun/hexo-theme-sakura)建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。\n\n下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行`npm i`安装依赖。\n\n## 2、主题配置\n\n### 博客根目录下的_config配置\n\n站点\n```yml\n# Site\ntitle: 你的站点名\nsubtitle:\ndescription: 站点简介\nkeywords:\nauthor: 作者名\nlanguage: zh-cn\ntimezone:\n```\n\n部署\n```yml\ndeploy:\n  type: git\n  repo: \n    github: 你的github仓库地址\n    # coding: 你的coding仓库地址\n  branch: master\n```\n\n备份 （使用hexo b发布备份到远程仓库）\n```yml\nbackup:\n  type: git\n  message: backup my blog of https://honjun.github.io/\n  repository:\n    # 你的github仓库地址,备份分支名  （建议新建backup分支）\n    github: https://github.com/honjun/honjun.github.io.git,backup\n    # coding: https://git.coding.net/hojun/hojun.git,backup\n\n```\n\n### 主题目录下的_config配置\n\n其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分\n```yml\n# site name\n# 站点名 【改】\nprefixName: さくら荘その\nsiteName: hojun\n\n# favicon and site master avatar\n# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】\nfavicon: /images/favicon.ico\navatar: /img/custom/avatar.jpg\n\n# 站点url 【改】\nurl: https://sakura.hojun.cn\n\n# 站点介绍（或者说是个人签名）【改】\ndescription: Live your life with passion! With some drive!\n\n# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg\ncdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6\n\n# 开启pjax 【选】\npjax: 1\n\n# 站点首页的公告信息 【改】\nnotice: hexo-Sakura主题已经开源，目前正在开发中...\n\n# 懒加载的加载中图片 【选】\nlazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg\n\n# 站点菜单配置 【选】\nmenus:\n  首页: { path: /, fa: fa-fort-awesome faa-shake }\n  归档: { path: /archives, fa: fa-archive faa-shake, submenus: { \n    技术: {path: /categories/技术/, fa: fa-code }, \n    生活: {path: /categories/生活/, fa: fa-file-text-o }, \n    资源: {path: /categories/资源/, fa: fa-cloud-download }, \n    随想: {path: /categories/随想/, fa: fa-commenting-o },\n    转载: {path: /categories/转载/, fa: fa-book }\n  } }\n  清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { \n    书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, \n    番组: {path: /bangumi/, fa: fa-film faa-vertical }, \n    歌单: {path: /music/, fa: fa-headphones },\n    图集: {path: /tags/图集/, fa: fa-photo }\n  } }\n  留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada }\n  友人帐: { path: /links/, fa: fa-link faa-shake }\n  赞赏: { path: /donate/, fa: fa-heart faa-pulse }\n  关于: { path: /, fa: fa-leaf faa-wrench , submenus: { \n    我？: {path: /about/, fa: fa-meetup}, \n    主题: {path: /theme-sakura/, fa: iconfont icon-sakura },\n    Lab: {path: /lab/, fa: fa-cogs },\n  } }\n  客户端: { path: /client/, fa: fa-android faa-vertical }\n  RSS: { path: /atom.xml, fa: fa-rss faa-pulse }\n\n# Home page sort type: -1: newer first，1: older first. 【非】\nhomePageSortType: -1\n\n# Home page article shown number) 【非】\nhomeArticleShown: 10\n\n# 背景图片 【选】\nbgn: 8\n\n# startdash面板 url, title, desc img 【改】\nstartdash: \n  - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png}\n  - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg}\n  - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg}\n\n\n# your site build time or founded date\n# 你的站点建立日期 【改】\nsiteBuildingTime: 07/17/2018\n\n\n# 社交按钮(social)  url, img PC端配置 【改】\nsocial:\n  github: {url: http://github.com/honjun, img: /img/social/github.png}\n  sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png}\n  wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png}\n  zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png}\n  email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg}\n  wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png}\n\n# 社交按钮(msocial)  url, img 移动端配置 【改】\nmsocial:\n  github: {url: http://github.com/honjun, fa: fa-github, color: 333}\n  weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39}\n  qq: {url: https://wpa.qq.com/msgrd?v=3&uin=954655431&site=qq&menu=yes, fa: fa-qq, color: 25c6fe}\n\n# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】\ndonate:\n  alipay: /img/custom/donate/AliPayQR.jpg\n  wechat: /img/custom/donate/WeChanQR.jpg\n  wechatSQ: /img/custom/donate/WeChanSQ.jpg\n\n# 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】\nmovies:\n  url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2\n  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用\n  name: Unbroken.mp4\n\n# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】\naplayer: \n  id: 2660651585\n  server: netease\n  type: playlist\n  fixed: true\n  mini: false\n  autoplay: false\n  loop: all\n  order: random\n  preload: auto\n  volume: 0.7\n  mutex: true\n\n# Valine评论配置【改】\nvaline: true\nv_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz\nv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ\n```\n\n## 分类页和标签页配置\n\n### 分类页\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg)\n### 标签页\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg)\n\n配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。\n```yml\n#category\n# 按分类名创建\n技术:\n    #中文标题\n    zh: 野生技术协会 \n    # 英文标题\n    en: Geek – Only for Love\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg\n生活:\n    zh: 生活\n    en: live\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg\n\n#tag\n# 标签名即是标题\n悦读:\n    # 封面图片\n    img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg\n```\n\n## 单页面封面配置\n\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg)\n如留言板页面页面，位于source下的comment下，打开index.md如下：\n```md\n---\ntitle: comment\ndate: 2018-12-20 23:13:48\nkeywords: 留言板\ndescription: \ncomments: true\n# 在这里配置单页面头部图片，自定义替换哦~\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg\n---\n```\n\n\n## 单页面配置\n\n### 番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg)\n\n```yml\n---\nlayout: bangumi\ntitle: bangumi\ncomments: false\ndate: 2019-02-10 21:32:48\nkeywords:\ndescription:\nbangumis:\n  # 番组图片\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n  # 番组名\n    title: 朝花夕誓——于离别之朝束起约定之花\n  # 追番状态 （追番ing/已追完）\n    status: 已追完\n  # 追番进度\n    progress: 100\n  # 番剧日文名称\n    jp: さよならの朝に約束の花をかざろう\n  # 放送时间\n    time: 放送时间: 2018-02-24 SUN.\n  # 番剧介绍\n    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n  - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg\n    title: 朝花夕誓——于离别之朝束起约定之花\n    status: 已追完\n    progress: 50\n    jp: さよならの朝に約束の花をかざろう\n    time: 放送时间: 2018-02-24 SUN.\n    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。\n---\n```\n\n### 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\n![](https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg)\n\n```yml\n---\nlayout: links\ntitle: links\n# 创建日期，可以改下\ndate: 2018-12-19 23:11:06 \n# 图片上的标题，自定义修改\nkeywords: 友人帐 \ndescription: \n# true/false 开启/关闭评论\ncomments: true \n# 页面头部图片，自定义修改\nphotos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg \n# 友链配置\nlinks: \n  # 类型分组\n  - group: 个人项目\n    # 类型简介\n    desc: 充分说明这家伙是条咸鱼 < (￣︶￣)>\n    items:\n    # 友链链接\n    - url: https://shino.cc/fgvf\n    # 友链头像\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n    # 友链站点名\n      name: Google\n    # 友链介绍  下面雷同\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n  # 类型分组...\n  - group: 小伙伴们\n    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)\n    items:\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n    - url: https://shino.cc/fgvf\n      img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg\n      name: Google\n      desc: Google 镜像\n---\n```\n\n## 写文章配置\n\n主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：\n```md\n{% bili video_id [page] %}\n```\n详细使用教程详见[hexo-tag-bili](https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md)。\n\nhexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：\n```md\n{% fb_img src [caption] %}\n```\n详细使用教程详见[hexo-tag-fancybox_img](https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md)\n\n## 还有啥，一时想不起来......\n\nTo be continued...","slug":"Hexo-Theme-Sakura","published":1,"updated":"2023-07-31T12:40:09.541Z","layout":"post","link":"","_id":"clktr4qqz0007zsa0959p8tvp","content":"<p>hexo-theme-sakura主题 <a href=\"https://github.com/honjun/hexo-theme-sakura/blob/master/README.md\">English document</a></p>\n<p>基于WordPress主题<a href=\"https://github.com/mashirozx/Sakura/\">Sakura</a>修改成Hexo的主题。</p>\n<p><a href=\"https://sakura.hojun.cn/\">demo预览</a></p>\n<p>正在开发中……</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg\"></p>\n<h2 id=\"主题特性\"><a href=\"#主题特性\" class=\"headerlink\" title=\"主题特性\"></a>主题特性</h2><ul>\n<li>首页大屏视频</li>\n<li>首页随机封面</li>\n<li>图片懒加载</li>\n<li>valine评论</li>\n<li>fancy-box相册</li>\n<li>pjax支持，音乐不间断</li>\n<li>aplayer音乐播放器</li>\n<li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li>\n</ul>\n<h2 id=\"赞赏作者\"><a href=\"#赞赏作者\" class=\"headerlink\" title=\"赞赏作者\"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p>\n<h2 id=\"未完善的使用教程\"><a href=\"#未完善的使用教程\" class=\"headerlink\" title=\"未完善的使用教程\"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p>\n<h2 id=\"1、主题下载安装\"><a href=\"#1、主题下载安装\" class=\"headerlink\" title=\"1、主题下载安装\"></a>1、主题下载安装</h2><p><a href=\"https://github.com/honjun/hexo-theme-sakura\">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p>\n<p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p>\n<h2 id=\"2、主题配置\"><a href=\"#2、主题配置\" class=\"headerlink\" title=\"2、主题配置\"></a>2、主题配置</h2><h3 id=\"博客根目录下的-config配置\"><a href=\"#博客根目录下的-config配置\" class=\"headerlink\" title=\"博客根目录下的_config配置\"></a>博客根目录下的_config配置</h3><p>站点</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">你的站点名</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">站点简介</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">作者名</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-cn</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n\n<p>部署</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> </span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">你的github仓库地址</span></span><br><span class=\"line\">    <span class=\"comment\"># coding: 你的coding仓库地址</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>备份 （使用hexo b发布备份到远程仓库）</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">backup</span> <span class=\"string\">my</span> <span class=\"string\">blog</span> <span class=\"string\">of</span> <span class=\"string\">https://honjun.github.io/</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span></span><br><span class=\"line\">    <span class=\"comment\"># 你的github仓库地址,备份分支名  （建议新建backup分支）</span></span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">https://github.com/honjun/honjun.github.io.git,backup</span></span><br><span class=\"line\">    <span class=\"comment\"># coding: https://git.coding.net/hojun/hojun.git,backup</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主题目录下的-config配置\"><a href=\"#主题目录下的-config配置\" class=\"headerlink\" title=\"主题目录下的_config配置\"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># site name</span></span><br><span class=\"line\"><span class=\"comment\"># 站点名 【改】</span></span><br><span class=\"line\"><span class=\"attr\">prefixName:</span> <span class=\"string\">さくら荘その</span></span><br><span class=\"line\"><span class=\"attr\">siteName:</span> <span class=\"string\">hojun</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># favicon and site master avatar</span></span><br><span class=\"line\"><span class=\"comment\"># 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/images/favicon.ico</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/img/custom/avatar.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点url 【改】</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://sakura.hojun.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点介绍（或者说是个人签名）【改】</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Live</span> <span class=\"string\">your</span> <span class=\"string\">life</span> <span class=\"string\">with</span> <span class=\"string\">passion!</span> <span class=\"string\">With</span> <span class=\"string\">some</span> <span class=\"string\">drive!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg</span></span><br><span class=\"line\"><span class=\"attr\">cdn:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启pjax 【选】</span></span><br><span class=\"line\"><span class=\"attr\">pjax:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点首页的公告信息 【改】</span></span><br><span class=\"line\"><span class=\"attr\">notice:</span> <span class=\"string\">hexo-Sakura主题已经开源，目前正在开发中...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 懒加载的加载中图片 【选】</span></span><br><span class=\"line\"><span class=\"attr\">lazyloadImg:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点菜单配置 【选】</span></span><br><span class=\"line\"><span class=\"attr\">menus:</span></span><br><span class=\"line\">  <span class=\"string\">首页:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-fort-awesome</span> <span class=\"string\">faa-shake</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">归档:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/archives</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-archive</span> <span class=\"string\">faa-shake</span>, <span class=\"attr\">submenus:</span> &#123; </span><br><span class=\"line\">    <span class=\"string\">技术:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/技术/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-code</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">生活:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/生活/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-file-text-o</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">资源:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/资源/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-cloud-download</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">随想:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/随想/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-commenting-o</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">转载:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/转载/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-book</span> &#125;</span><br><span class=\"line\">  &#125; &#125;</span><br><span class=\"line\">  <span class=\"string\">清单:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">javascript:;</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-list-ul</span> <span class=\"string\">faa-vertical</span>, <span class=\"attr\">submenus:</span> &#123; </span><br><span class=\"line\">    <span class=\"string\">书单:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/tags/悦读/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-th-list</span> <span class=\"string\">faa-bounce</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">番组:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/bangumi/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-film</span> <span class=\"string\">faa-vertical</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">歌单:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/music/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-headphones</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">图集:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/tags/图集/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-photo</span> &#125;</span><br><span class=\"line\">  &#125; &#125;</span><br><span class=\"line\">  <span class=\"string\">留言板:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/comment/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-pencil-square-o</span> <span class=\"string\">faa-tada</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">友人帐:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/links/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-link</span> <span class=\"string\">faa-shake</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">赞赏:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/donate/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-heart</span> <span class=\"string\">faa-pulse</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">关于:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-leaf</span> <span class=\"string\">faa-wrench</span> , <span class=\"attr\">submenus:</span> &#123; </span><br><span class=\"line\">    <span class=\"string\">我？:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/about/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-meetup</span>&#125;, </span><br><span class=\"line\">    <span class=\"string\">主题:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/theme-sakura/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">iconfont</span> <span class=\"string\">icon-sakura</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">Lab:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/lab/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-cogs</span> &#125;,</span><br><span class=\"line\">  &#125; &#125;</span><br><span class=\"line\">  <span class=\"string\">客户端:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/client/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-android</span> <span class=\"string\">faa-vertical</span> &#125;</span><br><span class=\"line\">  <span class=\"attr\">RSS:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/atom.xml</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-rss</span> <span class=\"string\">faa-pulse</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Home page sort type: -1: newer first，1: older first. 【非】</span></span><br><span class=\"line\"><span class=\"attr\">homePageSortType:</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Home page article shown number) 【非】</span></span><br><span class=\"line\"><span class=\"attr\">homeArticleShown:</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 背景图片 【选】</span></span><br><span class=\"line\"><span class=\"attr\">bgn:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># startdash面板 url, title, desc img 【改】</span></span><br><span class=\"line\"><span class=\"attr\">startdash:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">/theme-sakura/</span>, <span class=\"attr\">title:</span> <span class=\"string\">Sakura</span>, <span class=\"attr\">desc:</span> <span class=\"string\">本站</span> <span class=\"string\">hexo</span> <span class=\"string\">主题</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/startdash/sakura.md.png</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://space.bilibili.com/271849279</span>, <span class=\"attr\">title:</span> <span class=\"string\">Bilibili</span>, <span class=\"attr\">desc:</span> <span class=\"string\">博主的b站视频</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/startdash/bilibili.jpg</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">/</span>, <span class=\"attr\">title:</span> <span class=\"string\">hojun的万事屋</span>, <span class=\"attr\">desc:</span> <span class=\"string\">技术服务</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/startdash/wangshiwu.jpg</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># your site build time or founded date</span></span><br><span class=\"line\"><span class=\"comment\"># 你的站点建立日期 【改】</span></span><br><span class=\"line\"><span class=\"attr\">siteBuildingTime:</span> <span class=\"number\">07</span><span class=\"string\">/17/2018</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 社交按钮(social)  url, img PC端配置 【改】</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">github:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://github.com/honjun</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/github.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">sina:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/sina.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">wangyiyun:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/wangyiyun.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">zhihu:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/zhihu.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">email:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/email.svg</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">wechat:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">/#</span>, <span class=\"attr\">qrcode:</span> <span class=\"string\">/img/custom/wechat.jpg</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/wechat.png</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 社交按钮(msocial)  url, img 移动端配置 【改】</span></span><br><span class=\"line\"><span class=\"attr\">msocial:</span></span><br><span class=\"line\">  <span class=\"attr\">github:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://github.com/honjun</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-github</span>, <span class=\"attr\">color:</span> <span class=\"number\">333</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">weibo:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-weibo</span>, <span class=\"attr\">color:</span> <span class=\"string\">dd4b39</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">qq:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-qq</span>, <span class=\"attr\">color:</span> <span class=\"string\">25c6fe</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】</span></span><br><span class=\"line\"><span class=\"attr\">donate:</span></span><br><span class=\"line\">  <span class=\"attr\">alipay:</span> <span class=\"string\">/img/custom/donate/AliPayQR.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">wechat:</span> <span class=\"string\">/img/custom/donate/WeChanQR.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">wechatSQ:</span> <span class=\"string\">/img/custom/donate/WeChanSQ.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】</span></span><br><span class=\"line\"><span class=\"attr\">movies:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/hojun@1.2</span></span><br><span class=\"line\">  <span class=\"comment\"># 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">Unbroken.mp4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】</span></span><br><span class=\"line\"><span class=\"attr\">aplayer:</span> </span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"number\">2660651585</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span> <span class=\"string\">netease</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">playlist</span></span><br><span class=\"line\">  <span class=\"attr\">fixed:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mini:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">autoplay:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">order:</span> <span class=\"string\">random</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"attr\">volume:</span> <span class=\"number\">0.7</span></span><br><span class=\"line\">  <span class=\"attr\">mutex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Valine评论配置【改】</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">v_appId:</span> <span class=\"string\">GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz</span></span><br><span class=\"line\"><span class=\"attr\">v_appKey:</span> <span class=\"string\">mgOpfzbkHYqU92CV4IDlAUHQ</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分类页和标签页配置\"><a href=\"#分类页和标签页配置\" class=\"headerlink\" title=\"分类页和标签页配置\"></a>分类页和标签页配置</h2><h3 id=\"分类页\"><a href=\"#分类页\" class=\"headerlink\" title=\"分类页\"></a>分类页</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg\"></p>\n<h3 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg\"></p>\n<p>配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#category</span></span><br><span class=\"line\"><span class=\"comment\"># 按分类名创建</span></span><br><span class=\"line\"><span class=\"string\">技术:</span></span><br><span class=\"line\">    <span class=\"comment\">#中文标题</span></span><br><span class=\"line\">    <span class=\"attr\">zh:</span> <span class=\"string\">野生技术协会</span> </span><br><span class=\"line\">    <span class=\"comment\"># 英文标题</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">Geek</span> <span class=\"string\">–</span> <span class=\"string\">Only</span> <span class=\"string\">for</span> <span class=\"string\">Love</span></span><br><span class=\"line\">    <span class=\"comment\"># 封面图片</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg</span></span><br><span class=\"line\"><span class=\"string\">生活:</span></span><br><span class=\"line\">    <span class=\"attr\">zh:</span> <span class=\"string\">生活</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">live</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#tag</span></span><br><span class=\"line\"><span class=\"comment\"># 标签名即是标题</span></span><br><span class=\"line\"><span class=\"string\">悦读:</span></span><br><span class=\"line\">    <span class=\"comment\"># 封面图片</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单页面封面配置\"><a href=\"#单页面封面配置\" class=\"headerlink\" title=\"单页面封面配置\"></a>单页面封面配置</h2><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg\"><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: comment</span><br><span class=\"line\">date: 2018-12-20 23:13:48</span><br><span class=\"line\">keywords: 留言板</span><br><span class=\"line\">description: </span><br><span class=\"line\">comments: true</span><br><span class=\"line\"><span class=\"section\"># 在这里配置单页面头部图片，自定义替换哦~</span></span><br><span class=\"line\"><span class=\"section\">photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"单页面配置\"><a href=\"#单页面配置\" class=\"headerlink\" title=\"单页面配置\"></a>单页面配置</h2><h3 id=\"番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">bangumi</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">bangumi</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-02-10 21:32:48</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">description:</span></span><br><span class=\"line\"><span class=\"attr\">bangumis:</span></span><br><span class=\"line\">  <span class=\"comment\"># 番组图片</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">img:</span> <span class=\"string\">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class=\"line\">  <span class=\"comment\"># 番组名</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class=\"line\">  <span class=\"comment\"># 追番状态 （追番ing/已追完）</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">已追完</span></span><br><span class=\"line\">  <span class=\"comment\"># 追番进度</span></span><br><span class=\"line\">    <span class=\"attr\">progress:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"comment\"># 番剧日文名称</span></span><br><span class=\"line\">    <span class=\"attr\">jp:</span> <span class=\"string\">さよならの朝に約束の花をかざろう</span></span><br><span class=\"line\">  <span class=\"comment\"># 放送时间</span></span><br><span class=\"line\">    <span class=\"attr\">time:</span> <span class=\"string\">放送时间:</span> <span class=\"number\">2018-02-24 </span><span class=\"string\">SUN.</span></span><br><span class=\"line\">  <span class=\"comment\"># 番剧介绍</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span>  <span class=\"string\">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">img:</span> <span class=\"string\">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">已追完</span></span><br><span class=\"line\">    <span class=\"attr\">progress:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">jp:</span> <span class=\"string\">さよならの朝に約束の花をかざろう</span></span><br><span class=\"line\">    <span class=\"attr\">time:</span> <span class=\"string\">放送时间:</span> <span class=\"number\">2018-02-24 </span><span class=\"string\">SUN.</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span> <span class=\"string\">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">links</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">links</span></span><br><span class=\"line\"><span class=\"comment\"># 创建日期，可以改下</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-12-19 23:11:06</span> </span><br><span class=\"line\"><span class=\"comment\"># 图片上的标题，自定义修改</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">友人帐</span> </span><br><span class=\"line\"><span class=\"attr\">description:</span> </span><br><span class=\"line\"><span class=\"comment\"># true/false 开启/关闭评论</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\"><span class=\"comment\"># 页面头部图片，自定义修改</span></span><br><span class=\"line\"><span class=\"attr\">photos:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg</span> </span><br><span class=\"line\"><span class=\"comment\"># 友链配置</span></span><br><span class=\"line\"><span class=\"attr\">links:</span> </span><br><span class=\"line\">  <span class=\"comment\"># 类型分组</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">group:</span> <span class=\"string\">个人项目</span></span><br><span class=\"line\">    <span class=\"comment\"># 类型简介</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span> <span class=\"string\">充分说明这家伙是条咸鱼</span> <span class=\"string\">&lt;</span> <span class=\"string\">(￣︶￣)&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">items:</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链链接</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链头像</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链站点名</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链介绍  下面雷同</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\">  <span class=\"comment\"># 类型分组...</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">group:</span> <span class=\"string\">小伙伴们</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span> <span class=\"string\">欢迎交换友链</span> <span class=\"string\">ꉂ(ˊᗜˋ)</span></span><br><span class=\"line\">    <span class=\"attr\">items:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写文章配置\"><a href=\"#写文章配置\" class=\"headerlink\" title=\"写文章配置\"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% bili video<span class=\"emphasis\">_id [page] %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md\">hexo-tag-bili</a>。</p>\n<p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% fb<span class=\"emphasis\">_img src [caption] %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md\">hexo-tag-fancybox_img</a></p>\n<h2 id=\"还有啥，一时想不起来……\"><a href=\"#还有啥，一时想不起来……\" class=\"headerlink\" title=\"还有啥，一时想不起来……\"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>\n","site":{"data":{}},"cover":"linear-gradient(to right,#ffecd2 0%,#fcb69f 100%)","excerpt":"","more":"<p>hexo-theme-sakura主题 <a href=\"https://github.com/honjun/hexo-theme-sakura/blob/master/README.md\">English document</a></p>\n<p>基于WordPress主题<a href=\"https://github.com/mashirozx/Sakura/\">Sakura</a>修改成Hexo的主题。</p>\n<p><a href=\"https://sakura.hojun.cn/\">demo预览</a></p>\n<p>正在开发中……</p>\n<p><img src=\"https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg\"></p>\n<h2 id=\"主题特性\"><a href=\"#主题特性\" class=\"headerlink\" title=\"主题特性\"></a>主题特性</h2><ul>\n<li>首页大屏视频</li>\n<li>首页随机封面</li>\n<li>图片懒加载</li>\n<li>valine评论</li>\n<li>fancy-box相册</li>\n<li>pjax支持，音乐不间断</li>\n<li>aplayer音乐播放器</li>\n<li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li>\n</ul>\n<h2 id=\"赞赏作者\"><a href=\"#赞赏作者\" class=\"headerlink\" title=\"赞赏作者\"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p>\n<h2 id=\"未完善的使用教程\"><a href=\"#未完善的使用教程\" class=\"headerlink\" title=\"未完善的使用教程\"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p>\n<h2 id=\"1、主题下载安装\"><a href=\"#1、主题下载安装\" class=\"headerlink\" title=\"1、主题下载安装\"></a>1、主题下载安装</h2><p><a href=\"https://github.com/honjun/hexo-theme-sakura\">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p>\n<p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p>\n<h2 id=\"2、主题配置\"><a href=\"#2、主题配置\" class=\"headerlink\" title=\"2、主题配置\"></a>2、主题配置</h2><h3 id=\"博客根目录下的-config配置\"><a href=\"#博客根目录下的-config配置\" class=\"headerlink\" title=\"博客根目录下的_config配置\"></a>博客根目录下的_config配置</h3><p>站点</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">你的站点名</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">站点简介</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">作者名</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-cn</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span></span><br></pre></td></tr></table></figure>\n\n<p>部署</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> </span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">你的github仓库地址</span></span><br><span class=\"line\">    <span class=\"comment\"># coding: 你的coding仓库地址</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>备份 （使用hexo b发布备份到远程仓库）</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">backup</span> <span class=\"string\">my</span> <span class=\"string\">blog</span> <span class=\"string\">of</span> <span class=\"string\">https://honjun.github.io/</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span></span><br><span class=\"line\">    <span class=\"comment\"># 你的github仓库地址,备份分支名  （建议新建backup分支）</span></span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">https://github.com/honjun/honjun.github.io.git,backup</span></span><br><span class=\"line\">    <span class=\"comment\"># coding: https://git.coding.net/hojun/hojun.git,backup</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主题目录下的-config配置\"><a href=\"#主题目录下的-config配置\" class=\"headerlink\" title=\"主题目录下的_config配置\"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># site name</span></span><br><span class=\"line\"><span class=\"comment\"># 站点名 【改】</span></span><br><span class=\"line\"><span class=\"attr\">prefixName:</span> <span class=\"string\">さくら荘その</span></span><br><span class=\"line\"><span class=\"attr\">siteName:</span> <span class=\"string\">hojun</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># favicon and site master avatar</span></span><br><span class=\"line\"><span class=\"comment\"># 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span> <span class=\"string\">/images/favicon.ico</span></span><br><span class=\"line\"><span class=\"attr\">avatar:</span> <span class=\"string\">/img/custom/avatar.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点url 【改】</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://sakura.hojun.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点介绍（或者说是个人签名）【改】</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Live</span> <span class=\"string\">your</span> <span class=\"string\">life</span> <span class=\"string\">with</span> <span class=\"string\">passion!</span> <span class=\"string\">With</span> <span class=\"string\">some</span> <span class=\"string\">drive!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg</span></span><br><span class=\"line\"><span class=\"attr\">cdn:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启pjax 【选】</span></span><br><span class=\"line\"><span class=\"attr\">pjax:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点首页的公告信息 【改】</span></span><br><span class=\"line\"><span class=\"attr\">notice:</span> <span class=\"string\">hexo-Sakura主题已经开源，目前正在开发中...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 懒加载的加载中图片 【选】</span></span><br><span class=\"line\"><span class=\"attr\">lazyloadImg:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点菜单配置 【选】</span></span><br><span class=\"line\"><span class=\"attr\">menus:</span></span><br><span class=\"line\">  <span class=\"string\">首页:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-fort-awesome</span> <span class=\"string\">faa-shake</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">归档:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/archives</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-archive</span> <span class=\"string\">faa-shake</span>, <span class=\"attr\">submenus:</span> &#123; </span><br><span class=\"line\">    <span class=\"string\">技术:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/技术/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-code</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">生活:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/生活/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-file-text-o</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">资源:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/资源/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-cloud-download</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">随想:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/随想/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-commenting-o</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">转载:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/categories/转载/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-book</span> &#125;</span><br><span class=\"line\">  &#125; &#125;</span><br><span class=\"line\">  <span class=\"string\">清单:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">javascript:;</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-list-ul</span> <span class=\"string\">faa-vertical</span>, <span class=\"attr\">submenus:</span> &#123; </span><br><span class=\"line\">    <span class=\"string\">书单:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/tags/悦读/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-th-list</span> <span class=\"string\">faa-bounce</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">番组:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/bangumi/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-film</span> <span class=\"string\">faa-vertical</span> &#125;, </span><br><span class=\"line\">    <span class=\"string\">歌单:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/music/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-headphones</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">图集:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/tags/图集/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-photo</span> &#125;</span><br><span class=\"line\">  &#125; &#125;</span><br><span class=\"line\">  <span class=\"string\">留言板:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/comment/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-pencil-square-o</span> <span class=\"string\">faa-tada</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">友人帐:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/links/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-link</span> <span class=\"string\">faa-shake</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">赞赏:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/donate/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-heart</span> <span class=\"string\">faa-pulse</span> &#125;</span><br><span class=\"line\">  <span class=\"string\">关于:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-leaf</span> <span class=\"string\">faa-wrench</span> , <span class=\"attr\">submenus:</span> &#123; </span><br><span class=\"line\">    <span class=\"string\">我？:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/about/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-meetup</span>&#125;, </span><br><span class=\"line\">    <span class=\"string\">主题:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/theme-sakura/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">iconfont</span> <span class=\"string\">icon-sakura</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">Lab:</span> &#123;<span class=\"attr\">path:</span> <span class=\"string\">/lab/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-cogs</span> &#125;,</span><br><span class=\"line\">  &#125; &#125;</span><br><span class=\"line\">  <span class=\"string\">客户端:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/client/</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-android</span> <span class=\"string\">faa-vertical</span> &#125;</span><br><span class=\"line\">  <span class=\"attr\">RSS:</span> &#123; <span class=\"attr\">path:</span> <span class=\"string\">/atom.xml</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-rss</span> <span class=\"string\">faa-pulse</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Home page sort type: -1: newer first，1: older first. 【非】</span></span><br><span class=\"line\"><span class=\"attr\">homePageSortType:</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Home page article shown number) 【非】</span></span><br><span class=\"line\"><span class=\"attr\">homeArticleShown:</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 背景图片 【选】</span></span><br><span class=\"line\"><span class=\"attr\">bgn:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># startdash面板 url, title, desc img 【改】</span></span><br><span class=\"line\"><span class=\"attr\">startdash:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">/theme-sakura/</span>, <span class=\"attr\">title:</span> <span class=\"string\">Sakura</span>, <span class=\"attr\">desc:</span> <span class=\"string\">本站</span> <span class=\"string\">hexo</span> <span class=\"string\">主题</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/startdash/sakura.md.png</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://space.bilibili.com/271849279</span>, <span class=\"attr\">title:</span> <span class=\"string\">Bilibili</span>, <span class=\"attr\">desc:</span> <span class=\"string\">博主的b站视频</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/startdash/bilibili.jpg</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">/</span>, <span class=\"attr\">title:</span> <span class=\"string\">hojun的万事屋</span>, <span class=\"attr\">desc:</span> <span class=\"string\">技术服务</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/startdash/wangshiwu.jpg</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># your site build time or founded date</span></span><br><span class=\"line\"><span class=\"comment\"># 你的站点建立日期 【改】</span></span><br><span class=\"line\"><span class=\"attr\">siteBuildingTime:</span> <span class=\"number\">07</span><span class=\"string\">/17/2018</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 社交按钮(social)  url, img PC端配置 【改】</span></span><br><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">github:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://github.com/honjun</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/github.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">sina:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/sina.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">wangyiyun:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/wangyiyun.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">zhihu:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/zhihu.png</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">email:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/email.svg</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">wechat:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">/#</span>, <span class=\"attr\">qrcode:</span> <span class=\"string\">/img/custom/wechat.jpg</span>, <span class=\"attr\">img:</span> <span class=\"string\">/img/social/wechat.png</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 社交按钮(msocial)  url, img 移动端配置 【改】</span></span><br><span class=\"line\"><span class=\"attr\">msocial:</span></span><br><span class=\"line\">  <span class=\"attr\">github:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://github.com/honjun</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-github</span>, <span class=\"attr\">color:</span> <span class=\"number\">333</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">weibo:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">http://weibo.com/mashirozx?is_all=1</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-weibo</span>, <span class=\"attr\">color:</span> <span class=\"string\">dd4b39</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">qq:</span> &#123;<span class=\"attr\">url:</span> <span class=\"string\">https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes</span>, <span class=\"attr\">fa:</span> <span class=\"string\">fa-qq</span>, <span class=\"attr\">color:</span> <span class=\"string\">25c6fe</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】</span></span><br><span class=\"line\"><span class=\"attr\">donate:</span></span><br><span class=\"line\">  <span class=\"attr\">alipay:</span> <span class=\"string\">/img/custom/donate/AliPayQR.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">wechat:</span> <span class=\"string\">/img/custom/donate/WeChanQR.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">wechatSQ:</span> <span class=\"string\">/img/custom/donate/WeChanSQ.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】</span></span><br><span class=\"line\"><span class=\"attr\">movies:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/hojun@1.2</span></span><br><span class=\"line\">  <span class=\"comment\"># 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">Unbroken.mp4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】</span></span><br><span class=\"line\"><span class=\"attr\">aplayer:</span> </span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"number\">2660651585</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span> <span class=\"string\">netease</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">playlist</span></span><br><span class=\"line\">  <span class=\"attr\">fixed:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">mini:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">autoplay:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">order:</span> <span class=\"string\">random</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"attr\">volume:</span> <span class=\"number\">0.7</span></span><br><span class=\"line\">  <span class=\"attr\">mutex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Valine评论配置【改】</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">v_appId:</span> <span class=\"string\">GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz</span></span><br><span class=\"line\"><span class=\"attr\">v_appKey:</span> <span class=\"string\">mgOpfzbkHYqU92CV4IDlAUHQ</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分类页和标签页配置\"><a href=\"#分类页和标签页配置\" class=\"headerlink\" title=\"分类页和标签页配置\"></a>分类页和标签页配置</h2><h3 id=\"分类页\"><a href=\"#分类页\" class=\"headerlink\" title=\"分类页\"></a>分类页</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg\"></p>\n<h3 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg\"></p>\n<p>配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#category</span></span><br><span class=\"line\"><span class=\"comment\"># 按分类名创建</span></span><br><span class=\"line\"><span class=\"string\">技术:</span></span><br><span class=\"line\">    <span class=\"comment\">#中文标题</span></span><br><span class=\"line\">    <span class=\"attr\">zh:</span> <span class=\"string\">野生技术协会</span> </span><br><span class=\"line\">    <span class=\"comment\"># 英文标题</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">Geek</span> <span class=\"string\">–</span> <span class=\"string\">Only</span> <span class=\"string\">for</span> <span class=\"string\">Love</span></span><br><span class=\"line\">    <span class=\"comment\"># 封面图片</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg</span></span><br><span class=\"line\"><span class=\"string\">生活:</span></span><br><span class=\"line\">    <span class=\"attr\">zh:</span> <span class=\"string\">生活</span></span><br><span class=\"line\">    <span class=\"attr\">en:</span> <span class=\"string\">live</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#tag</span></span><br><span class=\"line\"><span class=\"comment\"># 标签名即是标题</span></span><br><span class=\"line\"><span class=\"string\">悦读:</span></span><br><span class=\"line\">    <span class=\"comment\"># 封面图片</span></span><br><span class=\"line\">    <span class=\"attr\">img:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单页面封面配置\"><a href=\"#单页面封面配置\" class=\"headerlink\" title=\"单页面封面配置\"></a>单页面封面配置</h2><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg\"><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: comment</span><br><span class=\"line\">date: 2018-12-20 23:13:48</span><br><span class=\"line\">keywords: 留言板</span><br><span class=\"line\">description: </span><br><span class=\"line\">comments: true</span><br><span class=\"line\"><span class=\"section\"># 在这里配置单页面头部图片，自定义替换哦~</span></span><br><span class=\"line\"><span class=\"section\">photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"单页面配置\"><a href=\"#单页面配置\" class=\"headerlink\" title=\"单页面配置\"></a>单页面配置</h2><h3 id=\"番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">bangumi</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">bangumi</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-02-10 21:32:48</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">description:</span></span><br><span class=\"line\"><span class=\"attr\">bangumis:</span></span><br><span class=\"line\">  <span class=\"comment\"># 番组图片</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">img:</span> <span class=\"string\">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class=\"line\">  <span class=\"comment\"># 番组名</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class=\"line\">  <span class=\"comment\"># 追番状态 （追番ing/已追完）</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">已追完</span></span><br><span class=\"line\">  <span class=\"comment\"># 追番进度</span></span><br><span class=\"line\">    <span class=\"attr\">progress:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"comment\"># 番剧日文名称</span></span><br><span class=\"line\">    <span class=\"attr\">jp:</span> <span class=\"string\">さよならの朝に約束の花をかざろう</span></span><br><span class=\"line\">  <span class=\"comment\"># 放送时间</span></span><br><span class=\"line\">    <span class=\"attr\">time:</span> <span class=\"string\">放送时间:</span> <span class=\"number\">2018-02-24 </span><span class=\"string\">SUN.</span></span><br><span class=\"line\">  <span class=\"comment\"># 番剧介绍</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span>  <span class=\"string\">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">img:</span> <span class=\"string\">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class=\"line\">    <span class=\"attr\">title:</span> <span class=\"string\">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class=\"line\">    <span class=\"attr\">status:</span> <span class=\"string\">已追完</span></span><br><span class=\"line\">    <span class=\"attr\">progress:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">jp:</span> <span class=\"string\">さよならの朝に約束の花をかざろう</span></span><br><span class=\"line\">    <span class=\"attr\">time:</span> <span class=\"string\">放送时间:</span> <span class=\"number\">2018-02-24 </span><span class=\"string\">SUN.</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span> <span class=\"string\">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"><a href=\"#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\" class=\"headerlink\" title=\"友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）\"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src=\"https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">links</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">links</span></span><br><span class=\"line\"><span class=\"comment\"># 创建日期，可以改下</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-12-19 23:11:06</span> </span><br><span class=\"line\"><span class=\"comment\"># 图片上的标题，自定义修改</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">友人帐</span> </span><br><span class=\"line\"><span class=\"attr\">description:</span> </span><br><span class=\"line\"><span class=\"comment\"># true/false 开启/关闭评论</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">true</span> </span><br><span class=\"line\"><span class=\"comment\"># 页面头部图片，自定义修改</span></span><br><span class=\"line\"><span class=\"attr\">photos:</span> <span class=\"string\">https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg</span> </span><br><span class=\"line\"><span class=\"comment\"># 友链配置</span></span><br><span class=\"line\"><span class=\"attr\">links:</span> </span><br><span class=\"line\">  <span class=\"comment\"># 类型分组</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">group:</span> <span class=\"string\">个人项目</span></span><br><span class=\"line\">    <span class=\"comment\"># 类型简介</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span> <span class=\"string\">充分说明这家伙是条咸鱼</span> <span class=\"string\">&lt;</span> <span class=\"string\">(￣︶￣)&gt;</span></span><br><span class=\"line\">    <span class=\"attr\">items:</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链链接</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链头像</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链站点名</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">    <span class=\"comment\"># 友链介绍  下面雷同</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\">  <span class=\"comment\"># 类型分组...</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">group:</span> <span class=\"string\">小伙伴们</span></span><br><span class=\"line\">    <span class=\"attr\">desc:</span> <span class=\"string\">欢迎交换友链</span> <span class=\"string\">ꉂ(ˊᗜˋ)</span></span><br><span class=\"line\">    <span class=\"attr\">items:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">https://shino.cc/fgvf</span></span><br><span class=\"line\">      <span class=\"attr\">img:</span> <span class=\"string\">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">Google</span></span><br><span class=\"line\">      <span class=\"attr\">desc:</span> <span class=\"string\">Google</span> <span class=\"string\">镜像</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写文章配置\"><a href=\"#写文章配置\" class=\"headerlink\" title=\"写文章配置\"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% bili video<span class=\"emphasis\">_id [page] %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md\">hexo-tag-bili</a>。</p>\n<p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% fb<span class=\"emphasis\">_img src [caption] %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>详细使用教程详见<a href=\"https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md\">hexo-tag-fancybox_img</a></p>\n<h2 id=\"还有啥，一时想不起来……\"><a href=\"#还有啥，一时想不起来……\" class=\"headerlink\" title=\"还有啥，一时想不起来……\"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>\n"},{"title":"Java基础语法01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"abbrlink":"dd2d9cfc","date":"2022-08-25T14:34:29.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 注释\n\n- 平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。\n- **注释不会被执行**，只是给我们写代码的人看的\n- ***书写注释是一个非常好的编程习惯***\n\n### Java中的注释\n\n- 单行注释 //\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        //我是单行注释\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 多行注释/**/\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*我是多行注释\n        我是多行注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 文档注释/** */\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*\n        *我是文档注释\n        我是文档注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n## Java标识符\n\n**关键字**\n\n- ***Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符***\n\n**标识符注意点**\n\n- 所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始\n- 首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合\n- ***不能使用关键字作为变量名或方法名***\n- 标识符是**大小写敏感**的\n- **不建议使用中文或者拼音作为变量名或方法名**\n\n## Java数据类型\n\n- 强类型语言\n  - 要求变量的使用**必须要严格符合规定**，所有变量都必须先定义后才能使用\n- Java数据类型分为两大类\n  - 基本类型(primitive type)\n  - 引用类型(reference type)\n\n**基本类型**\n\n| No.  |      数据类型      | 大小/位 |              可表示数据范围              |  默认值  |\n| :--: | :----------------: | :-----: | :--------------------------------------: | :------: |\n|  1   |  `byte`（字节型）  |    8    |                 -128~127                 |    0     |\n|  2   | `short`（短整型）  |   16    |               -32768~32767               |    0     |\n|  3   |   `int`（整型）    |   32    |          -2147483648~2147483647          |    0     |\n|  4   |  `long`（长整型）  |   64    | -9223372036854775808~9223372036854775807 |    0     |\n|  5   | `float`（单精度）  |   32    |              -3.4E38~3.4E38              |   0.0    |\n|  6   | `double`（双精度） |   64    |             -1.7E308~1.7E308             |   0.0    |\n|  7   |   `char`（字符）   |   16    |                  0~255                   | '\\u0000' |\n|  8   | `boolean`（布尔）  |    -    |               true或false                |  false   |\n\n**引用类型**\n\n引用数据类型非常多，大致包括：\n类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型\n\n如**String为引用类型**\n\n\n\n```java\npublic class Demo01 {\n    public static void main(String[] args) {\n        //整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)\n        int num01 = 10;\n        byte num02 = 20;\n        short num03 = 30;\n        long num04 = 40l;\n        //浮点型：float(4字节)、double(8字节)\n        float num05 = 50.66f;\n        double num06 = 66.66;\n        //字符：char(2字节)\n        char usr = 'x';\n        //布尔值：boolean\n        boolean flag = true;\n    }\n}\n```\n\n\n\n**小科普**\n\n- **位(bit)**:是计算机内部数据存储的最小单位，10100101是一个八位二进制数\n- **字节(Byte)**: 是计算机中数据处理的基本单位，习惯上用大写的B来表示\n- 1B(Byte,字节) = 8bit(位)\n- **字符**:是指计算机中使用的字母、数字、字和符号\n  - 1bit = 1位;\n  - 1Byte = 1B = 8b;\n  - 1024B = 1KB\n  - 1024KB = 1M\n  - 1024M = 1G\n\n\n\n### Java数据类型拓展\n\n- 整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n        int b = 0b10;\n        int i = 10;\n        int i1 = 010;\n        int i2 = 0x10;\n        System.out.println(b);\n        System.out.println(i);\n        System.out.println(i1);\n        System.out.println(i2);\n\n        System.out.println(\"===================================\");\n        }\n}\n```\n\n- 浮点数扩展 \n  - 银行业务表示，\n  - 常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于！最好避免完全使用浮点数进行比较！！！\n- a\n\n```java\npublic class Demo02 {\n    public static void main(String[] args) {\n        //浮点数扩展 银行业务表示，\n        //通常使用数学工具类BigDecimal，来表示银行业务。\n        System.out.println(\"===================================\");\n        //float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于\n        //double\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        float f = 0.1f;\n        double d = 1.0/10;\n        System.out.println(f == d);\n        System.out.println(\"===================================\");\n        float f1 = 12345667486234f;\n        float f2 = f1 + 1;\n        System.out.println(f1 == f2);\n        System.out.println(\"===================================\");\n    }\n}\n```\n\n- 字符扩展\n  - System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n  - 所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n  - 转义字符：  \\t 制表符、 \\n 换行符……\n- a\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //字符扩展\n        System.out.println(\"===================================\");\n        char c1 = 'a';\n        char c2 = '荣';\n        System.out.println(c1);\n        System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n\n        System.out.println(c2);\n        System.out.println((int)c2);        //将char型的c2 强制转换为int型的Unicode编码\n        System.out.println(\"===================================\");\n        char c3 = '\\u0066';                 //将Unicode编码0066转义为char型数据c3\n        System.out.println(c3);\n        //所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n\n        //转义字符  \\t 制表符、 \\n 换行符……\n        System.out.println(\"Hello\\t World!\");\n    }\n}\n\n```\n\n- 布尔值扩展：\n  - less is more   代码要精简易读；\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n\n        //布尔值扩展\n        boolean flag = true;\n        if (flat == true){};\n        if (flag){};\n        //less is more   代码要精简易读；\n    }\n}\n\n```\n\n","source":"_posts/Java基础语法01.md","raw":"---\ntitle: Java基础语法01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ntags:\n  - Java\n  - Java基础语法\nabbrlink: dd2d9cfc\ndate: 2022-08-25 22:34:29\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 注释\n\n- 平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。\n- **注释不会被执行**，只是给我们写代码的人看的\n- ***书写注释是一个非常好的编程习惯***\n\n### Java中的注释\n\n- 单行注释 //\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        //我是单行注释\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 多行注释/**/\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*我是多行注释\n        我是多行注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n- 文档注释/** */\n\n```java\t\npublic class HelloWorld {\n    public static void main(String[] args) {\n        /*\n        *我是文档注释\n        我是文档注释\n        */\n        System.out.println(\"HelloWorld!\");\n    }\n}\n```\n\n---\n\n## Java标识符\n\n**关键字**\n\n- ***Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符***\n\n**标识符注意点**\n\n- 所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始\n- 首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合\n- ***不能使用关键字作为变量名或方法名***\n- 标识符是**大小写敏感**的\n- **不建议使用中文或者拼音作为变量名或方法名**\n\n## Java数据类型\n\n- 强类型语言\n  - 要求变量的使用**必须要严格符合规定**，所有变量都必须先定义后才能使用\n- Java数据类型分为两大类\n  - 基本类型(primitive type)\n  - 引用类型(reference type)\n\n**基本类型**\n\n| No.  |      数据类型      | 大小/位 |              可表示数据范围              |  默认值  |\n| :--: | :----------------: | :-----: | :--------------------------------------: | :------: |\n|  1   |  `byte`（字节型）  |    8    |                 -128~127                 |    0     |\n|  2   | `short`（短整型）  |   16    |               -32768~32767               |    0     |\n|  3   |   `int`（整型）    |   32    |          -2147483648~2147483647          |    0     |\n|  4   |  `long`（长整型）  |   64    | -9223372036854775808~9223372036854775807 |    0     |\n|  5   | `float`（单精度）  |   32    |              -3.4E38~3.4E38              |   0.0    |\n|  6   | `double`（双精度） |   64    |             -1.7E308~1.7E308             |   0.0    |\n|  7   |   `char`（字符）   |   16    |                  0~255                   | '\\u0000' |\n|  8   | `boolean`（布尔）  |    -    |               true或false                |  false   |\n\n**引用类型**\n\n引用数据类型非常多，大致包括：\n类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型\n\n如**String为引用类型**\n\n\n\n```java\npublic class Demo01 {\n    public static void main(String[] args) {\n        //整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)\n        int num01 = 10;\n        byte num02 = 20;\n        short num03 = 30;\n        long num04 = 40l;\n        //浮点型：float(4字节)、double(8字节)\n        float num05 = 50.66f;\n        double num06 = 66.66;\n        //字符：char(2字节)\n        char usr = 'x';\n        //布尔值：boolean\n        boolean flag = true;\n    }\n}\n```\n\n\n\n**小科普**\n\n- **位(bit)**:是计算机内部数据存储的最小单位，10100101是一个八位二进制数\n- **字节(Byte)**: 是计算机中数据处理的基本单位，习惯上用大写的B来表示\n- 1B(Byte,字节) = 8bit(位)\n- **字符**:是指计算机中使用的字母、数字、字和符号\n  - 1bit = 1位;\n  - 1Byte = 1B = 8b;\n  - 1024B = 1KB\n  - 1024KB = 1M\n  - 1024M = 1G\n\n\n\n### Java数据类型拓展\n\n- 整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制\n        int b = 0b10;\n        int i = 10;\n        int i1 = 010;\n        int i2 = 0x10;\n        System.out.println(b);\n        System.out.println(i);\n        System.out.println(i1);\n        System.out.println(i2);\n\n        System.out.println(\"===================================\");\n        }\n}\n```\n\n- 浮点数扩展 \n  - 银行业务表示，\n  - 常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于！最好避免完全使用浮点数进行比较！！！\n- a\n\n```java\npublic class Demo02 {\n    public static void main(String[] args) {\n        //浮点数扩展 银行业务表示，\n        //通常使用数学工具类BigDecimal，来表示银行业务。\n        System.out.println(\"===================================\");\n        //float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，----->接近但不等于\n        //double\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        //最好避免完全使用浮点数进行比较\n        float f = 0.1f;\n        double d = 1.0/10;\n        System.out.println(f == d);\n        System.out.println(\"===================================\");\n        float f1 = 12345667486234f;\n        float f2 = f1 + 1;\n        System.out.println(f1 == f2);\n        System.out.println(\"===================================\");\n    }\n}\n```\n\n- 字符扩展\n  - System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n  - 所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n  - 转义字符：  \\t 制表符、 \\n 换行符……\n- a\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //字符扩展\n        System.out.println(\"===================================\");\n        char c1 = 'a';\n        char c2 = '荣';\n        System.out.println(c1);\n        System.out.println((int)c1);        //将char型的c1 强制转换为int型的Unicode编码\n\n        System.out.println(c2);\n        System.out.println((int)c2);        //将char型的c2 强制转换为int型的Unicode编码\n        System.out.println(\"===================================\");\n        char c3 = '\\u0066';                 //将Unicode编码0066转义为char型数据c3\n        System.out.println(c3);\n        //所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；\n\n        //转义字符  \\t 制表符、 \\n 换行符……\n        System.out.println(\"Hello\\t World!\");\n    }\n}\n\n```\n\n- 布尔值扩展：\n  - less is more   代码要精简易读；\n\n```java\nimport java.math.BigDecimal;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n\n        //布尔值扩展\n        boolean flag = true;\n        if (flat == true){};\n        if (flag){};\n        //less is more   代码要精简易读；\n    }\n}\n\n```\n\n","slug":"Java基础语法01","published":1,"updated":"2023-07-31T12:40:09.563Z","layout":"post","link":"","_id":"clktr4qr00009zsa07o3a253h","content":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。</li>\n<li><strong>注释不会被执行</strong>，只是给我们写代码的人看的</li>\n<li><em><strong>书写注释是一个非常好的编程习惯</strong></em></li>\n</ul>\n<h3 id=\"Java中的注释\"><a href=\"#Java中的注释\" class=\"headerlink\" title=\"Java中的注释\"></a>Java中的注释</h3><ul>\n<li>单行注释 &#x2F;&#x2F;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是单行注释</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HelloWorld!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>多行注释&#x2F;**&#x2F;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*我是多行注释</span></span><br><span class=\"line\"><span class=\"comment\">        我是多行注释</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HelloWorld!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>文档注释&#x2F;** *&#x2F;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        *我是文档注释</span></span><br><span class=\"line\"><span class=\"comment\">        我是文档注释</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HelloWorld!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Java标识符\"><a href=\"#Java标识符\" class=\"headerlink\" title=\"Java标识符\"></a>Java标识符</h2><p><strong>关键字</strong></p>\n<ul>\n<li><em><strong>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</strong></em></li>\n</ul>\n<p><strong>标识符注意点</strong></p>\n<ul>\n<li>所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始</li>\n<li>首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合</li>\n<li><em><strong>不能使用关键字作为变量名或方法名</strong></em></li>\n<li>标识符是<strong>大小写敏感</strong>的</li>\n<li><strong>不建议使用中文或者拼音作为变量名或方法名</strong></li>\n</ul>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><ul>\n<li>强类型语言<ul>\n<li>要求变量的使用<strong>必须要严格符合规定</strong>，所有变量都必须先定义后才能使用</li>\n</ul>\n</li>\n<li>Java数据类型分为两大类<ul>\n<li>基本类型(primitive type)</li>\n<li>引用类型(reference type)</li>\n</ul>\n</li>\n</ul>\n<p><strong>基本类型</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">No.</th>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">大小&#x2F;位</th>\n<th align=\"center\">可表示数据范围</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><code>byte</code>（字节型）</td>\n<td align=\"center\">8</td>\n<td align=\"center\">-128~127</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><code>short</code>（短整型）</td>\n<td align=\"center\">16</td>\n<td align=\"center\">-32768~32767</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><code>int</code>（整型）</td>\n<td align=\"center\">32</td>\n<td align=\"center\">-2147483648~2147483647</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><code>long</code>（长整型）</td>\n<td align=\"center\">64</td>\n<td align=\"center\">-9223372036854775808~9223372036854775807</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\"><code>float</code>（单精度）</td>\n<td align=\"center\">32</td>\n<td align=\"center\">-3.4E38~3.4E38</td>\n<td align=\"center\">0.0</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\"><code>double</code>（双精度）</td>\n<td align=\"center\">64</td>\n<td align=\"center\">-1.7E308~1.7E308</td>\n<td align=\"center\">0.0</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\"><code>char</code>（字符）</td>\n<td align=\"center\">16</td>\n<td align=\"center\">0~255</td>\n<td align=\"center\">‘\\u0000’</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\"><code>boolean</code>（布尔）</td>\n<td align=\"center\">-</td>\n<td align=\"center\">true或false</td>\n<td align=\"center\">false</td>\n</tr>\n</tbody></table>\n<p><strong>引用类型</strong></p>\n<p>引用数据类型非常多，大致包括：<br>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p>\n<p>如<strong>String为引用类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num01</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">num02</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">short</span> <span class=\"variable\">num03</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">num04</span> <span class=\"operator\">=</span> <span class=\"number\">40l</span>;</span><br><span class=\"line\">        <span class=\"comment\">//浮点型：float(4字节)、double(8字节)</span></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">num05</span> <span class=\"operator\">=</span> <span class=\"number\">50.66f</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">num06</span> <span class=\"operator\">=</span> <span class=\"number\">66.66</span>;</span><br><span class=\"line\">        <span class=\"comment\">//字符：char(2字节)</span></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">usr</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//布尔值：boolean</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>小科普</strong></p>\n<ul>\n<li><strong>位(bit)</strong>:是计算机内部数据存储的最小单位，10100101是一个八位二进制数</li>\n<li><strong>字节(Byte)</strong>: 是计算机中数据处理的基本单位，习惯上用大写的B来表示</li>\n<li>1B(Byte,字节) &#x3D; 8bit(位)</li>\n<li><strong>字符</strong>:是指计算机中使用的字母、数字、字和符号<ul>\n<li>1bit &#x3D; 1位;</li>\n<li>1Byte &#x3D; 1B &#x3D; 8b;</li>\n<li>1024B &#x3D; 1KB</li>\n<li>1024KB &#x3D; 1M</li>\n<li>1024M &#x3D; 1G</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java数据类型拓展\"><a href=\"#Java数据类型拓展\" class=\"headerlink\" title=\"Java数据类型拓展\"></a>Java数据类型拓展</h3><ul>\n<li>整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0b10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">010</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">0x10</span>;</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        System.out.println(i1);</span><br><span class=\"line\">        System.out.println(i2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>浮点数扩展 <ul>\n<li>银行业务表示，</li>\n<li>常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，—–&gt;接近但不等于！最好避免完全使用浮点数进行比较！！！</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//浮点数扩展 银行业务表示，</span></span><br><span class=\"line\">        <span class=\"comment\">//通常使用数学工具类BigDecimal，来表示银行业务。</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，-----&gt;接近但不等于</span></span><br><span class=\"line\">        <span class=\"comment\">//double</span></span><br><span class=\"line\">        <span class=\"comment\">//最好避免完全使用浮点数进行比较</span></span><br><span class=\"line\">        <span class=\"comment\">//最好避免完全使用浮点数进行比较</span></span><br><span class=\"line\">        <span class=\"comment\">//最好避免完全使用浮点数进行比较</span></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0.1f</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">1.0</span>/<span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(f == d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">12345667486234f</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f2</span> <span class=\"operator\">=</span> f1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(f1 == f2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符扩展<ul>\n<li>System.out.println((int)c1);        &#x2F;&#x2F;将char型的c1 强制转换为int型的Unicode编码</li>\n<li>所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 &#x3D; a 、 65 &#x3D; A） ，他占两个字节；</li>\n<li>转义字符：  \\t 制表符、 \\n 换行符……</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//字符扩展</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;荣&#x27;</span>;</span><br><span class=\"line\">        System.out.println(c1);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>)c1);        <span class=\"comment\">//将char型的c1 强制转换为int型的Unicode编码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(c2);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>)c2);        <span class=\"comment\">//将char型的c2 强制转换为int型的Unicode编码</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0066&#x27;</span>;                 <span class=\"comment\">//将Unicode编码0066转义为char型数据c3</span></span><br><span class=\"line\">        System.out.println(c3);</span><br><span class=\"line\">        <span class=\"comment\">//所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//转义字符  \\t 制表符、 \\n 换行符……</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello\\t World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>布尔值扩展：<ul>\n<li>less is more   代码要精简易读；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//布尔值扩展</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flat == <span class=\"literal\">true</span>)&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)&#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//less is more   代码要精简易读；</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"linear-gradient(to top,#a18cd1 0%,#fbc2eb 100%)","excerpt":"","more":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。</li>\n<li><strong>注释不会被执行</strong>，只是给我们写代码的人看的</li>\n<li><em><strong>书写注释是一个非常好的编程习惯</strong></em></li>\n</ul>\n<h3 id=\"Java中的注释\"><a href=\"#Java中的注释\" class=\"headerlink\" title=\"Java中的注释\"></a>Java中的注释</h3><ul>\n<li>单行注释 &#x2F;&#x2F;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是单行注释</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HelloWorld!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>多行注释&#x2F;**&#x2F;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*我是多行注释</span></span><br><span class=\"line\"><span class=\"comment\">        我是多行注释</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HelloWorld!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>文档注释&#x2F;** *&#x2F;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        *我是文档注释</span></span><br><span class=\"line\"><span class=\"comment\">        我是文档注释</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HelloWorld!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Java标识符\"><a href=\"#Java标识符\" class=\"headerlink\" title=\"Java标识符\"></a>Java标识符</h2><p><strong>关键字</strong></p>\n<ul>\n<li><em><strong>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</strong></em></li>\n</ul>\n<p><strong>标识符注意点</strong></p>\n<ul>\n<li>所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始</li>\n<li>首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合</li>\n<li><em><strong>不能使用关键字作为变量名或方法名</strong></em></li>\n<li>标识符是<strong>大小写敏感</strong>的</li>\n<li><strong>不建议使用中文或者拼音作为变量名或方法名</strong></li>\n</ul>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><ul>\n<li>强类型语言<ul>\n<li>要求变量的使用<strong>必须要严格符合规定</strong>，所有变量都必须先定义后才能使用</li>\n</ul>\n</li>\n<li>Java数据类型分为两大类<ul>\n<li>基本类型(primitive type)</li>\n<li>引用类型(reference type)</li>\n</ul>\n</li>\n</ul>\n<p><strong>基本类型</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">No.</th>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">大小&#x2F;位</th>\n<th align=\"center\">可表示数据范围</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><code>byte</code>（字节型）</td>\n<td align=\"center\">8</td>\n<td align=\"center\">-128~127</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><code>short</code>（短整型）</td>\n<td align=\"center\">16</td>\n<td align=\"center\">-32768~32767</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><code>int</code>（整型）</td>\n<td align=\"center\">32</td>\n<td align=\"center\">-2147483648~2147483647</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><code>long</code>（长整型）</td>\n<td align=\"center\">64</td>\n<td align=\"center\">-9223372036854775808~9223372036854775807</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\"><code>float</code>（单精度）</td>\n<td align=\"center\">32</td>\n<td align=\"center\">-3.4E38~3.4E38</td>\n<td align=\"center\">0.0</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\"><code>double</code>（双精度）</td>\n<td align=\"center\">64</td>\n<td align=\"center\">-1.7E308~1.7E308</td>\n<td align=\"center\">0.0</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\"><code>char</code>（字符）</td>\n<td align=\"center\">16</td>\n<td align=\"center\">0~255</td>\n<td align=\"center\">‘\\u0000’</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\"><code>boolean</code>（布尔）</td>\n<td align=\"center\">-</td>\n<td align=\"center\">true或false</td>\n<td align=\"center\">false</td>\n</tr>\n</tbody></table>\n<p><strong>引用类型</strong></p>\n<p>引用数据类型非常多，大致包括：<br>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p>\n<p>如<strong>String为引用类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num01</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">num02</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">short</span> <span class=\"variable\">num03</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">num04</span> <span class=\"operator\">=</span> <span class=\"number\">40l</span>;</span><br><span class=\"line\">        <span class=\"comment\">//浮点型：float(4字节)、double(8字节)</span></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">num05</span> <span class=\"operator\">=</span> <span class=\"number\">50.66f</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">num06</span> <span class=\"operator\">=</span> <span class=\"number\">66.66</span>;</span><br><span class=\"line\">        <span class=\"comment\">//字符：char(2字节)</span></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">usr</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//布尔值：boolean</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>小科普</strong></p>\n<ul>\n<li><strong>位(bit)</strong>:是计算机内部数据存储的最小单位，10100101是一个八位二进制数</li>\n<li><strong>字节(Byte)</strong>: 是计算机中数据处理的基本单位，习惯上用大写的B来表示</li>\n<li>1B(Byte,字节) &#x3D; 8bit(位)</li>\n<li><strong>字符</strong>:是指计算机中使用的字母、数字、字和符号<ul>\n<li>1bit &#x3D; 1位;</li>\n<li>1Byte &#x3D; 1B &#x3D; 8b;</li>\n<li>1024B &#x3D; 1KB</li>\n<li>1024KB &#x3D; 1M</li>\n<li>1024M &#x3D; 1G</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java数据类型拓展\"><a href=\"#Java数据类型拓展\" class=\"headerlink\" title=\"Java数据类型拓展\"></a>Java数据类型拓展</h3><ul>\n<li>整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0b10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">010</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">0x10</span>;</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        System.out.println(i1);</span><br><span class=\"line\">        System.out.println(i2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>浮点数扩展 <ul>\n<li>银行业务表示，</li>\n<li>常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，—–&gt;接近但不等于！最好避免完全使用浮点数进行比较！！！</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//浮点数扩展 银行业务表示，</span></span><br><span class=\"line\">        <span class=\"comment\">//通常使用数学工具类BigDecimal，来表示银行业务。</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，-----&gt;接近但不等于</span></span><br><span class=\"line\">        <span class=\"comment\">//double</span></span><br><span class=\"line\">        <span class=\"comment\">//最好避免完全使用浮点数进行比较</span></span><br><span class=\"line\">        <span class=\"comment\">//最好避免完全使用浮点数进行比较</span></span><br><span class=\"line\">        <span class=\"comment\">//最好避免完全使用浮点数进行比较</span></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0.1f</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">1.0</span>/<span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(f == d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">12345667486234f</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f2</span> <span class=\"operator\">=</span> f1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(f1 == f2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符扩展<ul>\n<li>System.out.println((int)c1);        &#x2F;&#x2F;将char型的c1 强制转换为int型的Unicode编码</li>\n<li>所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 &#x3D; a 、 65 &#x3D; A） ，他占两个字节；</li>\n<li>转义字符：  \\t 制表符、 \\n 换行符……</li>\n</ul>\n</li>\n<li>a</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//字符扩展</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;荣&#x27;</span>;</span><br><span class=\"line\">        System.out.println(c1);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>)c1);        <span class=\"comment\">//将char型的c1 强制转换为int型的Unicode编码</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(c2);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>)c2);        <span class=\"comment\">//将char型的c2 强制转换为int型的Unicode编码</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0066&#x27;</span>;                 <span class=\"comment\">//将Unicode编码0066转义为char型数据c3</span></span><br><span class=\"line\">        System.out.println(c3);</span><br><span class=\"line\">        <span class=\"comment\">//所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//转义字符  \\t 制表符、 \\n 换行符……</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello\\t World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>布尔值扩展：<ul>\n<li>less is more   代码要精简易读；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//布尔值扩展</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flat == <span class=\"literal\">true</span>)&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)&#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//less is more   代码要精简易读；</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java基础语法02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"abbrlink":"4424cd46","date":"2022-08-25T14:36:16.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 类型转换\n\n- 由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换\n\n```java\n//低----------------------------------------->高\nbyte,short,char --->  int ---> long ---> double;\n//小数的优先级一定大于整数\n\n```\n\n\n\n- 运算中，不同类型的数据先转换为同一类型，然后再进行运算\n- 强制类型转换:              (类型)变量名;         高--->低\n- 自动类型转换:                                              低--->高\n- 注意点：\n  * 不能对布尔值进行转换\n  * 不能打对象类型转换为不相干的类型\n    * 把高容量类型转换到低容量类型时，需要强制转换\n          * 2.转换可能会出现内存溢出或精度问题\n\n```java\npublic class Demo03 {\n    public static void main(String[] args) {\n        int i = 128 ;\n        byte b = (byte) i;          //内存溢出\n        //强制转换 (类型)变量名;         高--->低\n        //自动转换                     低--->高\n        System.out.println(i);\n        System.out.println(b);\n        System.out.println(\"=========================\");\n        /*\n        * 注意点：\n        * 1.不能对布尔值进行转换\n        * 2.不能打对象类型转换为不相干的类型\n        * 3.把高容量类型转换到低容量类型时，需要强制转换\n        * 4.转换可能会出现内存溢出或精度问题\n        * */\n\n        System.out.println((int) 30.7);\n        System.out.println((int) 43.33f);\n        System.out.println(\"=========================\");\n        char c = 'a';\n        int d = c + 1;\n        System.out.println(d);\n        System.out.println((char) d);\n    }\n}\n\n```\n\n## 变量\n\n- 变量：即为可以变化的量\n- Java是一种强类型语言，每个变量都必须声明其类型。\n- Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域\n\n```java\ntype varName [=value][{,varName[=value]}];\n//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量\nint a,b,c = 10;\n```\n\n- **注意事项**\n  - 每个变量都有类型，类型可以是基本类型，也可以是引用类型\n  - 变量名必须是合法的标识符\n  - 变量声明是一条完整的语句，因此每一个声明都必须以分号结束。\n- 变量的命名规范\n  - 所有变量、方法、类名：**见名知意**\n  - 类成员变量：首字母小写和驼峰原则：monthSalary\n  - 局部变量：首字母小写和驼峰规则\n  - 常量：大写字母和下划线：MAX_VALUE\n  - 类名：首字母大写和驼峰原则：Man、GoodMan\n  - 方法名：首字母小写和驼峰原则：run(),runRun();\n","source":"_posts/Java基础语法02.md","raw":"---\ntitle: Java基础语法02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ntags:\n  - Java\n  - Java基础语法\nabbrlink: 4424cd46\ndate: 2022-08-25 22:36:16\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 类型转换\n\n- 由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换\n\n```java\n//低----------------------------------------->高\nbyte,short,char --->  int ---> long ---> double;\n//小数的优先级一定大于整数\n\n```\n\n\n\n- 运算中，不同类型的数据先转换为同一类型，然后再进行运算\n- 强制类型转换:              (类型)变量名;         高--->低\n- 自动类型转换:                                              低--->高\n- 注意点：\n  * 不能对布尔值进行转换\n  * 不能打对象类型转换为不相干的类型\n    * 把高容量类型转换到低容量类型时，需要强制转换\n          * 2.转换可能会出现内存溢出或精度问题\n\n```java\npublic class Demo03 {\n    public static void main(String[] args) {\n        int i = 128 ;\n        byte b = (byte) i;          //内存溢出\n        //强制转换 (类型)变量名;         高--->低\n        //自动转换                     低--->高\n        System.out.println(i);\n        System.out.println(b);\n        System.out.println(\"=========================\");\n        /*\n        * 注意点：\n        * 1.不能对布尔值进行转换\n        * 2.不能打对象类型转换为不相干的类型\n        * 3.把高容量类型转换到低容量类型时，需要强制转换\n        * 4.转换可能会出现内存溢出或精度问题\n        * */\n\n        System.out.println((int) 30.7);\n        System.out.println((int) 43.33f);\n        System.out.println(\"=========================\");\n        char c = 'a';\n        int d = c + 1;\n        System.out.println(d);\n        System.out.println((char) d);\n    }\n}\n\n```\n\n## 变量\n\n- 变量：即为可以变化的量\n- Java是一种强类型语言，每个变量都必须声明其类型。\n- Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域\n\n```java\ntype varName [=value][{,varName[=value]}];\n//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量\nint a,b,c = 10;\n```\n\n- **注意事项**\n  - 每个变量都有类型，类型可以是基本类型，也可以是引用类型\n  - 变量名必须是合法的标识符\n  - 变量声明是一条完整的语句，因此每一个声明都必须以分号结束。\n- 变量的命名规范\n  - 所有变量、方法、类名：**见名知意**\n  - 类成员变量：首字母小写和驼峰原则：monthSalary\n  - 局部变量：首字母小写和驼峰规则\n  - 常量：大写字母和下划线：MAX_VALUE\n  - 类名：首字母大写和驼峰原则：Man、GoodMan\n  - 方法名：首字母小写和驼峰原则：run(),runRun();\n","slug":"Java基础语法02","published":1,"updated":"2023-07-31T12:40:09.565Z","layout":"post","link":"","_id":"clktr4qr1000bzsa08le0e4yl","content":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//低-----------------------------------------&gt;高</span></span><br><span class=\"line\"><span class=\"type\">byte</span>,<span class=\"type\">short</span>,<span class=\"type\">char</span> ---&gt;  <span class=\"type\">int</span> ---&gt; <span class=\"type\">long</span> ---&gt; <span class=\"type\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">//小数的优先级一定大于整数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>运算中，不同类型的数据先转换为同一类型，然后再进行运算</li>\n<li>强制类型转换:              (类型)变量名;         高—&gt;低</li>\n<li>自动类型转换:                                              低—&gt;高</li>\n<li>注意点：<ul>\n<li>不能对布尔值进行转换</li>\n<li>不能打对象类型转换为不相干的类型<ul>\n<li>把高容量类型转换到低容量类型时，需要强制转换<br>* 2.转换可能会出现内存溢出或精度问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">128</span> ;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>) i;          <span class=\"comment\">//内存溢出</span></span><br><span class=\"line\">        <span class=\"comment\">//强制转换 (类型)变量名;         高---&gt;低</span></span><br><span class=\"line\">        <span class=\"comment\">//自动转换                     低---&gt;高</span></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========================&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 注意点：</span></span><br><span class=\"line\"><span class=\"comment\">        * 1.不能对布尔值进行转换</span></span><br><span class=\"line\"><span class=\"comment\">        * 2.不能打对象类型转换为不相干的类型</span></span><br><span class=\"line\"><span class=\"comment\">        * 3.把高容量类型转换到低容量类型时，需要强制转换</span></span><br><span class=\"line\"><span class=\"comment\">        * 4.转换可能会出现内存溢出或精度问题</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>) <span class=\"number\">30.7</span>);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>) <span class=\"number\">43.33f</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> c + <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">char</span>) d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量：即为可以变化的量</li>\n<li>Java是一种强类型语言，每个变量都必须声明其类型。</li>\n<li>Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type varName [=value][&#123;,varName[=value]&#125;];</span><br><span class=\"line\"><span class=\"comment\">//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> a,b,c = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意事项</strong><ul>\n<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li>\n<li>变量名必须是合法的标识符</li>\n<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>\n</ul>\n</li>\n<li>变量的命名规范<ul>\n<li>所有变量、方法、类名：<strong>见名知意</strong></li>\n<li>类成员变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：首字母小写和驼峰规则</li>\n<li>常量：大写字母和下划线：MAX_VALUE</li>\n<li>类名：首字母大写和驼峰原则：Man、GoodMan</li>\n<li>方法名：首字母小写和驼峰原则：run(),runRun();</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(45deg,#ff9a9e 0%,#fad0c4 99%,#fad0c4 100%)","excerpt":"","more":"<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ul>\n<li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//低-----------------------------------------&gt;高</span></span><br><span class=\"line\"><span class=\"type\">byte</span>,<span class=\"type\">short</span>,<span class=\"type\">char</span> ---&gt;  <span class=\"type\">int</span> ---&gt; <span class=\"type\">long</span> ---&gt; <span class=\"type\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">//小数的优先级一定大于整数</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>运算中，不同类型的数据先转换为同一类型，然后再进行运算</li>\n<li>强制类型转换:              (类型)变量名;         高—&gt;低</li>\n<li>自动类型转换:                                              低—&gt;高</li>\n<li>注意点：<ul>\n<li>不能对布尔值进行转换</li>\n<li>不能打对象类型转换为不相干的类型<ul>\n<li>把高容量类型转换到低容量类型时，需要强制转换<br>* 2.转换可能会出现内存溢出或精度问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">128</span> ;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>) i;          <span class=\"comment\">//内存溢出</span></span><br><span class=\"line\">        <span class=\"comment\">//强制转换 (类型)变量名;         高---&gt;低</span></span><br><span class=\"line\">        <span class=\"comment\">//自动转换                     低---&gt;高</span></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========================&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 注意点：</span></span><br><span class=\"line\"><span class=\"comment\">        * 1.不能对布尔值进行转换</span></span><br><span class=\"line\"><span class=\"comment\">        * 2.不能打对象类型转换为不相干的类型</span></span><br><span class=\"line\"><span class=\"comment\">        * 3.把高容量类型转换到低容量类型时，需要强制转换</span></span><br><span class=\"line\"><span class=\"comment\">        * 4.转换可能会出现内存溢出或精度问题</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>) <span class=\"number\">30.7</span>);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">int</span>) <span class=\"number\">43.33f</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> c + <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">        System.out.println((<span class=\"type\">char</span>) d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量：即为可以变化的量</li>\n<li>Java是一种强类型语言，每个变量都必须声明其类型。</li>\n<li>Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type varName [=value][&#123;,varName[=value]&#125;];</span><br><span class=\"line\"><span class=\"comment\">//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> a,b,c = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意事项</strong><ul>\n<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li>\n<li>变量名必须是合法的标识符</li>\n<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li>\n</ul>\n</li>\n<li>变量的命名规范<ul>\n<li>所有变量、方法、类名：<strong>见名知意</strong></li>\n<li>类成员变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：首字母小写和驼峰规则</li>\n<li>常量：大写字母和下划线：MAX_VALUE</li>\n<li>类名：首字母大写和驼峰原则：Man、GoodMan</li>\n<li>方法名：首字母小写和驼峰原则：run(),runRun();</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java基础语法03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"abbrlink":"3323fdd0","date":"2022-08-25T14:37:23.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 一、运算符\n\n### 1.1 Java语言支持的运算符\n\n### 1.2 算术运算符\n\n#### **1.2.1 符号**\n\n算术运算符符号：**+   ,   -   ,   *   ,   /   ,   ++   ,   --**\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        int a = 10;\n        int b = 20;\n        int c = 30;\n        int d = 40;\n        System.out.println(a+b);\n        System.out.println(a-b);\n        System.out.println(a*b);\n        System.out.println(a/(double)b);\n        System.out.println(a%b);\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png)\n\n---\n\n#### 1.2.2 **小tips**\n\n- 当参与运算的变量中有**long**型时，输出的结果也为**long**型\n\n- 若参与运算的变量中五**long**型时，**无论参与运算的变量是何类型**，则输出结果均为**int**型\n\neg：\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        long a = 10;\n        int b = 20;\n        byte c = 30;\n        short d = 40;\n        System.out.println((String) (a+b));\n        System.out.println((String) (b+c));\n        System.out.println((String) (c+d));\n        System.out.println((String) (b+d));\n        \n\n    }\n}\n```\n\n![test](https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png)\n\n---\n\n** 自增（++）、自减（--）运算符**\n\n```java\npackage Operator;\n\npublic class Demo03 {\n    public static void main(String[] args) {\n        //++  --  自增 自减  一元运算符\n        int a = 1;\n        int b = a++;                //执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。\n        System.out.println(a);\n        int c = ++a;                //执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n    }\n}\n\n```\n\n![自增自减](https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png)\n\n---\n\n### 1.3 赋值运算符\n\n#### 1.3.1 符号\n\n赋值运算符符号：**=**\n\n#### 语法格式\n\n```java\n//语法格式如下\nint a = 10;  //初始化int类型变量a，并将10赋值给a。\n```\n\n---\n\n### 1.4 关系运算符\n\n#### 1.4.1 符号\n\n：关系运算符符号：**>   ,   <   ,   >=   ,   <=   ,   ==   ,   !=   ,   instanceof**\n\n- **关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中**\n\n#### 语法格式\n\n```java\npackage Operator;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中\n        int a = 10 ;\n        int b = 20 ;\n        System.out.println(a == b);\n        System.out.println(a != b);\n        System.out.println(a < b);\n        System.out.println(a > b);\n\n    }\n}\n\n```\n\n![result](https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png)\n\n\n---\n\n### 1.5 逻辑运算符\n\n#### 1.5.1 符号\n\n逻辑运算符符号：**&&   ,   ||   ,   !**\n\n#### 1.5.2 语法格式\n\n```java\npackage Operator;\n\npublic class Demo04 {\n    public static void main(String[] args) {\n        boolean a = true;\n        boolean b = false;\n        System.out.println(\"a&&b:\\t\"+(a && b));             //逻辑与运算：只要有一个是假的，则结果就是假的\n        System.out.println(\"a||b:\\t\"+(a || b));             //逻辑或运算：只要有一个是真的，则结果就是真的\n        System.out.println(\"!(a&&b):\\t\"+!(a && b));         //逻辑非运算：结果取反\n        //短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。\n        int c = 5;\n        boolean d = b && (c++ > 5);\n        System.out.println(d);\n        System.out.println(c);\n    }\n}\n```\n\n![result01](https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png)\n\n---\n\n### 1.6 位运算符\n\n#### 1.6.1 符号\n\n位运算符符号：**&  ,  |  ,  ^  ,  ~  ,  >>  ,  <<   ,  >>>**\n\n#### 1.6.2 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        /*\n        A = \t0010 1101\n        B = \t1011 1001\n        -------------------\n        A&B =   0010 1001\n        A|B =   1011 1101\n        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真\n        ~B  =   0100 0110\n        */\n        //快速计算2*8\n        System.out.println(2<<3);\n    }\n}\n```\n\n---\n\n### 1.7 条件运算符\n\n#### 1.7.1 符号\n\n条件运算符符号：**x ? y : z :**\n\n#### 1.7.2 语法格式\n\n语法格式如下：\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        // 条件运算符 x ? y : z\n        // 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z\n        System.out.println((a>b) ? 50 : 60);\n        System.out.println((a<b) ? 50 : 60);\n    }\n\n}\n\n```\n\n---\n\n### 1.8 扩展赋值运算符\n\n#### 1.8.1 符号\n\n扩展赋值运算符符号：**+=  ,  -=  ,  *=  ,  /=**\n\n#### 1.8.2 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        a+=b;\n        System.out.println(a); // a = a+b -->30 = 10+20\n        a-=b;\n        System.out.println(a); // a = a-b -->10 = 30-20\n\n        //字符串连接符 +\n        //当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。\n        System.out.println(\"\" + a + b);\n        //但是如果String类型前面出现了运算，则会先运算再连接。\n        System.out.println(b+ a + \"\" );\n    }\n\n}\n\n```\n\n![result02](https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png)\n\n---\n\n### 1.9 运算符优先级\n\n| **优先级** |                          **运算符**                          |                          **简介**                           | **结合性** |\n| :--------: | :----------------------------------------------------------: | :---------------------------------------------------------: | :--------: |\n|     1      |                     `[ ]`、` .`、` ( ) `                     |                     方法调用，属性获取                      |  从左向右  |\n|     2      |                        !、~、 ++、 --                        |                         一元运算符                          |  从右向左  |\n|     3      |                          * 、/ 、%                           |                    乘、除、取模（余数）                     |  从左向右  |\n|     4      |                            + 、 -                            |                           加减法                            |  从左向右  |\n|     5      |                        <<、 >>、 >>>                         |                 左位移、右位移、无符号右移                  |  从左向右  |\n|     6      |                 < 、<= 、>、 >=、 instanceof                 | 小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型 |  从左向右  |\n|     7      |                           == 、!=                            |      2个值是否相等，2个值是否不等于。 下面有详细的解释      |  从左向右  |\n|     8      |                              &                               |                           按位与                            |  从左向右  |\n|     9      |                              ^                               |                          按位异或                           |  从左向右  |\n|     10     |                              \\|                              |                           按位或                            |  从左向右  |\n|     11     |                              &&                              |                           短路与                            |  从左向右  |\n|     12     |                             \\|\\|                             |                           短路或                            |  从左向右  |\n|     13     |                              ?:                              |                         条件运算符                          |  从右向左  |\n|     14     | =、 += 、-= 、*= 、/=、 %=、 &=、 \\|=、 ^=、 <、<= 、>、>= 、>>= |                       混合赋值运算符                        |  从右向左  |\n\n点击查看[Java基础语法之注释、标识符、数据类型（一）](http://110.42.139.30:8000/index.php/2022/03/07/java基础语法之注释、标识符、数据类型/)\n\n点击查看[Java基础语法之类型转换和变量（二）](http://110.42.139.30:8000/index.php/2022/03/07/java基础之类型转换和变量（二）/)\n\n","source":"_posts/Java基础语法03.md","raw":"---\ntitle: Java基础语法03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ntags:\n  - Java\n  - Java基础语法\nabbrlink: 3323fdd0\ndate: 2022-08-25 22:37:23\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 一、运算符\n\n### 1.1 Java语言支持的运算符\n\n### 1.2 算术运算符\n\n#### **1.2.1 符号**\n\n算术运算符符号：**+   ,   -   ,   *   ,   /   ,   ++   ,   --**\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        int a = 10;\n        int b = 20;\n        int c = 30;\n        int d = 40;\n        System.out.println(a+b);\n        System.out.println(a-b);\n        System.out.println(a*b);\n        System.out.println(a/(double)b);\n        System.out.println(a%b);\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png)\n\n---\n\n#### 1.2.2 **小tips**\n\n- 当参与运算的变量中有**long**型时，输出的结果也为**long**型\n\n- 若参与运算的变量中五**long**型时，**无论参与运算的变量是何类型**，则输出结果均为**int**型\n\neg：\n\n```java\npackage Operator;\n\npublic class Demo01 {\n    public static void main(String[] args) {\n        //算数运算符的基本操作\n        long a = 10;\n        int b = 20;\n        byte c = 30;\n        short d = 40;\n        System.out.println((String) (a+b));\n        System.out.println((String) (b+c));\n        System.out.println((String) (c+d));\n        System.out.println((String) (b+d));\n        \n\n    }\n}\n```\n\n![test](https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png)\n\n---\n\n** 自增（++）、自减（--）运算符**\n\n```java\npackage Operator;\n\npublic class Demo03 {\n    public static void main(String[] args) {\n        //++  --  自增 自减  一元运算符\n        int a = 1;\n        int b = a++;                //执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。\n        System.out.println(a);\n        int c = ++a;                //执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。\n        System.out.println(a);\n        System.out.println(b);\n        System.out.println(c);\n    }\n}\n\n```\n\n![自增自减](https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png)\n\n---\n\n### 1.3 赋值运算符\n\n#### 1.3.1 符号\n\n赋值运算符符号：**=**\n\n#### 语法格式\n\n```java\n//语法格式如下\nint a = 10;  //初始化int类型变量a，并将10赋值给a。\n```\n\n---\n\n### 1.4 关系运算符\n\n#### 1.4.1 符号\n\n：关系运算符符号：**>   ,   <   ,   >=   ,   <=   ,   ==   ,   !=   ,   instanceof**\n\n- **关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中**\n\n#### 语法格式\n\n```java\npackage Operator;\n\npublic class Demo02 {\n    public static void main(String[] args) {\n        //关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中\n        int a = 10 ;\n        int b = 20 ;\n        System.out.println(a == b);\n        System.out.println(a != b);\n        System.out.println(a < b);\n        System.out.println(a > b);\n\n    }\n}\n\n```\n\n![result](https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png)\n\n\n---\n\n### 1.5 逻辑运算符\n\n#### 1.5.1 符号\n\n逻辑运算符符号：**&&   ,   ||   ,   !**\n\n#### 1.5.2 语法格式\n\n```java\npackage Operator;\n\npublic class Demo04 {\n    public static void main(String[] args) {\n        boolean a = true;\n        boolean b = false;\n        System.out.println(\"a&&b:\\t\"+(a && b));             //逻辑与运算：只要有一个是假的，则结果就是假的\n        System.out.println(\"a||b:\\t\"+(a || b));             //逻辑或运算：只要有一个是真的，则结果就是真的\n        System.out.println(\"!(a&&b):\\t\"+!(a && b));         //逻辑非运算：结果取反\n        //短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。\n        int c = 5;\n        boolean d = b && (c++ > 5);\n        System.out.println(d);\n        System.out.println(c);\n    }\n}\n```\n\n![result01](https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png)\n\n---\n\n### 1.6 位运算符\n\n#### 1.6.1 符号\n\n位运算符符号：**&  ,  |  ,  ^  ,  ~  ,  >>  ,  <<   ,  >>>**\n\n#### 1.6.2 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        /*\n        A = \t0010 1101\n        B = \t1011 1001\n        -------------------\n        A&B =   0010 1001\n        A|B =   1011 1101\n        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真\n        ~B  =   0100 0110\n        */\n        //快速计算2*8\n        System.out.println(2<<3);\n    }\n}\n```\n\n---\n\n### 1.7 条件运算符\n\n#### 1.7.1 符号\n\n条件运算符符号：**x ? y : z :**\n\n#### 1.7.2 语法格式\n\n语法格式如下：\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        // 条件运算符 x ? y : z\n        // 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z\n        System.out.println((a>b) ? 50 : 60);\n        System.out.println((a<b) ? 50 : 60);\n    }\n\n}\n\n```\n\n---\n\n### 1.8 扩展赋值运算符\n\n#### 1.8.1 符号\n\n扩展赋值运算符符号：**+=  ,  -=  ,  *=  ,  /=**\n\n#### 1.8.2 语法格式\n\n语法格式如下\n\n```java\npackage Operator;\n\npublic class Demo05 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        a+=b;\n        System.out.println(a); // a = a+b -->30 = 10+20\n        a-=b;\n        System.out.println(a); // a = a-b -->10 = 30-20\n\n        //字符串连接符 +\n        //当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。\n        System.out.println(\"\" + a + b);\n        //但是如果String类型前面出现了运算，则会先运算再连接。\n        System.out.println(b+ a + \"\" );\n    }\n\n}\n\n```\n\n![result02](https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png)\n\n---\n\n### 1.9 运算符优先级\n\n| **优先级** |                          **运算符**                          |                          **简介**                           | **结合性** |\n| :--------: | :----------------------------------------------------------: | :---------------------------------------------------------: | :--------: |\n|     1      |                     `[ ]`、` .`、` ( ) `                     |                     方法调用，属性获取                      |  从左向右  |\n|     2      |                        !、~、 ++、 --                        |                         一元运算符                          |  从右向左  |\n|     3      |                          * 、/ 、%                           |                    乘、除、取模（余数）                     |  从左向右  |\n|     4      |                            + 、 -                            |                           加减法                            |  从左向右  |\n|     5      |                        <<、 >>、 >>>                         |                 左位移、右位移、无符号右移                  |  从左向右  |\n|     6      |                 < 、<= 、>、 >=、 instanceof                 | 小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型 |  从左向右  |\n|     7      |                           == 、!=                            |      2个值是否相等，2个值是否不等于。 下面有详细的解释      |  从左向右  |\n|     8      |                              &                               |                           按位与                            |  从左向右  |\n|     9      |                              ^                               |                          按位异或                           |  从左向右  |\n|     10     |                              \\|                              |                           按位或                            |  从左向右  |\n|     11     |                              &&                              |                           短路与                            |  从左向右  |\n|     12     |                             \\|\\|                             |                           短路或                            |  从左向右  |\n|     13     |                              ?:                              |                         条件运算符                          |  从右向左  |\n|     14     | =、 += 、-= 、*= 、/=、 %=、 &=、 \\|=、 ^=、 <、<= 、>、>= 、>>= |                       混合赋值运算符                        |  从右向左  |\n\n点击查看[Java基础语法之注释、标识符、数据类型（一）](http://110.42.139.30:8000/index.php/2022/03/07/java基础语法之注释、标识符、数据类型/)\n\n点击查看[Java基础语法之类型转换和变量（二）](http://110.42.139.30:8000/index.php/2022/03/07/java基础之类型转换和变量（二）/)\n\n","slug":"Java基础语法03","published":1,"updated":"2023-07-31T12:40:09.567Z","layout":"post","link":"","_id":"clktr4qr3000gzsa0bh7oeeei","content":"<h2 id=\"一、运算符\"><a href=\"#一、运算符\" class=\"headerlink\" title=\"一、运算符\"></a>一、运算符</h2><h3 id=\"1-1-Java语言支持的运算符\"><a href=\"#1-1-Java语言支持的运算符\" class=\"headerlink\" title=\"1.1 Java语言支持的运算符\"></a>1.1 Java语言支持的运算符</h3><h3 id=\"1-2-算术运算符\"><a href=\"#1-2-算术运算符\" class=\"headerlink\" title=\"1.2 算术运算符\"></a>1.2 算术运算符</h3><h4 id=\"1-2-1-符号\"><a href=\"#1-2-1-符号\" class=\"headerlink\" title=\"1.2.1 符号\"></a><strong>1.2.1 符号</strong></h4><p>算术运算符符号：**+   ,   -   ,   *   ,   &#x2F;   ,   ++   ,   –**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//算数运算符的基本操作</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">        System.out.println(a+b);</span><br><span class=\"line\">        System.out.println(a-b);</span><br><span class=\"line\">        System.out.println(a*b);</span><br><span class=\"line\">        System.out.println(a/(<span class=\"type\">double</span>)b);</span><br><span class=\"line\">        System.out.println(a%b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png\" alt=\"输出结果\"></p>\n<hr>\n<h4 id=\"1-2-2-小tips\"><a href=\"#1-2-2-小tips\" class=\"headerlink\" title=\"1.2.2 小tips\"></a>1.2.2 <strong>小tips</strong></h4><ul>\n<li><p>当参与运算的变量中有<strong>long</strong>型时，输出的结果也为<strong>long</strong>型</p>\n</li>\n<li><p>若参与运算的变量中五<strong>long</strong>型时，<strong>无论参与运算的变量是何类型</strong>，则输出结果均为<strong>int</strong>型</p>\n</li>\n</ul>\n<p>eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//算数运算符的基本操作</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"type\">short</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">        System.out.println((String) (a+b));</span><br><span class=\"line\">        System.out.println((String) (b+c));</span><br><span class=\"line\">        System.out.println((String) (c+d));</span><br><span class=\"line\">        System.out.println((String) (b+d));</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png\" alt=\"test\"></p>\n<hr>\n<p>** 自增（++）、自减（–）运算符**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//++  --  自增 自减  一元运算符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a++;                <span class=\"comment\">//执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。</span></span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ++a;                <span class=\"comment\">//执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。</span></span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png\" alt=\"自增自减\"></p>\n<hr>\n<h3 id=\"1-3-赋值运算符\"><a href=\"#1-3-赋值运算符\" class=\"headerlink\" title=\"1.3 赋值运算符\"></a>1.3 赋值运算符</h3><h4 id=\"1-3-1-符号\"><a href=\"#1-3-1-符号\" class=\"headerlink\" title=\"1.3.1 符号\"></a>1.3.1 符号</h4><p>赋值运算符符号：**&#x3D;**</p>\n<h4 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语法格式如下</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;  <span class=\"comment\">//初始化int类型变量a，并将10赋值给a。</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"1-4-关系运算符\"><a href=\"#1-4-关系运算符\" class=\"headerlink\" title=\"1.4 关系运算符\"></a>1.4 关系运算符</h3><h4 id=\"1-4-1-符号\"><a href=\"#1-4-1-符号\" class=\"headerlink\" title=\"1.4.1 符号\"></a>1.4.1 符号</h4><p>：关系运算符符号：**&gt;   ,   &lt;   ,   &gt;&#x3D;   ,   &lt;&#x3D;   ,   &#x3D;&#x3D;   ,   !&#x3D;   ,   instanceof**</p>\n<ul>\n<li><strong>关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</strong></li>\n</ul>\n<h4 id=\"语法格式-1\"><a href=\"#语法格式-1\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> ;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span> ;</span><br><span class=\"line\">        System.out.println(a == b);</span><br><span class=\"line\">        System.out.println(a != b);</span><br><span class=\"line\">        System.out.println(a &lt; b);</span><br><span class=\"line\">        System.out.println(a &gt; b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"1-5-逻辑运算符\"><a href=\"#1-5-逻辑运算符\" class=\"headerlink\" title=\"1.5 逻辑运算符\"></a>1.5 逻辑运算符</h3><h4 id=\"1-5-1-符号\"><a href=\"#1-5-1-符号\" class=\"headerlink\" title=\"1.5.1 符号\"></a>1.5.1 符号</h4><p>逻辑运算符符号：**&amp;&amp;   ,   ||   ,   !**</p>\n<h4 id=\"1-5-2-语法格式\"><a href=\"#1-5-2-语法格式\" class=\"headerlink\" title=\"1.5.2 语法格式\"></a>1.5.2 语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a&amp;&amp;b:\\t&quot;</span>+(a &amp;&amp; b));             <span class=\"comment\">//逻辑与运算：只要有一个是假的，则结果就是假的</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a||b:\\t&quot;</span>+(a || b));             <span class=\"comment\">//逻辑或运算：只要有一个是真的，则结果就是真的</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;!(a&amp;&amp;b):\\t&quot;</span>+!(a &amp;&amp; b));         <span class=\"comment\">//逻辑非运算：结果取反</span></span><br><span class=\"line\">        <span class=\"comment\">//短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> b &amp;&amp; (c++ &gt; <span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png\" alt=\"result01\"></p>\n<hr>\n<h3 id=\"1-6-位运算符\"><a href=\"#1-6-位运算符\" class=\"headerlink\" title=\"1.6 位运算符\"></a>1.6 位运算符</h3><h4 id=\"1-6-1-符号\"><a href=\"#1-6-1-符号\" class=\"headerlink\" title=\"1.6.1 符号\"></a>1.6.1 符号</h4><p>位运算符符号：**&amp;  ,  |  ,  ^  ,  ~  ,  &gt;&gt;  ,  &lt;&lt;   ,  &gt;&gt;&gt;**</p>\n<h4 id=\"1-6-2-语法格式\"><a href=\"#1-6-2-语法格式\" class=\"headerlink\" title=\"1.6.2 语法格式\"></a>1.6.2 语法格式</h4><p>语法格式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        A = \t0010 1101</span></span><br><span class=\"line\"><span class=\"comment\">        B = \t1011 1001</span></span><br><span class=\"line\"><span class=\"comment\">        -------------------</span></span><br><span class=\"line\"><span class=\"comment\">        A&amp;B =   0010 1001</span></span><br><span class=\"line\"><span class=\"comment\">        A|B =   1011 1101</span></span><br><span class=\"line\"><span class=\"comment\">        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真</span></span><br><span class=\"line\"><span class=\"comment\">        ~B  =   0100 0110</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"comment\">//快速计算2*8</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>&lt;&lt;<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"1-7-条件运算符\"><a href=\"#1-7-条件运算符\" class=\"headerlink\" title=\"1.7 条件运算符\"></a>1.7 条件运算符</h3><h4 id=\"1-7-1-符号\"><a href=\"#1-7-1-符号\" class=\"headerlink\" title=\"1.7.1 符号\"></a>1.7.1 符号</h4><p>条件运算符符号：<strong>x ? y : z :</strong></p>\n<h4 id=\"1-7-2-语法格式\"><a href=\"#1-7-2-语法格式\" class=\"headerlink\" title=\"1.7.2 语法格式\"></a>1.7.2 语法格式</h4><p>语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 条件运算符 x ? y : z</span></span><br><span class=\"line\">        <span class=\"comment\">// 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z</span></span><br><span class=\"line\">        System.out.println((a&gt;b) ? <span class=\"number\">50</span> : <span class=\"number\">60</span>);</span><br><span class=\"line\">        System.out.println((a&lt;b) ? <span class=\"number\">50</span> : <span class=\"number\">60</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"1-8-扩展赋值运算符\"><a href=\"#1-8-扩展赋值运算符\" class=\"headerlink\" title=\"1.8 扩展赋值运算符\"></a>1.8 扩展赋值运算符</h3><h4 id=\"1-8-1-符号\"><a href=\"#1-8-1-符号\" class=\"headerlink\" title=\"1.8.1 符号\"></a>1.8.1 符号</h4><p>扩展赋值运算符符号：**+&#x3D;  ,  -&#x3D;  ,  <em>&#x3D;  ,  &#x2F;&#x3D;</em>*</p>\n<h4 id=\"1-8-2-语法格式\"><a href=\"#1-8-2-语法格式\" class=\"headerlink\" title=\"1.8.2 语法格式\"></a>1.8.2 语法格式</h4><p>语法格式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        a+=b;</span><br><span class=\"line\">        System.out.println(a); <span class=\"comment\">// a = a+b --&gt;30 = 10+20</span></span><br><span class=\"line\">        a-=b;</span><br><span class=\"line\">        System.out.println(a); <span class=\"comment\">// a = a-b --&gt;10 = 30-20</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//字符串连接符 +</span></span><br><span class=\"line\">        <span class=\"comment\">//当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&quot;</span> + a + b);</span><br><span class=\"line\">        <span class=\"comment\">//但是如果String类型前面出现了运算，则会先运算再连接。</span></span><br><span class=\"line\">        System.out.println(b+ a + <span class=\"string\">&quot;&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png\" alt=\"result02\"></p>\n<hr>\n<h3 id=\"1-9-运算符优先级\"><a href=\"#1-9-运算符优先级\" class=\"headerlink\" title=\"1.9 运算符优先级\"></a>1.9 运算符优先级</h3><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>优先级</strong></th>\n<th align=\"center\"><strong>运算符</strong></th>\n<th align=\"center\"><strong>简介</strong></th>\n<th align=\"center\"><strong>结合性</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><code>[ ]</code>、<code> .</code>、<code>( )</code></td>\n<td align=\"center\">方法调用，属性获取</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">!、~、 ++、 –</td>\n<td align=\"center\">一元运算符</td>\n<td align=\"center\">从右向左</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">* 、&#x2F; 、%</td>\n<td align=\"center\">乘、除、取模（余数）</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">+ 、 -</td>\n<td align=\"center\">加减法</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td>\n<td align=\"center\">左位移、右位移、无符号右移</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">&lt; 、&lt;&#x3D; 、&gt;、 &gt;&#x3D;、 instanceof</td>\n<td align=\"center\">小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">&#x3D;&#x3D; 、!&#x3D;</td>\n<td align=\"center\">2个值是否相等，2个值是否不等于。 下面有详细的解释</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">按位与</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">^</td>\n<td align=\"center\">按位异或</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">|</td>\n<td align=\"center\">按位或</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\">&amp;&amp;</td>\n<td align=\"center\">短路与</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\">||</td>\n<td align=\"center\">短路或</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">?:</td>\n<td align=\"center\">条件运算符</td>\n<td align=\"center\">从右向左</td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td align=\"center\">&#x3D;、 +&#x3D; 、-&#x3D; 、*&#x3D; 、&#x2F;&#x3D;、 %&#x3D;、 &amp;&#x3D;、 |&#x3D;、 ^&#x3D;、 &lt;、&lt;&#x3D; 、&gt;、&gt;&#x3D; 、&gt;&gt;&#x3D;</td>\n<td align=\"center\">混合赋值运算符</td>\n<td align=\"center\">从右向左</td>\n</tr>\n</tbody></table>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%B3%A8%E9%87%8A%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/\">Java基础语法之注释、标识符、数据类型（一）</a></p>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%8F%98%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/\">Java基础语法之类型转换和变量（二）</a></p>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"一、运算符\"><a href=\"#一、运算符\" class=\"headerlink\" title=\"一、运算符\"></a>一、运算符</h2><h3 id=\"1-1-Java语言支持的运算符\"><a href=\"#1-1-Java语言支持的运算符\" class=\"headerlink\" title=\"1.1 Java语言支持的运算符\"></a>1.1 Java语言支持的运算符</h3><h3 id=\"1-2-算术运算符\"><a href=\"#1-2-算术运算符\" class=\"headerlink\" title=\"1.2 算术运算符\"></a>1.2 算术运算符</h3><h4 id=\"1-2-1-符号\"><a href=\"#1-2-1-符号\" class=\"headerlink\" title=\"1.2.1 符号\"></a><strong>1.2.1 符号</strong></h4><p>算术运算符符号：**+   ,   -   ,   *   ,   &#x2F;   ,   ++   ,   –**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//算数运算符的基本操作</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">        System.out.println(a+b);</span><br><span class=\"line\">        System.out.println(a-b);</span><br><span class=\"line\">        System.out.println(a*b);</span><br><span class=\"line\">        System.out.println(a/(<span class=\"type\">double</span>)b);</span><br><span class=\"line\">        System.out.println(a%b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png\" alt=\"输出结果\"></p>\n<hr>\n<h4 id=\"1-2-2-小tips\"><a href=\"#1-2-2-小tips\" class=\"headerlink\" title=\"1.2.2 小tips\"></a>1.2.2 <strong>小tips</strong></h4><ul>\n<li><p>当参与运算的变量中有<strong>long</strong>型时，输出的结果也为<strong>long</strong>型</p>\n</li>\n<li><p>若参与运算的变量中五<strong>long</strong>型时，<strong>无论参与运算的变量是何类型</strong>，则输出结果均为<strong>int</strong>型</p>\n</li>\n</ul>\n<p>eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//算数运算符的基本操作</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"type\">short</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">        System.out.println((String) (a+b));</span><br><span class=\"line\">        System.out.println((String) (b+c));</span><br><span class=\"line\">        System.out.println((String) (c+d));</span><br><span class=\"line\">        System.out.println((String) (b+d));</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png\" alt=\"test\"></p>\n<hr>\n<p>** 自增（++）、自减（–）运算符**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//++  --  自增 自减  一元运算符</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a++;                <span class=\"comment\">//执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。</span></span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ++a;                <span class=\"comment\">//执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。</span></span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png\" alt=\"自增自减\"></p>\n<hr>\n<h3 id=\"1-3-赋值运算符\"><a href=\"#1-3-赋值运算符\" class=\"headerlink\" title=\"1.3 赋值运算符\"></a>1.3 赋值运算符</h3><h4 id=\"1-3-1-符号\"><a href=\"#1-3-1-符号\" class=\"headerlink\" title=\"1.3.1 符号\"></a>1.3.1 符号</h4><p>赋值运算符符号：**&#x3D;**</p>\n<h4 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语法格式如下</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;  <span class=\"comment\">//初始化int类型变量a，并将10赋值给a。</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"1-4-关系运算符\"><a href=\"#1-4-关系运算符\" class=\"headerlink\" title=\"1.4 关系运算符\"></a>1.4 关系运算符</h3><h4 id=\"1-4-1-符号\"><a href=\"#1-4-1-符号\" class=\"headerlink\" title=\"1.4.1 符号\"></a>1.4.1 符号</h4><p>：关系运算符符号：**&gt;   ,   &lt;   ,   &gt;&#x3D;   ,   &lt;&#x3D;   ,   &#x3D;&#x3D;   ,   !&#x3D;   ,   instanceof**</p>\n<ul>\n<li><strong>关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</strong></li>\n</ul>\n<h4 id=\"语法格式-1\"><a href=\"#语法格式-1\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> ;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span> ;</span><br><span class=\"line\">        System.out.println(a == b);</span><br><span class=\"line\">        System.out.println(a != b);</span><br><span class=\"line\">        System.out.println(a &lt; b);</span><br><span class=\"line\">        System.out.println(a &gt; b);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png\" alt=\"result\"></p>\n<hr>\n<h3 id=\"1-5-逻辑运算符\"><a href=\"#1-5-逻辑运算符\" class=\"headerlink\" title=\"1.5 逻辑运算符\"></a>1.5 逻辑运算符</h3><h4 id=\"1-5-1-符号\"><a href=\"#1-5-1-符号\" class=\"headerlink\" title=\"1.5.1 符号\"></a>1.5.1 符号</h4><p>逻辑运算符符号：**&amp;&amp;   ,   ||   ,   !**</p>\n<h4 id=\"1-5-2-语法格式\"><a href=\"#1-5-2-语法格式\" class=\"headerlink\" title=\"1.5.2 语法格式\"></a>1.5.2 语法格式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a&amp;&amp;b:\\t&quot;</span>+(a &amp;&amp; b));             <span class=\"comment\">//逻辑与运算：只要有一个是假的，则结果就是假的</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a||b:\\t&quot;</span>+(a || b));             <span class=\"comment\">//逻辑或运算：只要有一个是真的，则结果就是真的</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;!(a&amp;&amp;b):\\t&quot;</span>+!(a &amp;&amp; b));         <span class=\"comment\">//逻辑非运算：结果取反</span></span><br><span class=\"line\">        <span class=\"comment\">//短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> b &amp;&amp; (c++ &gt; <span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(d);</span><br><span class=\"line\">        System.out.println(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png\" alt=\"result01\"></p>\n<hr>\n<h3 id=\"1-6-位运算符\"><a href=\"#1-6-位运算符\" class=\"headerlink\" title=\"1.6 位运算符\"></a>1.6 位运算符</h3><h4 id=\"1-6-1-符号\"><a href=\"#1-6-1-符号\" class=\"headerlink\" title=\"1.6.1 符号\"></a>1.6.1 符号</h4><p>位运算符符号：**&amp;  ,  |  ,  ^  ,  ~  ,  &gt;&gt;  ,  &lt;&lt;   ,  &gt;&gt;&gt;**</p>\n<h4 id=\"1-6-2-语法格式\"><a href=\"#1-6-2-语法格式\" class=\"headerlink\" title=\"1.6.2 语法格式\"></a>1.6.2 语法格式</h4><p>语法格式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        A = \t0010 1101</span></span><br><span class=\"line\"><span class=\"comment\">        B = \t1011 1001</span></span><br><span class=\"line\"><span class=\"comment\">        -------------------</span></span><br><span class=\"line\"><span class=\"comment\">        A&amp;B =   0010 1001</span></span><br><span class=\"line\"><span class=\"comment\">        A|B =   1011 1101</span></span><br><span class=\"line\"><span class=\"comment\">        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真</span></span><br><span class=\"line\"><span class=\"comment\">        ~B  =   0100 0110</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"comment\">//快速计算2*8</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>&lt;&lt;<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"1-7-条件运算符\"><a href=\"#1-7-条件运算符\" class=\"headerlink\" title=\"1.7 条件运算符\"></a>1.7 条件运算符</h3><h4 id=\"1-7-1-符号\"><a href=\"#1-7-1-符号\" class=\"headerlink\" title=\"1.7.1 符号\"></a>1.7.1 符号</h4><p>条件运算符符号：<strong>x ? y : z :</strong></p>\n<h4 id=\"1-7-2-语法格式\"><a href=\"#1-7-2-语法格式\" class=\"headerlink\" title=\"1.7.2 语法格式\"></a>1.7.2 语法格式</h4><p>语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 条件运算符 x ? y : z</span></span><br><span class=\"line\">        <span class=\"comment\">// 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z</span></span><br><span class=\"line\">        System.out.println((a&gt;b) ? <span class=\"number\">50</span> : <span class=\"number\">60</span>);</span><br><span class=\"line\">        System.out.println((a&lt;b) ? <span class=\"number\">50</span> : <span class=\"number\">60</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"1-8-扩展赋值运算符\"><a href=\"#1-8-扩展赋值运算符\" class=\"headerlink\" title=\"1.8 扩展赋值运算符\"></a>1.8 扩展赋值运算符</h3><h4 id=\"1-8-1-符号\"><a href=\"#1-8-1-符号\" class=\"headerlink\" title=\"1.8.1 符号\"></a>1.8.1 符号</h4><p>扩展赋值运算符符号：**+&#x3D;  ,  -&#x3D;  ,  <em>&#x3D;  ,  &#x2F;&#x3D;</em>*</p>\n<h4 id=\"1-8-2-语法格式\"><a href=\"#1-8-2-语法格式\" class=\"headerlink\" title=\"1.8.2 语法格式\"></a>1.8.2 语法格式</h4><p>语法格式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Operator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        a+=b;</span><br><span class=\"line\">        System.out.println(a); <span class=\"comment\">// a = a+b --&gt;30 = 10+20</span></span><br><span class=\"line\">        a-=b;</span><br><span class=\"line\">        System.out.println(a); <span class=\"comment\">// a = a-b --&gt;10 = 30-20</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//字符串连接符 +</span></span><br><span class=\"line\">        <span class=\"comment\">//当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&quot;</span> + a + b);</span><br><span class=\"line\">        <span class=\"comment\">//但是如果String类型前面出现了运算，则会先运算再连接。</span></span><br><span class=\"line\">        System.out.println(b+ a + <span class=\"string\">&quot;&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png\" alt=\"result02\"></p>\n<hr>\n<h3 id=\"1-9-运算符优先级\"><a href=\"#1-9-运算符优先级\" class=\"headerlink\" title=\"1.9 运算符优先级\"></a>1.9 运算符优先级</h3><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>优先级</strong></th>\n<th align=\"center\"><strong>运算符</strong></th>\n<th align=\"center\"><strong>简介</strong></th>\n<th align=\"center\"><strong>结合性</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><code>[ ]</code>、<code> .</code>、<code>( )</code></td>\n<td align=\"center\">方法调用，属性获取</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">!、~、 ++、 –</td>\n<td align=\"center\">一元运算符</td>\n<td align=\"center\">从右向左</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">* 、&#x2F; 、%</td>\n<td align=\"center\">乘、除、取模（余数）</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">+ 、 -</td>\n<td align=\"center\">加减法</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td>\n<td align=\"center\">左位移、右位移、无符号右移</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">&lt; 、&lt;&#x3D; 、&gt;、 &gt;&#x3D;、 instanceof</td>\n<td align=\"center\">小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">&#x3D;&#x3D; 、!&#x3D;</td>\n<td align=\"center\">2个值是否相等，2个值是否不等于。 下面有详细的解释</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">按位与</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td align=\"center\">^</td>\n<td align=\"center\">按位异或</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"center\">|</td>\n<td align=\"center\">按位或</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">11</td>\n<td align=\"center\">&amp;&amp;</td>\n<td align=\"center\">短路与</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\">||</td>\n<td align=\"center\">短路或</td>\n<td align=\"center\">从左向右</td>\n</tr>\n<tr>\n<td align=\"center\">13</td>\n<td align=\"center\">?:</td>\n<td align=\"center\">条件运算符</td>\n<td align=\"center\">从右向左</td>\n</tr>\n<tr>\n<td align=\"center\">14</td>\n<td align=\"center\">&#x3D;、 +&#x3D; 、-&#x3D; 、*&#x3D; 、&#x2F;&#x3D;、 %&#x3D;、 &amp;&#x3D;、 |&#x3D;、 ^&#x3D;、 &lt;、&lt;&#x3D; 、&gt;、&gt;&#x3D; 、&gt;&gt;&#x3D;</td>\n<td align=\"center\">混合赋值运算符</td>\n<td align=\"center\">从右向左</td>\n</tr>\n</tbody></table>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%B3%A8%E9%87%8A%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/\">Java基础语法之注释、标识符、数据类型（一）</a></p>\n<p>点击查看<a href=\"http://110.42.139.30:8000/index.php/2022/03/07/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%8F%98%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/\">Java基础语法之类型转换和变量（二）</a></p>\n"},{"title":"Java基础语法04","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg"],"abbrlink":"ad476873","date":"2022-08-25T14:37:45.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 包机制\n\n- 为了更好地组织类，Java提供了包机制，用于区别类名的命名空间\n- 包语句的语法格式为\n\n```java\npackage pkg1[.pkg2[.pkg3...]];\n```\n\n- *** 一般利用公司域名倒置作为包名***\n- 为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能\n\n```java\nimport package1[.package2...].(classname|*);\n```\n\n## JavaDoc生成文档\n\nWin + r 后输入：\n\n```shell\njavadoc -encoding UTF-8 -charset UTF-8 ***.java\n```\n\n\n\n","source":"_posts/Java基础语法04.md","raw":"---\ntitle: Java基础语法04\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqxqwj6j21kw0w01a0.jpg'\ntags:\n  - Java\n  - Java基础语法\nabbrlink: ad476873\ndate: 2022-08-25 22:37:45\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 包机制\n\n- 为了更好地组织类，Java提供了包机制，用于区别类名的命名空间\n- 包语句的语法格式为\n\n```java\npackage pkg1[.pkg2[.pkg3...]];\n```\n\n- *** 一般利用公司域名倒置作为包名***\n- 为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能\n\n```java\nimport package1[.package2...].(classname|*);\n```\n\n## JavaDoc生成文档\n\nWin + r 后输入：\n\n```shell\njavadoc -encoding UTF-8 -charset UTF-8 ***.java\n```\n\n\n\n","slug":"Java基础语法04","published":1,"updated":"2023-07-31T12:40:09.569Z","layout":"post","link":"","_id":"clktr4qr5000izsa0dij0cv9l","content":"<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><ul>\n<li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</li>\n<li>包语句的语法格式为</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> pkg1[.pkg2[.pkg3...]];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>*** 一般利用公司域名倒置作为包名***</li>\n<li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaDoc生成文档\"><a href=\"#JavaDoc生成文档\" class=\"headerlink\" title=\"JavaDoc生成文档\"></a>JavaDoc生成文档</h2><p>Win + r 后输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc -encoding UTF-8 -charset UTF-8 ***.java</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"cover":"linear-gradient(to right,#ffecd2 0%,#fcb69f 100%)","excerpt":"","more":"<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><ul>\n<li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</li>\n<li>包语句的语法格式为</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> pkg1[.pkg2[.pkg3...]];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>*** 一般利用公司域名倒置作为包名***</li>\n<li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaDoc生成文档\"><a href=\"#JavaDoc生成文档\" class=\"headerlink\" title=\"JavaDoc生成文档\"></a>JavaDoc生成文档</h2><p>Win + r 后输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javadoc -encoding UTF-8 -charset UTF-8 ***.java</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Java异常01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg"],"abbrlink":"822ebc87","date":"2022-08-25T14:42:03.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 异常\n\n### 定义\n\n- 实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等\n- 软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？\n- 异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。\n- 异常发生在程序运行期间，他影响了程序正常的程序执行流程\n\n### 分类\n\n#### 简单分类\n\n需要掌握以下三种类型的异常\n\n1. 检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略\n2. 运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n3. **错误ERROR**：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。\n\n### 异常体系结构\n\n- Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类\n- 在Java API中已经定义了许多异常类，这些异常类分为两大类：**错误ERROR**和**异常Exception**\n\n![异常体系结构](https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png)\n\n#### ERROR\n\n- Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。\n- Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 **OutOfMemoryError**。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；\n- 还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。\n\n#### Exception\n\n- 在Exception分支中有一个重要的子类RuntimeException（运行时异常）\n  - ArrayIndexOutOfBoundsException（数组下标越界异常）\n  - NullPointerException（空指针异常）\n  - ArithmeticException（算数异常）\n  - MissingResourceException（丢失资源）\n  - ClassNotFoundException（找不到类）等异常\n- 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；\n- Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。\n\n","source":"_posts/Java异常01.md","raw":"---\ntitle: Java异常01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg'\ntags:\n  - Java\n  - Java异常\nabbrlink: 822ebc87\ndate: 2022-08-25 22:42:03\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 异常\n\n### 定义\n\n- 实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等\n- 软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？\n- 异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。\n- 异常发生在程序运行期间，他影响了程序正常的程序执行流程\n\n### 分类\n\n#### 简单分类\n\n需要掌握以下三种类型的异常\n\n1. 检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略\n2. 运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n3. **错误ERROR**：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。\n\n### 异常体系结构\n\n- Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类\n- 在Java API中已经定义了许多异常类，这些异常类分为两大类：**错误ERROR**和**异常Exception**\n\n![异常体系结构](https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png)\n\n#### ERROR\n\n- Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。\n- Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 **OutOfMemoryError**。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；\n- 还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。\n\n#### Exception\n\n- 在Exception分支中有一个重要的子类RuntimeException（运行时异常）\n  - ArrayIndexOutOfBoundsException（数组下标越界异常）\n  - NullPointerException（空指针异常）\n  - ArithmeticException（算数异常）\n  - MissingResourceException（丢失资源）\n  - ClassNotFoundException（找不到类）等异常\n- 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；\n- Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。\n\n","slug":"Java异常01","published":1,"updated":"2023-07-31T12:40:09.571Z","layout":"post","link":"","_id":"clktr4qr7000nzsa08zzybjla","content":"<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等</li>\n<li>软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？</li>\n<li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li>\n<li>异常发生在程序运行期间，他影响了程序正常的程序执行流程</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"简单分类\"><a href=\"#简单分类\" class=\"headerlink\" title=\"简单分类\"></a>简单分类</h4><p>需要掌握以下三种类型的异常</p>\n<ol>\n<li>检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>\n<li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误ERROR</strong>：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。</li>\n</ol>\n<h3 id=\"异常体系结构\"><a href=\"#异常体系结构\" class=\"headerlink\" title=\"异常体系结构\"></a>异常体系结构</h3><ul>\n<li>Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类</li>\n<li>在Java API中已经定义了许多异常类，这些异常类分为两大类：<strong>错误ERROR</strong>和<strong>异常Exception</strong></li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png\" alt=\"异常体系结构\"></p>\n<h4 id=\"ERROR\"><a href=\"#ERROR\" class=\"headerlink\" title=\"ERROR\"></a>ERROR</h4><ul>\n<li>Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li>\n<li>Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 <strong>OutOfMemoryError</strong>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li>\n<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li>\n</ul>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><ul>\n<li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul>\n<li>ArrayIndexOutOfBoundsException（数组下标越界异常）</li>\n<li>NullPointerException（空指针异常）</li>\n<li>ArithmeticException（算数异常）</li>\n<li>MissingResourceException（丢失资源）</li>\n<li>ClassNotFoundException（找不到类）等异常</li>\n</ul>\n</li>\n<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li>\n<li>Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(to top,#fad0c4 0%,#fad0c4 1%,#ffd1ff 100%)","excerpt":"","more":"<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等</li>\n<li>软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？</li>\n<li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li>\n<li>异常发生在程序运行期间，他影响了程序正常的程序执行流程</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"简单分类\"><a href=\"#简单分类\" class=\"headerlink\" title=\"简单分类\"></a>简单分类</h4><p>需要掌握以下三种类型的异常</p>\n<ol>\n<li>检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>\n<li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误ERROR</strong>：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。</li>\n</ol>\n<h3 id=\"异常体系结构\"><a href=\"#异常体系结构\" class=\"headerlink\" title=\"异常体系结构\"></a>异常体系结构</h3><ul>\n<li>Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类</li>\n<li>在Java API中已经定义了许多异常类，这些异常类分为两大类：<strong>错误ERROR</strong>和<strong>异常Exception</strong></li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png\" alt=\"异常体系结构\"></p>\n<h4 id=\"ERROR\"><a href=\"#ERROR\" class=\"headerlink\" title=\"ERROR\"></a>ERROR</h4><ul>\n<li>Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li>\n<li>Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 <strong>OutOfMemoryError</strong>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li>\n<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li>\n</ul>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><ul>\n<li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul>\n<li>ArrayIndexOutOfBoundsException（数组下标越界异常）</li>\n<li>NullPointerException（空指针异常）</li>\n<li>ArithmeticException（算数异常）</li>\n<li>MissingResourceException（丢失资源）</li>\n<li>ClassNotFoundException（找不到类）等异常</li>\n</ul>\n</li>\n<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li>\n<li>Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li>\n</ul>\n"},{"title":"Java异常02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg"],"abbrlink":"1b27ed3d","date":"2022-08-25T14:42:06.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 捕获异常\n\n### try catch关键字\n\n- try：监控类型\n- catch：想要捕获的异常，可以捕获异常\n- finally：可以处理善后工作，（可以不要finally）\n- 使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。\n\n```java\npackage com.xiheya.exception;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/14/ 9:47\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n\n        //假设要捕获多个异常：我们要从小到大的去捕获\n        // 快捷键 Ctrl + Alt + T  快速捕获异常。\n        try{                                    //try  监控类型\n            int a = 1;\n            int b = 0;\n            System.out.println(a/b);\n        }catch (ArithmeticException e){         //catch（想要捕获的异常类型0  捕获异常）\n            System.out.println(\"程序出现异常，b不能为0\");\n        }finally {                              //处理善后工作。可以不要finally，假设IO，资源 关闭\n            System.out.println(\"finally\");\n        }\n\n    }\n}\n```\n\n---\n\n### throw 和 throws关键字\n\n- throw关键字一般是在方法体内主动抛出异常\n- throws关键字一般是在方法名中抛出异常\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 0;\n        try {\n            new Test().test(1,0);\n        } catch (ArithmeticException e) {\n            e.printStackTrace();\n        } finally {\n        }\n    }\n\n    public void test (int a , int b)throws ArithmeticException{\n        if (b == 0){\n            throw new ArithmeticException();\n        }\n    }\n\n}\n```\n\n---\n\n## 自定义异常\n\n- 使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。\n- 在程序中使用自定义异常类，大体可以分为以下几个步骤：\n  - 创建自定义异常类。\n  - 在方法中通过throw关键字抛出异常对象。\n  - 如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。\n  - 再出现异常方法的调用者中捕获并处理异常。\n\n### 代码\n\n```java\npackage com.xiheya.exception.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 0:23\n * @Description\n */\npublic class Test {\n    static void test(int a) throws MyException {\n        if (a > 10){\n            throw new MyException(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            test(11);\n        } catch (MyException e) {\n            System.out.println(\"my exception\"+ e);\n        }\n    }\n}\n/*\npublic class MyException extends Exception{\n    private int detail;\n\n    public MyException(int a) {\n        this.detail = a;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyException{\" +\n                \"detail=\" + detail +\n                '}';\n    }\n}\n */\n```\n\n---\n\n### 运行结果\n\n![自定义异常](https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png)\n\n---\n\n### 经验总结\n\n- 处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理\n- 在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。\n- 对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。\n- 尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出\n- 具体如何处理异常，要根据不同的业务需求和异常类型去决定\n- 尽量添加finally语句块去释放占用的资源。\n","source":"_posts/Java异常02.md","raw":"---\ntitle: Java异常02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqyk36yj21kw0w0k97.jpg'\ntags:\n  - Java\n  - Java异常\nabbrlink: 1b27ed3d\ndate: 2022-08-25 22:42:06\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 捕获异常\n\n### try catch关键字\n\n- try：监控类型\n- catch：想要捕获的异常，可以捕获异常\n- finally：可以处理善后工作，（可以不要finally）\n- 使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。\n\n```java\npackage com.xiheya.exception;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/14/ 9:47\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n\n        //假设要捕获多个异常：我们要从小到大的去捕获\n        // 快捷键 Ctrl + Alt + T  快速捕获异常。\n        try{                                    //try  监控类型\n            int a = 1;\n            int b = 0;\n            System.out.println(a/b);\n        }catch (ArithmeticException e){         //catch（想要捕获的异常类型0  捕获异常）\n            System.out.println(\"程序出现异常，b不能为0\");\n        }finally {                              //处理善后工作。可以不要finally，假设IO，资源 关闭\n            System.out.println(\"finally\");\n        }\n\n    }\n}\n```\n\n---\n\n### throw 和 throws关键字\n\n- throw关键字一般是在方法体内主动抛出异常\n- throws关键字一般是在方法名中抛出异常\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 1;\n        int b = 0;\n        try {\n            new Test().test(1,0);\n        } catch (ArithmeticException e) {\n            e.printStackTrace();\n        } finally {\n        }\n    }\n\n    public void test (int a , int b)throws ArithmeticException{\n        if (b == 0){\n            throw new ArithmeticException();\n        }\n    }\n\n}\n```\n\n---\n\n## 自定义异常\n\n- 使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。\n- 在程序中使用自定义异常类，大体可以分为以下几个步骤：\n  - 创建自定义异常类。\n  - 在方法中通过throw关键字抛出异常对象。\n  - 如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。\n  - 再出现异常方法的调用者中捕获并处理异常。\n\n### 代码\n\n```java\npackage com.xiheya.exception.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 0:23\n * @Description\n */\npublic class Test {\n    static void test(int a) throws MyException {\n        if (a > 10){\n            throw new MyException(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            test(11);\n        } catch (MyException e) {\n            System.out.println(\"my exception\"+ e);\n        }\n    }\n}\n/*\npublic class MyException extends Exception{\n    private int detail;\n\n    public MyException(int a) {\n        this.detail = a;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyException{\" +\n                \"detail=\" + detail +\n                '}';\n    }\n}\n */\n```\n\n---\n\n### 运行结果\n\n![自定义异常](https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png)\n\n---\n\n### 经验总结\n\n- 处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理\n- 在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。\n- 对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。\n- 尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出\n- 具体如何处理异常，要根据不同的业务需求和异常类型去决定\n- 尽量添加finally语句块去释放占用的资源。\n","slug":"Java异常02","published":1,"updated":"2023-07-31T12:40:09.574Z","layout":"post","link":"","_id":"clktr4qr9000pzsa07tjk71dt","content":"<h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><h3 id=\"try-catch关键字\"><a href=\"#try-catch关键字\" class=\"headerlink\" title=\"try catch关键字\"></a>try catch关键字</h3><ul>\n<li>try：监控类型</li>\n<li>catch：想要捕获的异常，可以捕获异常</li>\n<li>finally：可以处理善后工作，（可以不要finally）</li>\n<li>使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/14/ 9:47</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//假设要捕获多个异常：我们要从小到大的去捕获</span></span><br><span class=\"line\">        <span class=\"comment\">// 快捷键 Ctrl + Alt + T  快速捕获异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;                                    <span class=\"comment\">//try  监控类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            System.out.println(a/b);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArithmeticException e)&#123;         <span class=\"comment\">//catch（想要捕获的异常类型0  捕获异常）</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;程序出现异常，b不能为0&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;                              <span class=\"comment\">//处理善后工作。可以不要finally，假设IO，资源 关闭</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;finally&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"throw-和-throws关键字\"><a href=\"#throw-和-throws关键字\" class=\"headerlink\" title=\"throw 和 throws关键字\"></a>throw 和 throws关键字</h3><ul>\n<li>throw关键字一般是在方法体内主动抛出异常</li>\n<li>throws关键字一般是在方法名中抛出异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>().test(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span> <span class=\"params\">(<span class=\"type\">int</span> a , <span class=\"type\">int</span> b)</span><span class=\"keyword\">throws</span> ArithmeticException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><ul>\n<li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li>\n<li>在程序中使用自定义异常类，大体可以分为以下几个步骤：<ul>\n<li>创建自定义异常类。</li>\n<li>在方法中通过throw关键字抛出异常对象。</li>\n<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。</li>\n<li>再出现异常方法的调用者中捕获并处理异常。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.exception.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/15/ 0:23</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> <span class=\"keyword\">throws</span> MyException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyException</span>(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            test(<span class=\"number\">11</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;my exception&quot;</span>+ e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class MyException extends Exception&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    private int detail;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public MyException(int a) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.detail = a;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">    public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;MyException&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">                &quot;detail=&quot; + detail +</span></span><br><span class=\"line\"><span class=\"comment\">                &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png\" alt=\"自定义异常\"></p>\n<hr>\n<h3 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h3><ul>\n<li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li>\n<li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。</li>\n<li>对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。</li>\n<li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li>\n<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>\n<li>尽量添加finally语句块去释放占用的资源。</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(to top,#a18cd1 0%,#fbc2eb 100%)","excerpt":"","more":"<h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><h3 id=\"try-catch关键字\"><a href=\"#try-catch关键字\" class=\"headerlink\" title=\"try catch关键字\"></a>try catch关键字</h3><ul>\n<li>try：监控类型</li>\n<li>catch：想要捕获的异常，可以捕获异常</li>\n<li>finally：可以处理善后工作，（可以不要finally）</li>\n<li>使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/14/ 9:47</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//假设要捕获多个异常：我们要从小到大的去捕获</span></span><br><span class=\"line\">        <span class=\"comment\">// 快捷键 Ctrl + Alt + T  快速捕获异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;                                    <span class=\"comment\">//try  监控类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            System.out.println(a/b);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArithmeticException e)&#123;         <span class=\"comment\">//catch（想要捕获的异常类型0  捕获异常）</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;程序出现异常，b不能为0&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;                              <span class=\"comment\">//处理善后工作。可以不要finally，假设IO，资源 关闭</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;finally&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"throw-和-throws关键字\"><a href=\"#throw-和-throws关键字\" class=\"headerlink\" title=\"throw 和 throws关键字\"></a>throw 和 throws关键字</h3><ul>\n<li>throw关键字一般是在方法体内主动抛出异常</li>\n<li>throws关键字一般是在方法名中抛出异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>().test(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span> <span class=\"params\">(<span class=\"type\">int</span> a , <span class=\"type\">int</span> b)</span><span class=\"keyword\">throws</span> ArithmeticException&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><ul>\n<li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li>\n<li>在程序中使用自定义异常类，大体可以分为以下几个步骤：<ul>\n<li>创建自定义异常类。</li>\n<li>在方法中通过throw关键字抛出异常对象。</li>\n<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。</li>\n<li>再出现异常方法的调用者中捕获并处理异常。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.exception.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/15/ 0:23</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> <span class=\"keyword\">throws</span> MyException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a &gt; <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyException</span>(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            test(<span class=\"number\">11</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MyException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;my exception&quot;</span>+ e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class MyException extends Exception&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    private int detail;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public MyException(int a) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.detail = a;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">    public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return &quot;MyException&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\">                &quot;detail=&quot; + detail +</span></span><br><span class=\"line\"><span class=\"comment\">                &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png\" alt=\"自定义异常\"></p>\n<hr>\n<h3 id=\"经验总结\"><a href=\"#经验总结\" class=\"headerlink\" title=\"经验总结\"></a>经验总结</h3><ul>\n<li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li>\n<li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。</li>\n<li>对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。</li>\n<li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li>\n<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>\n<li>尽量添加finally语句块去释放占用的资源。</li>\n</ul>\n"},{"title":"Java数组01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg"],"abbrlink":"5a3281f7","date":"2022-08-25T14:41:17.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n### 数组的定义\n\n- 数组是相同类型数据的有序集合\n- 数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。\n- 其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。\n\n---\n\n### 数组声明创建\n\n- 首先必须声明数组变量，才能再程序中使用数组。语法如下：\n\n```java\ndataType[] arrayRefVar;       //首选方法\ndataType arrayRefVar[];\t\t  //效果相同，但不是首选方法\n```\n\n- Java语言使用new操作符来创建数组，语法如下：\n\n```java\ndataType [] arrayRefVar = new dataType[arraySize];\n```\n\n- 数组的元素是通过索引访问的，数组索引从0开始。\n- 获取数组长度：arrays.length\n\n```\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:21\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        int[] nums;                     //1.声明一个数组\n        nums = new int[10];             //2.给数组开辟空间，创建一个数组\n\n        int[] numrs = new int[10];      //直接声明数组并创建\n\n        \n\n    }\n}\n```\n\n---\n\n### 数组的四个基本特点\n\n- 其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。\n- 其元素必须是相同类型，不允许出现混合类型。\n- 数组中的元素可以是任何数据类型，包括基本类型和引用类型。\n- 数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。\n- 数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，**数组对象本身是在堆中的**\n\n","source":"_posts/Java数组01.md","raw":"---\ntitle: Java数组01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg'\ntags:\n  - Java\n  - Java数组\nabbrlink: 5a3281f7\ndate: 2022-08-25 22:41:17\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n### 数组的定义\n\n- 数组是相同类型数据的有序集合\n- 数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。\n- 其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。\n\n---\n\n### 数组声明创建\n\n- 首先必须声明数组变量，才能再程序中使用数组。语法如下：\n\n```java\ndataType[] arrayRefVar;       //首选方法\ndataType arrayRefVar[];\t\t  //效果相同，但不是首选方法\n```\n\n- Java语言使用new操作符来创建数组，语法如下：\n\n```java\ndataType [] arrayRefVar = new dataType[arraySize];\n```\n\n- 数组的元素是通过索引访问的，数组索引从0开始。\n- 获取数组长度：arrays.length\n\n```\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:21\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        int[] nums;                     //1.声明一个数组\n        nums = new int[10];             //2.给数组开辟空间，创建一个数组\n\n        int[] numrs = new int[10];      //直接声明数组并创建\n\n        \n\n    }\n}\n```\n\n---\n\n### 数组的四个基本特点\n\n- 其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。\n- 其元素必须是相同类型，不允许出现混合类型。\n- 数组中的元素可以是任何数据类型，包括基本类型和引用类型。\n- 数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。\n- 数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，**数组对象本身是在堆中的**\n\n","slug":"Java数组01","published":1,"updated":"2023-07-31T12:40:09.577Z","layout":"post","link":"","_id":"clktr4qrb000uzsa0hb1da9du","content":"<h3 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h3><ul>\n<li>数组是相同类型数据的有序集合</li>\n<li>数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。</li>\n<li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。</li>\n</ul>\n<hr>\n<h3 id=\"数组声明创建\"><a href=\"#数组声明创建\" class=\"headerlink\" title=\"数组声明创建\"></a>数组声明创建</h3><ul>\n<li>首先必须声明数组变量，才能再程序中使用数组。语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar;       <span class=\"comment\">//首选方法</span></span><br><span class=\"line\">dataType arrayRefVar[];\t\t  <span class=\"comment\">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java语言使用new操作符来创建数组，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType [] arrayRefVar = <span class=\"keyword\">new</span> <span class=\"title class_\">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组的元素是通过索引访问的，数组索引从0开始。</li>\n<li>获取数组长度：arrays.length</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Author &#123;xiheya&#125;</span><br><span class=\"line\"> * @Date: 2022/03/12/ 10:21</span><br><span class=\"line\"> * @Description</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Demo01 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] nums;                     //1.声明一个数组</span><br><span class=\"line\">        nums = new int[10];             //2.给数组开辟空间，创建一个数组</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] numrs = new int[10];      //直接声明数组并创建</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"数组的四个基本特点\"><a href=\"#数组的四个基本特点\" class=\"headerlink\" title=\"数组的四个基本特点\"></a>数组的四个基本特点</h3><ul>\n<li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li>\n<li>其元素必须是相同类型，不允许出现混合类型。</li>\n<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>\n<li>数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。</li>\n<li>数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(to right,#ffecd2 0%,#fcb69f 100%)","excerpt":"","more":"<h3 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h3><ul>\n<li>数组是相同类型数据的有序集合</li>\n<li>数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。</li>\n<li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。</li>\n</ul>\n<hr>\n<h3 id=\"数组声明创建\"><a href=\"#数组声明创建\" class=\"headerlink\" title=\"数组声明创建\"></a>数组声明创建</h3><ul>\n<li>首先必须声明数组变量，才能再程序中使用数组。语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar;       <span class=\"comment\">//首选方法</span></span><br><span class=\"line\">dataType arrayRefVar[];\t\t  <span class=\"comment\">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java语言使用new操作符来创建数组，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType [] arrayRefVar = <span class=\"keyword\">new</span> <span class=\"title class_\">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组的元素是通过索引访问的，数组索引从0开始。</li>\n<li>获取数组长度：arrays.length</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Author &#123;xiheya&#125;</span><br><span class=\"line\"> * @Date: 2022/03/12/ 10:21</span><br><span class=\"line\"> * @Description</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class Demo01 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] nums;                     //1.声明一个数组</span><br><span class=\"line\">        nums = new int[10];             //2.给数组开辟空间，创建一个数组</span><br><span class=\"line\"></span><br><span class=\"line\">        int[] numrs = new int[10];      //直接声明数组并创建</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"数组的四个基本特点\"><a href=\"#数组的四个基本特点\" class=\"headerlink\" title=\"数组的四个基本特点\"></a>数组的四个基本特点</h3><ul>\n<li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li>\n<li>其元素必须是相同类型，不允许出现混合类型。</li>\n<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>\n<li>数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。</li>\n<li>数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li>\n</ul>\n"},{"title":"Java数组02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg"],"abbrlink":"c33bd04d","date":"2022-08-25T14:41:21.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 内存分析\n\n- Java内存分析\n\n![内存分析](https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png)\n\n**数组的声明在栈当中，创建空间及赋值操作在堆中。**\n\n![声明与创建](https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png)\n\n## 三种初始化\n\n### 静态初始化\n\n```java\nint[] a = {1,2,3};\nMan[] mans = {new Man(1,1),new Man(2,2)};\n```\n\n### 动态初始化\n\n```java\nint[] a = new int[5];\na[0] = 1;\na[1] = 2;\n……\n```\n\n### 数组的默认初始化\n\n- 数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:45\n * @Description\n */\npublic class ArrayDemo02 {\n    public static void main(String[] args) {\n        //静态初始化\n        int[] a = {1,2,3,4,5};\n        System.out.println(a[0]);\n        //动态初始化,包含默认初始化\n        int[] b = new int[2];\n        b[0] = 10;\n        System.out.println(b[0]);\n        System.out.println(b[1]);\n\n    }\n}\n\n```\n\n运行截图：\n\n![初始化](https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png)\n\n---\n\n### 数组边界\n\n- 下标的合法区间：[0,length-1],如果越界就会报错\n\n```java\npublic static void main(String[] args){\n\tint[] a = new int[2];\n\tSystem.out.println(a[2]);\n}\n```\n\n- **ArrayIndexOutOfBoundsException:数组下标越界异常**\n- 小结\n  - 数组是相同数据类型（数据类型可以为任意类型）的有序集合\n  - 数组也是对象，数组元素相当于对象的成员变量\n  - 数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds\n\n---\n\n## 数组的使用\n\n### 简单for循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n        \n    }\n}\n```\n\n---\n\n### For-Each循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i : a) {\n            System.out.println(i);\n        }\n    }\n}\n\n```\n\n---\n\n### 数组作方法入参\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n```\n\n---\n\n### 数组作返回值\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n\n```\n\n---\n\n运行结果：\n\n![数组操作](https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png)\n\n---\n\n## 多维数组\n\n- 多维数组可以看成是数组的数组~~（套娃）~~，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。\n- 二维数组\n\n语法：\n\n```java\nint a[][] = new int[2][5]  //声明并创建一个两行五列的数组\n```\n\n- 解析：二维数组a可以看一个两行五列的数组\n\n代码示例：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:43\n * @Description\n */\npublic class ArrayDemo04 {\n    public static void main(String[] args) {\n        /**\n         * array:\n         * 1 2\n         * 3 4\n         * 5 6\n         * 7 8\n         */\n        int[][] array = {{1,2}, {3,4},{5,6},{7,8}};\n        for (int i = 0; i < array.length; i++) {\n            System.out.println(\"\\nprint  array[\" + i + \"],nums\");\n            for (int j = 0; j < array[i].length; j++) {\n                System.out.print(array[i][j]+\"  \");\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![二维数组](https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png)\n\n---\n","source":"_posts/Java数组02.md","raw":"---\ntitle: Java数组02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg'\ntags:\n  - Java\n  - Java数组\nabbrlink: c33bd04d\ndate: 2022-08-25 22:41:21\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 内存分析\n\n- Java内存分析\n\n![内存分析](https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png)\n\n**数组的声明在栈当中，创建空间及赋值操作在堆中。**\n\n![声明与创建](https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png)\n\n## 三种初始化\n\n### 静态初始化\n\n```java\nint[] a = {1,2,3};\nMan[] mans = {new Man(1,1),new Man(2,2)};\n```\n\n### 动态初始化\n\n```java\nint[] a = new int[5];\na[0] = 1;\na[1] = 2;\n……\n```\n\n### 数组的默认初始化\n\n- 数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 10:45\n * @Description\n */\npublic class ArrayDemo02 {\n    public static void main(String[] args) {\n        //静态初始化\n        int[] a = {1,2,3,4,5};\n        System.out.println(a[0]);\n        //动态初始化,包含默认初始化\n        int[] b = new int[2];\n        b[0] = 10;\n        System.out.println(b[0]);\n        System.out.println(b[1]);\n\n    }\n}\n\n```\n\n运行截图：\n\n![初始化](https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png)\n\n---\n\n### 数组边界\n\n- 下标的合法区间：[0,length-1],如果越界就会报错\n\n```java\npublic static void main(String[] args){\n\tint[] a = new int[2];\n\tSystem.out.println(a[2]);\n}\n```\n\n- **ArrayIndexOutOfBoundsException:数组下标越界异常**\n- 小结\n  - 数组是相同数据类型（数据类型可以为任意类型）的有序集合\n  - 数组也是对象，数组元素相当于对象的成员变量\n  - 数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds\n\n---\n\n## 数组的使用\n\n### 简单for循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i = 0; i < a.length; i++) {\n            System.out.println(a[i]);\n        }\n        \n    }\n}\n```\n\n---\n\n### For-Each循环\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n        for (int i : a) {\n            System.out.println(i);\n        }\n    }\n}\n\n```\n\n---\n\n### 数组作方法入参\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n```\n\n---\n\n### 数组作返回值\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:12\n * @Description\n */\npublic class ArrayDemo03 {\n    public static void main(String[] args) {\n        int[] a = {1,2,3,4,5};\n//        for (int i = 0; i < a.length; i++) {\n//            System.out.println(a[i]);\n//        }\n//        for (int i : a) {\n//            System.out.println(i);\n//        }\n        printArray(a);\n        int[] result = reverseArray(a);\n        System.out.println(\"\\n=================\");\n        printArray(result);\n    }\n    public static void printArray(int[] a){         //将数组作为参数传入方法中，然后打印数组\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i] + \"  \");\n        }\n    }\n\n    public static int[] reverseArray(int[] a){      //将数组作为方法返回值，反转数组后返回结果数组。\n        int[] result = new int[a.length];\n        for (int i = 0,j = result.length-1 ; i < a.length; i++,j--) {\n            result[i] = a[j];\n        }\n        return result;\n    }\n}\n\n```\n\n---\n\n运行结果：\n\n![数组操作](https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png)\n\n---\n\n## 多维数组\n\n- 多维数组可以看成是数组的数组~~（套娃）~~，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。\n- 二维数组\n\n语法：\n\n```java\nint a[][] = new int[2][5]  //声明并创建一个两行五列的数组\n```\n\n- 解析：二维数组a可以看一个两行五列的数组\n\n代码示例：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 11:43\n * @Description\n */\npublic class ArrayDemo04 {\n    public static void main(String[] args) {\n        /**\n         * array:\n         * 1 2\n         * 3 4\n         * 5 6\n         * 7 8\n         */\n        int[][] array = {{1,2}, {3,4},{5,6},{7,8}};\n        for (int i = 0; i < array.length; i++) {\n            System.out.println(\"\\nprint  array[\" + i + \"],nums\");\n            for (int j = 0; j < array[i].length; j++) {\n                System.out.print(array[i][j]+\"  \");\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![二维数组](https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png)\n\n---\n","slug":"Java数组02","published":1,"updated":"2023-07-31T12:40:09.579Z","layout":"post","link":"","_id":"clktr4qrb000xzsa0d7kdaq5a","content":"<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>Java内存分析</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png\" alt=\"内存分析\"></p>\n<p><strong>数组的声明在栈当中，创建空间及赋值操作在堆中。</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png\" alt=\"声明与创建\"></p>\n<h2 id=\"三种初始化\"><a href=\"#三种初始化\" class=\"headerlink\" title=\"三种初始化\"></a>三种初始化</h2><h3 id=\"静态初始化\"><a href=\"#静态初始化\" class=\"headerlink\" title=\"静态初始化\"></a>静态初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">Man[] mans = &#123;<span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),<span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态初始化\"><a href=\"#动态初始化\" class=\"headerlink\" title=\"动态初始化\"></a>动态初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组的默认初始化\"><a href=\"#数组的默认初始化\" class=\"headerlink\" title=\"数组的默认初始化\"></a>数组的默认初始化</h3><ul>\n<li>数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 10:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        System.out.println(a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//动态初始化,包含默认初始化</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        b[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        System.out.println(b[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行截图：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png\" alt=\"初始化\"></p>\n<hr>\n<h3 id=\"数组边界\"><a href=\"#数组边界\" class=\"headerlink\" title=\"数组边界\"></a>数组边界</h3><ul>\n<li>下标的合法区间：[0,length-1],如果越界就会报错</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">\tSystem.out.println(a[<span class=\"number\">2</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ArrayIndexOutOfBoundsException:数组下标越界异常</strong></li>\n<li>小结<ul>\n<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>\n<li>数组也是对象，数组元素相当于对象的成员变量</li>\n<li>数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><h3 id=\"简单for循环\"><a href=\"#简单for循环\" class=\"headerlink\" title=\"简单for循环\"></a>简单for循环</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"For-Each循环\"><a href=\"#For-Each循环\" class=\"headerlink\" title=\"For-Each循环\"></a>For-Each循环</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : a) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"数组作方法入参\"><a href=\"#数组作方法入参\" class=\"headerlink\" title=\"数组作方法入参\"></a>数组作方法入参</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = 0; i &lt; a.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(a[i]);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        for (int i : a) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(i);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        printArray(a);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = reverseArray(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n=================&quot;</span>);</span><br><span class=\"line\">        printArray(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] a)</span>&#123;         <span class=\"comment\">//将数组作为参数传入方法中，然后打印数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(a[i] + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverseArray(<span class=\"type\">int</span>[] a)&#123;      <span class=\"comment\">//将数组作为方法返回值，反转数组后返回结果数组。</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,j = result.length-<span class=\"number\">1</span> ; i &lt; a.length; i++,j--) &#123;</span><br><span class=\"line\">            result[i] = a[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"数组作返回值\"><a href=\"#数组作返回值\" class=\"headerlink\" title=\"数组作返回值\"></a>数组作返回值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = 0; i &lt; a.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(a[i]);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        for (int i : a) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(i);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        printArray(a);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = reverseArray(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n=================&quot;</span>);</span><br><span class=\"line\">        printArray(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] a)</span>&#123;         <span class=\"comment\">//将数组作为参数传入方法中，然后打印数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(a[i] + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverseArray(<span class=\"type\">int</span>[] a)&#123;      <span class=\"comment\">//将数组作为方法返回值，反转数组后返回结果数组。</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,j = result.length-<span class=\"number\">1</span> ; i &lt; a.length; i++,j--) &#123;</span><br><span class=\"line\">            result[i] = a[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png\" alt=\"数组操作\"></p>\n<hr>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><ul>\n<li>多维数组可以看成是数组的数组<del>（套娃）</del>，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li>\n<li>二维数组</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">5</span>]  <span class=\"comment\">//声明并创建一个两行五列的数组</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解析：二维数组a可以看一个两行五列的数组</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:43</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * array:</span></span><br><span class=\"line\"><span class=\"comment\">         * 1 2</span></span><br><span class=\"line\"><span class=\"comment\">         * 3 4</span></span><br><span class=\"line\"><span class=\"comment\">         * 5 6</span></span><br><span class=\"line\"><span class=\"comment\">         * 7 8</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] array = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;,&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;\\nprint  array[&quot;</span> + i + <span class=\"string\">&quot;],nums&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(array[i][j]+<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png\" alt=\"二维数组\"></p>\n<hr>\n","site":{"data":{}},"cover":"linear-gradient(to top,#a8edea 0%,#fed6e3 100%)","excerpt":"","more":"<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><ul>\n<li>Java内存分析</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png\" alt=\"内存分析\"></p>\n<p><strong>数组的声明在栈当中，创建空间及赋值操作在堆中。</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png\" alt=\"声明与创建\"></p>\n<h2 id=\"三种初始化\"><a href=\"#三种初始化\" class=\"headerlink\" title=\"三种初始化\"></a>三种初始化</h2><h3 id=\"静态初始化\"><a href=\"#静态初始化\" class=\"headerlink\" title=\"静态初始化\"></a>静态初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">Man[] mans = &#123;<span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>),<span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态初始化\"><a href=\"#动态初始化\" class=\"headerlink\" title=\"动态初始化\"></a>动态初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组的默认初始化\"><a href=\"#数组的默认初始化\" class=\"headerlink\" title=\"数组的默认初始化\"></a>数组的默认初始化</h3><ul>\n<li>数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 10:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        System.out.println(a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//动态初始化,包含默认初始化</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        b[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        System.out.println(b[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行截图：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png\" alt=\"初始化\"></p>\n<hr>\n<h3 id=\"数组边界\"><a href=\"#数组边界\" class=\"headerlink\" title=\"数组边界\"></a>数组边界</h3><ul>\n<li>下标的合法区间：[0,length-1],如果越界就会报错</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">\tSystem.out.println(a[<span class=\"number\">2</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ArrayIndexOutOfBoundsException:数组下标越界异常</strong></li>\n<li>小结<ul>\n<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>\n<li>数组也是对象，数组元素相当于对象的成员变量</li>\n<li>数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><h3 id=\"简单for循环\"><a href=\"#简单for循环\" class=\"headerlink\" title=\"简单for循环\"></a>简单for循环</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"For-Each循环\"><a href=\"#For-Each循环\" class=\"headerlink\" title=\"For-Each循环\"></a>For-Each循环</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : a) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"数组作方法入参\"><a href=\"#数组作方法入参\" class=\"headerlink\" title=\"数组作方法入参\"></a>数组作方法入参</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = 0; i &lt; a.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(a[i]);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        for (int i : a) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(i);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        printArray(a);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = reverseArray(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n=================&quot;</span>);</span><br><span class=\"line\">        printArray(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] a)</span>&#123;         <span class=\"comment\">//将数组作为参数传入方法中，然后打印数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(a[i] + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverseArray(<span class=\"type\">int</span>[] a)&#123;      <span class=\"comment\">//将数组作为方法返回值，反转数组后返回结果数组。</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,j = result.length-<span class=\"number\">1</span> ; i &lt; a.length; i++,j--) &#123;</span><br><span class=\"line\">            result[i] = a[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"数组作返回值\"><a href=\"#数组作返回值\" class=\"headerlink\" title=\"数组作返回值\"></a>数组作返回值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//        for (int i = 0; i &lt; a.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(a[i]);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        for (int i : a) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(i);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        printArray(a);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = reverseArray(a);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n=================&quot;</span>);</span><br><span class=\"line\">        printArray(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] a)</span>&#123;         <span class=\"comment\">//将数组作为参数传入方法中，然后打印数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(a[i] + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverseArray(<span class=\"type\">int</span>[] a)&#123;      <span class=\"comment\">//将数组作为方法返回值，反转数组后返回结果数组。</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[a.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,j = result.length-<span class=\"number\">1</span> ; i &lt; a.length; i++,j--) &#123;</span><br><span class=\"line\">            result[i] = a[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png\" alt=\"数组操作\"></p>\n<hr>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><ul>\n<li>多维数组可以看成是数组的数组<del>（套娃）</del>，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li>\n<li>二维数组</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">5</span>]  <span class=\"comment\">//声明并创建一个两行五列的数组</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解析：二维数组a可以看一个两行五列的数组</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 11:43</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * array:</span></span><br><span class=\"line\"><span class=\"comment\">         * 1 2</span></span><br><span class=\"line\"><span class=\"comment\">         * 3 4</span></span><br><span class=\"line\"><span class=\"comment\">         * 5 6</span></span><br><span class=\"line\"><span class=\"comment\">         * 7 8</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] array = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;,&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>&#125;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;\\nprint  array[&quot;</span> + i + <span class=\"string\">&quot;],nums&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(array[i][j]+<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png\" alt=\"二维数组\"></p>\n<hr>\n"},{"title":"Java数组03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg"],"abbrlink":"b43ce0db","date":"2022-08-25T14:41:24.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Arrays类\n\n- 数组的工具类java.util.Arrays\n\n- 由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。\n\n- **查看JDK帮助文档**\n\n- Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用**（注意：是”不用”而不是“不能”）**\n\n- 具有以下常用功能：\n\n  - 给数组赋值：通过fill方法。\n  - 对数组排序：通过sort方法，按升序\n  - 比较数组：通过equals方法比较数组中元素值是否相等\n  - 查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作\n\n  代码实现：\n\n  ```java\n  package com.xiheya.Array;\n  \n  import java.util.Arrays;\n  \n  /**\n   * @Author {xiheya}\n   * @Date: 2022/03/12/ 16:19\n   * @Description\n   */\n  public class ArrayDemo05 {\n      public static void main(String[] args) {\n          int[] a = {1,2,3,4,65,98,54,21,0};\n          System.out.println(Arrays.toString(a));         //Arrays 里的toString方法\n          Arrays.sort(a);                                 //sort，将a中的数据从小到大排列\n          System.out.println(Arrays.toString(a));         \n      }\n  }\n  \n  ```\n\n  运行结果：\n\n  ![方法调用](https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png)\n\n---\n\n### 冒泡排序\n\n- 冒泡排序是最出名的算法之一，总共有八大排序！\n\n```java\npackage com.xiheya.Array;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:32\n * @Description\n */\npublic class ArrayDemo06 {\n    public static void main(String[] args) {\n        int[] a = {1,6,5,3,2,9};\n        System.out.println(Arrays.toString(a));\n        sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n\n    //冒泡排序：\n    // 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。\n    // 2.每一次排序都会产生一个最大或最小的数字；\n    // 3.下一轮则可以少一次排序\n    // 4.依次循环直到结束\n    public static void sort(int[] a){\n        int temp = 0;\n        for (int i = 0; i < a.length-1; i++) {\n            for (int j = 0; j < a.length-i-1; j++){\n                if (a[j] > a[j+1]){\n                    temp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png)\n\n---\n\n### 稀疏数组\n\n- 需求：编写五子棋游戏中，有存盘退出和续上盘的功能。\n- 介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。\n- 稀疏数组的处理方式是：\n  - 记录数组一共有几行几列，有多少个不同值\n  - 把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模\n- 稀疏数组与原数组图示：\n\n![原数组与稀疏数组](https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png)\n\n---\n\n**设计一个程序实现 稀疏数组与普通数组 的互换**\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 17:39\n * @Description\n */\npublic class ArrayDemo07 {\n    public static void main(String[] args) {\n        int[][] array = new int[11][11];\n        array[2][3] = 2;\n        array[1][4] = 1;\n        printArray(array);                                  //打印原数组\n        int[][] array1 = toArray(array);                    //将原数组转换为稀疏数组\n        printArray(array1);                                 //打印转换好的稀疏数组\n        int[][] restore = restore(array1);                  //将稀疏数组再转换为普通数组\n        printArray(restore);                                //打印转换完成后的数组\n    }\n\n    public static void printArray(int[][] array){           //通过for_each遍历方法，打印数组\n        System.out.println(\"start to print the array:\");\n        for (int[] ints : array) {                          //for_each遍历外层\n            System.out.print(\"[\");\n            for (int anInt : ints) {                        //for_each遍历内层\n                System.out.print(anInt + \"\\t\");\n            }\n            System.out.print(\"]\");\n            System.out.println();\n        }\n    }\n\n    public static int[][] toArray(int[][] a){               //将普通数组转换为稀疏数组的方法\n        int sum = 0;                                        //用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];\n        for (int[] ints : a) {\n            for (int anInt : ints) {\n                if (anInt != 0){\n                    sum++;\n                }\n            }\n        }\n        int[][] temp = new int[sum+1][3];                   //统计完sum声明并创建稀疏数组temp\n        temp[0][0] = a.length;                              //temp[0][0] 存放行数\n        temp[0][1] = a[0].length;                           //temp[0][1] 存放列数\n        temp[0][2] = sum;                                   //temp[0][2] 存放数组内有效数据个数\n        int tempnum = 1;                                    //稀疏数组行号tempnum\n        for (int i = 0; i < a.length; i++) {                //遍历普通数组，当遍历到普通数字内有效数字时\n            for (int j = 0; j < a[i].length; j++) {\n                if (a[i][j] != 0){\n                    temp[tempnum][0] = i;                   //将原普通数组行号赋值给temp[tempnum][0]\n                    temp[tempnum][1] = j;                   //将原普通数组行号赋值给temp[tempnum][1]\n                    temp[tempnum][2] = a[i][j];             //将原普通数组第i行j列的数据 赋值给temp[tempnum][2]\n                    tempnum++;                              //装载完成后，稀疏数组行号 tempnum  自增1\n                }\n            }\n        }\n    return temp;\n    }\n\n    public static int[][] restore (int[][] array){              //将稀疏数组还原为普通数组的方法\n        int[][] result = new int[array[0][0]][array[0][1]];     //声明并创建还原后的数组：result\n        for (int i = 1; i < array.length ; i++) {               //遍历稀疏数组，取出原普通数组的行号和列号\n            result[array[i][0]][array[i][1]] = array[i][2];     //array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。\n        }\n\n\n    return result;                                              //返回还原完成后的普通数组。\n    }\n\n}\n\n```\n\n运行结果：\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png)\n","source":"_posts/Java数组03.md","raw":"---\ntitle: Java数组03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqzns32j21kw0w01ao.jpg'\ntags:\n  - Java\n  - Java数组\nabbrlink: b43ce0db\ndate: 2022-08-25 22:41:24\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## Arrays类\n\n- 数组的工具类java.util.Arrays\n\n- 由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。\n\n- **查看JDK帮助文档**\n\n- Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用**（注意：是”不用”而不是“不能”）**\n\n- 具有以下常用功能：\n\n  - 给数组赋值：通过fill方法。\n  - 对数组排序：通过sort方法，按升序\n  - 比较数组：通过equals方法比较数组中元素值是否相等\n  - 查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作\n\n  代码实现：\n\n  ```java\n  package com.xiheya.Array;\n  \n  import java.util.Arrays;\n  \n  /**\n   * @Author {xiheya}\n   * @Date: 2022/03/12/ 16:19\n   * @Description\n   */\n  public class ArrayDemo05 {\n      public static void main(String[] args) {\n          int[] a = {1,2,3,4,65,98,54,21,0};\n          System.out.println(Arrays.toString(a));         //Arrays 里的toString方法\n          Arrays.sort(a);                                 //sort，将a中的数据从小到大排列\n          System.out.println(Arrays.toString(a));         \n      }\n  }\n  \n  ```\n\n  运行结果：\n\n  ![方法调用](https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png)\n\n---\n\n### 冒泡排序\n\n- 冒泡排序是最出名的算法之一，总共有八大排序！\n\n```java\npackage com.xiheya.Array;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 16:32\n * @Description\n */\npublic class ArrayDemo06 {\n    public static void main(String[] args) {\n        int[] a = {1,6,5,3,2,9};\n        System.out.println(Arrays.toString(a));\n        sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n\n    //冒泡排序：\n    // 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。\n    // 2.每一次排序都会产生一个最大或最小的数字；\n    // 3.下一轮则可以少一次排序\n    // 4.依次循环直到结束\n    public static void sort(int[] a){\n        int temp = 0;\n        for (int i = 0; i < a.length-1; i++) {\n            for (int j = 0; j < a.length-i-1; j++){\n                if (a[j] > a[j+1]){\n                    temp = a[j];\n                    a[j] = a[j+1];\n                    a[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n\n```\n\n运行结果：\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png)\n\n---\n\n### 稀疏数组\n\n- 需求：编写五子棋游戏中，有存盘退出和续上盘的功能。\n- 介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。\n- 稀疏数组的处理方式是：\n  - 记录数组一共有几行几列，有多少个不同值\n  - 把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模\n- 稀疏数组与原数组图示：\n\n![原数组与稀疏数组](https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png)\n\n---\n\n**设计一个程序实现 稀疏数组与普通数组 的互换**\n\n代码：\n\n```java\npackage com.xiheya.Array;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 17:39\n * @Description\n */\npublic class ArrayDemo07 {\n    public static void main(String[] args) {\n        int[][] array = new int[11][11];\n        array[2][3] = 2;\n        array[1][4] = 1;\n        printArray(array);                                  //打印原数组\n        int[][] array1 = toArray(array);                    //将原数组转换为稀疏数组\n        printArray(array1);                                 //打印转换好的稀疏数组\n        int[][] restore = restore(array1);                  //将稀疏数组再转换为普通数组\n        printArray(restore);                                //打印转换完成后的数组\n    }\n\n    public static void printArray(int[][] array){           //通过for_each遍历方法，打印数组\n        System.out.println(\"start to print the array:\");\n        for (int[] ints : array) {                          //for_each遍历外层\n            System.out.print(\"[\");\n            for (int anInt : ints) {                        //for_each遍历内层\n                System.out.print(anInt + \"\\t\");\n            }\n            System.out.print(\"]\");\n            System.out.println();\n        }\n    }\n\n    public static int[][] toArray(int[][] a){               //将普通数组转换为稀疏数组的方法\n        int sum = 0;                                        //用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];\n        for (int[] ints : a) {\n            for (int anInt : ints) {\n                if (anInt != 0){\n                    sum++;\n                }\n            }\n        }\n        int[][] temp = new int[sum+1][3];                   //统计完sum声明并创建稀疏数组temp\n        temp[0][0] = a.length;                              //temp[0][0] 存放行数\n        temp[0][1] = a[0].length;                           //temp[0][1] 存放列数\n        temp[0][2] = sum;                                   //temp[0][2] 存放数组内有效数据个数\n        int tempnum = 1;                                    //稀疏数组行号tempnum\n        for (int i = 0; i < a.length; i++) {                //遍历普通数组，当遍历到普通数字内有效数字时\n            for (int j = 0; j < a[i].length; j++) {\n                if (a[i][j] != 0){\n                    temp[tempnum][0] = i;                   //将原普通数组行号赋值给temp[tempnum][0]\n                    temp[tempnum][1] = j;                   //将原普通数组行号赋值给temp[tempnum][1]\n                    temp[tempnum][2] = a[i][j];             //将原普通数组第i行j列的数据 赋值给temp[tempnum][2]\n                    tempnum++;                              //装载完成后，稀疏数组行号 tempnum  自增1\n                }\n            }\n        }\n    return temp;\n    }\n\n    public static int[][] restore (int[][] array){              //将稀疏数组还原为普通数组的方法\n        int[][] result = new int[array[0][0]][array[0][1]];     //声明并创建还原后的数组：result\n        for (int i = 1; i < array.length ; i++) {               //遍历稀疏数组，取出原普通数组的行号和列号\n            result[array[i][0]][array[i][1]] = array[i][2];     //array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。\n        }\n\n\n    return result;                                              //返回还原完成后的普通数组。\n    }\n\n}\n\n```\n\n运行结果：\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png)\n","slug":"Java数组03","published":1,"updated":"2023-07-31T12:40:09.582Z","layout":"post","link":"","_id":"clktr4qrc0012zsa0gqisg4fb","content":"<h2 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h2><ul>\n<li><p>数组的工具类java.util.Arrays</p>\n</li>\n<li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。</p>\n</li>\n<li><p><strong>查看JDK帮助文档</strong></p>\n</li>\n<li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用<strong>（注意：是”不用”而不是“不能”）</strong></p>\n</li>\n<li><p>具有以下常用功能：</p>\n<ul>\n<li>给数组赋值：通过fill方法。</li>\n<li>对数组排序：通过sort方法，按升序</li>\n<li>比较数组：通过equals方法比较数组中元素值是否相等</li>\n<li>查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 16:19</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">65</span>,<span class=\"number\">98</span>,<span class=\"number\">54</span>,<span class=\"number\">21</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));         <span class=\"comment\">//Arrays 里的toString方法</span></span><br><span class=\"line\">        Arrays.sort(a);                                 <span class=\"comment\">//sort，将a中的数据从小到大排列</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(a));         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png\" alt=\"方法调用\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li>冒泡排序是最出名的算法之一，总共有八大排序！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 16:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo06</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">        sort(a);</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//冒泡排序：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.每一次排序都会产生一个最大或最小的数字；</span></span><br><span class=\"line\">    <span class=\"comment\">// 3.下一轮则可以少一次排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 4.依次循环直到结束</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] a)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; a.length-i-<span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[j] &gt; a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    temp = a[j];</span><br><span class=\"line\">                    a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h3 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h3><ul>\n<li>需求：编写五子棋游戏中，有存盘退出和续上盘的功能。</li>\n<li>介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li>\n<li>稀疏数组的处理方式是：<ul>\n<li>记录数组一共有几行几列，有多少个不同值</li>\n<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>\n</ul>\n</li>\n<li>稀疏数组与原数组图示：</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png\" alt=\"原数组与稀疏数组\"></p>\n<hr>\n<p><strong>设计一个程序实现 稀疏数组与普通数组 的互换</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 17:39</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo07</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] array = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">11</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\">        array[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        array[<span class=\"number\">1</span>][<span class=\"number\">4</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        printArray(array);                                  <span class=\"comment\">//打印原数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] array1 = toArray(array);                    <span class=\"comment\">//将原数组转换为稀疏数组</span></span><br><span class=\"line\">        printArray(array1);                                 <span class=\"comment\">//打印转换好的稀疏数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] restore = restore(array1);                  <span class=\"comment\">//将稀疏数组再转换为普通数组</span></span><br><span class=\"line\">        printArray(restore);                                <span class=\"comment\">//打印转换完成后的数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] array)</span>&#123;           <span class=\"comment\">//通过for_each遍历方法，打印数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;start to print the array:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] ints : array) &#123;                          <span class=\"comment\">//for_each遍历外层</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> anInt : ints) &#123;                        <span class=\"comment\">//for_each遍历内层</span></span><br><span class=\"line\">                System.out.print(anInt + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[][] toArray(<span class=\"type\">int</span>[][] a)&#123;               <span class=\"comment\">//将普通数组转换为稀疏数组的方法</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;                                        <span class=\"comment\">//用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] ints : a) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> anInt : ints) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (anInt != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    sum++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[sum+<span class=\"number\">1</span>][<span class=\"number\">3</span>];                   <span class=\"comment\">//统计完sum声明并创建稀疏数组temp</span></span><br><span class=\"line\">        temp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a.length;                              <span class=\"comment\">//temp[0][0] 存放行数</span></span><br><span class=\"line\">        temp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = a[<span class=\"number\">0</span>].length;                           <span class=\"comment\">//temp[0][1] 存放列数</span></span><br><span class=\"line\">        temp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = sum;                                   <span class=\"comment\">//temp[0][2] 存放数组内有效数据个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tempnum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;                                    <span class=\"comment\">//稀疏数组行号tempnum</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;                <span class=\"comment\">//遍历普通数组，当遍历到普通数字内有效数字时</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i][j] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    temp[tempnum][<span class=\"number\">0</span>] = i;                   <span class=\"comment\">//将原普通数组行号赋值给temp[tempnum][0]</span></span><br><span class=\"line\">                    temp[tempnum][<span class=\"number\">1</span>] = j;                   <span class=\"comment\">//将原普通数组行号赋值给temp[tempnum][1]</span></span><br><span class=\"line\">                    temp[tempnum][<span class=\"number\">2</span>] = a[i][j];             <span class=\"comment\">//将原普通数组第i行j列的数据 赋值给temp[tempnum][2]</span></span><br><span class=\"line\">                    tempnum++;                              <span class=\"comment\">//装载完成后，稀疏数组行号 tempnum  自增1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[][] restore (<span class=\"type\">int</span>[][] array)&#123;              <span class=\"comment\">//将稀疏数组还原为普通数组的方法</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[array[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][array[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];     <span class=\"comment\">//声明并创建还原后的数组：result</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length ; i++) &#123;               <span class=\"comment\">//遍历稀疏数组，取出原普通数组的行号和列号</span></span><br><span class=\"line\">            result[array[i][<span class=\"number\">0</span>]][array[i][<span class=\"number\">1</span>]] = array[i][<span class=\"number\">2</span>];     <span class=\"comment\">//array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;                                              <span class=\"comment\">//返回还原完成后的普通数组。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png\" alt=\"输出结果\"></p>\n","site":{"data":{}},"cover":"linear-gradient(to top,#a18cd1 0%,#fbc2eb 100%)","excerpt":"","more":"<h2 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h2><ul>\n<li><p>数组的工具类java.util.Arrays</p>\n</li>\n<li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。</p>\n</li>\n<li><p><strong>查看JDK帮助文档</strong></p>\n</li>\n<li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用<strong>（注意：是”不用”而不是“不能”）</strong></p>\n</li>\n<li><p>具有以下常用功能：</p>\n<ul>\n<li>给数组赋值：通过fill方法。</li>\n<li>对数组排序：通过sort方法，按升序</li>\n<li>比较数组：通过equals方法比较数组中元素值是否相等</li>\n<li>查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 16:19</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo05</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">65</span>,<span class=\"number\">98</span>,<span class=\"number\">54</span>,<span class=\"number\">21</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));         <span class=\"comment\">//Arrays 里的toString方法</span></span><br><span class=\"line\">        Arrays.sort(a);                                 <span class=\"comment\">//sort，将a中的数据从小到大排列</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(a));         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png\" alt=\"方法调用\"></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li>冒泡排序是最出名的算法之一，总共有八大排序！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 16:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo06</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] a = &#123;<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">        sort(a);</span><br><span class=\"line\">        System.out.println(Arrays.toString(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//冒泡排序：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.每一次排序都会产生一个最大或最小的数字；</span></span><br><span class=\"line\">    <span class=\"comment\">// 3.下一轮则可以少一次排序</span></span><br><span class=\"line\">    <span class=\"comment\">// 4.依次循环直到结束</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] a)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; a.length-i-<span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[j] &gt; a[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    temp = a[j];</span><br><span class=\"line\">                    a[j] = a[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    a[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h3 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h3><ul>\n<li>需求：编写五子棋游戏中，有存盘退出和续上盘的功能。</li>\n<li>介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li>\n<li>稀疏数组的处理方式是：<ul>\n<li>记录数组一共有几行几列，有多少个不同值</li>\n<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>\n</ul>\n</li>\n<li>稀疏数组与原数组图示：</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png\" alt=\"原数组与稀疏数组\"></p>\n<hr>\n<p><strong>设计一个程序实现 稀疏数组与普通数组 的互换</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 17:39</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayDemo07</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] array = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">11</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\">        array[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        array[<span class=\"number\">1</span>][<span class=\"number\">4</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        printArray(array);                                  <span class=\"comment\">//打印原数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] array1 = toArray(array);                    <span class=\"comment\">//将原数组转换为稀疏数组</span></span><br><span class=\"line\">        printArray(array1);                                 <span class=\"comment\">//打印转换好的稀疏数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] restore = restore(array1);                  <span class=\"comment\">//将稀疏数组再转换为普通数组</span></span><br><span class=\"line\">        printArray(restore);                                <span class=\"comment\">//打印转换完成后的数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[][] array)</span>&#123;           <span class=\"comment\">//通过for_each遍历方法，打印数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;start to print the array:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] ints : array) &#123;                          <span class=\"comment\">//for_each遍历外层</span></span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> anInt : ints) &#123;                        <span class=\"comment\">//for_each遍历内层</span></span><br><span class=\"line\">                System.out.print(anInt + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[][] toArray(<span class=\"type\">int</span>[][] a)&#123;               <span class=\"comment\">//将普通数组转换为稀疏数组的方法</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;                                        <span class=\"comment\">//用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] ints : a) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> anInt : ints) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (anInt != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    sum++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[sum+<span class=\"number\">1</span>][<span class=\"number\">3</span>];                   <span class=\"comment\">//统计完sum声明并创建稀疏数组temp</span></span><br><span class=\"line\">        temp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = a.length;                              <span class=\"comment\">//temp[0][0] 存放行数</span></span><br><span class=\"line\">        temp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = a[<span class=\"number\">0</span>].length;                           <span class=\"comment\">//temp[0][1] 存放列数</span></span><br><span class=\"line\">        temp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = sum;                                   <span class=\"comment\">//temp[0][2] 存放数组内有效数据个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tempnum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;                                    <span class=\"comment\">//稀疏数组行号tempnum</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;                <span class=\"comment\">//遍历普通数组，当遍历到普通数字内有效数字时</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i][j] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    temp[tempnum][<span class=\"number\">0</span>] = i;                   <span class=\"comment\">//将原普通数组行号赋值给temp[tempnum][0]</span></span><br><span class=\"line\">                    temp[tempnum][<span class=\"number\">1</span>] = j;                   <span class=\"comment\">//将原普通数组行号赋值给temp[tempnum][1]</span></span><br><span class=\"line\">                    temp[tempnum][<span class=\"number\">2</span>] = a[i][j];             <span class=\"comment\">//将原普通数组第i行j列的数据 赋值给temp[tempnum][2]</span></span><br><span class=\"line\">                    tempnum++;                              <span class=\"comment\">//装载完成后，稀疏数组行号 tempnum  自增1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[][] restore (<span class=\"type\">int</span>[][] array)&#123;              <span class=\"comment\">//将稀疏数组还原为普通数组的方法</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[array[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][array[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];     <span class=\"comment\">//声明并创建还原后的数组：result</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length ; i++) &#123;               <span class=\"comment\">//遍历稀疏数组，取出原普通数组的行号和列号</span></span><br><span class=\"line\">            result[array[i][<span class=\"number\">0</span>]][array[i][<span class=\"number\">1</span>]] = array[i][<span class=\"number\">2</span>];     <span class=\"comment\">//array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;                                              <span class=\"comment\">//返回还原完成后的普通数组。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png\" alt=\"输出结果\"></p>\n"},{"title":"Java方法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqhqfnzj21kw0w0ao2.jpg"],"abbrlink":"7a37a823","date":"2022-08-25T14:41:09.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 方法\n\n### 定义\n\n- Java方法是语句的集合，它们在一起执行一个功能\n  - 方法是解决一类问题的步骤的有序组合\n  - 方法包含于类或对象当中\n  - 方法在程序中被创建，在其他地方被引用\n- 设计方法的原则\n  - 方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的**原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展**\n- 方法的命名规则：**首字母小写，后面是驼峰命名规则。**\n\n**设计一个方法：实现简单的两个数的加法：**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 16:23\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        System.out.println(add(1,2));\t\t //方法的调用\n    }\n    public static int add(int a , int b){    //方法的定义\n        return a+b;\n    }\n}\n\n```\n\n- Java的方法类似于其他语言的函数，是一段**用来完成特定功能的代码片段**，一般情况下，定义一个方法包含以下语句：\n- **方法包含一个方法头和一个方法体**下面是一个方法的所有部分\n  - **修饰符**：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型\n  - **返回值类型**：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。\n  - **方法名**：是方法的实际名称。方法名和参数表共同构成方法签名。\n  - **参数类型**： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数\n    - 形式参数：在方法被调用时用于接收外界输入的数据。\n    - 实参：调用方法时实际传给方法的数据。\n  - **方法体**：方法体包含具体的语句，定义该方法功能\n\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){\n\t……\n\t方法体\n\t……\n\treturn 返回值;\n}\n```\n\n**小tips**：值传递和应用传递 **Java为值传递**\n\n- 值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；\n- 引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；\n\n---\n\n### 方法的重载\n\n- 重载就是在一个类中，**有相同的函数名称**，但形参不同的函数。\n- 方法重载的规则\n  - 方法名称必须相同\n  - 参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）\n  - 方法的返回类型可以相同也可以不相同\n  - **仅仅返回类型不同不足以成为方法的重载。**\n- 实现理论：\n  - 方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。\n\n**实现max()函数的重载**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 21:56\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int max = max(10,20);\n        System.out.println(max);\n        double dmax = max(20.0,30.0);\n        System.out.println(dmax);\n    }\n    public static int max(int a, int b){\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n    public static double max(double a, double b){         // 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n}\n\n```\n\n运行结果：\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png)\n\n---\n\n### 命令行传参\n\n- 有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现\n- 通过在运行时使用命令行给main()函数来实现。\n\n### 可变参数\n\n- JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。\n- 在方法声明中，在指定参数类型后加一个省略号（……）\n- 一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明\n\n**设计一个程序计算出可变字长数组的最大值**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:16\n * @Description\n */\npublic class Demo04 {       //可变参数\n    public static void main(String[] args) {\n        double [] test1 = {10,20,30,40};\n        Demo04 demo04 = new Demo04();\n        demo04.printMax(10.0,20.0,30.0);\n        demo04.printMax(test1);\n    }\n\n    public static void printMax(double... i){\n        if (i.length == 0){\n            System.out.println(\"error!!the length is 0\");\n            return;\n        }\n        double result = i[0];\n        for (int j = 0; j < i.length; j++) {\n            if (i[j] > result){\n                result = i[j];\n            }\n        }\n        System.out.println(\"the max number is \" + result);\n    }\n}\n\n```\n\n运行结果：\n\n![可变参数](https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png)\n\n---\n\n### 递归\n\n- A方法可以调用B方法，这是很常见的。\n- 而递归就是：**A方法调用A方法，自己调用自己**\n- 利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合\n- 递归结构包括两个部分：\n  - **递归头：什么时候不调用自身方法。如果没有头，会陷入死循环**\n  - **递归体：什么时候需要调用自身方法。**\n\n**设计一个程序计算递归**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:37\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(function(3));        //打印出6的阶乘\n    }\n    public static int function(int n){              //计算阶乘的方法\n        if (n == 1){\n            return 1;\n        }else {\n            return n*function(n-1);\n        }\n    }\n}\n\n```\n\n![递归](https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png)\n\n---\n\n","source":"_posts/Java方法.md","raw":"---\ntitle: Java方法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqhqfnzj21kw0w0ao2.jpg'\ntags:\n  - Java\n  - Java方法\nabbrlink: 7a37a823\ndate: 2022-08-25 22:41:09\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 方法\n\n### 定义\n\n- Java方法是语句的集合，它们在一起执行一个功能\n  - 方法是解决一类问题的步骤的有序组合\n  - 方法包含于类或对象当中\n  - 方法在程序中被创建，在其他地方被引用\n- 设计方法的原则\n  - 方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的**原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展**\n- 方法的命名规则：**首字母小写，后面是驼峰命名规则。**\n\n**设计一个方法：实现简单的两个数的加法：**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 16:23\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        System.out.println(add(1,2));\t\t //方法的调用\n    }\n    public static int add(int a , int b){    //方法的定义\n        return a+b;\n    }\n}\n\n```\n\n- Java的方法类似于其他语言的函数，是一段**用来完成特定功能的代码片段**，一般情况下，定义一个方法包含以下语句：\n- **方法包含一个方法头和一个方法体**下面是一个方法的所有部分\n  - **修饰符**：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型\n  - **返回值类型**：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。\n  - **方法名**：是方法的实际名称。方法名和参数表共同构成方法签名。\n  - **参数类型**： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数\n    - 形式参数：在方法被调用时用于接收外界输入的数据。\n    - 实参：调用方法时实际传给方法的数据。\n  - **方法体**：方法体包含具体的语句，定义该方法功能\n\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){\n\t……\n\t方法体\n\t……\n\treturn 返回值;\n}\n```\n\n**小tips**：值传递和应用传递 **Java为值传递**\n\n- 值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；\n- 引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；\n\n---\n\n### 方法的重载\n\n- 重载就是在一个类中，**有相同的函数名称**，但形参不同的函数。\n- 方法重载的规则\n  - 方法名称必须相同\n  - 参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）\n  - 方法的返回类型可以相同也可以不相同\n  - **仅仅返回类型不同不足以成为方法的重载。**\n- 实现理论：\n  - 方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。\n\n**实现max()函数的重载**\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 21:56\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int max = max(10,20);\n        System.out.println(max);\n        double dmax = max(20.0,30.0);\n        System.out.println(dmax);\n    }\n    public static int max(int a, int b){\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n    public static double max(double a, double b){         // 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载\n        return a > b ? a : b;                             //三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。\n    }\n}\n\n```\n\n运行结果：\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png)\n\n---\n\n### 命令行传参\n\n- 有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现\n- 通过在运行时使用命令行给main()函数来实现。\n\n### 可变参数\n\n- JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。\n- 在方法声明中，在指定参数类型后加一个省略号（……）\n- 一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明\n\n**设计一个程序计算出可变字长数组的最大值**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:16\n * @Description\n */\npublic class Demo04 {       //可变参数\n    public static void main(String[] args) {\n        double [] test1 = {10,20,30,40};\n        Demo04 demo04 = new Demo04();\n        demo04.printMax(10.0,20.0,30.0);\n        demo04.printMax(test1);\n    }\n\n    public static void printMax(double... i){\n        if (i.length == 0){\n            System.out.println(\"error!!the length is 0\");\n            return;\n        }\n        double result = i[0];\n        for (int j = 0; j < i.length; j++) {\n            if (i[j] > result){\n                result = i[j];\n            }\n        }\n        System.out.println(\"the max number is \" + result);\n    }\n}\n\n```\n\n运行结果：\n\n![可变参数](https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png)\n\n---\n\n### 递归\n\n- A方法可以调用B方法，这是很常见的。\n- 而递归就是：**A方法调用A方法，自己调用自己**\n- 利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合\n- 递归结构包括两个部分：\n  - **递归头：什么时候不调用自身方法。如果没有头，会陷入死循环**\n  - **递归体：什么时候需要调用自身方法。**\n\n**设计一个程序计算递归**\n\n代码：\n\n```java\npackage com.xiheya.Method;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 22:37\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(function(3));        //打印出6的阶乘\n    }\n    public static int function(int n){              //计算阶乘的方法\n        if (n == 1){\n            return 1;\n        }else {\n            return n*function(n-1);\n        }\n    }\n}\n\n```\n\n![递归](https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png)\n\n---\n\n","slug":"Java方法","published":1,"updated":"2023-07-31T12:40:09.584Z","layout":"post","link":"","_id":"clktr4qrd0014zsa0d2tm0p37","content":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Java方法是语句的集合，它们在一起执行一个功能<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象当中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n</li>\n<li>设计方法的原则<ul>\n<li>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<strong>原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展</strong></li>\n</ul>\n</li>\n<li>方法的命名规则：<strong>首字母小写，后面是驼峰命名规则。</strong></li>\n</ul>\n<p><strong>设计一个方法：实现简单的两个数的加法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 16:23</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));\t\t <span class=\"comment\">//方法的调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a , <span class=\"type\">int</span> b)</span>&#123;    <span class=\"comment\">//方法的定义</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java的方法类似于其他语言的函数，是一段<strong>用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语句：</li>\n<li><strong>方法包含一个方法头和一个方法体</strong>下面是一个方法的所有部分<ul>\n<li><strong>修饰符</strong>：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型</li>\n<li><strong>返回值类型</strong>：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li>\n<li><strong>方法名</strong>：是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li><strong>参数类型</strong>： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数<ul>\n<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>\n<li>实参：调用方法时实际传给方法的数据。</li>\n</ul>\n</li>\n<li><strong>方法体</strong>：方法体包含具体的语句，定义该方法功能</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t方法体</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>小tips</strong>：值传递和应用传递 <strong>Java为值传递</strong></p>\n<ul>\n<li>值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；</li>\n<li>引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；</li>\n</ul>\n<hr>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><ul>\n<li>重载就是在一个类中，<strong>有相同的函数名称</strong>，但形参不同的函数。</li>\n<li>方法重载的规则<ul>\n<li>方法名称必须相同</li>\n<li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）</li>\n<li>方法的返回类型可以相同也可以不相同</li>\n<li><strong>仅仅返回类型不同不足以成为方法的重载。</strong></li>\n</ul>\n</li>\n<li>实现理论：<ul>\n<li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li>\n</ul>\n</li>\n</ul>\n<p><strong>实现max()函数的重载</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 21:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> max(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        System.out.println(max);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">dmax</span> <span class=\"operator\">=</span> max(<span class=\"number\">20.0</span>,<span class=\"number\">30.0</span>);</span><br><span class=\"line\">        System.out.println(dmax);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &gt; b ? a : b;                             <span class=\"comment\">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">double</span> a, <span class=\"type\">double</span> b)</span>&#123;         <span class=\"comment\">// 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &gt; b ? a : b;                             <span class=\"comment\">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h3><ul>\n<li>有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现</li>\n<li>通过在运行时使用命令行给main()函数来实现。</li>\n</ul>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><ul>\n<li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li>\n<li>在方法声明中，在指定参数类型后加一个省略号（……）</li>\n<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</li>\n</ul>\n<p><strong>设计一个程序计算出可变字长数组的最大值</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 22:16</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo04</span> &#123;       <span class=\"comment\">//可变参数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> [] test1 = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">Demo04</span> <span class=\"variable\">demo04</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo04</span>();</span><br><span class=\"line\">        demo04.printMax(<span class=\"number\">10.0</span>,<span class=\"number\">20.0</span>,<span class=\"number\">30.0</span>);</span><br><span class=\"line\">        demo04.printMax(test1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">(<span class=\"type\">double</span>... i)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;error!!the length is 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; i.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i[j] &gt; result)&#123;</span><br><span class=\"line\">                result = i[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the max number is &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png\" alt=\"可变参数\"></p>\n<hr>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><ul>\n<li>A方法可以调用B方法，这是很常见的。</li>\n<li>而递归就是：<strong>A方法调用A方法，自己调用自己</strong></li>\n<li>利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合</li>\n<li>递归结构包括两个部分：<ul>\n<li><strong>递归头：什么时候不调用自身方法。如果没有头，会陷入死循环</strong></li>\n<li><strong>递归体：什么时候需要调用自身方法。</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序计算递归</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 22:37</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(function(<span class=\"number\">3</span>));        <span class=\"comment\">//打印出6的阶乘</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">function</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;              <span class=\"comment\">//计算阶乘的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n*function(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png\" alt=\"递归\"></p>\n<hr>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#e0c3fc 0%,#8ec5fc 100%)","excerpt":"","more":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Java方法是语句的集合，它们在一起执行一个功能<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象当中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n</li>\n<li>设计方法的原则<ul>\n<li>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<strong>原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展</strong></li>\n</ul>\n</li>\n<li>方法的命名规则：<strong>首字母小写，后面是驼峰命名规则。</strong></li>\n</ul>\n<p><strong>设计一个方法：实现简单的两个数的加法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 16:23</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>));\t\t <span class=\"comment\">//方法的调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a , <span class=\"type\">int</span> b)</span>&#123;    <span class=\"comment\">//方法的定义</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java的方法类似于其他语言的函数，是一段<strong>用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语句：</li>\n<li><strong>方法包含一个方法头和一个方法体</strong>下面是一个方法的所有部分<ul>\n<li><strong>修饰符</strong>：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型</li>\n<li><strong>返回值类型</strong>：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li>\n<li><strong>方法名</strong>：是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li><strong>参数类型</strong>： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数<ul>\n<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>\n<li>实参：调用方法时实际传给方法的数据。</li>\n</ul>\n</li>\n<li><strong>方法体</strong>：方法体包含具体的语句，定义该方法功能</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t方法体</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>小tips</strong>：值传递和应用传递 <strong>Java为值传递</strong></p>\n<ul>\n<li>值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；</li>\n<li>引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；</li>\n</ul>\n<hr>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><ul>\n<li>重载就是在一个类中，<strong>有相同的函数名称</strong>，但形参不同的函数。</li>\n<li>方法重载的规则<ul>\n<li>方法名称必须相同</li>\n<li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）</li>\n<li>方法的返回类型可以相同也可以不相同</li>\n<li><strong>仅仅返回类型不同不足以成为方法的重载。</strong></li>\n</ul>\n</li>\n<li>实现理论：<ul>\n<li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li>\n</ul>\n</li>\n</ul>\n<p><strong>实现max()函数的重载</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 21:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> max(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        System.out.println(max);</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">dmax</span> <span class=\"operator\">=</span> max(<span class=\"number\">20.0</span>,<span class=\"number\">30.0</span>);</span><br><span class=\"line\">        System.out.println(dmax);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &gt; b ? a : b;                             <span class=\"comment\">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">double</span> a, <span class=\"type\">double</span> b)</span>&#123;         <span class=\"comment\">// 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a &gt; b ? a : b;                             <span class=\"comment\">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png\" alt=\"运行结果\"></p>\n<hr>\n<h3 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h3><ul>\n<li>有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现</li>\n<li>通过在运行时使用命令行给main()函数来实现。</li>\n</ul>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><ul>\n<li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li>\n<li>在方法声明中，在指定参数类型后加一个省略号（……）</li>\n<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</li>\n</ul>\n<p><strong>设计一个程序计算出可变字长数组的最大值</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 22:16</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo04</span> &#123;       <span class=\"comment\">//可变参数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> [] test1 = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">Demo04</span> <span class=\"variable\">demo04</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo04</span>();</span><br><span class=\"line\">        demo04.printMax(<span class=\"number\">10.0</span>,<span class=\"number\">20.0</span>,<span class=\"number\">30.0</span>);</span><br><span class=\"line\">        demo04.printMax(test1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">(<span class=\"type\">double</span>... i)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;error!!the length is 0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; i.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i[j] &gt; result)&#123;</span><br><span class=\"line\">                result = i[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the max number is &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png\" alt=\"可变参数\"></p>\n<hr>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><ul>\n<li>A方法可以调用B方法，这是很常见的。</li>\n<li>而递归就是：<strong>A方法调用A方法，自己调用自己</strong></li>\n<li>利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合</li>\n<li>递归结构包括两个部分：<ul>\n<li><strong>递归头：什么时候不调用自身方法。如果没有头，会陷入死循环</strong></li>\n<li><strong>递归体：什么时候需要调用自身方法。</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序计算递归</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 22:37</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(function(<span class=\"number\">3</span>));        <span class=\"comment\">//打印出6的阶乘</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">function</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;              <span class=\"comment\">//计算阶乘的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n*function(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png\" alt=\"递归\"></p>\n<hr>\n"},{"title":"Java流程控制01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg"],"abbrlink":"b4cc4d5c","date":"2022-08-25T14:38:42.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 用户交互Scanner\n\n- Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，**我们可以通过Scanner类来获取用户的输入**\n- 基本语法\n\n```java\nScanner s = new Scanner(System.in);\n```\n\n- 通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.\n\n---\n\n1. 使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以空格键或回车键结束\");\n        if (scanner.hasNext()){\n            String str = scanner.next();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n2. 使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        if (scanner.hasNextLine()){\n            String str = scanner.nextLine();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n3. 不判断是否还有输入的数据；直接nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        String str = scanner.nextLine();\n        System.out.println(\"从键盘上输入字符为：\" + str);\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n**IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!**\n\n### next()与nextLine()方法的区别\n\n- Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。\n\n![API](https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png)\n\n- next()方法是读取到空白符就结束了\n  1. 一定要读取到有效字符后才可以结束输入\n  2. 对输入有效字符之前遇到的空白，next()方法会自动将其去掉。\n  3. 只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符\n  4. **next**()不能得到带有空格的字符串\n- nextLine()方法是读取到了回车就结束即：\\t.\n  1. 以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符\n  2. 可以获得空白符\n\n---\n\n### Scanner中的其他方法\n\n1. **hasNextInt()** 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:31\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int i = 0;\n        float f = 0f;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意整数\");\n        if (scanner.hasNextInt()){\n            i = scanner.nextInt();\n            System.out.println(\"输入的整数为\" + i);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是整数\");\n        }\n\n\n        System.out.println(\"请从键盘上输入任意小数\");\n        if (scanner.hasNextFloat()){\n            f = scanner.nextFloat();\n            System.out.println(\"输入的小数为\" + f);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是小数\");\n        }\n        scanner.close();\n\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png)\n\n---\n\n2. **hasNextdouble()方法**：判断接下来输入的是不是double型；\n\n学到这里可以做一个简易的数字求和程序，代码如下：\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:52\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        double total = 0;\n        int m = 0;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意个数，以字符型数据结束\");\n        while (scanner.hasNextDouble()){\n\n            double x = scanner.nextDouble();\n            total = total + x;\n            m++;\n            System.out.println(\"您输入了\" + m + \"个数，和为：\" + total);\n\n        }\n        double v = total / m;\n        System.out.println(\"您结束了输入，此次您输入了\" + m + \"个数，和为：\" + total + \"这些数的平均值为：\" + v);\n        scanner.close();\n    }\n}\n\n```\n\n运行结果如下：\n\n![求和程序](https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png)\n\n","source":"_posts/Java流程控制01.md","raw":"---\ntitle: Java流程控制01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg'\ntags:\n  - Java\n  - Java流程控制\nabbrlink: b4cc4d5c\ndate: 2022-08-25 22:38:42\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 用户交互Scanner\n\n- Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，**我们可以通过Scanner类来获取用户的输入**\n- 基本语法\n\n```java\nScanner s = new Scanner(System.in);\n```\n\n- 通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.\n\n---\n\n1. 使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以空格键或回车键结束\");\n        if (scanner.hasNext()){\n            String str = scanner.next();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n2. 使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        if (scanner.hasNextLine()){\n            String str = scanner.nextLine();\n            System.out.println(\"从键盘上输入字符为：\" + str);\n        }\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n3. 不判断是否还有输入的数据；直接nextLine()方法接收输入的字符\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/07/ 23:32\n * @Description\n */\npublic class Demo01 {\n    public static void main(String[] args) {\n        //声明一个Scanner类型的变量\n        Scanner scanner = new Scanner(System.in);\n        //声明一个String类型的变量\n        //String str;\n        //判断是否还有输入的数据\n        System.out.println(\"请从键盘上输入任意字符，以回车键结束\");\n        String str = scanner.nextLine();\n        System.out.println(\"从键盘上输入字符为：\" + str);\n        //用完一定要记得关闭！！！\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n**IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!**\n\n### next()与nextLine()方法的区别\n\n- Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。\n\n![API](https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png)\n\n- next()方法是读取到空白符就结束了\n  1. 一定要读取到有效字符后才可以结束输入\n  2. 对输入有效字符之前遇到的空白，next()方法会自动将其去掉。\n  3. 只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符\n  4. **next**()不能得到带有空格的字符串\n- nextLine()方法是读取到了回车就结束即：\\t.\n  1. 以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符\n  2. 可以获得空白符\n\n---\n\n### Scanner中的其他方法\n\n1. **hasNextInt()** 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:31\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        int i = 0;\n        float f = 0f;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意整数\");\n        if (scanner.hasNextInt()){\n            i = scanner.nextInt();\n            System.out.println(\"输入的整数为\" + i);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是整数\");\n        }\n\n\n        System.out.println(\"请从键盘上输入任意小数\");\n        if (scanner.hasNextFloat()){\n            f = scanner.nextFloat();\n            System.out.println(\"输入的小数为\" + f);\n        }\n        else {\n            System.out.println(\"Error！您输入的不是小数\");\n        }\n        scanner.close();\n\n    }\n}\n\n```\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png)\n\n---\n\n2. **hasNextdouble()方法**：判断接下来输入的是不是double型；\n\n学到这里可以做一个简易的数字求和程序，代码如下：\n\n```java\npackage com.xiheya.Scanner;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 12:52\n * @Description\n */\npublic class Demo03 {\n    public static void main(String[] args) {\n        double total = 0;\n        int m = 0;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请从键盘上输入任意个数，以字符型数据结束\");\n        while (scanner.hasNextDouble()){\n\n            double x = scanner.nextDouble();\n            total = total + x;\n            m++;\n            System.out.println(\"您输入了\" + m + \"个数，和为：\" + total);\n\n        }\n        double v = total / m;\n        System.out.println(\"您结束了输入，此次您输入了\" + m + \"个数，和为：\" + total + \"这些数的平均值为：\" + v);\n        scanner.close();\n    }\n}\n\n```\n\n运行结果如下：\n\n![求和程序](https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png)\n\n","slug":"Java流程控制01","published":1,"updated":"2023-07-31T12:40:09.586Z","layout":"post","link":"","_id":"clktr4qrd0016zsa0gb2w9mpa","content":"<h2 id=\"用户交互Scanner\"><a href=\"#用户交互Scanner\" class=\"headerlink\" title=\"用户交互Scanner\"></a>用户交互Scanner</h2><ul>\n<li>Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，<strong>我们可以通过Scanner类来获取用户的输入</strong></li>\n<li>基本语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.</li>\n</ul>\n<hr>\n<ol>\n<li>使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//声明一个Scanner类型的变量</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//声明一个String类型的变量</span></span><br><span class=\"line\">        <span class=\"comment\">//String str;</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有输入的数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意字符，以空格键或回车键结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scanner.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//用完一定要记得关闭！！！</span></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol start=\"2\">\n<li>使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//声明一个Scanner类型的变量</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//声明一个String类型的变量</span></span><br><span class=\"line\">        <span class=\"comment\">//String str;</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有输入的数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意字符，以回车键结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNextLine())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//用完一定要记得关闭！！！</span></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol start=\"3\">\n<li>不判断是否还有输入的数据；直接nextLine()方法接收输入的字符</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//声明一个Scanner类型的变量</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//声明一个String类型的变量</span></span><br><span class=\"line\">        <span class=\"comment\">//String str;</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有输入的数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意字符，以回车键结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class=\"line\">        <span class=\"comment\">//用完一定要记得关闭！！！</span></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!</strong></p>\n<h3 id=\"next-与nextLine-方法的区别\"><a href=\"#next-与nextLine-方法的区别\" class=\"headerlink\" title=\"next()与nextLine()方法的区别\"></a>next()与nextLine()方法的区别</h3><ul>\n<li>Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png\" alt=\"API\"></p>\n<ul>\n<li>next()方法是读取到空白符就结束了<ol>\n<li>一定要读取到有效字符后才可以结束输入</li>\n<li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li>\n<li>只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符</li>\n<li><strong>next</strong>()不能得到带有空格的字符串</li>\n</ol>\n</li>\n<li>nextLine()方法是读取到了回车就结束即：\\t.<ol>\n<li>以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符</li>\n<li>可以获得空白符</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"Scanner中的其他方法\"><a href=\"#Scanner中的其他方法\" class=\"headerlink\" title=\"Scanner中的其他方法\"></a>Scanner中的其他方法</h3><ol>\n<li><strong>hasNextInt()</strong> 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 12:31</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0f</span>;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意整数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNextInt())&#123;</span><br><span class=\"line\">            i = scanner.nextInt();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的整数为&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error！您输入的不是整数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意小数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNextFloat())&#123;</span><br><span class=\"line\">            f = scanner.nextFloat();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的小数为&quot;</span> + f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error！您输入的不是小数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png\" alt=\"输出结果\"></p>\n<hr>\n<ol start=\"2\">\n<li><strong>hasNextdouble()方法</strong>：判断接下来输入的是不是double型；</li>\n</ol>\n<p>学到这里可以做一个简易的数字求和程序，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 12:52</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意个数，以字符型数据结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNextDouble())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> scanner.nextDouble();</span><br><span class=\"line\">            total = total + x;</span><br><span class=\"line\">            m++;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您输入了&quot;</span> + m + <span class=\"string\">&quot;个数，和为：&quot;</span> + total);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> total / m;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;您结束了输入，此次您输入了&quot;</span> + m + <span class=\"string\">&quot;个数，和为：&quot;</span> + total + <span class=\"string\">&quot;这些数的平均值为：&quot;</span> + v);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png\" alt=\"求和程序\"></p>\n","site":{"data":{}},"cover":"linear-gradient(to top,#ebc0fd 0%,#d9ded8 100%)","excerpt":"","more":"<h2 id=\"用户交互Scanner\"><a href=\"#用户交互Scanner\" class=\"headerlink\" title=\"用户交互Scanner\"></a>用户交互Scanner</h2><ul>\n<li>Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，<strong>我们可以通过Scanner类来获取用户的输入</strong></li>\n<li>基本语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.</li>\n</ul>\n<hr>\n<ol>\n<li>使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//声明一个Scanner类型的变量</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//声明一个String类型的变量</span></span><br><span class=\"line\">        <span class=\"comment\">//String str;</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有输入的数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意字符，以空格键或回车键结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scanner.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//用完一定要记得关闭！！！</span></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol start=\"2\">\n<li>使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//声明一个Scanner类型的变量</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//声明一个String类型的变量</span></span><br><span class=\"line\">        <span class=\"comment\">//String str;</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有输入的数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意字符，以回车键结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNextLine())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//用完一定要记得关闭！！！</span></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol start=\"3\">\n<li>不判断是否还有输入的数据；直接nextLine()方法接收输入的字符</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//声明一个Scanner类型的变量</span></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//声明一个String类型的变量</span></span><br><span class=\"line\">        <span class=\"comment\">//String str;</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有输入的数据</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意字符，以回车键结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class=\"line\">        <span class=\"comment\">//用完一定要记得关闭！！！</span></span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!</strong></p>\n<h3 id=\"next-与nextLine-方法的区别\"><a href=\"#next-与nextLine-方法的区别\" class=\"headerlink\" title=\"next()与nextLine()方法的区别\"></a>next()与nextLine()方法的区别</h3><ul>\n<li>Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png\" alt=\"API\"></p>\n<ul>\n<li>next()方法是读取到空白符就结束了<ol>\n<li>一定要读取到有效字符后才可以结束输入</li>\n<li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li>\n<li>只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符</li>\n<li><strong>next</strong>()不能得到带有空格的字符串</li>\n</ol>\n</li>\n<li>nextLine()方法是读取到了回车就结束即：\\t.<ol>\n<li>以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符</li>\n<li>可以获得空白符</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"Scanner中的其他方法\"><a href=\"#Scanner中的其他方法\" class=\"headerlink\" title=\"Scanner中的其他方法\"></a>Scanner中的其他方法</h3><ol>\n<li><strong>hasNextInt()</strong> 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 12:31</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0f</span>;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意整数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNextInt())&#123;</span><br><span class=\"line\">            i = scanner.nextInt();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的整数为&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error！您输入的不是整数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意小数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.hasNextFloat())&#123;</span><br><span class=\"line\">            f = scanner.nextFloat();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的小数为&quot;</span> + f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error！您输入的不是小数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png\" alt=\"输出结果\"></p>\n<hr>\n<ol start=\"2\">\n<li><strong>hasNextdouble()方法</strong>：判断接下来输入的是不是double型；</li>\n</ol>\n<p>学到这里可以做一个简易的数字求和程序，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 12:52</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请从键盘上输入任意个数，以字符型数据结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNextDouble())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> scanner.nextDouble();</span><br><span class=\"line\">            total = total + x;</span><br><span class=\"line\">            m++;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您输入了&quot;</span> + m + <span class=\"string\">&quot;个数，和为：&quot;</span> + total);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> total / m;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;您结束了输入，此次您输入了&quot;</span> + m + <span class=\"string\">&quot;个数，和为：&quot;</span> + total + <span class=\"string\">&quot;这些数的平均值为：&quot;</span> + v);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png\" alt=\"求和程序\"></p>\n"},{"title":"Java流程控制02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg"],"abbrlink":"2dc51ce6","date":"2022-08-25T14:40:57.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 顺序结构\n\n- Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行\n- 顺序结构是最简单的算法结构\n- 语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，**他是一个任何算法都离不开的一种基本算法结构**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:12\n * @Description\n */\npublic class orderDemo01 {\n    public static void main(String[] args) {\n        System.out.println(\"helloworld1\");\n        System.out.println(\"helloworld2\");\n        System.out.println(\"helloworld3\");\n        System.out.println(\"helloworld4\");\n    }\n}\n\n```\n\n因为Java的基本结构是顺序结构，所以会依次输出helloworld1234\n\n**输出结果：**\n\n![顺序结构](https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png)\n\n---\n\n## 选择结构\n\n### if单选择结构\n\n- 很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句\n- 语法：\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}\n```\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:17\n * @Description\n */\npublic class ifDemo01 {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        if (s.equals(\"helloworld\")){\n            System.out.println(\"helloworld\");\n        }\n        System.out.println(\"End\");\n        scanner.close();\n    }\n}\n\n```\n\n因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End\n\n**输出结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png)\n\n---\n\n### if双选择结构\n\n语法和单选择结构类似\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}else{\n    //如果布尔表达式为false就执行这里面的语句\n}\n```\n\n\n\n**设计一个程序，输入分数大于60时输出及格，否则输出不及格**\n\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo02 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        if (scanner.nextInt() > 60){\n            System.out.println(\"您的成绩及格\");\n        } else{\n            System.out.println(\"您的成绩不及格\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### if多选择结构\n\n语法：\n\n```java\nif(布尔表达式 1){\n    //如果布尔表达式1为true就执行这里面的语句\n}else if(布尔表达式 2){\n    //如果布尔表达式2为true就执行这里面的语句\n}else if(布尔表达式 3){\n    //如果布尔表达式3为true就执行这里面的语句\n}else{\n    //如果以上布尔表达式为false就执行这里面的语句\n}\n```\n\n**设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo03 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        int score = scanner.nextInt();\n        if (score == 100){\n            System.out.println(\"满分！\");\n        }else if(score < 100 && score >= 90){\n            System.out.println(\"A!\");\n        }else if(score < 90 && score >= 80){\n            System.out.println(\"B!\");\n        }else if(score < 80 && score >= 70){\n            System.out.println(\"C!\");\n        }else if(score < 70 && score >= 60){\n            System.out.println(\"D!\");\n        }\n        else if(score < 60 && score >= 0){\n            System.out.println(\"您的成绩不及格\");\n        } else\n        {\n            System.out.println(\"成绩不合法\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### 嵌套的if结构\n\n- 使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else\n- 语法\n\n```java\nif(布尔表达式1){\n    //如果布尔表达式为true就执行\n    if(布尔表达式2){\n        //如果布尔表达式2为true就执行\n    }\n}\n```\n\n----\n\n### switch多选择结构\n\n- 多选择结构还有一个实现方式就是switch case语句\n- switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支\n- 语法：\n\n```java\nswitch(expression){\n    case value :\n        //语句\n        break;//可选\n    case value :\n        //语句\n        break;//可选\n    //你可以有任意数量的case语句\n        default : //可选\n        //语句\n}\n```\n\n- switch 语句中的变量类型可以是\n  - byte 、short、int或者char\n  - **从Java SE 7开始 switch就支持字符串String型了**\n  - 同时case标签必须为字符串常量或字面量\n\n**设计一个程序，根据ABCD输出不同的评价。**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:09\n * @Description\n */\npublic class SwitchDemo01 {\n    public static void main(String[] args) {\n        char grade = 'G';\n        switch (grade){\n            case 'A' :\n                System.out.println(\"优秀\");\n                break;\n            case 'B' :\n                System.out.println(\"良好\");\n                break;\n            case 'C' :\n                System.out.println(\"及格\");\n                break;\n            case 'D' :\n                System.out.println(\"再接再厉\");\n                break;\n            case 'E' :\n                System.out.println(\"挂科\");\n                break;\n            default:\n                System.out.println(\"未知成绩\");\n        }\n    }\n}\n\n```\n\n---\n\n**Java SE 7 新特性**\n\n代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:20\n * @Description\n */\npublic class SwitchDemo02 {\n    public static void main(String[] args) {\n        String name = \"hahaha\";\n        switch (name){\n            case \"xiheya\":\n                System.out.println(\"right\");\n                break;\n            case \"hahaha\":\n                System.out.println(\"error\");\n                break;\n            default:\n                System.out.println(\"???\");\n        }\n    }\n}\n\n```\n\n","source":"_posts/Java流程控制02.md","raw":"---\ntitle: Java流程控制02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg'\ntags:\n  - Java\n  - Java流程控制\nabbrlink: 2dc51ce6\ndate: 2022-08-25 22:40:57\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 顺序结构\n\n- Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行\n- 顺序结构是最简单的算法结构\n- 语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，**他是一个任何算法都离不开的一种基本算法结构**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:12\n * @Description\n */\npublic class orderDemo01 {\n    public static void main(String[] args) {\n        System.out.println(\"helloworld1\");\n        System.out.println(\"helloworld2\");\n        System.out.println(\"helloworld3\");\n        System.out.println(\"helloworld4\");\n    }\n}\n\n```\n\n因为Java的基本结构是顺序结构，所以会依次输出helloworld1234\n\n**输出结果：**\n\n![顺序结构](https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png)\n\n---\n\n## 选择结构\n\n### if单选择结构\n\n- 很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句\n- 语法：\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}\n```\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:17\n * @Description\n */\npublic class ifDemo01 {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        if (s.equals(\"helloworld\")){\n            System.out.println(\"helloworld\");\n        }\n        System.out.println(\"End\");\n        scanner.close();\n    }\n}\n\n```\n\n因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End\n\n**输出结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png)\n\n---\n\n### if双选择结构\n\n语法和单选择结构类似\n\n```java\nif(布尔表达式){\n    //如果布尔表达式为true就执行这里面的语句\n}else{\n    //如果布尔表达式为false就执行这里面的语句\n}\n```\n\n\n\n**设计一个程序，输入分数大于60时输出及格，否则输出不及格**\n\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo02 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        if (scanner.nextInt() > 60){\n            System.out.println(\"您的成绩及格\");\n        } else{\n            System.out.println(\"您的成绩不及格\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### if多选择结构\n\n语法：\n\n```java\nif(布尔表达式 1){\n    //如果布尔表达式1为true就执行这里面的语句\n}else if(布尔表达式 2){\n    //如果布尔表达式2为true就执行这里面的语句\n}else if(布尔表达式 3){\n    //如果布尔表达式3为true就执行这里面的语句\n}else{\n    //如果以上布尔表达式为false就执行这里面的语句\n}\n```\n\n**设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\nimport java.util.Scanner;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 16:27\n * @Description\n */\npublic class IfDemo03 {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"请输入成绩\");\n        int score = scanner.nextInt();\n        if (score == 100){\n            System.out.println(\"满分！\");\n        }else if(score < 100 && score >= 90){\n            System.out.println(\"A!\");\n        }else if(score < 90 && score >= 80){\n            System.out.println(\"B!\");\n        }else if(score < 80 && score >= 70){\n            System.out.println(\"C!\");\n        }else if(score < 70 && score >= 60){\n            System.out.println(\"D!\");\n        }\n        else if(score < 60 && score >= 0){\n            System.out.println(\"您的成绩不及格\");\n        } else\n        {\n            System.out.println(\"成绩不合法\");\n        }\n        scanner.close();\n    }\n}\n\n```\n\n---\n\n### 嵌套的if结构\n\n- 使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else\n- 语法\n\n```java\nif(布尔表达式1){\n    //如果布尔表达式为true就执行\n    if(布尔表达式2){\n        //如果布尔表达式2为true就执行\n    }\n}\n```\n\n----\n\n### switch多选择结构\n\n- 多选择结构还有一个实现方式就是switch case语句\n- switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支\n- 语法：\n\n```java\nswitch(expression){\n    case value :\n        //语句\n        break;//可选\n    case value :\n        //语句\n        break;//可选\n    //你可以有任意数量的case语句\n        default : //可选\n        //语句\n}\n```\n\n- switch 语句中的变量类型可以是\n  - byte 、short、int或者char\n  - **从Java SE 7开始 switch就支持字符串String型了**\n  - 同时case标签必须为字符串常量或字面量\n\n**设计一个程序，根据ABCD输出不同的评价。**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:09\n * @Description\n */\npublic class SwitchDemo01 {\n    public static void main(String[] args) {\n        char grade = 'G';\n        switch (grade){\n            case 'A' :\n                System.out.println(\"优秀\");\n                break;\n            case 'B' :\n                System.out.println(\"良好\");\n                break;\n            case 'C' :\n                System.out.println(\"及格\");\n                break;\n            case 'D' :\n                System.out.println(\"再接再厉\");\n                break;\n            case 'E' :\n                System.out.println(\"挂科\");\n                break;\n            default:\n                System.out.println(\"未知成绩\");\n        }\n    }\n}\n\n```\n\n---\n\n**Java SE 7 新特性**\n\n代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:20\n * @Description\n */\npublic class SwitchDemo02 {\n    public static void main(String[] args) {\n        String name = \"hahaha\";\n        switch (name){\n            case \"xiheya\":\n                System.out.println(\"right\");\n                break;\n            case \"hahaha\":\n                System.out.println(\"error\");\n                break;\n            default:\n                System.out.println(\"???\");\n        }\n    }\n}\n\n```\n\n","slug":"Java流程控制02","published":1,"updated":"2023-07-31T12:40:09.588Z","layout":"post","link":"","_id":"clktr4qre001azsa0hxs54o7y","content":"<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><ul>\n<li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行</li>\n<li>顺序结构是最简单的算法结构</li>\n<li>语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，<strong>他是一个任何算法都离不开的一种基本算法结构</strong></li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">orderDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld1&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld2&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld3&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld4&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为Java的基本结构是顺序结构，所以会依次输出helloworld1234</p>\n<p><strong>输出结果：</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png\" alt=\"顺序结构\"></p>\n<hr>\n<h2 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h2><h3 id=\"if单选择结构\"><a href=\"#if单选择结构\" class=\"headerlink\" title=\"if单选择结构\"></a>if单选择结构</h3><ul>\n<li>很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:17</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ifDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;helloworld&quot;</span>))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;helloworld&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;End&quot;</span>);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End</p>\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png\" alt=\"输出结果2\"></p>\n<hr>\n<h3 id=\"if双选择结构\"><a href=\"#if双选择结构\" class=\"headerlink\" title=\"if双选择结构\"></a>if双选择结构</h3><p>语法和单选择结构类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为false就执行这里面的语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>设计一个程序，输入分数大于60时输出及格，否则输出不及格</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IfDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入成绩&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.nextInt() &gt; <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您的成绩及格&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您的成绩不及格&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"if多选择结构\"><a href=\"#if多选择结构\" class=\"headerlink\" title=\"if多选择结构\"></a>if多选择结构</h3><p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式1为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式2为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式3为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果以上布尔表达式为false就执行这里面的语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IfDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入成绩&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;满分！&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">100</span> &amp;&amp; score &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;A!&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">90</span> &amp;&amp; score &gt;= <span class=\"number\">80</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;B!&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">80</span> &amp;&amp; score &gt;= <span class=\"number\">70</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;C!&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">70</span> &amp;&amp; score &gt;= <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;D!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">60</span> &amp;&amp; score &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您的成绩不及格&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成绩不合法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"嵌套的if结构\"><a href=\"#嵌套的if结构\" class=\"headerlink\" title=\"嵌套的if结构\"></a>嵌套的if结构</h3><ul>\n<li>使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else</li>\n<li>语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为true就执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(布尔表达式<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果布尔表达式2为true就执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"switch多选择结构\"><a href=\"#switch多选择结构\" class=\"headerlink\" title=\"switch多选择结构\"></a>switch多选择结构</h3><ul>\n<li>多选择结构还有一个实现方式就是switch case语句</li>\n<li>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(expression)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">        <span class=\"comment\">//语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;<span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">        <span class=\"comment\">//语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;<span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"comment\">//你可以有任意数量的case语句</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span> : <span class=\"comment\">//可选</span></span><br><span class=\"line\">        <span class=\"comment\">//语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>switch 语句中的变量类型可以是<ul>\n<li>byte 、short、int或者char</li>\n<li><strong>从Java SE 7开始 switch就支持字符串String型了</strong></li>\n<li>同时case标签必须为字符串常量或字面量</li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序，根据ABCD输出不同的评价。</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:09</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwitchDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;G&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (grade)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;再接再厉&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;挂科&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;未知成绩&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>Java SE 7 新特性</strong></p>\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:20</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwitchDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hahaha&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (name)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;xiheya&quot;</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;right&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;hahaha&quot;</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;???&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"linear-gradient(to top,#ff9a9e 0%,#fecfef 99%,#fecfef 100%)","excerpt":"","more":"<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><ul>\n<li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行</li>\n<li>顺序结构是最简单的算法结构</li>\n<li>语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，<strong>他是一个任何算法都离不开的一种基本算法结构</strong></li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:12</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">orderDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld1&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld2&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld3&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;helloworld4&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为Java的基本结构是顺序结构，所以会依次输出helloworld1234</p>\n<p><strong>输出结果：</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png\" alt=\"顺序结构\"></p>\n<hr>\n<h2 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h2><h3 id=\"if单选择结构\"><a href=\"#if单选择结构\" class=\"headerlink\" title=\"if单选择结构\"></a>if单选择结构</h3><ul>\n<li>很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:17</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ifDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> scanner.nextLine();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.equals(<span class=\"string\">&quot;helloworld&quot;</span>))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;helloworld&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;End&quot;</span>);</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End</p>\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png\" alt=\"输出结果2\"></p>\n<hr>\n<h3 id=\"if双选择结构\"><a href=\"#if双选择结构\" class=\"headerlink\" title=\"if双选择结构\"></a>if双选择结构</h3><p>语法和单选择结构类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为false就执行这里面的语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>设计一个程序，输入分数大于60时输出及格，否则输出不及格</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IfDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入成绩&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scanner.nextInt() &gt; <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您的成绩及格&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您的成绩不及格&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"if多选择结构\"><a href=\"#if多选择结构\" class=\"headerlink\" title=\"if多选择结构\"></a>if多选择结构</h3><p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式1为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式2为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式3为true就执行这里面的语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果以上布尔表达式为false就执行这里面的语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 16:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IfDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入成绩&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (score == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;满分！&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">100</span> &amp;&amp; score &gt;= <span class=\"number\">90</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;A!&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">90</span> &amp;&amp; score &gt;= <span class=\"number\">80</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;B!&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">80</span> &amp;&amp; score &gt;= <span class=\"number\">70</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;C!&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">70</span> &amp;&amp; score &gt;= <span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;D!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(score &lt; <span class=\"number\">60</span> &amp;&amp; score &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;您的成绩不及格&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成绩不合法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scanner.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"嵌套的if结构\"><a href=\"#嵌套的if结构\" class=\"headerlink\" title=\"嵌套的if结构\"></a>嵌套的if结构</h3><ul>\n<li>使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else</li>\n<li>语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果布尔表达式为true就执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(布尔表达式<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果布尔表达式2为true就执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"switch多选择结构\"><a href=\"#switch多选择结构\" class=\"headerlink\" title=\"switch多选择结构\"></a>switch多选择结构</h3><ul>\n<li>多选择结构还有一个实现方式就是switch case语句</li>\n<li>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(expression)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">        <span class=\"comment\">//语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;<span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">        <span class=\"comment\">//语句</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;<span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"comment\">//你可以有任意数量的case语句</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span> : <span class=\"comment\">//可选</span></span><br><span class=\"line\">        <span class=\"comment\">//语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>switch 语句中的变量类型可以是<ul>\n<li>byte 、short、int或者char</li>\n<li><strong>从Java SE 7开始 switch就支持字符串String型了</strong></li>\n<li>同时case标签必须为字符串常量或字面量</li>\n</ul>\n</li>\n</ul>\n<p><strong>设计一个程序，根据ABCD输出不同的评价。</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:09</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwitchDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;G&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (grade)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;再接再厉&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span> :</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;挂科&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;未知成绩&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>Java SE 7 新特性</strong></p>\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:20</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwitchDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hahaha&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (name)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;xiheya&quot;</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;right&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;hahaha&quot;</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;???&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java流程控制03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg"],"abbrlink":"5ac22c70","date":"2022-08-25T14:41:01.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 循环结构\n\n### while 循环\n\n- while 是最基本的循环\n- 语法\n\n```java\nwhile(布尔表达式){\n    //循环内容\n}\n```\n\n- 只要布尔表达式为true，则循环一直执行下去\n- **我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环**\n- 少部分情况循环需要一直执行，比如服务器的请求响应监听\n- 循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃\n\n**设计一个程序计算1+2+3+4+5+……+100；**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:44\n * @Description\n */\npublic class WhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        while( i < 100)\n        {\n            i++;\n            total += i ;\n        }\n        System.out.println(total);\n    }\n}\n\n```\n\n---\n\n### do …… while循环\n\n- 对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。\n- do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。\n- 语法\n\n```java\ndo{\n    //代码语句\n}while(布尔表达式);\n```\n\n- while和do-While的区别：\n  - while先判断后执行，dowhile是先执行后判断！\n  - Do……while总是保证循环体会被至少执行一次！这是他们的主要差别\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:56\n * @Description\n */\npublic class DoWhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        do{\n            i++;\n            total += i;\n        }while(i < 100);\n        System.out.println(total);\n    }\n}\n\n```\n\n\n\n### for循环\n\n- 虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句---for循环，使一些循环结构变得更加简单。\n- for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环\n- for循环执行的次数在执行前就确定。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式 ; 更新){\n    //代码语句\n}\n\n```\n\n**设计一个程序计算出0-100的奇数和与偶数和**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n    }\n\n}\n\n```\n\n**运行截图**\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png)\n\n**设计一个程序输出1-1000之间能被5整除的数，每行输出三个**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n\n        for (int i = 0; i <= 1000; i++) {\n            if ((i%5) == 0){                    //对\n                System.out.print(i+\"\\t\");\n\n            }\n            if (((i+1) % (5*3)) == 0){\n                System.out.print(\"\\n\");\n\n            }\n        }\n    }\n\n\n}\n\n```\n\n**设计一个程序打印出99乘法表**\n\n程序\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 16:56\n * @Description\n */\npublic class ForDemo02 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 1; j <= i; j++) {           //行由i控制，第i行输出i个依次类推\n                System.out.print( j + \"*\" + i + \"=\" + i*j + \"\\t\");\n            }\n            System.out.println();                   //输出完一行就换一次行\n        }\n    }\n}\n\n```\n\n**运行结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png)\n\n### 增强for循环\n\n- Java5引入了一种主要用于数组或集合的增强for循环。\n- 增强for循环语法格式\n\n```java\nfor(声明语句:表达式){\n    //代码语句\n}\n```\n\n- 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。\n- 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。\n\n代码示例：简单的遍历代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 18:56\n * @Description\n */\npublic class ForDemo03 {\n    public static void main(String[] args) {\n        int [] numbers = {10,20,30,40,50};\n        for (int x : numbers){\n            System.out.println(x);\n        };\n    }\n}\n\n```\n\n### break 和 continue\n\n- break在任何循环语句的主体部分，均可用break控制循环的流程。**break用于强行退出循环，不执行循环中剩余的语句**。（break语句也可以在switch语句中使用）\n\n示例：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:13\n * @Description\n */\npublic class Break {\n    public static void main(String[] args) {\n        for (int i = 1; i < 100; i++) {\n            if (i  == 30){\n                System.out.println();\n                break;                              //break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句\n            }\n            System.out.println(i);\n        }\n        System.out.println(\"我还可以继续运行\");         //跳出循环后程序还是会继续运行\n    }\n}\n\n```\n\n输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。\n\n![输出结果0](https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png)\n\n---\n\n- continue语句用在循环语句体中，**用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。**\n\n示例\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:21\n * @Description\n */\npublic class Continue {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 100){\n            i ++;\n            if (i%10 == 0){\n                System.out.println();\n                continue;                       //每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。\n            }\n            System.out.print(i+\"\\t\");\n        }\n    }\n}\n\n```\n\n输出结果：输出时遇到能被10整除的数自动跳过。\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png)\n\n- 拓展：关于goto关键字\n  - goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子------带标签的break和continue\n  - 标签是指后面跟一个冒号的标识符，例如：label；\n  - 对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。\n\n### 联系\n\n```markdown\n设计一个程序打印出一个三角形。\n**********\n****  ****\n***    ***\n**      **\n*        *\n\n```\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 15:56\n * @Description\n */\npublic class TestDemo01 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 5; j >= i; j--) {\n                System.out.print(\"*\");\n            }\n            for (int k = 1; k < i; k++) {\n                System.out.print(\"  \");\n            }\n            for (int k = 5; k >= i; k--) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n\n","source":"_posts/Java流程控制03.md","raw":"---\ntitle: Java流程控制03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqanu0wj21kw0w07h2.jpg'\ntags:\n  - Java\n  - Java流程控制\nabbrlink: 5ac22c70\ndate: 2022-08-25 22:41:01\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 循环结构\n\n### while 循环\n\n- while 是最基本的循环\n- 语法\n\n```java\nwhile(布尔表达式){\n    //循环内容\n}\n```\n\n- 只要布尔表达式为true，则循环一直执行下去\n- **我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环**\n- 少部分情况循环需要一直执行，比如服务器的请求响应监听\n- 循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃\n\n**设计一个程序计算1+2+3+4+5+……+100；**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:44\n * @Description\n */\npublic class WhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        while( i < 100)\n        {\n            i++;\n            total += i ;\n        }\n        System.out.println(total);\n    }\n}\n\n```\n\n---\n\n### do …… while循环\n\n- 对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。\n- do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。\n- 语法\n\n```java\ndo{\n    //代码语句\n}while(布尔表达式);\n```\n\n- while和do-While的区别：\n  - while先判断后执行，dowhile是先执行后判断！\n  - Do……while总是保证循环体会被至少执行一次！这是他们的主要差别\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 17:56\n * @Description\n */\npublic class DoWhileDemo01 {\n    public static void main(String[] args) {\n        int i = 0;\n        int total = 0;\n        do{\n            i++;\n            total += i;\n        }while(i < 100);\n        System.out.println(total);\n    }\n}\n\n```\n\n\n\n### for循环\n\n- 虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句---for循环，使一些循环结构变得更加简单。\n- for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环\n- for循环执行的次数在执行前就确定。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式 ; 更新){\n    //代码语句\n}\n\n```\n\n**设计一个程序计算出0-100的奇数和与偶数和**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n    }\n\n}\n\n```\n\n**运行截图**\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png)\n\n**设计一个程序输出1-1000之间能被5整除的数，每行输出三个**\n\n代码：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/08/ 22:27\n * @Description\n */\npublic class ForDemo01 {\n    public static void main(String[] args) {\n        int oddtotal = 0;//奇数和\n        int eventotal = 0;//偶数和\n        for (int i = 0; i <= 100; i++) {\n            if (i%2 == 0){\n                eventotal += i;\n            }else {\n                oddtotal += i;\n            }\n\n        }\n        System.out.println(\"偶数和：\\t\"+eventotal);\n        System.out.println(\"奇数和: \\t\"+oddtotal);\n\n        for (int i = 0; i <= 1000; i++) {\n            if ((i%5) == 0){                    //对\n                System.out.print(i+\"\\t\");\n\n            }\n            if (((i+1) % (5*3)) == 0){\n                System.out.print(\"\\n\");\n\n            }\n        }\n    }\n\n\n}\n\n```\n\n**设计一个程序打印出99乘法表**\n\n程序\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 16:56\n * @Description\n */\npublic class ForDemo02 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 9; i++) {\n            for (int j = 1; j <= i; j++) {           //行由i控制，第i行输出i个依次类推\n                System.out.print( j + \"*\" + i + \"=\" + i*j + \"\\t\");\n            }\n            System.out.println();                   //输出完一行就换一次行\n        }\n    }\n}\n\n```\n\n**运行结果**\n\n![输出结果2](https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png)\n\n### 增强for循环\n\n- Java5引入了一种主要用于数组或集合的增强for循环。\n- 增强for循环语法格式\n\n```java\nfor(声明语句:表达式){\n    //代码语句\n}\n```\n\n- 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。\n- 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。\n\n代码示例：简单的遍历代码\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 18:56\n * @Description\n */\npublic class ForDemo03 {\n    public static void main(String[] args) {\n        int [] numbers = {10,20,30,40,50};\n        for (int x : numbers){\n            System.out.println(x);\n        };\n    }\n}\n\n```\n\n### break 和 continue\n\n- break在任何循环语句的主体部分，均可用break控制循环的流程。**break用于强行退出循环，不执行循环中剩余的语句**。（break语句也可以在switch语句中使用）\n\n示例：\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:13\n * @Description\n */\npublic class Break {\n    public static void main(String[] args) {\n        for (int i = 1; i < 100; i++) {\n            if (i  == 30){\n                System.out.println();\n                break;                              //break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句\n            }\n            System.out.println(i);\n        }\n        System.out.println(\"我还可以继续运行\");         //跳出循环后程序还是会继续运行\n    }\n}\n\n```\n\n输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。\n\n![输出结果0](https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png)\n\n---\n\n- continue语句用在循环语句体中，**用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。**\n\n示例\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/09/ 19:21\n * @Description\n */\npublic class Continue {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 100){\n            i ++;\n            if (i%10 == 0){\n                System.out.println();\n                continue;                       //每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。\n            }\n            System.out.print(i+\"\\t\");\n        }\n    }\n}\n\n```\n\n输出结果：输出时遇到能被10整除的数自动跳过。\n\n![输出结果](https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png)\n\n- 拓展：关于goto关键字\n  - goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子------带标签的break和continue\n  - 标签是指后面跟一个冒号的标识符，例如：label；\n  - 对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。\n\n### 联系\n\n```markdown\n设计一个程序打印出一个三角形。\n**********\n****  ****\n***    ***\n**      **\n*        *\n\n```\n\n```java\npackage com.xiheya.struct;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/11/ 15:56\n * @Description\n */\npublic class TestDemo01 {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 5; j >= i; j--) {\n                System.out.print(\"*\");\n            }\n            for (int k = 1; k < i; k++) {\n                System.out.print(\"  \");\n            }\n            for (int k = 5; k >= i; k--) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n\n","slug":"Java流程控制03","published":1,"updated":"2023-07-31T12:40:09.590Z","layout":"post","link":"","_id":"clktr4qrf001dzsa0ai840pvi","content":"<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><ul>\n<li>while 是最基本的循环</li>\n<li>语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(布尔表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只要布尔表达式为true，则循环一直执行下去</li>\n<li><strong>我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环</strong></li>\n<li>少部分情况循环需要一直执行，比如服务器的请求响应监听</li>\n<li>循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃</li>\n</ul>\n<p><strong>设计一个程序计算1+2+3+4+5+……+100；</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WhileDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( i &lt; <span class=\"number\">100</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            total += i ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"do-……-while循环\"><a href=\"#do-……-while循环\" class=\"headerlink\" title=\"do …… while循环\"></a>do …… while循环</h3><ul>\n<li>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。</li>\n<li>do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。</li>\n<li>语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>while和do-While的区别：<ul>\n<li>while先判断后执行，dowhile是先执行后判断！</li>\n<li>Do……while总是保证循环体会被至少执行一次！这是他们的主要差别</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoWhileDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            total += i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><ul>\n<li>虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句—for循环，使一些循环结构变得更加简单。</li>\n<li>for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环</li>\n<li>for循环执行的次数在执行前就确定。语法格式如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 布尔表达式 ; 更新)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>设计一个程序计算出0-100的奇数和与偶数和</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 22:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">oddtotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//奇数和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">eventotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//偶数和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                eventotal += i;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                oddtotal += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;偶数和：\\t&quot;</span>+eventotal);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;奇数和: \\t&quot;</span>+oddtotal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行截图</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png\" alt=\"运行结果\"></p>\n<p><strong>设计一个程序输出1-1000之间能被5整除的数，每行输出三个</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 22:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">oddtotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//奇数和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">eventotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//偶数和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                eventotal += i;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                oddtotal += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;偶数和：\\t&quot;</span>+eventotal);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;奇数和: \\t&quot;</span>+oddtotal);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i%<span class=\"number\">5</span>) == <span class=\"number\">0</span>)&#123;                    <span class=\"comment\">//对</span></span><br><span class=\"line\">                System.out.print(i+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((i+<span class=\"number\">1</span>) % (<span class=\"number\">5</span>*<span class=\"number\">3</span>)) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>设计一个程序打印出99乘法表</strong></p>\n<p>程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 16:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= i; j++) &#123;           <span class=\"comment\">//行由i控制，第i行输出i个依次类推</span></span><br><span class=\"line\">                System.out.print( j + <span class=\"string\">&quot;*&quot;</span> + i + <span class=\"string\">&quot;=&quot;</span> + i*j + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();                   <span class=\"comment\">//输出完一行就换一次行</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png\" alt=\"输出结果2\"></p>\n<h3 id=\"增强for循环\"><a href=\"#增强for循环\" class=\"headerlink\" title=\"增强for循环\"></a>增强for循环</h3><ul>\n<li>Java5引入了一种主要用于数组或集合的增强for循环。</li>\n<li>增强for循环语法格式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(声明语句:表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。</li>\n<li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li>\n</ul>\n<p>代码示例：简单的遍历代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 18:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : numbers)&#123;</span><br><span class=\"line\">            System.out.println(x);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h3><ul>\n<li>break在任何循环语句的主体部分，均可用break控制循环的流程。<strong>break用于强行退出循环，不执行循环中剩余的语句</strong>。（break语句也可以在switch语句中使用）</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 19:13</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Break</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i  == <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                              <span class=\"comment\">//break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我还可以继续运行&quot;</span>);         <span class=\"comment\">//跳出循环后程序还是会继续运行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png\" alt=\"输出结果0\"></p>\n<hr>\n<ul>\n<li>continue语句用在循环语句体中，<strong>用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</strong></li>\n</ul>\n<p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 19:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Continue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            i ++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">10</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                       <span class=\"comment\">//每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.print(i+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果：输出时遇到能被10整除的数自动跳过。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png\" alt=\"输出结果\"></p>\n<ul>\n<li>拓展：关于goto关键字<ul>\n<li>goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子——带标签的break和continue</li>\n<li>标签是指后面跟一个冒号的标识符，例如：label；</li>\n<li>对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设计一个程序打印出一个三角形。</span><br><span class=\"line\"><span class=\"strong\">****</span><span class=\"strong\">****</span>**</span><br><span class=\"line\"><span class=\"strong\">****</span>  <span class=\"strong\">****</span></span><br><span class=\"line\"><span class=\"strong\">***    **</span>*</span><br><span class=\"line\">**      **</span><br><span class=\"line\"><span class=\"bullet\">*</span>        *</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 15:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; k &lt; i; k++) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>; k &gt;= i; k--) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><ul>\n<li>while 是最基本的循环</li>\n<li>语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(布尔表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//循环内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只要布尔表达式为true，则循环一直执行下去</li>\n<li><strong>我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环</strong></li>\n<li>少部分情况循环需要一直执行，比如服务器的请求响应监听</li>\n<li>循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃</li>\n</ul>\n<p><strong>设计一个程序计算1+2+3+4+5+……+100；</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WhileDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( i &lt; <span class=\"number\">100</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            total += i ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"do-……-while循环\"><a href=\"#do-……-while循环\" class=\"headerlink\" title=\"do …… while循环\"></a>do …… while循环</h3><ul>\n<li>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。</li>\n<li>do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。</li>\n<li>语法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>while和do-While的区别：<ul>\n<li>while先判断后执行，dowhile是先执行后判断！</li>\n<li>Do……while总是保证循环体会被至少执行一次！这是他们的主要差别</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 17:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoWhileDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            total += i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(total);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><ul>\n<li>虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句—for循环，使一些循环结构变得更加简单。</li>\n<li>for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环</li>\n<li>for循环执行的次数在执行前就确定。语法格式如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 布尔表达式 ; 更新)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>设计一个程序计算出0-100的奇数和与偶数和</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 22:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">oddtotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//奇数和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">eventotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//偶数和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                eventotal += i;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                oddtotal += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;偶数和：\\t&quot;</span>+eventotal);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;奇数和: \\t&quot;</span>+oddtotal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行截图</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png\" alt=\"运行结果\"></p>\n<p><strong>设计一个程序输出1-1000之间能被5整除的数，每行输出三个</strong></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/08/ 22:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">oddtotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//奇数和</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">eventotal</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//偶数和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                eventotal += i;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                oddtotal += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;偶数和：\\t&quot;</span>+eventotal);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;奇数和: \\t&quot;</span>+oddtotal);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i%<span class=\"number\">5</span>) == <span class=\"number\">0</span>)&#123;                    <span class=\"comment\">//对</span></span><br><span class=\"line\">                System.out.print(i+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((i+<span class=\"number\">1</span>) % (<span class=\"number\">5</span>*<span class=\"number\">3</span>)) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>设计一个程序打印出99乘法表</strong></p>\n<p>程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 16:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= i; j++) &#123;           <span class=\"comment\">//行由i控制，第i行输出i个依次类推</span></span><br><span class=\"line\">                System.out.print( j + <span class=\"string\">&quot;*&quot;</span> + i + <span class=\"string\">&quot;=&quot;</span> + i*j + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();                   <span class=\"comment\">//输出完一行就换一次行</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>运行结果</strong></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png\" alt=\"输出结果2\"></p>\n<h3 id=\"增强for循环\"><a href=\"#增强for循环\" class=\"headerlink\" title=\"增强for循环\"></a>增强for循环</h3><ul>\n<li>Java5引入了一种主要用于数组或集合的增强for循环。</li>\n<li>增强for循环语法格式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(声明语句:表达式)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。</li>\n<li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li>\n</ul>\n<p>代码示例：简单的遍历代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 18:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo03</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : numbers)&#123;</span><br><span class=\"line\">            System.out.println(x);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-和-continue\"><a href=\"#break-和-continue\" class=\"headerlink\" title=\"break 和 continue\"></a>break 和 continue</h3><ul>\n<li>break在任何循环语句的主体部分，均可用break控制循环的流程。<strong>break用于强行退出循环，不执行循环中剩余的语句</strong>。（break语句也可以在switch语句中使用）</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 19:13</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Break</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i  == <span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                              <span class=\"comment\">//break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我还可以继续运行&quot;</span>);         <span class=\"comment\">//跳出循环后程序还是会继续运行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png\" alt=\"输出结果0\"></p>\n<hr>\n<ul>\n<li>continue语句用在循环语句体中，<strong>用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</strong></li>\n</ul>\n<p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/09/ 19:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Continue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            i ++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">10</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                       <span class=\"comment\">//每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.print(i+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出结果：输出时遇到能被10整除的数自动跳过。</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png\" alt=\"输出结果\"></p>\n<ul>\n<li>拓展：关于goto关键字<ul>\n<li>goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子——带标签的break和continue</li>\n<li>标签是指后面跟一个冒号的标识符，例如：label；</li>\n<li>对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设计一个程序打印出一个三角形。</span><br><span class=\"line\"><span class=\"strong\">****</span><span class=\"strong\">****</span>**</span><br><span class=\"line\"><span class=\"strong\">****</span>  <span class=\"strong\">****</span></span><br><span class=\"line\"><span class=\"strong\">***    **</span>*</span><br><span class=\"line\">**      **</span><br><span class=\"line\"><span class=\"bullet\">*</span>        *</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/11/ 15:56</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>; j &gt;= i; j--) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; k &lt; i; k++) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>; k &gt;= i; k--) &#123;</span><br><span class=\"line\">                System.out.print(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java的特性与优势","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqpyov8j21kw0w0h0t.jpg"],"abbrlink":"ef009d9b","date":"2022-08-25T14:30:29.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Java的特性和优势\n\n### Java特性\n\n- 简单性\n- 面向对象\n- 可移植性\n- 高性能\n- 分布式\n- 动态性\n- 多线程\n- 安全性\n- 健壮性\n\n---\n\n### Java三大版本\n\n- **JavaSE ： 标准版（桌面程序，控制台开发……**\n- ~~**JavaME： 嵌入式开发（手机、小家电）**~~\n- **JavaEE： 企业级开发（web端，服务器开发）**\n\n---\n\n### JDK、JRE、JVM\n\n> JDK： Java Development Kit\n>\n> JRE： Java Runtime Environment\n>\n> JVM： Java Virtual Machine\n\n![三者区别与联系](https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png)\n\n\n\n![架构图](https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png)\n\n---\n\n### Java开发环境安装\n\n#### 卸载JDK\n\n1. 删除Java安装目录\n2. 删除环境变量中的JAVA_HOME\n3. 删除环境变量中的Path下关于Java的目录\n\n#### 安装JDK\n\n1. 打开官网找到电脑对应的版本，并下载到本地。[JDk下载页面](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html)\n2. 双击安装包进行安装\n3. 记住安装的路径\n4. **配置环境变量**\n   1. 我的电脑---> 右键 ---> 属性\n   2. 高级系统设置 ---> 环境变量 ---> 新建系统变量\n   3. 配置变量名： JAVA_HOME  值：Java的安装目录\n   4. 配置Path：鼠标右击Path--- 值为%JAVA_HOME%/lib\n5. 检查JDK是否安装成功\n   1. Win + r ：cmd\n   2. 输入java -version\n   3. 若打印出Java版本信息，则安装成功。\n","source":"_posts/Java的特性与优势.md","raw":"---\ntitle: Java的特性与优势\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqpyov8j21kw0w0h0t.jpg'\ntags:\n  - Java\n  - Java特性\nabbrlink: ef009d9b\ndate: 2022-08-25 22:30:29\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## Java的特性和优势\n\n### Java特性\n\n- 简单性\n- 面向对象\n- 可移植性\n- 高性能\n- 分布式\n- 动态性\n- 多线程\n- 安全性\n- 健壮性\n\n---\n\n### Java三大版本\n\n- **JavaSE ： 标准版（桌面程序，控制台开发……**\n- ~~**JavaME： 嵌入式开发（手机、小家电）**~~\n- **JavaEE： 企业级开发（web端，服务器开发）**\n\n---\n\n### JDK、JRE、JVM\n\n> JDK： Java Development Kit\n>\n> JRE： Java Runtime Environment\n>\n> JVM： Java Virtual Machine\n\n![三者区别与联系](https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png)\n\n\n\n![架构图](https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png)\n\n---\n\n### Java开发环境安装\n\n#### 卸载JDK\n\n1. 删除Java安装目录\n2. 删除环境变量中的JAVA_HOME\n3. 删除环境变量中的Path下关于Java的目录\n\n#### 安装JDK\n\n1. 打开官网找到电脑对应的版本，并下载到本地。[JDk下载页面](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html)\n2. 双击安装包进行安装\n3. 记住安装的路径\n4. **配置环境变量**\n   1. 我的电脑---> 右键 ---> 属性\n   2. 高级系统设置 ---> 环境变量 ---> 新建系统变量\n   3. 配置变量名： JAVA_HOME  值：Java的安装目录\n   4. 配置Path：鼠标右击Path--- 值为%JAVA_HOME%/lib\n5. 检查JDK是否安装成功\n   1. Win + r ：cmd\n   2. 输入java -version\n   3. 若打印出Java版本信息，则安装成功。\n","slug":"Java的特性与优势","published":1,"updated":"2023-07-31T12:40:09.593Z","layout":"post","link":"","_id":"clktr4qrh001gzsa004rl22m2","content":"<h2 id=\"Java的特性和优势\"><a href=\"#Java的特性和优势\" class=\"headerlink\" title=\"Java的特性和优势\"></a>Java的特性和优势</h2><h3 id=\"Java特性\"><a href=\"#Java特性\" class=\"headerlink\" title=\"Java特性\"></a>Java特性</h3><ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n</ul>\n<hr>\n<h3 id=\"Java三大版本\"><a href=\"#Java三大版本\" class=\"headerlink\" title=\"Java三大版本\"></a>Java三大版本</h3><ul>\n<li><strong>JavaSE ： 标准版（桌面程序，控制台开发……</strong></li>\n<li><del><strong>JavaME： 嵌入式开发（手机、小家电）</strong></del></li>\n<li><strong>JavaEE： 企业级开发（web端，服务器开发）</strong></li>\n</ul>\n<hr>\n<h3 id=\"JDK、JRE、JVM\"><a href=\"#JDK、JRE、JVM\" class=\"headerlink\" title=\"JDK、JRE、JVM\"></a>JDK、JRE、JVM</h3><blockquote>\n<p>JDK： Java Development Kit</p>\n<p>JRE： Java Runtime Environment</p>\n<p>JVM： Java Virtual Machine</p>\n</blockquote>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png\" alt=\"三者区别与联系\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png\" alt=\"架构图\"></p>\n<hr>\n<h3 id=\"Java开发环境安装\"><a href=\"#Java开发环境安装\" class=\"headerlink\" title=\"Java开发环境安装\"></a>Java开发环境安装</h3><h4 id=\"卸载JDK\"><a href=\"#卸载JDK\" class=\"headerlink\" title=\"卸载JDK\"></a>卸载JDK</h4><ol>\n<li>删除Java安装目录</li>\n<li>删除环境变量中的JAVA_HOME</li>\n<li>删除环境变量中的Path下关于Java的目录</li>\n</ol>\n<h4 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h4><ol>\n<li>打开官网找到电脑对应的版本，并下载到本地。<a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">JDk下载页面</a></li>\n<li>双击安装包进行安装</li>\n<li>记住安装的路径</li>\n<li><strong>配置环境变量</strong><ol>\n<li>我的电脑—&gt; 右键 —&gt; 属性</li>\n<li>高级系统设置 —&gt; 环境变量 —&gt; 新建系统变量</li>\n<li>配置变量名： JAVA_HOME  值：Java的安装目录</li>\n<li>配置Path：鼠标右击Path— 值为%JAVA_HOME%&#x2F;lib</li>\n</ol>\n</li>\n<li>检查JDK是否安装成功<ol>\n<li>Win + r ：cmd</li>\n<li>输入java -version</li>\n<li>若打印出Java版本信息，则安装成功。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"Java的特性和优势\"><a href=\"#Java的特性和优势\" class=\"headerlink\" title=\"Java的特性和优势\"></a>Java的特性和优势</h2><h3 id=\"Java特性\"><a href=\"#Java特性\" class=\"headerlink\" title=\"Java特性\"></a>Java特性</h3><ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n</ul>\n<hr>\n<h3 id=\"Java三大版本\"><a href=\"#Java三大版本\" class=\"headerlink\" title=\"Java三大版本\"></a>Java三大版本</h3><ul>\n<li><strong>JavaSE ： 标准版（桌面程序，控制台开发……</strong></li>\n<li><del><strong>JavaME： 嵌入式开发（手机、小家电）</strong></del></li>\n<li><strong>JavaEE： 企业级开发（web端，服务器开发）</strong></li>\n</ul>\n<hr>\n<h3 id=\"JDK、JRE、JVM\"><a href=\"#JDK、JRE、JVM\" class=\"headerlink\" title=\"JDK、JRE、JVM\"></a>JDK、JRE、JVM</h3><blockquote>\n<p>JDK： Java Development Kit</p>\n<p>JRE： Java Runtime Environment</p>\n<p>JVM： Java Virtual Machine</p>\n</blockquote>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png\" alt=\"三者区别与联系\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png\" alt=\"架构图\"></p>\n<hr>\n<h3 id=\"Java开发环境安装\"><a href=\"#Java开发环境安装\" class=\"headerlink\" title=\"Java开发环境安装\"></a>Java开发环境安装</h3><h4 id=\"卸载JDK\"><a href=\"#卸载JDK\" class=\"headerlink\" title=\"卸载JDK\"></a>卸载JDK</h4><ol>\n<li>删除Java安装目录</li>\n<li>删除环境变量中的JAVA_HOME</li>\n<li>删除环境变量中的Path下关于Java的目录</li>\n</ol>\n<h4 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h4><ol>\n<li>打开官网找到电脑对应的版本，并下载到本地。<a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">JDk下载页面</a></li>\n<li>双击安装包进行安装</li>\n<li>记住安装的路径</li>\n<li><strong>配置环境变量</strong><ol>\n<li>我的电脑—&gt; 右键 —&gt; 属性</li>\n<li>高级系统设置 —&gt; 环境变量 —&gt; 新建系统变量</li>\n<li>配置变量名： JAVA_HOME  值：Java的安装目录</li>\n<li>配置Path：鼠标右击Path— 值为%JAVA_HOME%&#x2F;lib</li>\n</ol>\n</li>\n<li>检查JDK是否安装成功<ol>\n<li>Win + r ：cmd</li>\n<li>输入java -version</li>\n<li>若打印出Java版本信息，则安装成功。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"Java运行机制及IDEA安装教程","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqm5vu5j21kw0w0aon.jpg"],"abbrlink":"6b48db66","date":"2022-08-25T14:32:04.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Java运行机制及IDEA安装教程\n\n### Hello World \n\n1. 新建一个Java文件\n   - 文件后缀名为.java\n   - Hello.java\n2. 编写代码\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n3. 编译java文件  cmd：javac Hello.java。会生成一个class文件\n\n4. 运行class文件 cmd：java Hello\n\n5. **可能会遇到的问题**\n\n   1. Java是大小写敏感的语言，每个单词的大小写不能出现问题\n   2. 尽量使用中文\n   3. 文件名与类名必须保持一致\n\n   ---\n\n### Java运行机制\n\n   - 编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c/c++)\n   - 解释型：执行什么就读取什么(网页、Javascript)\n   - Java程序运行机制\n\n![java_run](https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png)\n\n---\n\n## IDEA安装教程\n\n### 1. 打开jetbrains官网下载IDEA\n\n![](https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png)\n\n- 下载地址：https://www.jetbrains.com/zh-cn/idea/download/#section=windows\n\n- 点击[此处](https://www.jetbrains.com/zh-cn/idea/download/#section=windows)进入IDEA下载界面\n\n![](https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png)\n\n### 2. 打开安装包之后，~~无脑next。~~\n\n![](https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png)\n\n### 3. **安装目录不建议放在C盘**\n\n![](https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png)\n\n---\n\n## 创建一个Java程序\n\n1. 双击打开IDEA快捷方式，首先new一个Project\n\n   ![new_project](https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png)\n\n   \n\n2. 然后选择Java语言导入JDK环境\n\n   ![JDK](https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png)\n\n3. 鼠标右击src文件夹 new一个 java class\n\n   ![new class](https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png)\n\n4. 编写hello world\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n![HELLO WORLD](https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png)\n\n\n\n> \n\n---\n\n","source":"_posts/Java运行机制及IDEA安装教程.md","raw":"---\ntitle: Java运行机制及IDEA安装教程\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqm5vu5j21kw0w0aon.jpg'\ntags: Java\nabbrlink: 6b48db66\ndate: 2022-08-25 22:32:04\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## Java运行机制及IDEA安装教程\n\n### Hello World \n\n1. 新建一个Java文件\n   - 文件后缀名为.java\n   - Hello.java\n2. 编写代码\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n3. 编译java文件  cmd：javac Hello.java。会生成一个class文件\n\n4. 运行class文件 cmd：java Hello\n\n5. **可能会遇到的问题**\n\n   1. Java是大小写敏感的语言，每个单词的大小写不能出现问题\n   2. 尽量使用中文\n   3. 文件名与类名必须保持一致\n\n   ---\n\n### Java运行机制\n\n   - 编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c/c++)\n   - 解释型：执行什么就读取什么(网页、Javascript)\n   - Java程序运行机制\n\n![java_run](https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png)\n\n---\n\n## IDEA安装教程\n\n### 1. 打开jetbrains官网下载IDEA\n\n![](https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png)\n\n- 下载地址：https://www.jetbrains.com/zh-cn/idea/download/#section=windows\n\n- 点击[此处](https://www.jetbrains.com/zh-cn/idea/download/#section=windows)进入IDEA下载界面\n\n![](https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png)\n\n### 2. 打开安装包之后，~~无脑next。~~\n\n![](https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png)\n\n### 3. **安装目录不建议放在C盘**\n\n![](https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png)\n\n---\n\n## 创建一个Java程序\n\n1. 双击打开IDEA快捷方式，首先new一个Project\n\n   ![new_project](https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png)\n\n   \n\n2. 然后选择Java语言导入JDK环境\n\n   ![JDK](https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png)\n\n3. 鼠标右击src文件夹 new一个 java class\n\n   ![new class](https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png)\n\n4. 编写hello world\n\n```java\t\npublic class Hello{\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"hello world\");\n\t}\n}\n```\n\n![HELLO WORLD](https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png)\n\n\n\n> \n\n---\n\n","slug":"Java运行机制及IDEA安装教程","published":1,"updated":"2023-07-31T12:40:09.595Z","layout":"post","link":"","_id":"clktr4qrh001izsa08w1o7v4q","content":"<h2 id=\"Java运行机制及IDEA安装教程\"><a href=\"#Java运行机制及IDEA安装教程\" class=\"headerlink\" title=\"Java运行机制及IDEA安装教程\"></a>Java运行机制及IDEA安装教程</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><ol>\n<li>新建一个Java文件<ul>\n<li>文件后缀名为.java</li>\n<li>Hello.java</li>\n</ul>\n</li>\n<li>编写代码</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>编译java文件  cmd：javac Hello.java。会生成一个class文件</p>\n</li>\n<li><p>运行class文件 cmd：java Hello</p>\n</li>\n<li><p><strong>可能会遇到的问题</strong></p>\n<ol>\n<li>Java是大小写敏感的语言，每个单词的大小写不能出现问题</li>\n<li>尽量使用中文</li>\n<li>文件名与类名必须保持一致</li>\n</ol>\n<hr>\n</li>\n</ol>\n<h3 id=\"Java运行机制\"><a href=\"#Java运行机制\" class=\"headerlink\" title=\"Java运行机制\"></a>Java运行机制</h3><ul>\n<li>编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c&#x2F;c++)</li>\n<li>解释型：执行什么就读取什么(网页、Javascript)</li>\n<li>Java程序运行机制</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png\" alt=\"java_run\"></p>\n<hr>\n<h2 id=\"IDEA安装教程\"><a href=\"#IDEA安装教程\" class=\"headerlink\" title=\"IDEA安装教程\"></a>IDEA安装教程</h2><h3 id=\"1-打开jetbrains官网下载IDEA\"><a href=\"#1-打开jetbrains官网下载IDEA\" class=\"headerlink\" title=\"1. 打开jetbrains官网下载IDEA\"></a>1. 打开jetbrains官网下载IDEA</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png\"></p>\n<ul>\n<li><p>下载地址：<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a></p>\n</li>\n<li><p>点击<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\">此处</a>进入IDEA下载界面</p>\n</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png\"></p>\n<h3 id=\"2-打开安装包之后，无脑next。\"><a href=\"#2-打开安装包之后，无脑next。\" class=\"headerlink\" title=\"2. 打开安装包之后，无脑next。\"></a>2. 打开安装包之后，<del>无脑next。</del></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png\"></p>\n<h3 id=\"3-安装目录不建议放在C盘\"><a href=\"#3-安装目录不建议放在C盘\" class=\"headerlink\" title=\"3. 安装目录不建议放在C盘\"></a>3. <strong>安装目录不建议放在C盘</strong></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png\"></p>\n<hr>\n<h2 id=\"创建一个Java程序\"><a href=\"#创建一个Java程序\" class=\"headerlink\" title=\"创建一个Java程序\"></a>创建一个Java程序</h2><ol>\n<li><p>双击打开IDEA快捷方式，首先new一个Project</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png\" alt=\"new_project\"></p>\n</li>\n<li><p>然后选择Java语言导入JDK环境</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png\" alt=\"JDK\"></p>\n</li>\n<li><p>鼠标右击src文件夹 new一个 java class</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png\" alt=\"new class\"></p>\n</li>\n<li><p>编写hello world</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png\" alt=\"HELLO WORLD\"></p>\n<blockquote>\n</blockquote>\n<hr>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"Java运行机制及IDEA安装教程\"><a href=\"#Java运行机制及IDEA安装教程\" class=\"headerlink\" title=\"Java运行机制及IDEA安装教程\"></a>Java运行机制及IDEA安装教程</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><ol>\n<li>新建一个Java文件<ul>\n<li>文件后缀名为.java</li>\n<li>Hello.java</li>\n</ul>\n</li>\n<li>编写代码</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>编译java文件  cmd：javac Hello.java。会生成一个class文件</p>\n</li>\n<li><p>运行class文件 cmd：java Hello</p>\n</li>\n<li><p><strong>可能会遇到的问题</strong></p>\n<ol>\n<li>Java是大小写敏感的语言，每个单词的大小写不能出现问题</li>\n<li>尽量使用中文</li>\n<li>文件名与类名必须保持一致</li>\n</ol>\n<hr>\n</li>\n</ol>\n<h3 id=\"Java运行机制\"><a href=\"#Java运行机制\" class=\"headerlink\" title=\"Java运行机制\"></a>Java运行机制</h3><ul>\n<li>编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c&#x2F;c++)</li>\n<li>解释型：执行什么就读取什么(网页、Javascript)</li>\n<li>Java程序运行机制</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png\" alt=\"java_run\"></p>\n<hr>\n<h2 id=\"IDEA安装教程\"><a href=\"#IDEA安装教程\" class=\"headerlink\" title=\"IDEA安装教程\"></a>IDEA安装教程</h2><h3 id=\"1-打开jetbrains官网下载IDEA\"><a href=\"#1-打开jetbrains官网下载IDEA\" class=\"headerlink\" title=\"1. 打开jetbrains官网下载IDEA\"></a>1. 打开jetbrains官网下载IDEA</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png\"></p>\n<ul>\n<li><p>下载地址：<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a></p>\n</li>\n<li><p>点击<a href=\"https://www.jetbrains.com/zh-cn/idea/download/#section=windows\">此处</a>进入IDEA下载界面</p>\n</li>\n</ul>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png\"></p>\n<h3 id=\"2-打开安装包之后，无脑next。\"><a href=\"#2-打开安装包之后，无脑next。\" class=\"headerlink\" title=\"2. 打开安装包之后，无脑next。\"></a>2. 打开安装包之后，<del>无脑next。</del></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png\"></p>\n<h3 id=\"3-安装目录不建议放在C盘\"><a href=\"#3-安装目录不建议放在C盘\" class=\"headerlink\" title=\"3. 安装目录不建议放在C盘\"></a>3. <strong>安装目录不建议放在C盘</strong></h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png\"></p>\n<hr>\n<h2 id=\"创建一个Java程序\"><a href=\"#创建一个Java程序\" class=\"headerlink\" title=\"创建一个Java程序\"></a>创建一个Java程序</h2><ol>\n<li><p>双击打开IDEA快捷方式，首先new一个Project</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png\" alt=\"new_project\"></p>\n</li>\n<li><p>然后选择Java语言导入JDK环境</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png\" alt=\"JDK\"></p>\n</li>\n<li><p>鼠标右击src文件夹 new一个 java class</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png\" alt=\"new class\"></p>\n</li>\n<li><p>编写hello world</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png\" alt=\"HELLO WORLD\"></p>\n<blockquote>\n</blockquote>\n<hr>\n"},{"title":"Java面向对象01","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"abbrlink":"cc6f4b97","date":"2022-08-25T14:41:42.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 面向过程& 面向对象\n\n### 面向过程思想--->自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想--->自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象   --->将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**   \n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n```\n\n---\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n---\n\n- this关键字\n\n## 类与对象的关系\n\n- **类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。**\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- **对象是抽象概念的具体实例**\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n\n","source":"_posts/Java面向对象01.md","raw":"---\ntitle: Java面向对象01\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ntags:\n  - Java\n  - Java面向对象\nabbrlink: cc6f4b97\ndate: 2022-08-25 22:41:42\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 面向过程& 面向对象\n\n### 面向过程思想--->自上而下\n\n面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n\n- 步骤清晰简单，第一步做什么，第二步做什么……\n- 面向过程适合处理一些较为简单的问题\n\n### 面向对象思想--->自下而上\n\n**面向对象**就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。\n\n- 物以类聚，**分类**的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。\n- 面向对象适合处理复杂的问题，适合处理需要多人协作的问题。\n\n**对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。**\n\n### 什么是面向对象\n\n- 面向对象编程（Object_Oriented Programming， OOP）\n- 面向对象编程的本质就是：**以类的方式组织代码，以对象的形式（封装）数据**\n- 抽象   --->将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，**那就是他们都是狗**。\n- 三大特征\n  - **封装**   \n  - **继承**\n  - **多态**\n- 从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象\n- 从代码运行的角度考虑，是先有类后有对象。类是对象的模板。\n\n## 回顾方法及加深\n\n### 方法的定义\n\n- 修饰符\n- 返回类型\n- **break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别**\n- 方法名：注意规范就可以（首字母小写驼峰法），见名知意\n- 参数列表：（参数类型，参数名）……\n- 异常抛出：\n\n### 方法的调用:递归\n\n- 静态方法\n- 非静态方法\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:30\n * @Description\n */\npublic class Demo02 {\n    public static void main(String[] args) {\n        Demo02 demo02 = new Demo02();\n        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add\n        System.out.println(sum);\n        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用\n    }\n    public static int add(int a,int b, int c){      //静态方法，main方法中可以直接调用。\n        return a+b+c;\n    }\n    public int add(int a,int b){                    //非静态方法，调用的话需要实例化对象后才能调用。\n        return a+b;\n    }\n}\n\n```\n\n---\n\n- 形参和实参\n- 值传递和引用传递\n\n代码：\n\n```java\npackage com.xiheya.oop;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 21:52\n * @Description\n */\n// 值传递和引用传递\npublic class Demo01 {\n    public static void main(String[] args) {\n        int a = 1;\n        System.out.println(a);\n        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响\n        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。\n        Person person = new Person();       //实例化一个类，new一个Person类。\n        System.out.println(person.name);\n        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，\n        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）\n    }\n    public static void change(int a){\n        a = 10;\n    }\n    public static void changeName(Person person){\n        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性\n        person.name = \"xiheya\";\n    }\n}\n\nclass Person{\n    String name;\n\n}\n\n```\n\n运行结果：\n\n![值传递与引用传递](https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png)\n\n---\n\n- this关键字\n\n## 类与对象的关系\n\n- **类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。**\n  - 动物、植物、手机、电脑\n  - Person类、Pet类、Car类等，这些类都是用来描述/定义某一类具体的事物应该具备的特点和行为\n- **对象是抽象概念的具体实例**\n  - eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例\n  - 能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。\n\n## 创建和初始化对象\n\n- **使用new关键字创建对象**\n- 使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n- **构造器方法必须掌握**\n\n","slug":"Java面向对象01","published":1,"updated":"2023-07-31T12:40:09.599Z","layout":"post","link":"","_id":"clktr4qri001mzsa028sh5ubt","content":"<h2 id=\"面向过程-面向对象\"><a href=\"#面向过程-面向对象\" class=\"headerlink\" title=\"面向过程&amp; 面向对象\"></a>面向过程&amp; 面向对象</h2><h3 id=\"面向过程思想—-自上而下\"><a href=\"#面向过程思想—-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-自下而上\"><a href=\"#面向对象思想—-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象   —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong>   </li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 22:30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Demo02</span> <span class=\"variable\">demo02</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo02</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> demo02.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);            <span class=\"comment\">//实例化对象demo02后，才可以调用非静态方法add</span></span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">        System.out.println(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));   <span class=\"comment\">//而静态方法add则可以直接调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span>&#123;      <span class=\"comment\">//静态方法，main方法中可以直接调用。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b+c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123;                    <span class=\"comment\">//非静态方法，调用的话需要实例化对象后才能调用。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 21:52</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 值传递和引用传递</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        change(a);                          <span class=\"comment\">//调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span></span><br><span class=\"line\">        System.out.println(a);              <span class=\"comment\">//可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();       <span class=\"comment\">//实例化一个类，new一个Person类。</span></span><br><span class=\"line\">        System.out.println(person.name);</span><br><span class=\"line\">        changeName(person);                 <span class=\"comment\">//由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span></span><br><span class=\"line\">        System.out.println(person.name);    <span class=\"comment\">//这就是引用传递（实质上还是值传递）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeName</span><span class=\"params\">(Person person)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span></span><br><span class=\"line\">        person.name = <span class=\"string\">&quot;xiheya&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。</strong><ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li><strong>对象是抽象概念的具体实例</strong><ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(to top,#fdcbf1 0%,#fdcbf1 1%,#e6dee9 100%)","excerpt":"","more":"<h2 id=\"面向过程-面向对象\"><a href=\"#面向过程-面向对象\" class=\"headerlink\" title=\"面向过程&amp; 面向对象\"></a>面向过程&amp; 面向对象</h2><h3 id=\"面向过程思想—-自上而下\"><a href=\"#面向过程思想—-自上而下\" class=\"headerlink\" title=\"面向过程思想—&gt;自上而下\"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p>\n<ul>\n<li>步骤清晰简单，第一步做什么，第二步做什么……</li>\n<li>面向过程适合处理一些较为简单的问题</li>\n</ul>\n<h3 id=\"面向对象思想—-自下而上\"><a href=\"#面向对象思想—-自下而上\" class=\"headerlink\" title=\"面向对象思想—&gt;自下而上\"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p>\n<ul>\n<li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li>\n<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>\n</ul>\n<p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p>\n<h3 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h3><ul>\n<li>面向对象编程（Object_Oriented Programming， OOP）</li>\n<li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li>\n<li>抽象   —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li>\n<li>三大特征<ul>\n<li><strong>封装</strong>   </li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n</li>\n<li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>\n<li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li>\n</ul>\n<h2 id=\"回顾方法及加深\"><a href=\"#回顾方法及加深\" class=\"headerlink\" title=\"回顾方法及加深\"></a>回顾方法及加深</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><ul>\n<li>修饰符</li>\n<li>返回类型</li>\n<li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li>\n<li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li>\n<li>参数列表：（参数类型，参数名）……</li>\n<li>异常抛出：</li>\n</ul>\n<h3 id=\"方法的调用-递归\"><a href=\"#方法的调用-递归\" class=\"headerlink\" title=\"方法的调用:递归\"></a>方法的调用:递归</h3><ul>\n<li>静态方法</li>\n<li>非静态方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 22:30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Demo02</span> <span class=\"variable\">demo02</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo02</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> demo02.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);            <span class=\"comment\">//实例化对象demo02后，才可以调用非静态方法add</span></span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">        System.out.println(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));   <span class=\"comment\">//而静态方法add则可以直接调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span>&#123;      <span class=\"comment\">//静态方法，main方法中可以直接调用。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b+c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123;                    <span class=\"comment\">//非静态方法，调用的话需要实例化对象后才能调用。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>形参和实参</li>\n<li>值传递和引用传递</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 21:52</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 值传递和引用传递</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(a);</span><br><span class=\"line\">        change(a);                          <span class=\"comment\">//调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span></span><br><span class=\"line\">        System.out.println(a);              <span class=\"comment\">//可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();       <span class=\"comment\">//实例化一个类，new一个Person类。</span></span><br><span class=\"line\">        System.out.println(person.name);</span><br><span class=\"line\">        changeName(person);                 <span class=\"comment\">//由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span></span><br><span class=\"line\">        System.out.println(person.name);    <span class=\"comment\">//这就是引用传递（实质上还是值传递）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeName</span><span class=\"params\">(Person person)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span></span><br><span class=\"line\">        person.name = <span class=\"string\">&quot;xiheya&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png\" alt=\"值传递与引用传递\"></p>\n<hr>\n<ul>\n<li>this关键字</li>\n</ul>\n<h2 id=\"类与对象的关系\"><a href=\"#类与对象的关系\" class=\"headerlink\" title=\"类与对象的关系\"></a>类与对象的关系</h2><ul>\n<li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。</strong><ul>\n<li>动物、植物、手机、电脑</li>\n<li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li>\n</ul>\n</li>\n<li><strong>对象是抽象概念的具体实例</strong><ul>\n<li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li>\n<li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h2><ul>\n<li><strong>使用new关键字创建对象</strong></li>\n<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n<li><strong>构造器方法必须掌握</strong></li>\n</ul>\n"},{"title":"Java面向对象02","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"abbrlink":"55661a2d","date":"2022-08-25T14:41:45.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 构造器\n\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n\n代码：\n\n```java\npackage com.xiheya.oop.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:50\n * @Description\n */\n//学生类\npublic class Student {\n    //一个类即使什么都不写，也会存在一个构造方法\n    // 显示的定义构造期。\n//    属性：字段\n    String name;\n    int age;\n//    方法\n//    实例化初始值\n//    1.使用new关键字，实质上是调用构造器\n//    2.构造器一般用来初始化值 .\n    public Student(){\n\n    }\n//    一旦定义了有参构造，无参构造就必须显示定义\n    public Student(String name,int age){\n        this.setName(name);\n        this.setAge(age);\n    }\n    public void study(){\n        System.out.println(this.name + \" is study\");\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n/*\n//一个项目应该只存在一个main方法\npublic class Application {\n    public static void main(String[] args) {\n//类是一个抽象的事物，我们在使用它时要先实例化\n        Student student = new Student();\n        student.study();\n        Student Tom = new Student(\"Tom\",3);\n        Tom.study();\n    }\n}\n\n    构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    快捷键：Alt + Insert\n */\n```\n\n构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    **快捷键：Alt + Insert**\n\n## 创建对象内存分析\n\n代码：\n\n```java\npackage com.xiheya.oop.demo03;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 23:57\n * @Description\n */\npublic class Pet {\n    String name;\n    int age;\n    public void shout(){\n        System.out.println(\"wow  wow  wow\");\n    }\n}\n\n\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Pet dog = new Pet();\n        dog.name = \"旺财\";\n        dog.age = 3;\n        dog .shout();\n\n        Pet cat = new Pet();\n    }\n}\n\n */\n```\n\n### 内存分析\n\n1. 先将Application类中的main()方法以及常量池中的旺财，加载到方法区。\n2. 将main()方法压入栈底\n3. Pet dog = new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n4. 实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n5. Pet cat= new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n6. 实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n\n图解：\n\n![图解](https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png)\n\n---\n\n## 小结\n\n1. 类与对象\n   1. 类是一个模板---抽象；对象是一个具体的实例\n2. 方法\n   1. 方法的定义及调用\n3. 对应的应用\n   1. 引用类型：基本类型（8），对象是通过引用来操作的：栈---->堆（地址）\n4. 属性：字段Field  成员变量\n   1. 默认初始化：\n      1. 数字 ： 0  0.0\n      2. char： u0000\n      3. boolean：false\n      4. 引用：null\n   2. 属性的定义\n      1. 修饰符 + 属性类型 + 属性名 = 属性值\n5. 对象的创建和使用\n   1. 必须使用new 关键字创造对象，构造器Person xiheya = new Person();\n   2. 对象的属性 xiheya.name\n   3. 对象的方法 xiheya.sleep();\n6. 类\n   1. 静态的属性  属性\n   2. 动态的行为  方法\n","source":"_posts/Java面向对象02.md","raw":"---\ntitle: Java面向对象02\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ntags:\n  - Java\n  - Java面向对象\nabbrlink: 55661a2d\ndate: 2022-08-25 22:41:45\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 构造器\n\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：\n  - 1.必须和类的名字相同\n  - 2.必须没有返回类型，也不能写void\n\n代码：\n\n```java\npackage com.xiheya.oop.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 22:50\n * @Description\n */\n//学生类\npublic class Student {\n    //一个类即使什么都不写，也会存在一个构造方法\n    // 显示的定义构造期。\n//    属性：字段\n    String name;\n    int age;\n//    方法\n//    实例化初始值\n//    1.使用new关键字，实质上是调用构造器\n//    2.构造器一般用来初始化值 .\n    public Student(){\n\n    }\n//    一旦定义了有参构造，无参构造就必须显示定义\n    public Student(String name,int age){\n        this.setName(name);\n        this.setAge(age);\n    }\n    public void study(){\n        System.out.println(this.name + \" is study\");\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n/*\n//一个项目应该只存在一个main方法\npublic class Application {\n    public static void main(String[] args) {\n//类是一个抽象的事物，我们在使用它时要先实例化\n        Student student = new Student();\n        student.study();\n        Student Tom = new Student(\"Tom\",3);\n        Tom.study();\n    }\n}\n\n    构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    快捷键：Alt + Insert\n */\n```\n\n构造器：\n        1.和类名相同\n        2.没有返回值\n    作用：\n        1.new本质在调用构造器\n        2.初始化对象的值\n    注意点:\n        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义\n    **快捷键：Alt + Insert**\n\n## 创建对象内存分析\n\n代码：\n\n```java\npackage com.xiheya.oop.demo03;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/12/ 23:57\n * @Description\n */\npublic class Pet {\n    String name;\n    int age;\n    public void shout(){\n        System.out.println(\"wow  wow  wow\");\n    }\n}\n\n\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Pet dog = new Pet();\n        dog.name = \"旺财\";\n        dog.age = 3;\n        dog .shout();\n\n        Pet cat = new Pet();\n    }\n}\n\n */\n```\n\n### 内存分析\n\n1. 先将Application类中的main()方法以及常量池中的旺财，加载到方法区。\n2. 将main()方法压入栈底\n3. Pet dog = new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n4. 实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n5. Pet cat= new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。\n6. 实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。\n\n图解：\n\n![图解](https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png)\n\n---\n\n## 小结\n\n1. 类与对象\n   1. 类是一个模板---抽象；对象是一个具体的实例\n2. 方法\n   1. 方法的定义及调用\n3. 对应的应用\n   1. 引用类型：基本类型（8），对象是通过引用来操作的：栈---->堆（地址）\n4. 属性：字段Field  成员变量\n   1. 默认初始化：\n      1. 数字 ： 0  0.0\n      2. char： u0000\n      3. boolean：false\n      4. 引用：null\n   2. 属性的定义\n      1. 修饰符 + 属性类型 + 属性名 = 属性值\n5. 对象的创建和使用\n   1. 必须使用new 关键字创造对象，构造器Person xiheya = new Person();\n   2. 对象的属性 xiheya.name\n   3. 对象的方法 xiheya.sleep();\n6. 类\n   1. 静态的属性  属性\n   2. 动态的行为  方法\n","slug":"Java面向对象02","published":1,"updated":"2023-07-31T12:40:09.603Z","layout":"post","link":"","_id":"clktr4qri001pzsa0gzx55bem","content":"<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><ul>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 22:50</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一个类即使什么都不写，也会存在一个构造方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 显示的定义构造期。</span></span><br><span class=\"line\"><span class=\"comment\">//    属性：字段</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"><span class=\"comment\">//    方法</span></span><br><span class=\"line\"><span class=\"comment\">//    实例化初始值</span></span><br><span class=\"line\"><span class=\"comment\">//    1.使用new关键字，实质上是调用构造器</span></span><br><span class=\"line\"><span class=\"comment\">//    2.构造器一般用来初始化值 .</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//    一旦定义了有参构造，无参构造就必须显示定义</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setName(name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">study</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; is study&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//一个项目应该只存在一个main方法</span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//类是一个抽象的事物，我们在使用它时要先实例化</span></span><br><span class=\"line\"><span class=\"comment\">        Student student = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        student.study();</span></span><br><span class=\"line\"><span class=\"comment\">        Student Tom = new Student(&quot;Tom&quot;,3);</span></span><br><span class=\"line\"><span class=\"comment\">        Tom.study();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    构造器：</span></span><br><span class=\"line\"><span class=\"comment\">        1.和类名相同</span></span><br><span class=\"line\"><span class=\"comment\">        2.没有返回值</span></span><br><span class=\"line\"><span class=\"comment\">    作用：</span></span><br><span class=\"line\"><span class=\"comment\">        1.new本质在调用构造器</span></span><br><span class=\"line\"><span class=\"comment\">        2.初始化对象的值</span></span><br><span class=\"line\"><span class=\"comment\">    注意点:</span></span><br><span class=\"line\"><span class=\"comment\">        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义</span></span><br><span class=\"line\"><span class=\"comment\">    快捷键：Alt + Insert</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>构造器：<br>        1.和类名相同<br>        2.没有返回值<br>    作用：<br>        1.new本质在调用构造器<br>        2.初始化对象的值<br>    注意点:<br>        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义<br>    <strong>快捷键：Alt + Insert</strong></p>\n<h2 id=\"创建对象内存分析\"><a href=\"#创建对象内存分析\" class=\"headerlink\" title=\"创建对象内存分析\"></a>创建对象内存分析</h2><p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 23:57</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;wow  wow  wow&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        Pet dog = new Pet();</span></span><br><span class=\"line\"><span class=\"comment\">        dog.name = &quot;旺财&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        dog.age = 3;</span></span><br><span class=\"line\"><span class=\"comment\">        dog .shout();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        Pet cat = new Pet();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><ol>\n<li>先将Application类中的main()方法以及常量池中的旺财，加载到方法区。</li>\n<li>将main()方法压入栈底</li>\n<li>Pet dog &#x3D; new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n<li>Pet cat&#x3D; new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n</ol>\n<p>图解：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png\" alt=\"图解\"></p>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li>类与对象<ol>\n<li>类是一个模板—抽象；对象是一个具体的实例</li>\n</ol>\n</li>\n<li>方法<ol>\n<li>方法的定义及调用</li>\n</ol>\n</li>\n<li>对应的应用<ol>\n<li>引用类型：基本类型（8），对象是通过引用来操作的：栈—-&gt;堆（地址）</li>\n</ol>\n</li>\n<li>属性：字段Field  成员变量<ol>\n<li>默认初始化：<ol>\n<li>数字 ： 0  0.0</li>\n<li>char： u0000</li>\n<li>boolean：false</li>\n<li>引用：null</li>\n</ol>\n</li>\n<li>属性的定义<ol>\n<li>修饰符 + 属性类型 + 属性名 &#x3D; 属性值</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>对象的创建和使用<ol>\n<li>必须使用new 关键字创造对象，构造器Person xiheya &#x3D; new Person();</li>\n<li>对象的属性 xiheya.name</li>\n<li>对象的方法 xiheya.sleep();</li>\n</ol>\n</li>\n<li>类<ol>\n<li>静态的属性  属性</li>\n<li>动态的行为  方法</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover":"linear-gradient(to top,#fbc2eb 0%,#a6c1ee 100%)","excerpt":"","more":"<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><ul>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul>\n<li>1.必须和类的名字相同</li>\n<li>2.必须没有返回类型，也不能写void</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 22:50</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一个类即使什么都不写，也会存在一个构造方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 显示的定义构造期。</span></span><br><span class=\"line\"><span class=\"comment\">//    属性：字段</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"><span class=\"comment\">//    方法</span></span><br><span class=\"line\"><span class=\"comment\">//    实例化初始值</span></span><br><span class=\"line\"><span class=\"comment\">//    1.使用new关键字，实质上是调用构造器</span></span><br><span class=\"line\"><span class=\"comment\">//    2.构造器一般用来初始化值 .</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//    一旦定义了有参构造，无参构造就必须显示定义</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name,<span class=\"type\">int</span> age)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setName(name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">study</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; is study&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//一个项目应该只存在一个main方法</span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//类是一个抽象的事物，我们在使用它时要先实例化</span></span><br><span class=\"line\"><span class=\"comment\">        Student student = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        student.study();</span></span><br><span class=\"line\"><span class=\"comment\">        Student Tom = new Student(&quot;Tom&quot;,3);</span></span><br><span class=\"line\"><span class=\"comment\">        Tom.study();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    构造器：</span></span><br><span class=\"line\"><span class=\"comment\">        1.和类名相同</span></span><br><span class=\"line\"><span class=\"comment\">        2.没有返回值</span></span><br><span class=\"line\"><span class=\"comment\">    作用：</span></span><br><span class=\"line\"><span class=\"comment\">        1.new本质在调用构造器</span></span><br><span class=\"line\"><span class=\"comment\">        2.初始化对象的值</span></span><br><span class=\"line\"><span class=\"comment\">    注意点:</span></span><br><span class=\"line\"><span class=\"comment\">        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义</span></span><br><span class=\"line\"><span class=\"comment\">    快捷键：Alt + Insert</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>构造器：<br>        1.和类名相同<br>        2.没有返回值<br>    作用：<br>        1.new本质在调用构造器<br>        2.初始化对象的值<br>    注意点:<br>        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义<br>    <strong>快捷键：Alt + Insert</strong></p>\n<h2 id=\"创建对象内存分析\"><a href=\"#创建对象内存分析\" class=\"headerlink\" title=\"创建对象内存分析\"></a>创建对象内存分析</h2><p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/12/ 23:57</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shout</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;wow  wow  wow&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        Pet dog = new Pet();</span></span><br><span class=\"line\"><span class=\"comment\">        dog.name = &quot;旺财&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        dog.age = 3;</span></span><br><span class=\"line\"><span class=\"comment\">        dog .shout();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        Pet cat = new Pet();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><ol>\n<li>先将Application类中的main()方法以及常量池中的旺财，加载到方法区。</li>\n<li>将main()方法压入栈底</li>\n<li>Pet dog &#x3D; new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n<li>Pet cat&#x3D; new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li>\n<li>实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li>\n</ol>\n<p>图解：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png\" alt=\"图解\"></p>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li>类与对象<ol>\n<li>类是一个模板—抽象；对象是一个具体的实例</li>\n</ol>\n</li>\n<li>方法<ol>\n<li>方法的定义及调用</li>\n</ol>\n</li>\n<li>对应的应用<ol>\n<li>引用类型：基本类型（8），对象是通过引用来操作的：栈—-&gt;堆（地址）</li>\n</ol>\n</li>\n<li>属性：字段Field  成员变量<ol>\n<li>默认初始化：<ol>\n<li>数字 ： 0  0.0</li>\n<li>char： u0000</li>\n<li>boolean：false</li>\n<li>引用：null</li>\n</ol>\n</li>\n<li>属性的定义<ol>\n<li>修饰符 + 属性类型 + 属性名 &#x3D; 属性值</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>对象的创建和使用<ol>\n<li>必须使用new 关键字创造对象，构造器Person xiheya &#x3D; new Person();</li>\n<li>对象的属性 xiheya.name</li>\n<li>对象的方法 xiheya.sleep();</li>\n</ol>\n</li>\n<li>类<ol>\n<li>静态的属性  属性</li>\n<li>动态的行为  方法</li>\n</ol>\n</li>\n</ol>\n"},{"title":"Java面向对象03","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"abbrlink":"22612abb","date":"2022-08-25T14:41:48.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 封装\n\n- 该露的露，该藏的藏\n  - 我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用\n- 封装（数据的隐藏）\n  - 通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。\n- 记住这句话：**属性私有，get/set**\n- 封装的作用：\n  - 1.提高程序的安全性，保护数据\n  - 2.隐藏代码的实现细节\n  - 3.统一接口\n  - 4.系统可维护性增加了\n\n代码：\n\n```java\npackage com.xiheya.oop.demo04;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:00\n * @Description\n */\npublic class Student {\n//    属性私有\n    private String name;        //姓名\n    private int id;            //学号\n    private char sex;           //性别\n\n    public Student() {\n    }\n\n    public Student(String name, int id, char sex) {\n        this.name = name;\n        this.id = id;\n        this.sex = sex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n}\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Student Tom = new Student();\n        System.out.println(Tom.getName());\n        Tom.setName(\"Tom\");\n        System.out.println(Tom.getName());\n        System.out.println(Tom.getId());\n        Tom.setId(1234);\n        System.out.println(Tom.getId());\n    }\n}\n */\n```\n\n运行结果：\n\n![封装](https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png)\n\n---\n\n## 继承\n\n- 继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。\n- **extends**的意思是”扩展“。子类是父类的扩展。\n- **Java中类只有单继承，没有多继承！**\n- 继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。\n- 继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。\n- object类\n- super\n- 方法重写\n\n**子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    \n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n![继承](https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png)\n\n可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。\n\n---\n\n### super关键字：\n\nsuper关键字可以在子类调用父类。\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    public Person() {\n        System.out.println(\"Person类的构造方法执行了\");\n    }\n\n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n    public void print(){\n        System.out.println(\"Person\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n    public Teacher() {\n        System.out.println(\"Teache的构造方法执行了\");\n    }\n\n    public void test(){\n        print();\n        this.print();\n        super.print();\n    }\n    public void print(){\n        System.out.println(\"Teacher\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n#### 运行结果：\n\n![super](https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png)\n\n![构造方法](https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png)\n\n可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。\n\n---\n\n#### super注意点\n\n1. super调用父类的构造方法，必须在构造方法的第一个\n2. super必须只能出现在子类的方法或者构造方法中\n3. super和this不能同时调用构造方法\n\nsuper与this的区别\n\n1. 代表的对象不同：\n   1. this：本身调用者这个对象\n   2. super：代表父类对象的应用\n2. 前提：\n   1. this：没有继承也可以使用\n   2. super：只能在继承条件才可以使用\n3. 构造方法：\n   1. this();本类的构造\n   2. super():父类的构造\n\n### 方法重写\n\n**静态方法是类的方法，而非静态方法是对象的方法。** 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。\n\n**静态方法和非静态方法差别很大**\n\n1. 静态方法：方法的调用只和左边定义的数据类型有关\n2. 非静态：非静态方法才存在重写。\n\n**只有非静态的 public属性的方法才能被重写**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n```\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n\n```\n\n#### 运行结果\n\n![方法重写](https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png)\n\n---\n\n#### 笔记\n\n**重写：需要有继承关系，子类重写父类的方法！**\n\n1. 方法名必须相同\n2. 参数列表必须相同\n3. 修饰符：范围可以扩大. public>protected>default>private\n4. 抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException\n\n**重写：子类的方法和父类必须要一致，方法体不同。**\n\n**为什么要重写**：\n\n1. 父类的功能，子类不一定需要，或者不一定满足\n\n---\n\n## 多态\n\n- 动态编译：类型”可扩展性更强\n- 多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。\n- 一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多\n- 多态存在的条件\n  - 有继承关系\n  - 子类重写父类方法\n  - 父类引用指向子类对象\n- **注意：多态是方法的多态，属性没有多态**\n- instanceof\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo06;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:59\n * @Description\n */\npublic class Person {\n    public void run(){\n        System.out.println(\"Person run\");\n    }\n}\n/*\npublic class Student extends Person{\n    @Override\n    public void run() {\n\n        System.out.println(\"Student run\");\n    }\n\n    public void eat(){\n        System.out.println(\"Student eat\");\n    }\n}\n\n\npublic class Application {\n    public static void main(String[] args) {\n        //一个对象的实际类型是确定的\n        // 可以指向的引用类型就不确了 父类的引用可以指向子类\n        // Student 能调用的方法都是自己的，或者继承父类的、\n        Student s1 = new Student();\n        //Person 父类型，可以指向子类，但是不能调用子类独有的方法\n        Person s2 = new Student();\n        Object s3 = new Student();\n        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大\n        // 子类重写了父类的方法，则执行子类的方法。\n        s1.run();\n        s2.run();\n        ((Student)s2).eat();\n        s1.eat();\n\n\n    }\n}\n\n */\n```\n\n### 运行结果\n\n![多态](https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png)\n\n---\n\n### 注意事项\n\n1. 多态是方法的多态；属性没有多态。\n2. 父类和子类，有联系 （类型转换异常--ClassCastException）\n3. 存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 = new Son();\n4. **哪些方法不能重写？**\n   1. static方法，static代码块属于类，对象被创建时一同被执行\n   2. **final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。**\n   3. private方法： 私有属性不能被继承\n\n### instanceof关键字\n\n#### 代码：\n\n```java\npackage com.xiheya.oop;\n\nimport com.xiheya.oop.demo06.Teacher;\nimport com.xiheya.oop.demo06.Student;\nimport com.xiheya.oop.demo06.Person;\n\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 11:59\n * @Description\n */\npublic class Application {\n    public static void main(String[] args) {\n        Student student = new Student();\n        Person person = new Student();\n        Object object = new Student();\n        //X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。\n        System.out.println(object instanceof Student);     //true\n        System.out.println(object instanceof Person);       //true\n        System.out.println(object instanceof Object);       //true\n        System.out.println(object instanceof Teacher);      //false\n        System.out.println(object instanceof String);       //false\n        System.out.println(\"========================\");\n\n        System.out.println(person instanceof Student);      //true\n        System.out.println(person instanceof Person);       //true\n        System.out.println(person instanceof Object);       //true\n        System.out.println(person instanceof Teacher);      //false\n        //System.out.println(person instanceof String);     //编译报错\n        System.out.println(\"========================\");\n\n        System.out.println(student instanceof Student);     //true\n        System.out.println(student instanceof Person);      //true\n        System.out.println(student instanceof Object);      //true\n        //System.out.println(student instanceof Teacher);   //编译报错\n        //System.out.println(student instanceof String);    //编译报错\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n//        Person obj = new Student();\n//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n//        ((Student) obj).go();\n//\n//        //类型之间的转换  子-------》父\n//        Student student = new Student();\n//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n//        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n\n#### 运行结果\n\n![instanceof](https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png)\n\n---\n\n### 强制转换\n\n1. 父类引用指向子类的对象\n\n2. 把子类转换为父类：向上转型：（自动转换）\n\n3. 把父类转换为子类：向下转型：（强制转换）\n\n4. 方便方法的调用，减少代码重复率，简洁\n\n5. 由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n\n6. student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n\n7. 类型之间的转换\n   高-------------------低（强制转换）\n\n   低-------------------高（自动转换）\n\n代码：\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n        Person obj = new Student();\n        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n        ((Student) obj).go();\n\n        //类型之间的转换  子-------》父\n        Student student = new Student();\n        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n","source":"_posts/Java面向对象03.md","raw":"---\ntitle: Java面向对象03\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ntags:\n  - Java\n  - Java面向对象\nabbrlink: 22612abb\ndate: 2022-08-25 22:41:48\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 封装\n\n- 该露的露，该藏的藏\n  - 我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用\n- 封装（数据的隐藏）\n  - 通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。\n- 记住这句话：**属性私有，get/set**\n- 封装的作用：\n  - 1.提高程序的安全性，保护数据\n  - 2.隐藏代码的实现细节\n  - 3.统一接口\n  - 4.系统可维护性增加了\n\n代码：\n\n```java\npackage com.xiheya.oop.demo04;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:00\n * @Description\n */\npublic class Student {\n//    属性私有\n    private String name;        //姓名\n    private int id;            //学号\n    private char sex;           //性别\n\n    public Student() {\n    }\n\n    public Student(String name, int id, char sex) {\n        this.name = name;\n        this.id = id;\n        this.sex = sex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public char getSex() {\n        return sex;\n    }\n\n    public void setSex(char sex) {\n        this.sex = sex;\n    }\n}\n/*\npublic class Application {\n    public static void main(String[] args) {\n        Student Tom = new Student();\n        System.out.println(Tom.getName());\n        Tom.setName(\"Tom\");\n        System.out.println(Tom.getName());\n        System.out.println(Tom.getId());\n        Tom.setId(1234);\n        System.out.println(Tom.getId());\n    }\n}\n */\n```\n\n运行结果：\n\n![封装](https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png)\n\n---\n\n## 继承\n\n- 继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。\n- **extends**的意思是”扩展“。子类是父类的扩展。\n- **Java中类只有单继承，没有多继承！**\n- 继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。\n- 继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。\n- object类\n- super\n- 方法重写\n\n**子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    \n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n![继承](https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png)\n\n可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。\n\n---\n\n### super关键字：\n\nsuper关键字可以在子类调用父类。\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 12:45\n * @Description\n */\n//在Java中所有类都默认直接或间接继承Object\npublic class Person {\n    public Person() {\n        System.out.println(\"Person类的构造方法执行了\");\n    }\n\n    public void speak(){\n        System.out.println(\"say some thing\");\n    }\n    public void print(){\n        System.out.println(\"Person\");\n    }\n}\n/*\n//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为\n//快捷键：ctrl+H\npublic class Teacher extends Person{\n    public Teacher() {\n        System.out.println(\"Teache的构造方法执行了\");\n    }\n\n    public void test(){\n        print();\n        this.print();\n        super.print();\n    }\n    public void print(){\n        System.out.println(\"Teacher\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n//        Student Tom = new Student();\n//        System.out.println(Tom.getName());\n//        Tom.setName(\"Tom\");\n//        System.out.println(Tom.getName());\n//        System.out.println(Tom.getId());\n//        Tom.setId(1234);\n//        System.out.println(Tom.getId());\n        Teacher teacher = new Teacher();\n        teacher.speak();\n\n    }\n}\n\n\n */\n```\n\n#### 运行结果：\n\n![super](https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png)\n\n![构造方法](https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png)\n\n可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。\n\n---\n\n#### super注意点\n\n1. super调用父类的构造方法，必须在构造方法的第一个\n2. super必须只能出现在子类的方法或者构造方法中\n3. super和this不能同时调用构造方法\n\nsuper与this的区别\n\n1. 代表的对象不同：\n   1. this：本身调用者这个对象\n   2. super：代表父类对象的应用\n2. 前提：\n   1. this：没有继承也可以使用\n   2. super：只能在继承条件才可以使用\n3. 构造方法：\n   1. this();本类的构造\n   2. super():父类的构造\n\n### 方法重写\n\n**静态方法是类的方法，而非静态方法是对象的方法。** 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。\n\n**静态方法和非静态方法差别很大**\n\n1. 静态方法：方法的调用只和左边定义的数据类型有关\n2. 非静态：非静态方法才存在重写。\n\n**只有非静态的 public属性的方法才能被重写**\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n```\n\n#### 代码\n\n```java\npackage com.xiheya.oop.demo05;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:27\n * @Description\n */\npublic class B {\n    public void test(){\n        System.out.println(\"b--->test\");\n    }\n}\n/*\npublic class A extends B{\n    public void test(){\n        System.out.println(\"a--->test\");\n    }\n}\n\npublic class Application {\n    public static void main(String[] args) {\n        A a = new A();\n        B b = new A();\n        a.test();\n        b.test();\n    }\n}\n\n */\n\n```\n\n#### 运行结果\n\n![方法重写](https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png)\n\n---\n\n#### 笔记\n\n**重写：需要有继承关系，子类重写父类的方法！**\n\n1. 方法名必须相同\n2. 参数列表必须相同\n3. 修饰符：范围可以扩大. public>protected>default>private\n4. 抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException\n\n**重写：子类的方法和父类必须要一致，方法体不同。**\n\n**为什么要重写**：\n\n1. 父类的功能，子类不一定需要，或者不一定满足\n\n---\n\n## 多态\n\n- 动态编译：类型”可扩展性更强\n- 多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。\n- 一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多\n- 多态存在的条件\n  - 有继承关系\n  - 子类重写父类方法\n  - 父类引用指向子类对象\n- **注意：多态是方法的多态，属性没有多态**\n- instanceof\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo06;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 15:59\n * @Description\n */\npublic class Person {\n    public void run(){\n        System.out.println(\"Person run\");\n    }\n}\n/*\npublic class Student extends Person{\n    @Override\n    public void run() {\n\n        System.out.println(\"Student run\");\n    }\n\n    public void eat(){\n        System.out.println(\"Student eat\");\n    }\n}\n\n\npublic class Application {\n    public static void main(String[] args) {\n        //一个对象的实际类型是确定的\n        // 可以指向的引用类型就不确了 父类的引用可以指向子类\n        // Student 能调用的方法都是自己的，或者继承父类的、\n        Student s1 = new Student();\n        //Person 父类型，可以指向子类，但是不能调用子类独有的方法\n        Person s2 = new Student();\n        Object s3 = new Student();\n        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大\n        // 子类重写了父类的方法，则执行子类的方法。\n        s1.run();\n        s2.run();\n        ((Student)s2).eat();\n        s1.eat();\n\n\n    }\n}\n\n */\n```\n\n### 运行结果\n\n![多态](https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png)\n\n---\n\n### 注意事项\n\n1. 多态是方法的多态；属性没有多态。\n2. 父类和子类，有联系 （类型转换异常--ClassCastException）\n3. 存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 = new Son();\n4. **哪些方法不能重写？**\n   1. static方法，static代码块属于类，对象被创建时一同被执行\n   2. **final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。**\n   3. private方法： 私有属性不能被继承\n\n### instanceof关键字\n\n#### 代码：\n\n```java\npackage com.xiheya.oop;\n\nimport com.xiheya.oop.demo06.Teacher;\nimport com.xiheya.oop.demo06.Student;\nimport com.xiheya.oop.demo06.Person;\n\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 11:59\n * @Description\n */\npublic class Application {\n    public static void main(String[] args) {\n        Student student = new Student();\n        Person person = new Student();\n        Object object = new Student();\n        //X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。\n        System.out.println(object instanceof Student);     //true\n        System.out.println(object instanceof Person);       //true\n        System.out.println(object instanceof Object);       //true\n        System.out.println(object instanceof Teacher);      //false\n        System.out.println(object instanceof String);       //false\n        System.out.println(\"========================\");\n\n        System.out.println(person instanceof Student);      //true\n        System.out.println(person instanceof Person);       //true\n        System.out.println(person instanceof Object);       //true\n        System.out.println(person instanceof Teacher);      //false\n        //System.out.println(person instanceof String);     //编译报错\n        System.out.println(\"========================\");\n\n        System.out.println(student instanceof Student);     //true\n        System.out.println(student instanceof Person);      //true\n        System.out.println(student instanceof Object);      //true\n        //System.out.println(student instanceof Teacher);   //编译报错\n        //System.out.println(student instanceof String);    //编译报错\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n//        Person obj = new Student();\n//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n//        ((Student) obj).go();\n//\n//        //类型之间的转换  子-------》父\n//        Student student = new Student();\n//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n//        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n\n#### 运行结果\n\n![instanceof](https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png)\n\n---\n\n### 强制转换\n\n1. 父类引用指向子类的对象\n\n2. 把子类转换为父类：向上转型：（自动转换）\n\n3. 把父类转换为子类：向下转型：（强制转换）\n\n4. 方便方法的调用，减少代码重复率，简洁\n\n5. 由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n\n6. student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n\n7. 类型之间的转换\n   高-------------------低（强制转换）\n\n   低-------------------高（自动转换）\n\n代码：\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n\n        //类型之间的转换  父-------》子\n        // 高-------------------低（强制转换）。\n        Person obj = new Student();\n        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型\n        ((Student) obj).go();\n\n        //类型之间的转换  子-------》父\n        Student student = new Student();\n        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。\n        Person person = student;\n\n    }\n}\n/*\n1.父类引用指向子类的对象\n2.把子类转换为父类：向上转型：（自动转换）\n3.把父类转换为子类：向下转型：（强制转换）\n4.方便方法的调用，减少代码重复率，简洁\n */\n```\n","slug":"Java面向对象03","published":1,"updated":"2023-07-31T12:40:09.605Z","layout":"post","link":"","_id":"clktr4qrj001tzsa0hlsrfufr","content":"<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>该露的露，该藏的藏<ul>\n<li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li>\n</ul>\n</li>\n<li>封装（数据的隐藏）<ul>\n<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>\n</ul>\n</li>\n<li>记住这句话：<strong>属性私有，get&#x2F;set</strong></li>\n<li>封装的作用：<ul>\n<li>1.提高程序的安全性，保护数据</li>\n<li>2.隐藏代码的实现细节</li>\n<li>3.统一接口</li>\n<li>4.系统可维护性增加了</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 12:00</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//    属性私有</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;        <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;            <span class=\"comment\">//学号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">char</span> sex;           <span class=\"comment\">//性别</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name, <span class=\"type\">int</span> id, <span class=\"type\">char</span> sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">char</span> <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(<span class=\"type\">char</span> sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        Student Tom = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">        Tom.setName(&quot;Tom&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">        Tom.setId(1234);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png\" alt=\"封装\"></p>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li>\n<li><strong>extends</strong>的意思是”扩展“。子类是父类的扩展。</li>\n<li><strong>Java中类只有单继承，没有多继承！</strong></li>\n<li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。</li>\n<li>继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li>\n<li>object类</li>\n<li>super</li>\n<li>方法重写</li>\n</ul>\n<p><strong>子类继承了父类，就会拥有父类的全部方法，前提是方法属性为<br>在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">speak</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say some thing&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class=\"line\"><span class=\"comment\">//快捷键：ctrl+H</span></span><br><span class=\"line\"><span class=\"comment\">public class Teacher extends Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        Student Tom = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setId(1234);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">        Teacher teacher = new Teacher();</span></span><br><span class=\"line\"><span class=\"comment\">        teacher.speak();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png\" alt=\"继承\"></p>\n<p>可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。</p>\n<hr>\n<h3 id=\"super关键字：\"><a href=\"#super关键字：\" class=\"headerlink\" title=\"super关键字：\"></a>super关键字：</h3><p>super关键字可以在子类调用父类。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Person类的构造方法执行了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">speak</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say some thing&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Person&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class=\"line\"><span class=\"comment\">//快捷键：ctrl+H</span></span><br><span class=\"line\"><span class=\"comment\">public class Teacher extends Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public Teacher() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Teache的构造方法执行了&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public void test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        print();</span></span><br><span class=\"line\"><span class=\"comment\">        this.print();</span></span><br><span class=\"line\"><span class=\"comment\">        super.print();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    public void print()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Teacher&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        Student Tom = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setId(1234);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">        Teacher teacher = new Teacher();</span></span><br><span class=\"line\"><span class=\"comment\">        teacher.speak();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png\" alt=\"super\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png\" alt=\"构造方法\"></p>\n<p>可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。</p>\n<hr>\n<h4 id=\"super注意点\"><a href=\"#super注意点\" class=\"headerlink\" title=\"super注意点\"></a>super注意点</h4><ol>\n<li>super调用父类的构造方法，必须在构造方法的第一个</li>\n<li>super必须只能出现在子类的方法或者构造方法中</li>\n<li>super和this不能同时调用构造方法</li>\n</ol>\n<p>super与this的区别</p>\n<ol>\n<li>代表的对象不同：<ol>\n<li>this：本身调用者这个对象</li>\n<li>super：代表父类对象的应用</li>\n</ol>\n</li>\n<li>前提：<ol>\n<li>this：没有继承也可以使用</li>\n<li>super：只能在继承条件才可以使用</li>\n</ol>\n</li>\n<li>构造方法：<ol>\n<li>this();本类的构造</li>\n<li>super():父类的构造</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p><strong>静态方法是类的方法，而非静态方法是对象的方法。</strong> 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。</p>\n<p><strong>静态方法和非静态方法差别很大</strong></p>\n<ol>\n<li>静态方法：方法的调用只和左边定义的数据类型有关</li>\n<li>非静态：非静态方法才存在重写。</li>\n</ol>\n<p><strong>只有非静态的 public属性的方法才能被重写</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;b---&gt;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class A extends B&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public void test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        A a = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        B b = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        a.test();</span></span><br><span class=\"line\"><span class=\"comment\">        b.test();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;b---&gt;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class A extends B&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public void test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        A a = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        B b = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        a.test();</span></span><br><span class=\"line\"><span class=\"comment\">        b.test();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png\" alt=\"方法重写\"></p>\n<hr>\n<h4 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h4><p><strong>重写：需要有继承关系，子类重写父类的方法！</strong></p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须相同</li>\n<li>修饰符：范围可以扩大. public&gt;protected&gt;default&gt;private</li>\n<li>抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException</li>\n</ol>\n<p><strong>重写：子类的方法和父类必须要一致，方法体不同。</strong></p>\n<p><strong>为什么要重写</strong>：</p>\n<ol>\n<li>父类的功能，子类不一定需要，或者不一定满足</li>\n</ol>\n<hr>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li>动态编译：类型”可扩展性更强</li>\n<li>多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</li>\n<li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li>\n<li>多态存在的条件<ul>\n<li>有继承关系</li>\n<li>子类重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n</li>\n<li><strong>注意：多态是方法的多态，属性没有多态</strong></li>\n<li>instanceof</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo06;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 15:59</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Person run&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Student extends Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">    public void run() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Student run&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public void eat()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Student eat&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        //一个对象的实际类型是确定的</span></span><br><span class=\"line\"><span class=\"comment\">        // 可以指向的引用类型就不确了 父类的引用可以指向子类</span></span><br><span class=\"line\"><span class=\"comment\">        // Student 能调用的方法都是自己的，或者继承父类的、</span></span><br><span class=\"line\"><span class=\"comment\">        Student s1 = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        //Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class=\"line\"><span class=\"comment\">        Person s2 = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        Object s3 = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class=\"line\"><span class=\"comment\">        // 子类重写了父类的方法，则执行子类的方法。</span></span><br><span class=\"line\"><span class=\"comment\">        s1.run();</span></span><br><span class=\"line\"><span class=\"comment\">        s2.run();</span></span><br><span class=\"line\"><span class=\"comment\">        ((Student)s2).eat();</span></span><br><span class=\"line\"><span class=\"comment\">        s1.eat();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png\" alt=\"多态\"></p>\n<hr>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>多态是方法的多态；属性没有多态。</li>\n<li>父类和子类，有联系 （类型转换异常–ClassCastException）</li>\n<li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 &#x3D; new Son();</li>\n<li><strong>哪些方法不能重写？</strong><ol>\n<li>static方法，static代码块属于类，对象被创建时一同被执行</li>\n<li><strong>final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。</strong></li>\n<li>private方法： 私有属性不能被继承</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h3><h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.oop.demo06.Teacher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.oop.demo06.Student;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.oop.demo06.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 11:59</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"comment\">//X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Student);     <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Person);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Object);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Teacher);      <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> String);       <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Student);      <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Person);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Object);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Teacher);      <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(person instanceof String);     //编译报错</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(student <span class=\"keyword\">instanceof</span> Student);     <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(student <span class=\"keyword\">instanceof</span> Person);      <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(student <span class=\"keyword\">instanceof</span> Object);      <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(student instanceof Teacher);   //编译报错</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(student instanceof String);    //编译报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//类型之间的转换  父-------》子</span></span><br><span class=\"line\">        <span class=\"comment\">// 高-------------------低（强制转换）。</span></span><br><span class=\"line\"><span class=\"comment\">//        Person obj = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class=\"line\"><span class=\"comment\">//        ((Student) obj).go();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        //类型之间的转换  子-------》父</span></span><br><span class=\"line\"><span class=\"comment\">//        Student student = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class=\"line\"><span class=\"comment\">//        Person person = student;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.父类引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"comment\">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class=\"line\"><span class=\"comment\">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class=\"line\"><span class=\"comment\">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png\" alt=\"instanceof\"></p>\n<hr>\n<h3 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h3><ol>\n<li><p>父类引用指向子类的对象</p>\n</li>\n<li><p>把子类转换为父类：向上转型：（自动转换）</p>\n</li>\n<li><p>把父类转换为子类：向下转型：（强制转换）</p>\n</li>\n<li><p>方便方法的调用，减少代码重复率，简洁</p>\n</li>\n<li><p>由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</p>\n</li>\n<li><p>student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</p>\n</li>\n<li><p>类型之间的转换<br>高——————-低（强制转换）</p>\n<p>低——————-高（自动转换）</p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//类型之间的转换  父-------》子</span></span><br><span class=\"line\">        <span class=\"comment\">// 高-------------------低（强制转换）。</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"comment\">//student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class=\"line\">        ((Student) obj).go();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//类型之间的转换  子-------》父</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"comment\">//由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.父类引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"comment\">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class=\"line\"><span class=\"comment\">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class=\"line\"><span class=\"comment\">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"linear-gradient(to top,#fdcbf1 0%,#fdcbf1 1%,#e6dee9 100%)","excerpt":"","more":"<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li>该露的露，该藏的藏<ul>\n<li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li>\n</ul>\n</li>\n<li>封装（数据的隐藏）<ul>\n<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>\n</ul>\n</li>\n<li>记住这句话：<strong>属性私有，get&#x2F;set</strong></li>\n<li>封装的作用：<ul>\n<li>1.提高程序的安全性，保护数据</li>\n<li>2.隐藏代码的实现细节</li>\n<li>3.统一接口</li>\n<li>4.系统可维护性增加了</li>\n</ul>\n</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 12:00</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//    属性私有</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;        <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;            <span class=\"comment\">//学号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">char</span> sex;           <span class=\"comment\">//性别</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name, <span class=\"type\">int</span> id, <span class=\"type\">char</span> sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">char</span> <span class=\"title function_\">getSex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(<span class=\"type\">char</span> sex)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        Student Tom = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">        Tom.setName(&quot;Tom&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">        Tom.setId(1234);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png\" alt=\"封装\"></p>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li>\n<li><strong>extends</strong>的意思是”扩展“。子类是父类的扩展。</li>\n<li><strong>Java中类只有单继承，没有多继承！</strong></li>\n<li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。</li>\n<li>继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li>\n<li>object类</li>\n<li>super</li>\n<li>方法重写</li>\n</ul>\n<p><strong>子类继承了父类，就会拥有父类的全部方法，前提是方法属性为<br>在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">speak</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say some thing&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class=\"line\"><span class=\"comment\">//快捷键：ctrl+H</span></span><br><span class=\"line\"><span class=\"comment\">public class Teacher extends Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        Student Tom = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setId(1234);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">        Teacher teacher = new Teacher();</span></span><br><span class=\"line\"><span class=\"comment\">        teacher.speak();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png\" alt=\"继承\"></p>\n<p>可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。</p>\n<hr>\n<h3 id=\"super关键字：\"><a href=\"#super关键字：\" class=\"headerlink\" title=\"super关键字：\"></a>super关键字：</h3><p>super关键字可以在子类调用父类。</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Person类的构造方法执行了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">speak</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say some thing&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Person&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class=\"line\"><span class=\"comment\">//快捷键：ctrl+H</span></span><br><span class=\"line\"><span class=\"comment\">public class Teacher extends Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public Teacher() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Teache的构造方法执行了&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public void test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        print();</span></span><br><span class=\"line\"><span class=\"comment\">        this.print();</span></span><br><span class=\"line\"><span class=\"comment\">        super.print();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    public void print()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Teacher&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        Student Tom = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">//        Tom.setId(1234);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(Tom.getId());</span></span><br><span class=\"line\"><span class=\"comment\">        Teacher teacher = new Teacher();</span></span><br><span class=\"line\"><span class=\"comment\">        teacher.speak();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png\" alt=\"super\"></p>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png\" alt=\"构造方法\"></p>\n<p>可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。</p>\n<hr>\n<h4 id=\"super注意点\"><a href=\"#super注意点\" class=\"headerlink\" title=\"super注意点\"></a>super注意点</h4><ol>\n<li>super调用父类的构造方法，必须在构造方法的第一个</li>\n<li>super必须只能出现在子类的方法或者构造方法中</li>\n<li>super和this不能同时调用构造方法</li>\n</ol>\n<p>super与this的区别</p>\n<ol>\n<li>代表的对象不同：<ol>\n<li>this：本身调用者这个对象</li>\n<li>super：代表父类对象的应用</li>\n</ol>\n</li>\n<li>前提：<ol>\n<li>this：没有继承也可以使用</li>\n<li>super：只能在继承条件才可以使用</li>\n</ol>\n</li>\n<li>构造方法：<ol>\n<li>this();本类的构造</li>\n<li>super():父类的构造</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p><strong>静态方法是类的方法，而非静态方法是对象的方法。</strong> 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。</p>\n<p><strong>静态方法和非静态方法差别很大</strong></p>\n<ol>\n<li>静态方法：方法的调用只和左边定义的数据类型有关</li>\n<li>非静态：非静态方法才存在重写。</li>\n</ol>\n<p><strong>只有非静态的 public属性的方法才能被重写</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;b---&gt;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class A extends B&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public void test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        A a = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        B b = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        a.test();</span></span><br><span class=\"line\"><span class=\"comment\">        b.test();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;b---&gt;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class A extends B&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public void test()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        A a = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        B b = new A();</span></span><br><span class=\"line\"><span class=\"comment\">        a.test();</span></span><br><span class=\"line\"><span class=\"comment\">        b.test();</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png\" alt=\"方法重写\"></p>\n<hr>\n<h4 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h4><p><strong>重写：需要有继承关系，子类重写父类的方法！</strong></p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须相同</li>\n<li>修饰符：范围可以扩大. public&gt;protected&gt;default&gt;private</li>\n<li>抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException</li>\n</ol>\n<p><strong>重写：子类的方法和父类必须要一致，方法体不同。</strong></p>\n<p><strong>为什么要重写</strong>：</p>\n<ol>\n<li>父类的功能，子类不一定需要，或者不一定满足</li>\n</ol>\n<hr>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li>动态编译：类型”可扩展性更强</li>\n<li>多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</li>\n<li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li>\n<li>多态存在的条件<ul>\n<li>有继承关系</li>\n<li>子类重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ul>\n</li>\n<li><strong>注意：多态是方法的多态，属性没有多态</strong></li>\n<li>instanceof</li>\n</ul>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo06;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 15:59</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Person run&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Student extends Person&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">    public void run() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Student run&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public void eat()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;Student eat&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">public class Application &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        //一个对象的实际类型是确定的</span></span><br><span class=\"line\"><span class=\"comment\">        // 可以指向的引用类型就不确了 父类的引用可以指向子类</span></span><br><span class=\"line\"><span class=\"comment\">        // Student 能调用的方法都是自己的，或者继承父类的、</span></span><br><span class=\"line\"><span class=\"comment\">        Student s1 = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        //Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class=\"line\"><span class=\"comment\">        Person s2 = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        Object s3 = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class=\"line\"><span class=\"comment\">        // 子类重写了父类的方法，则执行子类的方法。</span></span><br><span class=\"line\"><span class=\"comment\">        s1.run();</span></span><br><span class=\"line\"><span class=\"comment\">        s2.run();</span></span><br><span class=\"line\"><span class=\"comment\">        ((Student)s2).eat();</span></span><br><span class=\"line\"><span class=\"comment\">        s1.eat();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png\" alt=\"多态\"></p>\n<hr>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>多态是方法的多态；属性没有多态。</li>\n<li>父类和子类，有联系 （类型转换异常–ClassCastException）</li>\n<li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 &#x3D; new Son();</li>\n<li><strong>哪些方法不能重写？</strong><ol>\n<li>static方法，static代码块属于类，对象被创建时一同被执行</li>\n<li><strong>final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。</strong></li>\n<li>private方法： 私有属性不能被继承</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h3><h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.oop.demo06.Teacher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.oop.demo06.Student;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.oop.demo06.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 11:59</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"comment\">//X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Student);     <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Person);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Object);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> Teacher);      <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(object <span class=\"keyword\">instanceof</span> String);       <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Student);      <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Person);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Object);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(person <span class=\"keyword\">instanceof</span> Teacher);      <span class=\"comment\">//false</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(person instanceof String);     //编译报错</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(student <span class=\"keyword\">instanceof</span> Student);     <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(student <span class=\"keyword\">instanceof</span> Person);      <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(student <span class=\"keyword\">instanceof</span> Object);      <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(student instanceof Teacher);   //编译报错</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(student instanceof String);    //编译报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//类型之间的转换  父-------》子</span></span><br><span class=\"line\">        <span class=\"comment\">// 高-------------------低（强制转换）。</span></span><br><span class=\"line\"><span class=\"comment\">//        Person obj = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class=\"line\"><span class=\"comment\">//        ((Student) obj).go();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        //类型之间的转换  子-------》父</span></span><br><span class=\"line\"><span class=\"comment\">//        Student student = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class=\"line\"><span class=\"comment\">//        Person person = student;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.父类引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"comment\">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class=\"line\"><span class=\"comment\">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class=\"line\"><span class=\"comment\">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png\" alt=\"instanceof\"></p>\n<hr>\n<h3 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h3><ol>\n<li><p>父类引用指向子类的对象</p>\n</li>\n<li><p>把子类转换为父类：向上转型：（自动转换）</p>\n</li>\n<li><p>把父类转换为子类：向下转型：（强制转换）</p>\n</li>\n<li><p>方便方法的调用，减少代码重复率，简洁</p>\n</li>\n<li><p>由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</p>\n</li>\n<li><p>student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</p>\n</li>\n<li><p>类型之间的转换<br>高——————-低（强制转换）</p>\n<p>低——————-高（自动转换）</p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//类型之间的转换  父-------》子</span></span><br><span class=\"line\">        <span class=\"comment\">// 高-------------------低（强制转换）。</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"comment\">//student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class=\"line\">        ((Student) obj).go();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//类型之间的转换  子-------》父</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"comment\">//由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.父类引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"comment\">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class=\"line\"><span class=\"comment\">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class=\"line\"><span class=\"comment\">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Markdown基本语法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqmdhn9j21kw0w07iu.jpg"],"abbrlink":"5d36ff15","date":"2022-08-25T14:33:19.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## Markdown 基本语法\n\n### 一.标 题:\n\n```shell\n 1.1 一级标题 #+空格+文本+回车 \n\n 1.2 二级标题 ##+空格+文本+回车 \n\n 1.3 三级标题 ###+空格+文本+回车 \n\n .....以此类推\n```\n\n---\n\n\n\n### 二.字体\n\n```shell\n粗体：文本两边加**\neg: **Hello World**\n```\n\n**Hello World**\n\n---\n\n```shell\n斜体：文本两边加*\neg: *Hello World*\n```\n\n   *Hello World*\n\n---\n\n```shell\n粗体加斜体：文本两边加***\neg: ***Hello World***\n```\n\n***Hello World***\n\n---\n\n```shell\n中间横线：文本两边加~~\neg: ~~Hello World~~\n```\n\n ~~Hello World~~\n\n---\n\n\n\n### 三.引用\n\n```shell\n右箭头后面接上文本>\neg: >与君共赴，万里征程。\n```\n\n> 与君共赴，万里征程。\n\n---\n\n### 四.分割线\n\n```shell\n三个-（减号）表示分割线\neg: ---\n```\n\n---\n\n```shell\n三个*（减号）表示分割线\neg: ***\n```\n\n***\n\n### 五.图片\n\n```shell\n插入图片：!+[图片名字]+(图片路径)\neg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n```\n\n![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n\n---\n\n\n\n### 六. 超链接\n\n```shell\n语法：[标题](链接地址)\neg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)\n```\n\n[idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13)\n\n---\n\n### 七. 列表\n\n#### 有序列表\n\n```shell\n语法：1 + . + 空格\n```\n\n1. A\n2. B\n3. C\n\n#### 无序列表\n\n```shell\n语法： - + 空格\n```\n\n- A\n- B\n- C\n\n---\n\n### 八.表格\n\n```shell\n语法：\n| 名字 | 性别 | 生日     |\n\n| ---- | ---- | -------- |\n\n| 张三 | 男   | 2000.1.1 |\n```\n\n---\n\n| 名字 | 性别 | 生日     |\n| ---- | ---- | -------- |\n| 张三 | 男   | 2000.1.1 |\n\n### 九.代码\n\n```shell\n语法 ``` + 编程语言名称\neg ```shell\n```\n\n``` java\npublic\n```\n\n### 十.快捷键\n\n#### 文本编辑快捷键\n\n- 无序列表：输入-之后输入空格 / ctrl + shift + ] (对选中行可用)\n- 有序列表：输入数字 + “.”之后输入空格 / ctrl + shift + [ (对选中行可用)\n- 引用内容：> + 空格 / ctrl + shift + q (对选中内容可用)\n- 任务列表：-[空格]空格 文字\n- 标题：ctrl + 数字\n- 表格：ctrl + t\n- 目录：[TOC]\n- 任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）\n- 选中一整行：ctrl + l (字母L)\n- 选中单词：ctrl + d\n- 选中相同格式的文字：ctrl + e\n- 跳转到文章开头：ctrl + home\n- 跳转到文章结尾：ctrl + end\n- 搜索：ctrl + f\n- 替换：ctrl + h\n- 引用：输入>之后输入空格\n- 代码块： ctrl + shift + k\n- 行内代码：ctrl + shift + ` (对选中行可用)\n- 加粗：ctrl + b\n- 倾斜：ctrl + i\n- 下划线：ctrl + u\n- 删除线：alt + shift + 5\n- 插入链接：ctrl + k\n- 插入公式：ctrl + shift + m\n- 插入图片：ctrl + shift + i\n- 保存：ctrl + s\n- 另存为：ctrl + shift + s\n\n#### 编辑模式快捷键\n\n- 源码模式编辑切换：ctrl + /\n- 打字机模式切换：F9\n- 专注模式切换：F8\n- 全屏模式切换：F11\n- Typora内部窗口焦点切换：ctrl + tab\n- 侧边栏显示/隐藏切换：ctrl + shift + L\n","source":"_posts/Markdown基本语法.md","raw":"---\ntitle: Markdown基本语法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqmdhn9j21kw0w07iu.jpg'\ntags: Markdown\nabbrlink: 5d36ff15\ndate: 2022-08-25 22:33:19\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## Markdown 基本语法\n\n### 一.标 题:\n\n```shell\n 1.1 一级标题 #+空格+文本+回车 \n\n 1.2 二级标题 ##+空格+文本+回车 \n\n 1.3 三级标题 ###+空格+文本+回车 \n\n .....以此类推\n```\n\n---\n\n\n\n### 二.字体\n\n```shell\n粗体：文本两边加**\neg: **Hello World**\n```\n\n**Hello World**\n\n---\n\n```shell\n斜体：文本两边加*\neg: *Hello World*\n```\n\n   *Hello World*\n\n---\n\n```shell\n粗体加斜体：文本两边加***\neg: ***Hello World***\n```\n\n***Hello World***\n\n---\n\n```shell\n中间横线：文本两边加~~\neg: ~~Hello World~~\n```\n\n ~~Hello World~~\n\n---\n\n\n\n### 三.引用\n\n```shell\n右箭头后面接上文本>\neg: >与君共赴，万里征程。\n```\n\n> 与君共赴，万里征程。\n\n---\n\n### 四.分割线\n\n```shell\n三个-（减号）表示分割线\neg: ---\n```\n\n---\n\n```shell\n三个*（减号）表示分割线\neg: ***\n```\n\n***\n\n### 五.图片\n\n```shell\n插入图片：!+[图片名字]+(图片路径)\neg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n```\n\n![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80)\n\n---\n\n\n\n### 六. 超链接\n\n```shell\n语法：[标题](链接地址)\neg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)\n```\n\n[idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13)\n\n---\n\n### 七. 列表\n\n#### 有序列表\n\n```shell\n语法：1 + . + 空格\n```\n\n1. A\n2. B\n3. C\n\n#### 无序列表\n\n```shell\n语法： - + 空格\n```\n\n- A\n- B\n- C\n\n---\n\n### 八.表格\n\n```shell\n语法：\n| 名字 | 性别 | 生日     |\n\n| ---- | ---- | -------- |\n\n| 张三 | 男   | 2000.1.1 |\n```\n\n---\n\n| 名字 | 性别 | 生日     |\n| ---- | ---- | -------- |\n| 张三 | 男   | 2000.1.1 |\n\n### 九.代码\n\n```shell\n语法 ``` + 编程语言名称\neg ```shell\n```\n\n``` java\npublic\n```\n\n### 十.快捷键\n\n#### 文本编辑快捷键\n\n- 无序列表：输入-之后输入空格 / ctrl + shift + ] (对选中行可用)\n- 有序列表：输入数字 + “.”之后输入空格 / ctrl + shift + [ (对选中行可用)\n- 引用内容：> + 空格 / ctrl + shift + q (对选中内容可用)\n- 任务列表：-[空格]空格 文字\n- 标题：ctrl + 数字\n- 表格：ctrl + t\n- 目录：[TOC]\n- 任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）\n- 选中一整行：ctrl + l (字母L)\n- 选中单词：ctrl + d\n- 选中相同格式的文字：ctrl + e\n- 跳转到文章开头：ctrl + home\n- 跳转到文章结尾：ctrl + end\n- 搜索：ctrl + f\n- 替换：ctrl + h\n- 引用：输入>之后输入空格\n- 代码块： ctrl + shift + k\n- 行内代码：ctrl + shift + ` (对选中行可用)\n- 加粗：ctrl + b\n- 倾斜：ctrl + i\n- 下划线：ctrl + u\n- 删除线：alt + shift + 5\n- 插入链接：ctrl + k\n- 插入公式：ctrl + shift + m\n- 插入图片：ctrl + shift + i\n- 保存：ctrl + s\n- 另存为：ctrl + shift + s\n\n#### 编辑模式快捷键\n\n- 源码模式编辑切换：ctrl + /\n- 打字机模式切换：F9\n- 专注模式切换：F8\n- 全屏模式切换：F11\n- Typora内部窗口焦点切换：ctrl + tab\n- 侧边栏显示/隐藏切换：ctrl + shift + L\n","slug":"Markdown基本语法","published":1,"updated":"2023-07-31T12:40:09.608Z","layout":"post","link":"","_id":"clktr4qrj001vzsa068d0bkg6","content":"<h2 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h2><h3 id=\"一-标-题\"><a href=\"#一-标-题\" class=\"headerlink\" title=\"一.标 题:\"></a>一.标 题:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1 一级标题 #+空格+文本+回车 </span><br><span class=\"line\"></span><br><span class=\"line\">1.2 二级标题 ##+空格+文本+回车 </span><br><span class=\"line\"></span><br><span class=\"line\">1.3 三级标题 ###+空格+文本+回车 </span><br><span class=\"line\"></span><br><span class=\"line\">.....以此类推</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"二-字体\"><a href=\"#二-字体\" class=\"headerlink\" title=\"二.字体\"></a>二.字体</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">粗体：文本两边加**</span><br><span class=\"line\">eg: **Hello World**</span><br></pre></td></tr></table></figure>\n\n<p><strong>Hello World</strong></p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">斜体：文本两边加*</span><br><span class=\"line\">eg: *Hello World*</span><br></pre></td></tr></table></figure>\n\n<p>   <em>Hello World</em></p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">粗体加斜体：文本两边加***</span><br><span class=\"line\">eg: ***Hello World***</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>Hello World</strong></em></p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中间横线：文本两边加~~</span><br><span class=\"line\">eg: ~~Hello World~~</span><br></pre></td></tr></table></figure>\n\n<p> <del>Hello World</del></p>\n<hr>\n<h3 id=\"三-引用\"><a href=\"#三-引用\" class=\"headerlink\" title=\"三.引用\"></a>三.引用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右箭头后面接上文本&gt;</span><br><span class=\"line\">eg: &gt;与君共赴，万里征程。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>与君共赴，万里征程。</p>\n</blockquote>\n<hr>\n<h3 id=\"四-分割线\"><a href=\"#四-分割线\" class=\"headerlink\" title=\"四.分割线\"></a>四.分割线</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个-（减号）表示分割线</span><br><span class=\"line\">eg: ---</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个*（减号）表示分割线</span><br><span class=\"line\">eg: ***</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"五-图片\"><a href=\"#五-图片\" class=\"headerlink\" title=\"五.图片\"></a>五.图片</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入图片：!+[图片名字]+(图片路径)</span><br><span class=\"line\">eg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80\" alt=\"示例1\"></p>\n<hr>\n<h3 id=\"六-超链接\"><a href=\"#六-超链接\" class=\"headerlink\" title=\"六. 超链接\"></a>六. 超链接</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[标题](链接地址)</span><br><span class=\"line\">eg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://110.42.139.30:8000/index.php/2022/03/06/13\">idea快捷键</a></p>\n<hr>\n<h3 id=\"七-列表\"><a href=\"#七-列表\" class=\"headerlink\" title=\"七. 列表\"></a>七. 列表</h3><h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：1 + . + 空格</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ol>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法： - + 空格</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ul>\n<hr>\n<h3 id=\"八-表格\"><a href=\"#八-表格\" class=\"headerlink\" title=\"八.表格\"></a>八.表格</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">| 名字 | 性别 | 生日     |</span><br><span class=\"line\"></span><br><span class=\"line\">| ---- | ---- | -------- |</span><br><span class=\"line\"></span><br><span class=\"line\">| 张三 | 男   | 2000.1.1 |</span><br></pre></td></tr></table></figure>\n\n<hr>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>性别</th>\n<th>生日</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>男</td>\n<td>2000.1.1</td>\n</tr>\n</tbody></table>\n<h3 id=\"九-代码\"><a href=\"#九-代码\" class=\"headerlink\" title=\"九.代码\"></a>九.代码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法 ``` + 编程语言名称</span><br><span class=\"line\">eg ```shell</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十-快捷键\"><a href=\"#十-快捷键\" class=\"headerlink\" title=\"十.快捷键\"></a>十.快捷键</h3><h4 id=\"文本编辑快捷键\"><a href=\"#文本编辑快捷键\" class=\"headerlink\" title=\"文本编辑快捷键\"></a>文本编辑快捷键</h4><ul>\n<li>无序列表：输入-之后输入空格 &#x2F; ctrl + shift + ] (对选中行可用)</li>\n<li>有序列表：输入数字 + “.”之后输入空格 &#x2F; ctrl + shift + [ (对选中行可用)</li>\n<li>引用内容：&gt; + 空格 &#x2F; ctrl + shift + q (对选中内容可用)</li>\n<li>任务列表：-[空格]空格 文字</li>\n<li>标题：ctrl + 数字</li>\n<li>表格：ctrl + t</li>\n<li>目录：[TOC]</li>\n<li>任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）</li>\n<li>选中一整行：ctrl + l (字母L)</li>\n<li>选中单词：ctrl + d</li>\n<li>选中相同格式的文字：ctrl + e</li>\n<li>跳转到文章开头：ctrl + home</li>\n<li>跳转到文章结尾：ctrl + end</li>\n<li>搜索：ctrl + f</li>\n<li>替换：ctrl + h</li>\n<li>引用：输入&gt;之后输入空格</li>\n<li>代码块： ctrl + shift + k</li>\n<li>行内代码：ctrl + shift + &#96; (对选中行可用)</li>\n<li>加粗：ctrl + b</li>\n<li>倾斜：ctrl + i</li>\n<li>下划线：ctrl + u</li>\n<li>删除线：alt + shift + 5</li>\n<li>插入链接：ctrl + k</li>\n<li>插入公式：ctrl + shift + m</li>\n<li>插入图片：ctrl + shift + i</li>\n<li>保存：ctrl + s</li>\n<li>另存为：ctrl + shift + s</li>\n</ul>\n<h4 id=\"编辑模式快捷键\"><a href=\"#编辑模式快捷键\" class=\"headerlink\" title=\"编辑模式快捷键\"></a>编辑模式快捷键</h4><ul>\n<li>源码模式编辑切换：ctrl + &#x2F;</li>\n<li>打字机模式切换：F9</li>\n<li>专注模式切换：F8</li>\n<li>全屏模式切换：F11</li>\n<li>Typora内部窗口焦点切换：ctrl + tab</li>\n<li>侧边栏显示&#x2F;隐藏切换：ctrl + shift + L</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"Markdown-基本语法\"><a href=\"#Markdown-基本语法\" class=\"headerlink\" title=\"Markdown 基本语法\"></a>Markdown 基本语法</h2><h3 id=\"一-标-题\"><a href=\"#一-标-题\" class=\"headerlink\" title=\"一.标 题:\"></a>一.标 题:</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1 一级标题 #+空格+文本+回车 </span><br><span class=\"line\"></span><br><span class=\"line\">1.2 二级标题 ##+空格+文本+回车 </span><br><span class=\"line\"></span><br><span class=\"line\">1.3 三级标题 ###+空格+文本+回车 </span><br><span class=\"line\"></span><br><span class=\"line\">.....以此类推</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"二-字体\"><a href=\"#二-字体\" class=\"headerlink\" title=\"二.字体\"></a>二.字体</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">粗体：文本两边加**</span><br><span class=\"line\">eg: **Hello World**</span><br></pre></td></tr></table></figure>\n\n<p><strong>Hello World</strong></p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">斜体：文本两边加*</span><br><span class=\"line\">eg: *Hello World*</span><br></pre></td></tr></table></figure>\n\n<p>   <em>Hello World</em></p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">粗体加斜体：文本两边加***</span><br><span class=\"line\">eg: ***Hello World***</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>Hello World</strong></em></p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中间横线：文本两边加~~</span><br><span class=\"line\">eg: ~~Hello World~~</span><br></pre></td></tr></table></figure>\n\n<p> <del>Hello World</del></p>\n<hr>\n<h3 id=\"三-引用\"><a href=\"#三-引用\" class=\"headerlink\" title=\"三.引用\"></a>三.引用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右箭头后面接上文本&gt;</span><br><span class=\"line\">eg: &gt;与君共赴，万里征程。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>与君共赴，万里征程。</p>\n</blockquote>\n<hr>\n<h3 id=\"四-分割线\"><a href=\"#四-分割线\" class=\"headerlink\" title=\"四.分割线\"></a>四.分割线</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个-（减号）表示分割线</span><br><span class=\"line\">eg: ---</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个*（减号）表示分割线</span><br><span class=\"line\">eg: ***</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"五-图片\"><a href=\"#五-图片\" class=\"headerlink\" title=\"五.图片\"></a>五.图片</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入图片：!+[图片名字]+(图片路径)</span><br><span class=\"line\">eg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80\" alt=\"示例1\"></p>\n<hr>\n<h3 id=\"六-超链接\"><a href=\"#六-超链接\" class=\"headerlink\" title=\"六. 超链接\"></a>六. 超链接</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[标题](链接地址)</span><br><span class=\"line\">eg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://110.42.139.30:8000/index.php/2022/03/06/13\">idea快捷键</a></p>\n<hr>\n<h3 id=\"七-列表\"><a href=\"#七-列表\" class=\"headerlink\" title=\"七. 列表\"></a>七. 列表</h3><h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：1 + . + 空格</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ol>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法： - + 空格</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>A</li>\n<li>B</li>\n<li>C</li>\n</ul>\n<hr>\n<h3 id=\"八-表格\"><a href=\"#八-表格\" class=\"headerlink\" title=\"八.表格\"></a>八.表格</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">| 名字 | 性别 | 生日     |</span><br><span class=\"line\"></span><br><span class=\"line\">| ---- | ---- | -------- |</span><br><span class=\"line\"></span><br><span class=\"line\">| 张三 | 男   | 2000.1.1 |</span><br></pre></td></tr></table></figure>\n\n<hr>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>性别</th>\n<th>生日</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>男</td>\n<td>2000.1.1</td>\n</tr>\n</tbody></table>\n<h3 id=\"九-代码\"><a href=\"#九-代码\" class=\"headerlink\" title=\"九.代码\"></a>九.代码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法 ``` + 编程语言名称</span><br><span class=\"line\">eg ```shell</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"十-快捷键\"><a href=\"#十-快捷键\" class=\"headerlink\" title=\"十.快捷键\"></a>十.快捷键</h3><h4 id=\"文本编辑快捷键\"><a href=\"#文本编辑快捷键\" class=\"headerlink\" title=\"文本编辑快捷键\"></a>文本编辑快捷键</h4><ul>\n<li>无序列表：输入-之后输入空格 &#x2F; ctrl + shift + ] (对选中行可用)</li>\n<li>有序列表：输入数字 + “.”之后输入空格 &#x2F; ctrl + shift + [ (对选中行可用)</li>\n<li>引用内容：&gt; + 空格 &#x2F; ctrl + shift + q (对选中内容可用)</li>\n<li>任务列表：-[空格]空格 文字</li>\n<li>标题：ctrl + 数字</li>\n<li>表格：ctrl + t</li>\n<li>目录：[TOC]</li>\n<li>任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）</li>\n<li>选中一整行：ctrl + l (字母L)</li>\n<li>选中单词：ctrl + d</li>\n<li>选中相同格式的文字：ctrl + e</li>\n<li>跳转到文章开头：ctrl + home</li>\n<li>跳转到文章结尾：ctrl + end</li>\n<li>搜索：ctrl + f</li>\n<li>替换：ctrl + h</li>\n<li>引用：输入&gt;之后输入空格</li>\n<li>代码块： ctrl + shift + k</li>\n<li>行内代码：ctrl + shift + &#96; (对选中行可用)</li>\n<li>加粗：ctrl + b</li>\n<li>倾斜：ctrl + i</li>\n<li>下划线：ctrl + u</li>\n<li>删除线：alt + shift + 5</li>\n<li>插入链接：ctrl + k</li>\n<li>插入公式：ctrl + shift + m</li>\n<li>插入图片：ctrl + shift + i</li>\n<li>保存：ctrl + s</li>\n<li>另存为：ctrl + shift + s</li>\n</ul>\n<h4 id=\"编辑模式快捷键\"><a href=\"#编辑模式快捷键\" class=\"headerlink\" title=\"编辑模式快捷键\"></a>编辑模式快捷键</h4><ul>\n<li>源码模式编辑切换：ctrl + &#x2F;</li>\n<li>打字机模式切换：F9</li>\n<li>专注模式切换：F8</li>\n<li>全屏模式切换：F11</li>\n<li>Typora内部窗口焦点切换：ctrl + tab</li>\n<li>侧边栏显示&#x2F;隐藏切换：ctrl + shift + L</li>\n</ul>\n"},{"title":"Java面向对象04","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg"],"abbrlink":"bc05bf18","date":"2022-08-25T14:41:51.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## static 关键字\n\n### 静态变量与静态方法\n\n- 静态的变量  多线程中会用到(包含static关键字)\n- 非静态的变量（不包含static关键字）\n- 非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.\n- 如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。\n- 静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。\n\n代码\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 20:44\n * @Description\n */\npublic class Student {\n    private static int age;                 //静态的变量  多线程中会用到\n    private double score;                   //非静态的变量\n    public void run(){                      //非静态方法\n        go();                               //非静态方法中可以直接调用静态方法\n    }\n    public static void go(){                //静态方法\n        //run();                            而静态方法中无法调用非静态方法\n    }\n    public static void main(String[] args) {\n        Student s1 = new Student();\n\n        System.out.println(s1.score);       //可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。\n        System.out.println(s1.age);\n\n        System.out.println(Student.age);    //如果变量是静态变量我们就可以直接通过类名去访问这个变量\n        //System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。\n        go();                               //静态方法可以直接被调用\n        //run();\n        s1.run();                           //非静态方法需要实例化类对象之后，才可以通过对象来调用。\n    }\n}\n```\n\n---\n\n### 静态代码块\n\n**在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。**\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:03\n * @Description\n */\npublic class Person {\n    {\n        System.out.println(\"我是匿名代码块\");\n    }\n    static {\n        System.out.println(\"我是静态代码块\");\n    }\n    public Person(){\n        System.out.println(\"我是构造方法\");\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person();\n    }\n}\n```\n\n![静态代码块](https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png)\n\n---\n\n### 静态导入包（不常用）\n\n语法：\n\n```java\nimport static java.lang.Math.random;\nimport static java.lang.Math.PI;\nSystem.out.println(random());\nSystem.out.println(PI);\n```\n\n当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。\n\n---\n\n## 抽象类\n\n- ***abstract*修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。**\n- **抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。**\n- 抽象类，不能用new关键字来创建对象，它是用来让子类继承的\n- 抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。\n- 子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。\n- 抽象类存在的意义：抽象出来，提高开发效率。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:27\n * @Description\n */\n//用abstract 关键字修饰的类叫做抽象类，\npublic abstract class Action {\n    //abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。\n    public abstract void doSomething();\n    //1.不能new这个抽象类，只能靠子类去实现\n    //2.抽象类中可以写普通方法\n    //3.抽象方法必须在抽象类中\n    //抽象的抽象：约束。\n\n    public Action() {\n    }\n}\n```\n\n继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:05\n * @Description\n */\n//继承抽象类，就一定要实现抽象类里面的抽象方法\npublic class A extends Action{\n    @Override\n    public void doSomething() {\n\n    }\n}\n```\n\n---\n\n## 接口\n\n- 普通类：只有具体实现\n- 抽象类：具体实现和规范（抽象方法）都有\n- 接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程~\n\n- 接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。**eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。**\n- **接口的本质是契约**，就像我们人间的法律一样，制定好后大家都遵守。\n- 接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。\n\n---\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo09;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:36\n * @Description\n */\n\n//抽象类是继承  extends\n// 类也可以实现接口 implements 接口\n// 实现了接口的类，就必须重写接口中的方法\n// 接口就间接的实现了多继承。\npublic class UserServiceImpl implements UserService,TimeService{\n    @Override\n    public void timer() {\n\n    }\n\n    @Override\n    public void add() {\n\n    }\n\n    @Override\n    public void delete() {\n\n    }\n\n    @Override\n    public void update() {\n\n    }\n\n    @Override\n    public void query() {\n\n    }\n}\n\n/*\npublic interface TimeService {\n    void timer();\n}\n\n// interface 定义的关键字 ， 接口都需要有实现类\npublic interface UserService {\n    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）\n    public static final int AGE = 99;\n    //接口中所有定义其实默认都是抽象的 public abstract\n    public abstract void add();\n    void delete();\n    void update();\n    void query();\n}\n\n */\n```\n\n---\n\n### 作用\n\n1. 接口是一个约束\n2. 定义一些方法，让不同人实现。\n3. 方法的默认属性是 public abstract\n4. 常量的默认属性是public static final\n5. 接口不能被实例化~接口中没有构造方法~\n6. implements可以实现多个接口\n7. 必须要重写接口中的方法\n\n---\n\n## 内部类\n\n### 定义\n\n内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。\n\n### 分类\n\n#### 成员内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public class Inner{\n        public void in(){\n            System.out.println(\"I'm the inner\");\n        }\n        public void gerAge(){\n            System.out.println(age);\n        }\n    }\n}\n\n*/\n```\n\n- 内部类可以获得外部类的私有属性\n\n- 要通过外部类来实例化内部类。\n\n  Outer outer = new Outer();\n  Outer.Inner inner = outer.new Inner();\n\n---\n\n#### 静态内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public static class Inner1{\n        public void in(){\n            System.out.println(\"I'm the inner1\");\n        }\n    }\n}\n*/\n```\n\n---\n\n#### 局部内部类\n\n```java\npublic class Outer {\n        public void method(){\n            //局部内部类\n            class Inner{\n                public void in(){\n                    \n                }\n            }\n        }\n}\n```\n\n---\n\n#### 匿名内部类\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        //匿名内部类：没有名字初始化类，不用将实例保存到变量中\n        new Apple().eat();\n    }\n}\n\nclass Apple{\n    public void eat(){\n        System.out.println(\"eat apple\");\n    }\n}\n```\n\n","source":"_posts/Java面向对象04.md","raw":"---\ntitle: Java面向对象04\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva3.sinaimg.cn/large/87c01ec7gy1fsnqqm6x00j21kw0w0h09.jpg'\ntags:\n  - Java\n  - Java面向对象\nabbrlink: bc05bf18\ndate: 2022-08-25 22:41:51\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## static 关键字\n\n### 静态变量与静态方法\n\n- 静态的变量  多线程中会用到(包含static关键字)\n- 非静态的变量（不包含static关键字）\n- 非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.\n- 如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。\n- 静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。\n\n代码\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 20:44\n * @Description\n */\npublic class Student {\n    private static int age;                 //静态的变量  多线程中会用到\n    private double score;                   //非静态的变量\n    public void run(){                      //非静态方法\n        go();                               //非静态方法中可以直接调用静态方法\n    }\n    public static void go(){                //静态方法\n        //run();                            而静态方法中无法调用非静态方法\n    }\n    public static void main(String[] args) {\n        Student s1 = new Student();\n\n        System.out.println(s1.score);       //可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。\n        System.out.println(s1.age);\n\n        System.out.println(Student.age);    //如果变量是静态变量我们就可以直接通过类名去访问这个变量\n        //System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。\n        go();                               //静态方法可以直接被调用\n        //run();\n        s1.run();                           //非静态方法需要实例化类对象之后，才可以通过对象来调用。\n    }\n}\n```\n\n---\n\n### 静态代码块\n\n**在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。**\n\n```java\npackage com.xiheya.oop.demo07;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:03\n * @Description\n */\npublic class Person {\n    {\n        System.out.println(\"我是匿名代码块\");\n    }\n    static {\n        System.out.println(\"我是静态代码块\");\n    }\n    public Person(){\n        System.out.println(\"我是构造方法\");\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person();\n    }\n}\n```\n\n![静态代码块](https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png)\n\n---\n\n### 静态导入包（不常用）\n\n语法：\n\n```java\nimport static java.lang.Math.random;\nimport static java.lang.Math.PI;\nSystem.out.println(random());\nSystem.out.println(PI);\n```\n\n当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。\n\n---\n\n## 抽象类\n\n- ***abstract*修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。**\n- **抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。**\n- 抽象类，不能用new关键字来创建对象，它是用来让子类继承的\n- 抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。\n- 子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。\n- 抽象类存在的意义：抽象出来，提高开发效率。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 21:27\n * @Description\n */\n//用abstract 关键字修饰的类叫做抽象类，\npublic abstract class Action {\n    //abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。\n    public abstract void doSomething();\n    //1.不能new这个抽象类，只能靠子类去实现\n    //2.抽象类中可以写普通方法\n    //3.抽象方法必须在抽象类中\n    //抽象的抽象：约束。\n\n    public Action() {\n    }\n}\n```\n\n继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。\n\n```java\npackage com.xiheya.oop.demo08;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:05\n * @Description\n */\n//继承抽象类，就一定要实现抽象类里面的抽象方法\npublic class A extends Action{\n    @Override\n    public void doSomething() {\n\n    }\n}\n```\n\n---\n\n## 接口\n\n- 普通类：只有具体实现\n- 抽象类：具体实现和规范（抽象方法）都有\n- 接口：只有规范！自己无法写方法~专业的约束！约束和实现分离：面向接口编程~\n\n- 接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。**eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。**\n- **接口的本质是契约**，就像我们人间的法律一样，制定好后大家都遵守。\n- 接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。\n\n---\n\n### 代码\n\n```java\npackage com.xiheya.oop.demo09;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/13/ 22:36\n * @Description\n */\n\n//抽象类是继承  extends\n// 类也可以实现接口 implements 接口\n// 实现了接口的类，就必须重写接口中的方法\n// 接口就间接的实现了多继承。\npublic class UserServiceImpl implements UserService,TimeService{\n    @Override\n    public void timer() {\n\n    }\n\n    @Override\n    public void add() {\n\n    }\n\n    @Override\n    public void delete() {\n\n    }\n\n    @Override\n    public void update() {\n\n    }\n\n    @Override\n    public void query() {\n\n    }\n}\n\n/*\npublic interface TimeService {\n    void timer();\n}\n\n// interface 定义的关键字 ， 接口都需要有实现类\npublic interface UserService {\n    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）\n    public static final int AGE = 99;\n    //接口中所有定义其实默认都是抽象的 public abstract\n    public abstract void add();\n    void delete();\n    void update();\n    void query();\n}\n\n */\n```\n\n---\n\n### 作用\n\n1. 接口是一个约束\n2. 定义一些方法，让不同人实现。\n3. 方法的默认属性是 public abstract\n4. 常量的默认属性是public static final\n5. 接口不能被实例化~接口中没有构造方法~\n6. implements可以实现多个接口\n7. 必须要重写接口中的方法\n\n---\n\n## 内部类\n\n### 定义\n\n内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。\n\n### 分类\n\n#### 成员内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public class Inner{\n        public void in(){\n            System.out.println(\"I'm the inner\");\n        }\n        public void gerAge(){\n            System.out.println(age);\n        }\n    }\n}\n\n*/\n```\n\n- 内部类可以获得外部类的私有属性\n\n- 要通过外部类来实例化内部类。\n\n  Outer outer = new Outer();\n  Outer.Inner inner = outer.new Inner();\n\n---\n\n#### 静态内部类\n\n```java\npublic class Application {\n    public static void main(String[] args) {\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        inner.in();\n        inner.gerAge();\n\n    }\n}\n\n/*\npublic class Outer {\n    private int age = 10;\n    public void out(){\n        System.out.println(\"I'm the outer\");\n    }\n\n    public static class Inner1{\n        public void in(){\n            System.out.println(\"I'm the inner1\");\n        }\n    }\n}\n*/\n```\n\n---\n\n#### 局部内部类\n\n```java\npublic class Outer {\n        public void method(){\n            //局部内部类\n            class Inner{\n                public void in(){\n                    \n                }\n            }\n        }\n}\n```\n\n---\n\n#### 匿名内部类\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        //匿名内部类：没有名字初始化类，不用将实例保存到变量中\n        new Apple().eat();\n    }\n}\n\nclass Apple{\n    public void eat(){\n        System.out.println(\"eat apple\");\n    }\n}\n```\n\n","slug":"Java面向对象04","published":1,"updated":"2023-07-31T12:40:09.611Z","layout":"post","link":"","_id":"clktr4qrk001zzsa0dsl63d6l","content":"<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"静态变量与静态方法\"><a href=\"#静态变量与静态方法\" class=\"headerlink\" title=\"静态变量与静态方法\"></a>静态变量与静态方法</h3><ul>\n<li>静态的变量  多线程中会用到(包含static关键字)</li>\n<li>非静态的变量（不包含static关键字）</li>\n<li>非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.</li>\n<li>如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。</li>\n<li>静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。</li>\n</ul>\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo07;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 20:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> age;                 <span class=\"comment\">//静态的变量  多线程中会用到</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> score;                   <span class=\"comment\">//非静态的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;                      <span class=\"comment\">//非静态方法</span></span><br><span class=\"line\">        go();                               <span class=\"comment\">//非静态方法中可以直接调用静态方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">go</span><span class=\"params\">()</span>&#123;                <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">        <span class=\"comment\">//run();                            而静态方法中无法调用非静态方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1.score);       <span class=\"comment\">//可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。</span></span><br><span class=\"line\">        System.out.println(s1.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Student.age);    <span class=\"comment\">//如果变量是静态变量我们就可以直接通过类名去访问这个变量</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。</span></span><br><span class=\"line\">        go();                               <span class=\"comment\">//静态方法可以直接被调用</span></span><br><span class=\"line\">        <span class=\"comment\">//run();</span></span><br><span class=\"line\">        s1.run();                           <span class=\"comment\">//非静态方法需要实例化类对象之后，才可以通过对象来调用。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p><strong>在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo07;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 21:03</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是匿名代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png\" alt=\"静态代码块\"></p>\n<hr>\n<h3 id=\"静态导入包（不常用）\"><a href=\"#静态导入包（不常用）\" class=\"headerlink\" title=\"静态导入包（不常用）\"></a>静态导入包（不常用）</h3><p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.PI;</span><br><span class=\"line\">System.out.println(random());</span><br><span class=\"line\">System.out.println(PI);</span><br></pre></td></tr></table></figure>\n\n<p>当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。</p>\n<hr>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><ul>\n<li><strong><em>abstract</em>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</strong></li>\n<li><strong>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</strong></li>\n<li>抽象类，不能用new关键字来创建对象，它是用来让子类继承的</li>\n<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>\n<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>\n<li>抽象类存在的意义：抽象出来，提高开发效率。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo08;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 21:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//用abstract 关键字修饰的类叫做抽象类，</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//1.不能new这个抽象类，只能靠子类去实现</span></span><br><span class=\"line\">    <span class=\"comment\">//2.抽象类中可以写普通方法</span></span><br><span class=\"line\">    <span class=\"comment\">//3.抽象方法必须在抽象类中</span></span><br><span class=\"line\">    <span class=\"comment\">//抽象的抽象：约束。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Action</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo08;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 22:05</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//继承抽象类，就一定要实现抽象类里面的抽象方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Action</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li><p>普通类：只有具体实现</p>\n</li>\n<li><p>抽象类：具体实现和规范（抽象方法）都有</p>\n</li>\n<li><p>接口：只有规范！自己无法写方法<del>专业的约束！约束和实现分离：面向接口编程</del></p>\n</li>\n<li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。<strong>eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</strong></p>\n</li>\n<li><p><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定好后大家都遵守。</p>\n</li>\n<li><p>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo09;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 22:36</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象类是继承  extends</span></span><br><span class=\"line\"><span class=\"comment\">// 类也可以实现接口 implements 接口</span></span><br><span class=\"line\"><span class=\"comment\">// 实现了接口的类，就必须重写接口中的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 接口就间接的实现了多继承。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span>,TimeService&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">timer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">query</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public interface TimeService &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    void timer();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">// interface 定义的关键字 ， 接口都需要有实现类</span></span><br><span class=\"line\"><span class=\"comment\">public interface UserService &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）</span></span><br><span class=\"line\"><span class=\"comment\">    public static final int AGE = 99;</span></span><br><span class=\"line\"><span class=\"comment\">    //接口中所有定义其实默认都是抽象的 public abstract</span></span><br><span class=\"line\"><span class=\"comment\">    public abstract void add();</span></span><br><span class=\"line\"><span class=\"comment\">    void delete();</span></span><br><span class=\"line\"><span class=\"comment\">    void update();</span></span><br><span class=\"line\"><span class=\"comment\">    void query();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>接口是一个约束</li>\n<li>定义一些方法，让不同人实现。</li>\n<li>方法的默认属性是 public abstract</li>\n<li>常量的默认属性是public static final</li>\n<li>接口不能被实例化<del>接口中没有构造方法</del></li>\n<li>implements可以实现多个接口</li>\n<li>必须要重写接口中的方法</li>\n</ol>\n<hr>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Outer</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>();</span><br><span class=\"line\">        Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">        inner.in();</span><br><span class=\"line\">        inner.gerAge();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Outer &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    private int age = 10;</span></span><br><span class=\"line\"><span class=\"comment\">    public void out()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public class Inner&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        public void in()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            System.out.println(&quot;I&#x27;m the inner&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        public void gerAge()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            System.out.println(age);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>内部类可以获得外部类的私有属性</p>\n</li>\n<li><p>要通过外部类来实例化内部类。</p>\n<p>Outer outer &#x3D; new Outer();<br>Outer.Inner inner &#x3D; outer.new Inner();</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Outer</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>();</span><br><span class=\"line\">        Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">        inner.in();</span><br><span class=\"line\">        inner.gerAge();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Outer &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    private int age = 10;</span></span><br><span class=\"line\"><span class=\"comment\">    public void out()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public static class Inner1&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        public void in()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            System.out.println(&quot;I&#x27;m the inner1&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//局部内部类</span></span><br><span class=\"line\">            <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">in</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//匿名内部类：没有名字初始化类，不用将实例保存到变量中</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>().eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat apple&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"linear-gradient(to top,#a18cd1 0%,#fbc2eb 100%)","excerpt":"","more":"<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"静态变量与静态方法\"><a href=\"#静态变量与静态方法\" class=\"headerlink\" title=\"静态变量与静态方法\"></a>静态变量与静态方法</h3><ul>\n<li>静态的变量  多线程中会用到(包含static关键字)</li>\n<li>非静态的变量（不包含static关键字）</li>\n<li>非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.</li>\n<li>如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。</li>\n<li>静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。</li>\n</ul>\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo07;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 20:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> age;                 <span class=\"comment\">//静态的变量  多线程中会用到</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> score;                   <span class=\"comment\">//非静态的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;                      <span class=\"comment\">//非静态方法</span></span><br><span class=\"line\">        go();                               <span class=\"comment\">//非静态方法中可以直接调用静态方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">go</span><span class=\"params\">()</span>&#123;                <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">        <span class=\"comment\">//run();                            而静态方法中无法调用非静态方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1.score);       <span class=\"comment\">//可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。</span></span><br><span class=\"line\">        System.out.println(s1.age);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Student.age);    <span class=\"comment\">//如果变量是静态变量我们就可以直接通过类名去访问这个变量</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。</span></span><br><span class=\"line\">        go();                               <span class=\"comment\">//静态方法可以直接被调用</span></span><br><span class=\"line\">        <span class=\"comment\">//run();</span></span><br><span class=\"line\">        s1.run();                           <span class=\"comment\">//非静态方法需要实例化类对象之后，才可以通过对象来调用。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p><strong>在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo07;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 21:03</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是匿名代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png\" alt=\"静态代码块\"></p>\n<hr>\n<h3 id=\"静态导入包（不常用）\"><a href=\"#静态导入包（不常用）\" class=\"headerlink\" title=\"静态导入包（不常用）\"></a>静态导入包（不常用）</h3><p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.PI;</span><br><span class=\"line\">System.out.println(random());</span><br><span class=\"line\">System.out.println(PI);</span><br></pre></td></tr></table></figure>\n\n<p>当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。</p>\n<hr>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><ul>\n<li><strong><em>abstract</em>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</strong></li>\n<li><strong>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</strong></li>\n<li>抽象类，不能用new关键字来创建对象，它是用来让子类继承的</li>\n<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>\n<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>\n<li>抽象类存在的意义：抽象出来，提高开发效率。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo08;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 21:27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//用abstract 关键字修饰的类叫做抽象类，</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Action</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//1.不能new这个抽象类，只能靠子类去实现</span></span><br><span class=\"line\">    <span class=\"comment\">//2.抽象类中可以写普通方法</span></span><br><span class=\"line\">    <span class=\"comment\">//3.抽象方法必须在抽象类中</span></span><br><span class=\"line\">    <span class=\"comment\">//抽象的抽象：约束。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Action</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo08;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 22:05</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//继承抽象类，就一定要实现抽象类里面的抽象方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Action</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li><p>普通类：只有具体实现</p>\n</li>\n<li><p>抽象类：具体实现和规范（抽象方法）都有</p>\n</li>\n<li><p>接口：只有规范！自己无法写方法<del>专业的约束！约束和实现分离：面向接口编程</del></p>\n</li>\n<li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。<strong>eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</strong></p>\n</li>\n<li><p><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定好后大家都遵守。</p>\n</li>\n<li><p>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.oop.demo09;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/13/ 22:36</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象类是继承  extends</span></span><br><span class=\"line\"><span class=\"comment\">// 类也可以实现接口 implements 接口</span></span><br><span class=\"line\"><span class=\"comment\">// 实现了接口的类，就必须重写接口中的方法</span></span><br><span class=\"line\"><span class=\"comment\">// 接口就间接的实现了多继承。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span>,TimeService&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">timer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">query</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public interface TimeService &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    void timer();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">// interface 定义的关键字 ， 接口都需要有实现类</span></span><br><span class=\"line\"><span class=\"comment\">public interface UserService &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）</span></span><br><span class=\"line\"><span class=\"comment\">    public static final int AGE = 99;</span></span><br><span class=\"line\"><span class=\"comment\">    //接口中所有定义其实默认都是抽象的 public abstract</span></span><br><span class=\"line\"><span class=\"comment\">    public abstract void add();</span></span><br><span class=\"line\"><span class=\"comment\">    void delete();</span></span><br><span class=\"line\"><span class=\"comment\">    void update();</span></span><br><span class=\"line\"><span class=\"comment\">    void query();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li>接口是一个约束</li>\n<li>定义一些方法，让不同人实现。</li>\n<li>方法的默认属性是 public abstract</li>\n<li>常量的默认属性是public static final</li>\n<li>接口不能被实例化<del>接口中没有构造方法</del></li>\n<li>implements可以实现多个接口</li>\n<li>必须要重写接口中的方法</li>\n</ol>\n<hr>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Outer</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>();</span><br><span class=\"line\">        Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">        inner.in();</span><br><span class=\"line\">        inner.gerAge();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Outer &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    private int age = 10;</span></span><br><span class=\"line\"><span class=\"comment\">    public void out()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public class Inner&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        public void in()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            System.out.println(&quot;I&#x27;m the inner&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        public void gerAge()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            System.out.println(age);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>内部类可以获得外部类的私有属性</p>\n</li>\n<li><p>要通过外部类来实例化内部类。</p>\n<p>Outer outer &#x3D; new Outer();<br>Outer.Inner inner &#x3D; outer.new Inner();</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Outer</span> <span class=\"variable\">outer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Outer</span>();</span><br><span class=\"line\">        Outer.<span class=\"type\">Inner</span> <span class=\"variable\">inner</span> <span class=\"operator\">=</span> outer.<span class=\"keyword\">new</span> <span class=\"title class_\">Inner</span>();</span><br><span class=\"line\">        inner.in();</span><br><span class=\"line\">        inner.gerAge();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class Outer &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    private int age = 10;</span></span><br><span class=\"line\"><span class=\"comment\">    public void out()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public static class Inner1&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        public void in()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            System.out.println(&quot;I&#x27;m the inner1&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//局部内部类</span></span><br><span class=\"line\">            <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">in</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//匿名内部类：没有名字初始化类，不用将实例保存到变量中</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>().eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;eat apple&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"WP备份","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg"],"abbrlink":"b6be31da","date":"2022-08-25T14:43:48.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## argon主题选项\n\n### 文本附加内容\n\n```markdown\n您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》\n非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。\n\n版权声明：\n1、本博客属个人所有，不涉及商业目的。\n2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！\n3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。\n4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。\n5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境\n6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。\n7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;\n\n```\n\n---\n\n### 页脚内容\n\n```markdown\n<p><b>Copyright  2022 Xiheya</b>, All Rights Reserved.</p> \n<p><b>本站已<del>稳定运行</b></del>:<span id=\"blog_running_days\" class=\"odometer\"></span> days , <span id=\"blog_running_hours\" class=\"odometer\"></span> h , <span id=\"blog_running_mins\" class=\"odometer\"></span> m , <span id=\"blog_running_secs\" class=\"odometer\"></span> s</p> \n<script no-pjax>\nvar blog_running_days=document.getElementById(\"blog_running_days\");\nvar blog_running_hours=document.getElementById(\"blog_running_hours\");\nvar blog_running_mins=document.getElementById(\"blog_running_mins\");\nvar blog_running_secs=document.getElementById(\"blog_running_secs\");\nfunction refresh_blog_running_time(){\n    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);\n    var d=parseInt(time/24/60/60/1000);\n    var h=parseInt(time%(24*60*60*1000)/60/60/1000);\n    var m=parseInt(time%(60*60*1000)/60/1000);\n    var s=parseInt(time%(60*1000)/1000);\n    blog_running_days.innerHTML=d;\n    blog_running_hours.innerHTML=h;\n    blog_running_mins.innerHTML=m;\n    blog_running_secs.innerHTML=s;\n}\nrefresh_blog_running_time();\nif (typeof(bottomTimeIntervalHasSet) == \"undefined\"){\n    var bottomTimeIntervalHasSet = true;\n    setInterval(function(){refresh_blog_running_time();},500);\n}\n</script>\n```\n\n---\n\n### 主题颜色\n\n```markdown\n#9a92b9\n\nbanner副标题：记录我的日常生活&学习笔记\n页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg\n```\n\n---\n\n### 左侧栏\n\n```markdown\n左侧栏标题\t\n与君共赴，万里征程。\n\n左侧栏子标题（格言）\t\n--hitokoto--\n\n左侧栏作者名称\t\n未可知.\n\n左侧栏作者头像地址\t\nhttps://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png\n\n```\n\n---\n\n## 留言板与友链\n\n### 留言板内容：\n\n```markdown\n留言规则\n\n留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n留言者承担因留言行为而直接或间接引起的法律责任;\n本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n如果你有任何问题或是要求，可以在这里给我发送消息;\n如在本博客目留言，即表明已阅读并接受了上述各项条款;\n```\n\n---\n\n### 友链内容\n\n```\n[friendlinks style=\"1-square\" sort=\"rand\"/]  \n//方形头像，随机排序\n```\n\n友链格式 :\n\n> 博客名称：Rookie_L’s Blog\n>\n> 描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&学习笔记\n>\n> 站点：https://solstice23.top\n>\n> Avatar (头像)：https://solstice23.top/friendlink_image/avatar/\n\n---\n\n## 菜单栏\n\n### 顶部导航标签\n\n```markdown\n<i class=\"fa fa-home\" aria-hidden=\"true\"></i> 首页\n<i class=\"fa fa-comments\" aria-hidden=\"true\"></i> 留言板\n<i class=\"fa fa-link\" aria-hidden=\"true\"></i> 友情链接\n<i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> 归档\n\n<i class=\"fa fa-star\" aria-hidden=\"true\"></i>分类 <i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n\n<i class=\"fa fa-tags\" aria-hidden=\"true\"></i> 标签<i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n```\n\n---\n\n### 左侧栏菜单导航\n\n```markdown\nurl：https://docs.oracle.com/javase/8/docs/api/\n标签：<i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> API帮助文档\n\nurl：https://leetcode-cn.com/\n标签：<i class=\"fa fa-code\" aria-hidden=\"true\"></i> LeetCode\n\nurl：https://codetop.cc/home\n标签：<i class=\"fa fa-codepen\" aria-hidden=\"true\"></i> CodeTop\n\nurl：https://github.com/\n标签：<i class=\"fa fa-github-alt\" aria-hidden=\"true\"></i> GayHub\n\nurl：https://www.programmercarl.com/\n标签：<i class=\"fa fa-eye\" aria-hidden=\"true\"></i> 代码随想录\n\nurl：https://www.runoob.com/\n标签：<i class=\"fa fa-child\" aria-hidden=\"true\"></i> 笨鸟先飞\n```\n\n---\n\n### 左侧个人链接：\n\n```markdown\n1. URL：https://cloud.icu007.work/ 标签： <i class=\"fa fa-cloud\" aria-hidden=\"true\"></i> 可道云\n2. URL：mailto:rookie_l@icu007.work 标签：<i class=\"fa fa-envelope\" aria-hidden=\"true\"></i> 联系我\n3. URL：https://alist.icu007.work/ 标签：<i class=\"fa fa-hdd-o\" aria-hidden=\"true\"></i> 分享盘\n4. URL：https://drive.icu007.work/ 标签： <i class=\"fa fa-download\" aria-hidden=\"true\"></i> 下载盘\n5. URL：https://baidu.icu007.work 标签： <i class=\"fa fa-question\" aria-hidden=\"true\"></i> 百度一下\n6. URL： http://hiheya.github.io 标签： <i class=\"fa fa-user\" aria-hidden=\"true\"></i> 子站\n```\n\n---\n\n  \n","source":"_posts/WP备份.md","raw":"---\ntitle: WP备份\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 随想\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqw744pj21kw0w0dwt.jpg'\ntags: WP\nabbrlink: b6be31da\ndate: 2022-08-25 22:43:48\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## argon主题选项\n\n### 文本附加内容\n\n```markdown\n您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》\n非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。\n\n版权声明：\n1、本博客属个人所有，不涉及商业目的。\n2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！\n3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。\n4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。\n5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境\n6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。\n7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;\n\n```\n\n---\n\n### 页脚内容\n\n```markdown\n<p><b>Copyright  2022 Xiheya</b>, All Rights Reserved.</p> \n<p><b>本站已<del>稳定运行</b></del>:<span id=\"blog_running_days\" class=\"odometer\"></span> days , <span id=\"blog_running_hours\" class=\"odometer\"></span> h , <span id=\"blog_running_mins\" class=\"odometer\"></span> m , <span id=\"blog_running_secs\" class=\"odometer\"></span> s</p> \n<script no-pjax>\nvar blog_running_days=document.getElementById(\"blog_running_days\");\nvar blog_running_hours=document.getElementById(\"blog_running_hours\");\nvar blog_running_mins=document.getElementById(\"blog_running_mins\");\nvar blog_running_secs=document.getElementById(\"blog_running_secs\");\nfunction refresh_blog_running_time(){\n    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);\n    var d=parseInt(time/24/60/60/1000);\n    var h=parseInt(time%(24*60*60*1000)/60/60/1000);\n    var m=parseInt(time%(60*60*1000)/60/1000);\n    var s=parseInt(time%(60*1000)/1000);\n    blog_running_days.innerHTML=d;\n    blog_running_hours.innerHTML=h;\n    blog_running_mins.innerHTML=m;\n    blog_running_secs.innerHTML=s;\n}\nrefresh_blog_running_time();\nif (typeof(bottomTimeIntervalHasSet) == \"undefined\"){\n    var bottomTimeIntervalHasSet = true;\n    setInterval(function(){refresh_blog_running_time();},500);\n}\n</script>\n```\n\n---\n\n### 主题颜色\n\n```markdown\n#9a92b9\n\nbanner副标题：记录我的日常生活&学习笔记\n页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg\n```\n\n---\n\n### 左侧栏\n\n```markdown\n左侧栏标题\t\n与君共赴，万里征程。\n\n左侧栏子标题（格言）\t\n--hitokoto--\n\n左侧栏作者名称\t\n未可知.\n\n左侧栏作者头像地址\t\nhttps://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png\n\n```\n\n---\n\n## 留言板与友链\n\n### 留言板内容：\n\n```markdown\n留言规则\n\n留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;\n留言者承担因留言行为而直接或间接引起的法律责任;\n本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;\n如果你有任何问题或是要求，可以在这里给我发送消息;\n如在本博客目留言，即表明已阅读并接受了上述各项条款;\n```\n\n---\n\n### 友链内容\n\n```\n[friendlinks style=\"1-square\" sort=\"rand\"/]  \n//方形头像，随机排序\n```\n\n友链格式 :\n\n> 博客名称：Rookie_L’s Blog\n>\n> 描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&学习笔记\n>\n> 站点：https://solstice23.top\n>\n> Avatar (头像)：https://solstice23.top/friendlink_image/avatar/\n\n---\n\n## 菜单栏\n\n### 顶部导航标签\n\n```markdown\n<i class=\"fa fa-home\" aria-hidden=\"true\"></i> 首页\n<i class=\"fa fa-comments\" aria-hidden=\"true\"></i> 留言板\n<i class=\"fa fa-link\" aria-hidden=\"true\"></i> 友情链接\n<i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> 归档\n\n<i class=\"fa fa-star\" aria-hidden=\"true\"></i>分类 <i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n\n<i class=\"fa fa-tags\" aria-hidden=\"true\"></i> 标签<i class=\"fa fa-caret-down\" style=\"margin-left:3px;\"></i>\n```\n\n---\n\n### 左侧栏菜单导航\n\n```markdown\nurl：https://docs.oracle.com/javase/8/docs/api/\n标签：<i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> API帮助文档\n\nurl：https://leetcode-cn.com/\n标签：<i class=\"fa fa-code\" aria-hidden=\"true\"></i> LeetCode\n\nurl：https://codetop.cc/home\n标签：<i class=\"fa fa-codepen\" aria-hidden=\"true\"></i> CodeTop\n\nurl：https://github.com/\n标签：<i class=\"fa fa-github-alt\" aria-hidden=\"true\"></i> GayHub\n\nurl：https://www.programmercarl.com/\n标签：<i class=\"fa fa-eye\" aria-hidden=\"true\"></i> 代码随想录\n\nurl：https://www.runoob.com/\n标签：<i class=\"fa fa-child\" aria-hidden=\"true\"></i> 笨鸟先飞\n```\n\n---\n\n### 左侧个人链接：\n\n```markdown\n1. URL：https://cloud.icu007.work/ 标签： <i class=\"fa fa-cloud\" aria-hidden=\"true\"></i> 可道云\n2. URL：mailto:rookie_l@icu007.work 标签：<i class=\"fa fa-envelope\" aria-hidden=\"true\"></i> 联系我\n3. URL：https://alist.icu007.work/ 标签：<i class=\"fa fa-hdd-o\" aria-hidden=\"true\"></i> 分享盘\n4. URL：https://drive.icu007.work/ 标签： <i class=\"fa fa-download\" aria-hidden=\"true\"></i> 下载盘\n5. URL：https://baidu.icu007.work 标签： <i class=\"fa fa-question\" aria-hidden=\"true\"></i> 百度一下\n6. URL： http://hiheya.github.io 标签： <i class=\"fa fa-user\" aria-hidden=\"true\"></i> 子站\n```\n\n---\n\n  \n","slug":"WP备份","published":1,"updated":"2023-07-31T12:40:09.613Z","layout":"post","link":"","_id":"clktr4qrk0022zsa0c5zz3b9g","content":"<h2 id=\"argon主题选项\"><a href=\"#argon主题选项\" class=\"headerlink\" title=\"argon主题选项\"></a>argon主题选项</h2><h3 id=\"文本附加内容\"><a href=\"#文本附加内容\" class=\"headerlink\" title=\"文本附加内容\"></a>文本附加内容</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》</span><br><span class=\"line\">非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。</span><br><span class=\"line\"></span><br><span class=\"line\">版权声明：</span><br><span class=\"line\">1、本博客属个人所有，不涉及商业目的。</span><br><span class=\"line\">2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！</span><br><span class=\"line\">3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。</span><br><span class=\"line\">4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。</span><br><span class=\"line\">5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境</span><br><span class=\"line\">6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。</span><br><span class=\"line\">7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"页脚内容\"><a href=\"#页脚内容\" class=\"headerlink\" title=\"页脚内容\"></a>页脚内容</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>Copyright  2022 Xiheya<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span>, All Rights Reserved.<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>本站已<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span></span>稳定运行<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span></span>:<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_days&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> days , <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_hours&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> h , <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_mins&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> m , <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_secs&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> s<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">no-pjax</span>&gt;</span></span></span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>days=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>days&quot;);</span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>hours=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>hours&quot;);</span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>mins=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>mins&quot;);</span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>secs=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>secs&quot;);</span><br><span class=\"line\">function refresh<span class=\"emphasis\">_blog_</span>running<span class=\"emphasis\">_time()&#123;</span></span><br><span class=\"line\"><span class=\"emphasis\">    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var d=parseInt(time/24/60/60/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var h=parseInt(time%(24*60*60*1000)/60/60/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var m=parseInt(time%(60*60*1000)/60/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var s=parseInt(time%(60*1000)/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_days.innerHTML=d;</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_hours.innerHTML=h;</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_mins.innerHTML=m;</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_secs.innerHTML=s;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">refresh_</span>blog<span class=\"emphasis\">_running_</span>time();</span><br><span class=\"line\">if (typeof(bottomTimeIntervalHasSet) == &quot;undefined&quot;)&#123;</span><br><span class=\"line\"><span class=\"code\">    var bottomTimeIntervalHasSet = true;</span></span><br><span class=\"line\"><span class=\"code\">    setInterval(function()&#123;refresh_blog_running_time();&#125;,500);</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"主题颜色\"><a href=\"#主题颜色\" class=\"headerlink\" title=\"主题颜色\"></a>主题颜色</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">#9a92b9</span></span><br><span class=\"line\"></span><br><span class=\"line\">banner副标题：记录我的日常生活&amp;学习笔记</span><br><span class=\"line\">页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"左侧栏\"><a href=\"#左侧栏\" class=\"headerlink\" title=\"左侧栏\"></a>左侧栏</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">左侧栏标题\t</span><br><span class=\"line\">与君共赴，万里征程。</span><br><span class=\"line\"></span><br><span class=\"line\">左侧栏子标题（格言）\t</span><br><span class=\"line\">--hitokoto--</span><br><span class=\"line\"></span><br><span class=\"line\">左侧栏作者名称\t</span><br><span class=\"line\">未可知.</span><br><span class=\"line\"></span><br><span class=\"line\">左侧栏作者头像地址\t</span><br><span class=\"line\">https://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"留言板与友链\"><a href=\"#留言板与友链\" class=\"headerlink\" title=\"留言板与友链\"></a>留言板与友链</h2><h3 id=\"留言板内容：\"><a href=\"#留言板内容：\" class=\"headerlink\" title=\"留言板内容：\"></a>留言板内容：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">留言规则</span><br><span class=\"line\"></span><br><span class=\"line\">留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;</span><br><span class=\"line\">留言者承担因留言行为而直接或间接引起的法律责任;</span><br><span class=\"line\">本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;</span><br><span class=\"line\">如果你有任何问题或是要求，可以在这里给我发送消息;</span><br><span class=\"line\">如在本博客目留言，即表明已阅读并接受了上述各项条款;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"友链内容\"><a href=\"#友链内容\" class=\"headerlink\" title=\"友链内容\"></a>友链内容</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[friendlinks style=&quot;1-square&quot; sort=&quot;rand&quot;/]  </span><br><span class=\"line\">//方形头像，随机排序</span><br></pre></td></tr></table></figure>\n\n<p>友链格式 :</p>\n<blockquote>\n<p>博客名称：Rookie_L’s Blog</p>\n<p>描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&amp;学习笔记</p>\n<p>站点：<a href=\"https://solstice23.top/\">https://solstice23.top</a></p>\n<p>Avatar (头像)：<a href=\"https://solstice23.top/friendlink_image/avatar/\">https://solstice23.top/friendlink_image/avatar/</a></p>\n</blockquote>\n<hr>\n<h2 id=\"菜单栏\"><a href=\"#菜单栏\" class=\"headerlink\" title=\"菜单栏\"></a>菜单栏</h2><h3 id=\"顶部导航标签\"><a href=\"#顶部导航标签\" class=\"headerlink\" title=\"顶部导航标签\"></a>顶部导航标签</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-home&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 首页</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-comments&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 留言板</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-link&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 友情链接</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-clock-o&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 归档</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-star&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span>分类 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-caret-down&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-tags&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 标签<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-caret-down&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"左侧栏菜单导航\"><a href=\"#左侧栏菜单导航\" class=\"headerlink\" title=\"左侧栏菜单导航\"></a>左侧栏菜单导航</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url：https://docs.oracle.com/javase/8/docs/api/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-question-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> API帮助文档</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://leetcode-cn.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-code&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> LeetCode</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://codetop.cc/home</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-codepen&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> CodeTop</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://github.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-github-alt&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> GayHub</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://www.programmercarl.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-eye&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 代码随想录</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://www.runoob.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-child&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 笨鸟先飞</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"左侧个人链接：\"><a href=\"#左侧个人链接：\" class=\"headerlink\" title=\"左侧个人链接：\"></a>左侧个人链接：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> URL：https://cloud.icu007.work/ 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-cloud&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 可道云</span><br><span class=\"line\"><span class=\"bullet\">2.</span> URL：mailto:rookie<span class=\"emphasis\">_l@icu007.work 标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-envelope&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 联系我</span></span><br><span class=\"line\"><span class=\"emphasis\">3. URL：https://alist.icu007.work/ 标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-hdd-o&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 分享盘</span></span><br><span class=\"line\"><span class=\"emphasis\">4. URL：https://drive.icu007.work/ 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-download&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 下载盘</span></span><br><span class=\"line\"><span class=\"emphasis\">5. URL：https://baidu.icu007.work 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-question&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 百度一下</span></span><br><span class=\"line\"><span class=\"emphasis\">6. URL： http://hiheya.github.io 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-user&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 子站</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"cover":"linear-gradient(45deg,#ff9a9e 0%,#fad0c4 99%,#fad0c4 100%)","excerpt":"","more":"<h2 id=\"argon主题选项\"><a href=\"#argon主题选项\" class=\"headerlink\" title=\"argon主题选项\"></a>argon主题选项</h2><h3 id=\"文本附加内容\"><a href=\"#文本附加内容\" class=\"headerlink\" title=\"文本附加内容\"></a>文本附加内容</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》</span><br><span class=\"line\">非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。</span><br><span class=\"line\"></span><br><span class=\"line\">版权声明：</span><br><span class=\"line\">1、本博客属个人所有，不涉及商业目的。</span><br><span class=\"line\">2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！</span><br><span class=\"line\">3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。</span><br><span class=\"line\">4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。</span><br><span class=\"line\">5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境</span><br><span class=\"line\">6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。</span><br><span class=\"line\">7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"页脚内容\"><a href=\"#页脚内容\" class=\"headerlink\" title=\"页脚内容\"></a>页脚内容</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>Copyright  2022 Xiheya<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span>, All Rights Reserved.<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span></span>本站已<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">del</span>&gt;</span></span>稳定运行<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">del</span>&gt;</span></span>:<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_days&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> days , <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_hours&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> h , <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_mins&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> m , <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog_running_secs&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;odometer&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span> s<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span> </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">no-pjax</span>&gt;</span></span></span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>days=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>days&quot;);</span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>hours=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>hours&quot;);</span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>mins=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>mins&quot;);</span><br><span class=\"line\">var blog<span class=\"emphasis\">_running_</span>secs=document.getElementById(&quot;blog<span class=\"emphasis\">_running_</span>secs&quot;);</span><br><span class=\"line\">function refresh<span class=\"emphasis\">_blog_</span>running<span class=\"emphasis\">_time()&#123;</span></span><br><span class=\"line\"><span class=\"emphasis\">    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var d=parseInt(time/24/60/60/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var h=parseInt(time%(24*60*60*1000)/60/60/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var m=parseInt(time%(60*60*1000)/60/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    var s=parseInt(time%(60*1000)/1000);</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_days.innerHTML=d;</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_hours.innerHTML=h;</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_mins.innerHTML=m;</span></span><br><span class=\"line\"><span class=\"emphasis\">    blog_</span>running<span class=\"emphasis\">_secs.innerHTML=s;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">refresh_</span>blog<span class=\"emphasis\">_running_</span>time();</span><br><span class=\"line\">if (typeof(bottomTimeIntervalHasSet) == &quot;undefined&quot;)&#123;</span><br><span class=\"line\"><span class=\"code\">    var bottomTimeIntervalHasSet = true;</span></span><br><span class=\"line\"><span class=\"code\">    setInterval(function()&#123;refresh_blog_running_time();&#125;,500);</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"主题颜色\"><a href=\"#主题颜色\" class=\"headerlink\" title=\"主题颜色\"></a>主题颜色</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">#9a92b9</span></span><br><span class=\"line\"></span><br><span class=\"line\">banner副标题：记录我的日常生活&amp;学习笔记</span><br><span class=\"line\">页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"左侧栏\"><a href=\"#左侧栏\" class=\"headerlink\" title=\"左侧栏\"></a>左侧栏</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">左侧栏标题\t</span><br><span class=\"line\">与君共赴，万里征程。</span><br><span class=\"line\"></span><br><span class=\"line\">左侧栏子标题（格言）\t</span><br><span class=\"line\">--hitokoto--</span><br><span class=\"line\"></span><br><span class=\"line\">左侧栏作者名称\t</span><br><span class=\"line\">未可知.</span><br><span class=\"line\"></span><br><span class=\"line\">左侧栏作者头像地址\t</span><br><span class=\"line\">https://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"留言板与友链\"><a href=\"#留言板与友链\" class=\"headerlink\" title=\"留言板与友链\"></a>留言板与友链</h2><h3 id=\"留言板内容：\"><a href=\"#留言板内容：\" class=\"headerlink\" title=\"留言板内容：\"></a>留言板内容：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">留言规则</span><br><span class=\"line\"></span><br><span class=\"line\">留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;</span><br><span class=\"line\">留言者承担因留言行为而直接或间接引起的法律责任;</span><br><span class=\"line\">本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;</span><br><span class=\"line\">如果你有任何问题或是要求，可以在这里给我发送消息;</span><br><span class=\"line\">如在本博客目留言，即表明已阅读并接受了上述各项条款;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"友链内容\"><a href=\"#友链内容\" class=\"headerlink\" title=\"友链内容\"></a>友链内容</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[friendlinks style=&quot;1-square&quot; sort=&quot;rand&quot;/]  </span><br><span class=\"line\">//方形头像，随机排序</span><br></pre></td></tr></table></figure>\n\n<p>友链格式 :</p>\n<blockquote>\n<p>博客名称：Rookie_L’s Blog</p>\n<p>描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&amp;学习笔记</p>\n<p>站点：<a href=\"https://solstice23.top/\">https://solstice23.top</a></p>\n<p>Avatar (头像)：<a href=\"https://solstice23.top/friendlink_image/avatar/\">https://solstice23.top/friendlink_image/avatar/</a></p>\n</blockquote>\n<hr>\n<h2 id=\"菜单栏\"><a href=\"#菜单栏\" class=\"headerlink\" title=\"菜单栏\"></a>菜单栏</h2><h3 id=\"顶部导航标签\"><a href=\"#顶部导航标签\" class=\"headerlink\" title=\"顶部导航标签\"></a>顶部导航标签</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-home&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 首页</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-comments&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 留言板</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-link&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 友情链接</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-clock-o&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 归档</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-star&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span>分类 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-caret-down&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-tags&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 标签<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-caret-down&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"左侧栏菜单导航\"><a href=\"#左侧栏菜单导航\" class=\"headerlink\" title=\"左侧栏菜单导航\"></a>左侧栏菜单导航</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url：https://docs.oracle.com/javase/8/docs/api/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-question-circle&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> API帮助文档</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://leetcode-cn.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-code&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> LeetCode</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://codetop.cc/home</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-codepen&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> CodeTop</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://github.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-github-alt&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> GayHub</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://www.programmercarl.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-eye&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 代码随想录</span><br><span class=\"line\"></span><br><span class=\"line\">url：https://www.runoob.com/</span><br><span class=\"line\">标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-child&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 笨鸟先飞</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"左侧个人链接：\"><a href=\"#左侧个人链接：\" class=\"headerlink\" title=\"左侧个人链接：\"></a>左侧个人链接：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> URL：https://cloud.icu007.work/ 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-cloud&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 可道云</span><br><span class=\"line\"><span class=\"bullet\">2.</span> URL：mailto:rookie<span class=\"emphasis\">_l@icu007.work 标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-envelope&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 联系我</span></span><br><span class=\"line\"><span class=\"emphasis\">3. URL：https://alist.icu007.work/ 标签：<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-hdd-o&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 分享盘</span></span><br><span class=\"line\"><span class=\"emphasis\">4. URL：https://drive.icu007.work/ 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-download&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 下载盘</span></span><br><span class=\"line\"><span class=\"emphasis\">5. URL：https://baidu.icu007.work 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-question&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 百度一下</span></span><br><span class=\"line\"><span class=\"emphasis\">6. URL： http://hiheya.github.io 标签： <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-user&quot;</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span> 子站</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"git-push时冲突解决方法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqm5vu5j21kw0w0aon.jpg"],"abstract":"这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。","abbrlink":"80c83deb","date":"2022-08-26T01:10:27.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 一、冲突原因\n\n### 1.1 多人同时修改同一文件\n\n```\n liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git cherry-pick -n 4a7c5af22778e57440fdf09921b25e1a40a6d5e0\n \n error: 不能应用 4a7c5af... Product:SQ45S\n 提示：冲突解决完毕后，用 'git add <路径>' 或 'git rm <路径>'\n 提示：命令标记修正后的文件\n \n liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git status\n 位于分支 Pie_SQ45S_Release\n 您的分支与上游分支 'origin/Pie_SQ45S_Release' 一致。\n 未合并的路径：\n   （使用 \"git reset HEAD <文件>...\" 以取消暂存）\n   （使用 \"git add <文件>...\" 标记解决方案）\n \n     双方修改：   build/buildprop.mk\n \n 尚未暂存以备提交的变更：\n   （使用 \"git add <文件>...\" 更新要提交的内容）\n   （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n\n \n \n \n```\n\n### 1.2 缺少change-id\n\n```\n liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git push origin HEAD:refs/for/Pie_SQ45S_Release\n 对象计数中: 4, 完成.\n Delta compression using up to 64 threads.\n 压缩对象中: 100% (4/4), 完成.\n 写入对象中: 100% (4/4), 656 bytes | 0 bytes/s, 完成.\n Total 4 (delta 3), reused 0 (delta 0)\n remote: Resolving deltas: 100% (3/3)\n remote: Counting objects: 4, done\n remote: Processing changes: refs: 1, done    \n remote: ERROR: [19bc4b1] missing Change-Id in commit message footer\n remote: \n remote: Hint: To automatically insert Change-Id, install the hook:\n remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg ${gitdir}/hooks/\n remote: And then amend the commit:\n remote:   git commit --amend\n remote: \n To ssh://192.168.8.215:29418/NoUcode/SQ45S\n  ! [remote rejected] HEAD -> refs/for/Pie_SQ45S_Release ([19bc4b1] missing Change-Id in commit message footer)\n error: 无法推送一些引用到 'ssh://192.168.8.215:29418/NoUcode/SQ45S'\n\n \n \n \n```\n\n![差异](https://m.360buyimg.com/babel/jfs/t1/61562/20/19916/87101/630746a4E781cd8f2/30ce7c00b6bce0a7.png)\n\n## 二、解决方案\n\n### 2.1 多人修改\n\n- 通过 `git status`命令找到双方共同修改的文件，然后编辑文件，把多余的代码去掉即可。\n- 可通过 `git diff 文件目录`来查看显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别\n\n![差异](https://m.360buyimg.com/babel/jfs/t1/132834/9/26175/55311/63074527Ebe1d9bb2/5731e9aaa5eb446d.png)\n\n- 如图，删除标识代码，此冲突即可解决。\n\n### 2.2 缺少change-id\n\n- 其实这个冲突的解决方法，git已经提示过我们了。就是这一段\n\n```\n remote: Hint: To automatically insert Change-Id, install the hook:\n remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg ${gitdir}/hooks/\n remote: And then amend the commit:\n remote:   git commit --amend\n\n \n \n \n```\n\n- 所以我们只需要执行 `gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg ${gitdir}/hooks/`以及 `git commit --amend`这两行命令即可。\n- 当然如果不放心还可以reset 已有的提交：`git reset --soft 3bf39e60e2cad62f3ada0414f3cef64f386ccce3`，最后那一串为 commit id，reset完了之后，再重新进行提交操作。操作完成后即可看到change-id已经生成了。\n","source":"_posts/git-push时冲突解决方法.md","raw":"---\ntitle: git-push时冲突解决方法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqm5vu5j21kw0w0aon.jpg'\ntags:\n  - git\n  - 随笔\nabstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。\nabbrlink: 80c83deb\ndate: 2022-08-26 09:10:27\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 一、冲突原因\n\n### 1.1 多人同时修改同一文件\n\n```\n liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git cherry-pick -n 4a7c5af22778e57440fdf09921b25e1a40a6d5e0\n \n error: 不能应用 4a7c5af... Product:SQ45S\n 提示：冲突解决完毕后，用 'git add <路径>' 或 'git rm <路径>'\n 提示：命令标记修正后的文件\n \n liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git status\n 位于分支 Pie_SQ45S_Release\n 您的分支与上游分支 'origin/Pie_SQ45S_Release' 一致。\n 未合并的路径：\n   （使用 \"git reset HEAD <文件>...\" 以取消暂存）\n   （使用 \"git add <文件>...\" 标记解决方案）\n \n     双方修改：   build/buildprop.mk\n \n 尚未暂存以备提交的变更：\n   （使用 \"git add <文件>...\" 更新要提交的内容）\n   （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n\n \n \n \n```\n\n### 1.2 缺少change-id\n\n```\n liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git push origin HEAD:refs/for/Pie_SQ45S_Release\n 对象计数中: 4, 完成.\n Delta compression using up to 64 threads.\n 压缩对象中: 100% (4/4), 完成.\n 写入对象中: 100% (4/4), 656 bytes | 0 bytes/s, 完成.\n Total 4 (delta 3), reused 0 (delta 0)\n remote: Resolving deltas: 100% (3/3)\n remote: Counting objects: 4, done\n remote: Processing changes: refs: 1, done    \n remote: ERROR: [19bc4b1] missing Change-Id in commit message footer\n remote: \n remote: Hint: To automatically insert Change-Id, install the hook:\n remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg ${gitdir}/hooks/\n remote: And then amend the commit:\n remote:   git commit --amend\n remote: \n To ssh://192.168.8.215:29418/NoUcode/SQ45S\n  ! [remote rejected] HEAD -> refs/for/Pie_SQ45S_Release ([19bc4b1] missing Change-Id in commit message footer)\n error: 无法推送一些引用到 'ssh://192.168.8.215:29418/NoUcode/SQ45S'\n\n \n \n \n```\n\n![差异](https://m.360buyimg.com/babel/jfs/t1/61562/20/19916/87101/630746a4E781cd8f2/30ce7c00b6bce0a7.png)\n\n## 二、解决方案\n\n### 2.1 多人修改\n\n- 通过 `git status`命令找到双方共同修改的文件，然后编辑文件，把多余的代码去掉即可。\n- 可通过 `git diff 文件目录`来查看显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别\n\n![差异](https://m.360buyimg.com/babel/jfs/t1/132834/9/26175/55311/63074527Ebe1d9bb2/5731e9aaa5eb446d.png)\n\n- 如图，删除标识代码，此冲突即可解决。\n\n### 2.2 缺少change-id\n\n- 其实这个冲突的解决方法，git已经提示过我们了。就是这一段\n\n```\n remote: Hint: To automatically insert Change-Id, install the hook:\n remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg ${gitdir}/hooks/\n remote: And then amend the commit:\n remote:   git commit --amend\n\n \n \n \n```\n\n- 所以我们只需要执行 `gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg ${gitdir}/hooks/`以及 `git commit --amend`这两行命令即可。\n- 当然如果不放心还可以reset 已有的提交：`git reset --soft 3bf39e60e2cad62f3ada0414f3cef64f386ccce3`，最后那一串为 commit id，reset完了之后，再重新进行提交操作。操作完成后即可看到change-id已经生成了。\n","slug":"git-push时冲突解决方法","published":1,"updated":"2023-07-31T12:40:09.631Z","layout":"post","link":"","_id":"clktr4qrl0026zsa0ab6cdr3j","content":"<h2 id=\"一、冲突原因\"><a href=\"#一、冲突原因\" class=\"headerlink\" title=\"一、冲突原因\"></a>一、冲突原因</h2><h3 id=\"1-1-多人同时修改同一文件\"><a href=\"#1-1-多人同时修改同一文件\" class=\"headerlink\" title=\"1.1 多人同时修改同一文件\"></a>1.1 多人同时修改同一文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git cherry-pick -n 4a7c5af22778e57440fdf09921b25e1a40a6d5e0</span><br><span class=\"line\"></span><br><span class=\"line\">error: 不能应用 4a7c5af... Product:SQ45S</span><br><span class=\"line\">提示：冲突解决完毕后，用 &#x27;git add &lt;路径&gt;&#x27; 或 &#x27;git rm &lt;路径&gt;&#x27;</span><br><span class=\"line\">提示：命令标记修正后的文件</span><br><span class=\"line\"></span><br><span class=\"line\">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git status</span><br><span class=\"line\">位于分支 Pie_SQ45S_Release</span><br><span class=\"line\">您的分支与上游分支 &#x27;origin/Pie_SQ45S_Release&#x27; 一致。</span><br><span class=\"line\">未合并的路径：</span><br><span class=\"line\">  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 标记解决方案）</span><br><span class=\"line\"></span><br><span class=\"line\">    双方修改：   build/buildprop.mk</span><br><span class=\"line\"></span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class=\"line\">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-缺少change-id\"><a href=\"#1-2-缺少change-id\" class=\"headerlink\" title=\"1.2 缺少change-id\"></a>1.2 缺少change-id</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git push origin HEAD:refs/for/Pie_SQ45S_Release</span><br><span class=\"line\">对象计数中: 4, 完成.</span><br><span class=\"line\">Delta compression using up to 64 threads.</span><br><span class=\"line\">压缩对象中: 100% (4/4), 完成.</span><br><span class=\"line\">写入对象中: 100% (4/4), 656 bytes | 0 bytes/s, 完成.</span><br><span class=\"line\">Total 4 (delta 3), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (3/3)</span><br><span class=\"line\">remote: Counting objects: 4, done</span><br><span class=\"line\">remote: Processing changes: refs: 1, done    </span><br><span class=\"line\">remote: ERROR: [19bc4b1] missing Change-Id in commit message footer</span><br><span class=\"line\">remote: </span><br><span class=\"line\">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class=\"line\">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class=\"line\">remote: And then amend the commit:</span><br><span class=\"line\">remote:   git commit --amend</span><br><span class=\"line\">remote: </span><br><span class=\"line\">To ssh://192.168.8.215:29418/NoUcode/SQ45S</span><br><span class=\"line\"> ! [remote rejected] HEAD -&gt; refs/for/Pie_SQ45S_Release ([19bc4b1] missing Change-Id in commit message footer)</span><br><span class=\"line\">error: 无法推送一些引用到 &#x27;ssh://192.168.8.215:29418/NoUcode/SQ45S&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/61562/20/19916/87101/630746a4E781cd8f2/30ce7c00b6bce0a7.png\" alt=\"差异\"></p>\n<h2 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h2><h3 id=\"2-1-多人修改\"><a href=\"#2-1-多人修改\" class=\"headerlink\" title=\"2.1 多人修改\"></a>2.1 多人修改</h3><ul>\n<li>通过 <code>git status</code>命令找到双方共同修改的文件，然后编辑文件，把多余的代码去掉即可。</li>\n<li>可通过 <code>git diff 文件目录</code>来查看显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别</li>\n</ul>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/132834/9/26175/55311/63074527Ebe1d9bb2/5731e9aaa5eb446d.png\" alt=\"差异\"></p>\n<ul>\n<li>如图，删除标识代码，此冲突即可解决。</li>\n</ul>\n<h3 id=\"2-2-缺少change-id\"><a href=\"#2-2-缺少change-id\" class=\"headerlink\" title=\"2.2 缺少change-id\"></a>2.2 缺少change-id</h3><ul>\n<li>其实这个冲突的解决方法，git已经提示过我们了。就是这一段</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class=\"line\">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class=\"line\">remote: And then amend the commit:</span><br><span class=\"line\">remote:   git commit --amend</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所以我们只需要执行 <code>gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</code>以及 <code>git commit --amend</code>这两行命令即可。</li>\n<li>当然如果不放心还可以reset 已有的提交：<code>git reset --soft 3bf39e60e2cad62f3ada0414f3cef64f386ccce3</code>，最后那一串为 commit id，reset完了之后，再重新进行提交操作。操作完成后即可看到change-id已经生成了。</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#e0c3fc 0%,#8ec5fc 100%)","excerpt":"","more":"<h2 id=\"一、冲突原因\"><a href=\"#一、冲突原因\" class=\"headerlink\" title=\"一、冲突原因\"></a>一、冲突原因</h2><h3 id=\"1-1-多人同时修改同一文件\"><a href=\"#1-1-多人同时修改同一文件\" class=\"headerlink\" title=\"1.1 多人同时修改同一文件\"></a>1.1 多人同时修改同一文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git cherry-pick -n 4a7c5af22778e57440fdf09921b25e1a40a6d5e0</span><br><span class=\"line\"></span><br><span class=\"line\">error: 不能应用 4a7c5af... Product:SQ45S</span><br><span class=\"line\">提示：冲突解决完毕后，用 &#x27;git add &lt;路径&gt;&#x27; 或 &#x27;git rm &lt;路径&gt;&#x27;</span><br><span class=\"line\">提示：命令标记修正后的文件</span><br><span class=\"line\"></span><br><span class=\"line\">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git status</span><br><span class=\"line\">位于分支 Pie_SQ45S_Release</span><br><span class=\"line\">您的分支与上游分支 &#x27;origin/Pie_SQ45S_Release&#x27; 一致。</span><br><span class=\"line\">未合并的路径：</span><br><span class=\"line\">  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 标记解决方案）</span><br><span class=\"line\"></span><br><span class=\"line\">    双方修改：   build/buildprop.mk</span><br><span class=\"line\"></span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class=\"line\">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-缺少change-id\"><a href=\"#1-2-缺少change-id\" class=\"headerlink\" title=\"1.2 缺少change-id\"></a>1.2 缺少change-id</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git push origin HEAD:refs/for/Pie_SQ45S_Release</span><br><span class=\"line\">对象计数中: 4, 完成.</span><br><span class=\"line\">Delta compression using up to 64 threads.</span><br><span class=\"line\">压缩对象中: 100% (4/4), 完成.</span><br><span class=\"line\">写入对象中: 100% (4/4), 656 bytes | 0 bytes/s, 完成.</span><br><span class=\"line\">Total 4 (delta 3), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (3/3)</span><br><span class=\"line\">remote: Counting objects: 4, done</span><br><span class=\"line\">remote: Processing changes: refs: 1, done    </span><br><span class=\"line\">remote: ERROR: [19bc4b1] missing Change-Id in commit message footer</span><br><span class=\"line\">remote: </span><br><span class=\"line\">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class=\"line\">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class=\"line\">remote: And then amend the commit:</span><br><span class=\"line\">remote:   git commit --amend</span><br><span class=\"line\">remote: </span><br><span class=\"line\">To ssh://192.168.8.215:29418/NoUcode/SQ45S</span><br><span class=\"line\"> ! [remote rejected] HEAD -&gt; refs/for/Pie_SQ45S_Release ([19bc4b1] missing Change-Id in commit message footer)</span><br><span class=\"line\">error: 无法推送一些引用到 &#x27;ssh://192.168.8.215:29418/NoUcode/SQ45S&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/61562/20/19916/87101/630746a4E781cd8f2/30ce7c00b6bce0a7.png\" alt=\"差异\"></p>\n<h2 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h2><h3 id=\"2-1-多人修改\"><a href=\"#2-1-多人修改\" class=\"headerlink\" title=\"2.1 多人修改\"></a>2.1 多人修改</h3><ul>\n<li>通过 <code>git status</code>命令找到双方共同修改的文件，然后编辑文件，把多余的代码去掉即可。</li>\n<li>可通过 <code>git diff 文件目录</code>来查看显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别</li>\n</ul>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/132834/9/26175/55311/63074527Ebe1d9bb2/5731e9aaa5eb446d.png\" alt=\"差异\"></p>\n<ul>\n<li>如图，删除标识代码，此冲突即可解决。</li>\n</ul>\n<h3 id=\"2-2-缺少change-id\"><a href=\"#2-2-缺少change-id\" class=\"headerlink\" title=\"2.2 缺少change-id\"></a>2.2 缺少change-id</h3><ul>\n<li>其实这个冲突的解决方法，git已经提示过我们了。就是这一段</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class=\"line\">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class=\"line\">remote: And then amend the commit:</span><br><span class=\"line\">remote:   git commit --amend</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所以我们只需要执行 <code>gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</code>以及 <code>git commit --amend</code>这两行命令即可。</li>\n<li>当然如果不放心还可以reset 已有的提交：<code>git reset --soft 3bf39e60e2cad62f3ada0414f3cef64f386ccce3</code>，最后那一串为 commit id，reset完了之后，再重新进行提交操作。操作完成后即可看到change-id已经生成了。</li>\n</ul>\n"},{"title":"xray面板安装","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqrzat4j21kw0w0wtr.jpg"],"abbrlink":"25e76629","date":"2022-08-26T03:37:14.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n[TOC]\n\n## 一、升级yum，安装curl依赖包\n\n```bash\nyum update -y && yum install curl -y\n```\n\n其中：\n\n`yum update -y`为更新yum\n\n`yum install curl -y`为安装curl依赖包。\n\n## 二、重启系统\n\n```bash\nreboot\n```\n\n## 三、安装Xray面板\n\n```bash\nbash <(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)\n```\n\n## 四、centos安装宝塔面板\n\n```shell\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh ed8484bec\n```\n\n","source":"_posts/xray面板安装.md","raw":"---\ntitle: xray面板安装\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqrzat4j21kw0w0wtr.jpg'\ntags: 随笔\nabbrlink: '25e76629'\ndate: 2022-08-26 11:37:14\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n[TOC]\n\n## 一、升级yum，安装curl依赖包\n\n```bash\nyum update -y && yum install curl -y\n```\n\n其中：\n\n`yum update -y`为更新yum\n\n`yum install curl -y`为安装curl依赖包。\n\n## 二、重启系统\n\n```bash\nreboot\n```\n\n## 三、安装Xray面板\n\n```bash\nbash <(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)\n```\n\n## 四、centos安装宝塔面板\n\n```shell\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh ed8484bec\n```\n\n","slug":"xray面板安装","published":1,"updated":"2023-07-31T12:40:09.628Z","layout":"post","link":"","_id":"clktr4qrm002azsa02khmeac3","content":"<p>[TOC]</p>\n<h2 id=\"一、升级yum，安装curl依赖包\"><a href=\"#一、升级yum，安装curl依赖包\" class=\"headerlink\" title=\"一、升级yum，安装curl依赖包\"></a>一、升级yum，安装curl依赖包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update -y &amp;&amp; yum install curl -y</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<p><code>yum update -y</code>为更新yum</p>\n<p><code>yum install curl -y</code>为安装curl依赖包。</p>\n<h2 id=\"二、重启系统\"><a href=\"#二、重启系统\" class=\"headerlink\" title=\"二、重启系统\"></a>二、重启系统</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装Xray面板\"><a href=\"#三、安装Xray面板\" class=\"headerlink\" title=\"三、安装Xray面板\"></a>三、安装Xray面板</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、centos安装宝塔面板\"><a href=\"#四、centos安装宝塔面板\" class=\"headerlink\" title=\"四、centos安装宝塔面板\"></a>四、centos安装宝塔面板</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"linear-gradient(to top,#a8edea 0%,#fed6e3 100%)","excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"一、升级yum，安装curl依赖包\"><a href=\"#一、升级yum，安装curl依赖包\" class=\"headerlink\" title=\"一、升级yum，安装curl依赖包\"></a>一、升级yum，安装curl依赖包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update -y &amp;&amp; yum install curl -y</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<p><code>yum update -y</code>为更新yum</p>\n<p><code>yum install curl -y</code>为安装curl依赖包。</p>\n<h2 id=\"二、重启系统\"><a href=\"#二、重启系统\" class=\"headerlink\" title=\"二、重启系统\"></a>二、重启系统</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装Xray面板\"><a href=\"#三、安装Xray面板\" class=\"headerlink\" title=\"三、安装Xray面板\"></a>三、安装Xray面板</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、centos安装宝塔面板\"><a href=\"#四、centos安装宝塔面板\" class=\"headerlink\" title=\"四、centos安装宝塔面板\"></a>四、centos安装宝塔面板</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用Nginx反向代理服务器端口至二级域名","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://api.ixiaowai.cn/mcapi/mcapi.php"],"abstract":"这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。","abbrlink":"13767a3a","date":"2023-04-12T10:59:50.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"password":null,"message":null,"_content":"\n要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：\n\n## 一、安装 Nginx\n\n如果还没有安装 Nginx，可以使用以下命令在 Ubuntu 上进行安装：\n\n```\n 复制代码sudo apt update\n sudo apt install nginx\n```\n\n## 二、配置 Nginx 反向代理\n\n### 2.1 不使用 HTTPS \n\n- 例如需要反代我们服务器的8080端口且不适用HTTPS，可以进行以下操作。\n- 在 Nginx 的配置文件(一般为Nginx安装目录下的 `nginx.conf` )中添加以下内容，将 HTTP 请求代理到服务器的 8080 端口。需要将 `example.com` 替换为域名或 IP 地址，`/` 后面的路径应该是需要代理的应用程序的路径。\n\n```\n server {\n   listen 80;\n   server_name example.com; //需要更改为你的域名\n \n   location / {\n     proxy_pass http://localhost:8080/; //需要更改为要反代的端口\n     proxy_set_header Host $host;\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   }\n }\n```\n\n### 2.2 使用 HTTPS\n\n- 使用HTTPS的情况下，需要先在服务器上安装SSL证书，可以通过Let's Encrypt等服务获取免费的SSL证书。然后，可以按照以下步骤进行反向代理：\n- 编辑Nginx配置文件`nginx.conf`，添加以下内容：\n\n```\n server {\n     listen 443 ssl;\n     server_name your_domain_name.com;               #需要更改\n \n     ssl_certificate /path/to/your/cert.pem;         #需要更改\n     ssl_certificate_key /path/to/your/key.key;      #需要更改\n \n     location / {\n       proxy_pass http://my_app;                     #需要更改\n     }\n }\n \n # 或者以下命令\n server \n     {\n         listen       80;\n         listen       443;\n         server_name  your_domain_name.com;          #需要更改\n         ssl on;\n         ssl_certificate /path/to/your/cert.pem;\n         ssl_certificate_key /path/to/your/key.key;\n         ssl_session_timeout 5m;\n         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  \n         ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  \n         ssl_prefer_server_ciphers on;\n         if ($host ~* ^\\d+\\.\\d+\\.\\d+\\.\\d+$) { \n            return 444; # 如果请求的是 IP 地址 返回空响应包，禁止访问\n            }\n         location / {\n                 client_max_body_size 500M;\n \n                 #proxy_redirect off;\n                 proxy_set_header Host $proxy_host;\n                 proxy_set_header X-Real-IP $remote_addr;\n                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                 proxy_pass http://localhost:8080;\n         }\n     }\n \n```\n\n- 其中，`your_server_port`是你的服务器应用端口号，`your_domain_name.com`是你的域名，`/path/to/your/cert.pem`和`/path/to/your/key.key`分别是你的SSL证书和私钥文件的路径。该配置将来自NGINX监听的80端口的请求，重定向到443端口，并使用SSL证书对HTTPS请求进行加密。\n\n## 三、重新加载 Nginx 配置\n\n- 执行以下命令以重新加载 Nginx 配置：\n\n```\n sudo nginx -t && sudo service nginx reload\n // 或者执行以下命令重启 nginx\n sudo systemctl restart nginx\n```\n\n- 现在，Nginx 将代理到服务器的 8080 端口。在浏览器中反代过的域名或 IP 地址，应该就能够访问应用程序了。\n","source":"_posts/使用Nginx反向代理服务器端口至二级域名.md","raw":"---\ntitle: 使用Nginx反向代理服务器端口至二级域名\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://api.ixiaowai.cn/mcapi/mcapi.php'\nabstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。\nabbrlink: 13767a3a\ndate: 2023-04-12 18:59:50\nauthorAbout:\nauthorDesc:\ntags:\nkeywords:\ndescription:\npassword:\nmessage:\n---\n\n要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：\n\n## 一、安装 Nginx\n\n如果还没有安装 Nginx，可以使用以下命令在 Ubuntu 上进行安装：\n\n```\n 复制代码sudo apt update\n sudo apt install nginx\n```\n\n## 二、配置 Nginx 反向代理\n\n### 2.1 不使用 HTTPS \n\n- 例如需要反代我们服务器的8080端口且不适用HTTPS，可以进行以下操作。\n- 在 Nginx 的配置文件(一般为Nginx安装目录下的 `nginx.conf` )中添加以下内容，将 HTTP 请求代理到服务器的 8080 端口。需要将 `example.com` 替换为域名或 IP 地址，`/` 后面的路径应该是需要代理的应用程序的路径。\n\n```\n server {\n   listen 80;\n   server_name example.com; //需要更改为你的域名\n \n   location / {\n     proxy_pass http://localhost:8080/; //需要更改为要反代的端口\n     proxy_set_header Host $host;\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   }\n }\n```\n\n### 2.2 使用 HTTPS\n\n- 使用HTTPS的情况下，需要先在服务器上安装SSL证书，可以通过Let's Encrypt等服务获取免费的SSL证书。然后，可以按照以下步骤进行反向代理：\n- 编辑Nginx配置文件`nginx.conf`，添加以下内容：\n\n```\n server {\n     listen 443 ssl;\n     server_name your_domain_name.com;               #需要更改\n \n     ssl_certificate /path/to/your/cert.pem;         #需要更改\n     ssl_certificate_key /path/to/your/key.key;      #需要更改\n \n     location / {\n       proxy_pass http://my_app;                     #需要更改\n     }\n }\n \n # 或者以下命令\n server \n     {\n         listen       80;\n         listen       443;\n         server_name  your_domain_name.com;          #需要更改\n         ssl on;\n         ssl_certificate /path/to/your/cert.pem;\n         ssl_certificate_key /path/to/your/key.key;\n         ssl_session_timeout 5m;\n         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  \n         ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  \n         ssl_prefer_server_ciphers on;\n         if ($host ~* ^\\d+\\.\\d+\\.\\d+\\.\\d+$) { \n            return 444; # 如果请求的是 IP 地址 返回空响应包，禁止访问\n            }\n         location / {\n                 client_max_body_size 500M;\n \n                 #proxy_redirect off;\n                 proxy_set_header Host $proxy_host;\n                 proxy_set_header X-Real-IP $remote_addr;\n                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                 proxy_pass http://localhost:8080;\n         }\n     }\n \n```\n\n- 其中，`your_server_port`是你的服务器应用端口号，`your_domain_name.com`是你的域名，`/path/to/your/cert.pem`和`/path/to/your/key.key`分别是你的SSL证书和私钥文件的路径。该配置将来自NGINX监听的80端口的请求，重定向到443端口，并使用SSL证书对HTTPS请求进行加密。\n\n## 三、重新加载 Nginx 配置\n\n- 执行以下命令以重新加载 Nginx 配置：\n\n```\n sudo nginx -t && sudo service nginx reload\n // 或者执行以下命令重启 nginx\n sudo systemctl restart nginx\n```\n\n- 现在，Nginx 将代理到服务器的 8080 端口。在浏览器中反代过的域名或 IP 地址，应该就能够访问应用程序了。\n","slug":"使用Nginx反向代理服务器端口至二级域名","published":1,"updated":"2023-07-31T12:40:09.635Z","layout":"post","link":"","_id":"clktr4qrn002ezsa0fu8xe8m2","content":"<p>要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：</p>\n<h2 id=\"一、安装-Nginx\"><a href=\"#一、安装-Nginx\" class=\"headerlink\" title=\"一、安装 Nginx\"></a>一、安装 Nginx</h2><p>如果还没有安装 Nginx，可以使用以下命令在 Ubuntu 上进行安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码sudo apt update</span><br><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、配置-Nginx-反向代理\"><a href=\"#二、配置-Nginx-反向代理\" class=\"headerlink\" title=\"二、配置 Nginx 反向代理\"></a>二、配置 Nginx 反向代理</h2><h3 id=\"2-1-不使用-HTTPS\"><a href=\"#2-1-不使用-HTTPS\" class=\"headerlink\" title=\"2.1 不使用 HTTPS\"></a>2.1 不使用 HTTPS</h3><ul>\n<li>例如需要反代我们服务器的8080端口且不适用HTTPS，可以进行以下操作。</li>\n<li>在 Nginx 的配置文件(一般为Nginx安装目录下的 <code>nginx.conf</code> )中添加以下内容，将 HTTP 请求代理到服务器的 8080 端口。需要将 <code>example.com</code> 替换为域名或 IP 地址，<code>/</code> 后面的路径应该是需要代理的应用程序的路径。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name example.com; //需要更改为你的域名</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:8080/; //需要更改为要反代的端口</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用-HTTPS\"><a href=\"#2-2-使用-HTTPS\" class=\"headerlink\" title=\"2.2 使用 HTTPS\"></a>2.2 使用 HTTPS</h3><ul>\n<li>使用HTTPS的情况下，需要先在服务器上安装SSL证书，可以通过Let’s Encrypt等服务获取免费的SSL证书。然后，可以按照以下步骤进行反向代理：</li>\n<li>编辑Nginx配置文件<code>nginx.conf</code>，添加以下内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name your_domain_name.com;               #需要更改</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /path/to/your/cert.pem;         #需要更改</span><br><span class=\"line\">    ssl_certificate_key /path/to/your/key.key;      #需要更改</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://my_app;                     #需要更改</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者以下命令</span><br><span class=\"line\">server </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        listen       443;</span><br><span class=\"line\">        server_name  your_domain_name.com;          #需要更改</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate /path/to/your/cert.pem;</span><br><span class=\"line\">        ssl_certificate_key /path/to/your/key.key;</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  </span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  </span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        if ($host ~* ^\\d+\\.\\d+\\.\\d+\\.\\d+$) &#123; </span><br><span class=\"line\">           return 444; # 如果请求的是 IP 地址 返回空响应包，禁止访问</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                client_max_body_size 500M;</span><br><span class=\"line\"></span><br><span class=\"line\">                #proxy_redirect off;</span><br><span class=\"line\">                proxy_set_header Host $proxy_host;</span><br><span class=\"line\">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">                proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中，<code>your_server_port</code>是你的服务器应用端口号，<code>your_domain_name.com</code>是你的域名，<code>/path/to/your/cert.pem</code>和<code>/path/to/your/key.key</code>分别是你的SSL证书和私钥文件的路径。该配置将来自NGINX监听的80端口的请求，重定向到443端口，并使用SSL证书对HTTPS请求进行加密。</li>\n</ul>\n<h2 id=\"三、重新加载-Nginx-配置\"><a href=\"#三、重新加载-Nginx-配置\" class=\"headerlink\" title=\"三、重新加载 Nginx 配置\"></a>三、重新加载 Nginx 配置</h2><ul>\n<li>执行以下命令以重新加载 Nginx 配置：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t &amp;&amp; sudo service nginx reload</span><br><span class=\"line\">// 或者执行以下命令重启 nginx</span><br><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>现在，Nginx 将代理到服务器的 8080 端口。在浏览器中反代过的域名或 IP 地址，应该就能够访问应用程序了。</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a6c0fe 0%,#f68084 100%)","excerpt":"","more":"<p>要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：</p>\n<h2 id=\"一、安装-Nginx\"><a href=\"#一、安装-Nginx\" class=\"headerlink\" title=\"一、安装 Nginx\"></a>一、安装 Nginx</h2><p>如果还没有安装 Nginx，可以使用以下命令在 Ubuntu 上进行安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码sudo apt update</span><br><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、配置-Nginx-反向代理\"><a href=\"#二、配置-Nginx-反向代理\" class=\"headerlink\" title=\"二、配置 Nginx 反向代理\"></a>二、配置 Nginx 反向代理</h2><h3 id=\"2-1-不使用-HTTPS\"><a href=\"#2-1-不使用-HTTPS\" class=\"headerlink\" title=\"2.1 不使用 HTTPS\"></a>2.1 不使用 HTTPS</h3><ul>\n<li>例如需要反代我们服务器的8080端口且不适用HTTPS，可以进行以下操作。</li>\n<li>在 Nginx 的配置文件(一般为Nginx安装目录下的 <code>nginx.conf</code> )中添加以下内容，将 HTTP 请求代理到服务器的 8080 端口。需要将 <code>example.com</code> 替换为域名或 IP 地址，<code>/</code> 后面的路径应该是需要代理的应用程序的路径。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name example.com; //需要更改为你的域名</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:8080/; //需要更改为要反代的端口</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用-HTTPS\"><a href=\"#2-2-使用-HTTPS\" class=\"headerlink\" title=\"2.2 使用 HTTPS\"></a>2.2 使用 HTTPS</h3><ul>\n<li>使用HTTPS的情况下，需要先在服务器上安装SSL证书，可以通过Let’s Encrypt等服务获取免费的SSL证书。然后，可以按照以下步骤进行反向代理：</li>\n<li>编辑Nginx配置文件<code>nginx.conf</code>，添加以下内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name your_domain_name.com;               #需要更改</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /path/to/your/cert.pem;         #需要更改</span><br><span class=\"line\">    ssl_certificate_key /path/to/your/key.key;      #需要更改</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://my_app;                     #需要更改</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者以下命令</span><br><span class=\"line\">server </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        listen       443;</span><br><span class=\"line\">        server_name  your_domain_name.com;          #需要更改</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate /path/to/your/cert.pem;</span><br><span class=\"line\">        ssl_certificate_key /path/to/your/key.key;</span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  </span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  </span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        if ($host ~* ^\\d+\\.\\d+\\.\\d+\\.\\d+$) &#123; </span><br><span class=\"line\">           return 444; # 如果请求的是 IP 地址 返回空响应包，禁止访问</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                client_max_body_size 500M;</span><br><span class=\"line\"></span><br><span class=\"line\">                #proxy_redirect off;</span><br><span class=\"line\">                proxy_set_header Host $proxy_host;</span><br><span class=\"line\">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">                proxy_pass http://localhost:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中，<code>your_server_port</code>是你的服务器应用端口号，<code>your_domain_name.com</code>是你的域名，<code>/path/to/your/cert.pem</code>和<code>/path/to/your/key.key</code>分别是你的SSL证书和私钥文件的路径。该配置将来自NGINX监听的80端口的请求，重定向到443端口，并使用SSL证书对HTTPS请求进行加密。</li>\n</ul>\n<h2 id=\"三、重新加载-Nginx-配置\"><a href=\"#三、重新加载-Nginx-配置\" class=\"headerlink\" title=\"三、重新加载 Nginx 配置\"></a>三、重新加载 Nginx 配置</h2><ul>\n<li>执行以下命令以重新加载 Nginx 配置：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -t &amp;&amp; sudo service nginx reload</span><br><span class=\"line\">// 或者执行以下命令重启 nginx</span><br><span class=\"line\">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>现在，Nginx 将代理到服务器的 8080 端口。在浏览器中反代过的域名或 IP 地址，应该就能够访问应用程序了。</li>\n</ul>\n"},{"title":"分析Android项目运行","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqsspxqj21kw0w0to4.jpg"],"abbrlink":"7d2e59d3","date":"2022-08-26T03:41:59.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 分析安卓项目如何运行\n\n### AndroidManifest.xml\n\n```xml\n<activity\n          android:name=\".MainActivity\"\n          android:exported=\"true\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n```\n\n这段话表示对HelloWorldActivity这个活动进行注册，<font color = \"red\"><strong> 没有 </strong></font> 在AndroidManifest.xml中<font color = \"red\"><strong> 注册的活动是不能使用的 </strong></font> 。其中<font color = \"red\"><strong> intent-filter里的两行代码尤为重要 </strong></font> 。\n\n```xml\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n```\n\n这两行代码表示HelloWorldActivity是这个项目的主活动。\n\n### MainActivity\n\n活动是应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。，所以我们看到的界面，就是MainActivity这个活动。\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n}\n```\n\nMainActivity 继承自 AppCompatActivity，Activity是一个Android系统提供的活动基类，我们项目中所有活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。\n\nMainActivity有一个onCreate()方法,这个方法是每一个活动被创建时必定要执行的方法，但是也只有两行代码。并且我们并没有看到HelloWorld字样。\n\n我们看不到HelloWorld的原因是因为Android程序设计是<font style=\"background:green\" font color = white><strong> 逻辑与视图分离 </strong></font> ，不推荐直接在活动中直接编写界面。更多的做法是<font style=\"background:green\" font color = white><strong> 在布局文件中编写界面，然后再在活动中引入进来 </strong></font> 。在onCreate()方法的第二行调用了<font style=\"background:green\" font color = white><strong> setContentView(R.layout.activity_main)方法 </strong></font> ，这个方法给当前活动引入了一个布局，所以HelloWorld是在这里定义的。\n\n其中布局文件都是定义在res/layout 目录下的，展开layout目录，可以看到：activity_main.xml文件，代码如下：\n\n```xml\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n用于在布局中显示文字的是一个TextView控件，而我们可以通过android:text=\"Hello World!\"这句代码定义需要显示什么文字。\n\n\n\n","source":"_posts/分析Android项目运行.md","raw":"---\ntitle: 分析Android项目运行\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqsspxqj21kw0w0to4.jpg'\nabbrlink: 7d2e59d3\ndate: 2022-08-26 11:41:59\nauthorAbout:\nauthorDesc:\ntags:\nkeywords:\ndescription:\n---\n\n## 分析安卓项目如何运行\n\n### AndroidManifest.xml\n\n```xml\n<activity\n          android:name=\".MainActivity\"\n          android:exported=\"true\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n```\n\n这段话表示对HelloWorldActivity这个活动进行注册，<font color = \"red\"><strong> 没有 </strong></font> 在AndroidManifest.xml中<font color = \"red\"><strong> 注册的活动是不能使用的 </strong></font> 。其中<font color = \"red\"><strong> intent-filter里的两行代码尤为重要 </strong></font> 。\n\n```xml\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n```\n\n这两行代码表示HelloWorldActivity是这个项目的主活动。\n\n### MainActivity\n\n活动是应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。，所以我们看到的界面，就是MainActivity这个活动。\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n}\n```\n\nMainActivity 继承自 AppCompatActivity，Activity是一个Android系统提供的活动基类，我们项目中所有活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。\n\nMainActivity有一个onCreate()方法,这个方法是每一个活动被创建时必定要执行的方法，但是也只有两行代码。并且我们并没有看到HelloWorld字样。\n\n我们看不到HelloWorld的原因是因为Android程序设计是<font style=\"background:green\" font color = white><strong> 逻辑与视图分离 </strong></font> ，不推荐直接在活动中直接编写界面。更多的做法是<font style=\"background:green\" font color = white><strong> 在布局文件中编写界面，然后再在活动中引入进来 </strong></font> 。在onCreate()方法的第二行调用了<font style=\"background:green\" font color = white><strong> setContentView(R.layout.activity_main)方法 </strong></font> ，这个方法给当前活动引入了一个布局，所以HelloWorld是在这里定义的。\n\n其中布局文件都是定义在res/layout 目录下的，展开layout目录，可以看到：activity_main.xml文件，代码如下：\n\n```xml\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n用于在布局中显示文字的是一个TextView控件，而我们可以通过android:text=\"Hello World!\"这句代码定义需要显示什么文字。\n\n\n\n","slug":"分析Android项目运行","published":1,"updated":"2023-07-31T12:40:09.661Z","layout":"post","link":"","_id":"clktr4qrn002hzsa0doia9re0","content":"<h2 id=\"分析安卓项目如何运行\"><a href=\"#分析安卓项目如何运行\" class=\"headerlink\" title=\"分析安卓项目如何运行\"></a>分析安卓项目如何运行</h2><h3 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;.MainActivity&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:exported</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这段话表示对HelloWorldActivity这个活动进行注册，<font color = \"red\"><strong> 没有 </strong></font> 在AndroidManifest.xml中<font color = \"red\"><strong> 注册的活动是不能使用的 </strong></font> 。其中<font color = \"red\"><strong> intent-filter里的两行代码尤为重要 </strong></font> 。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这两行代码表示HelloWorldActivity是这个项目的主活动。</p>\n<h3 id=\"MainActivity\"><a href=\"#MainActivity\" class=\"headerlink\" title=\"MainActivity\"></a>MainActivity</h3><p>活动是应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。，所以我们看到的界面，就是MainActivity这个活动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MainActivity 继承自 AppCompatActivity，Activity是一个Android系统提供的活动基类，我们项目中所有活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。</p>\n<p>MainActivity有一个onCreate()方法,这个方法是每一个活动被创建时必定要执行的方法，但是也只有两行代码。并且我们并没有看到HelloWorld字样。</p>\n<p>我们看不到HelloWorld的原因是因为Android程序设计是<font style=\"background:green\" font color = white><strong> 逻辑与视图分离 </strong></font> ，不推荐直接在活动中直接编写界面。更多的做法是<font style=\"background:green\" font color = white><strong> 在布局文件中编写界面，然后再在活动中引入进来 </strong></font> 。在onCreate()方法的第二行调用了<font style=\"background:green\" font color = white><strong> setContentView(R.layout.activity_main)方法 </strong></font> ，这个方法给当前活动引入了一个布局，所以HelloWorld是在这里定义的。</p>\n<p>其中布局文件都是定义在res&#x2F;layout 目录下的，展开layout目录，可以看到：activity_main.xml文件，代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;Hello World!&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用于在布局中显示文字的是一个TextView控件，而我们可以通过android:text&#x3D;”Hello World!”这句代码定义需要显示什么文字。</p>\n","site":{"data":{}},"cover":"linear-gradient(to top,#ebc0fd 0%,#d9ded8 100%)","excerpt":"","more":"<h2 id=\"分析安卓项目如何运行\"><a href=\"#分析安卓项目如何运行\" class=\"headerlink\" title=\"分析安卓项目如何运行\"></a>分析安卓项目如何运行</h2><h3 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;.MainActivity&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:exported</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这段话表示对HelloWorldActivity这个活动进行注册，<font color = \"red\"><strong> 没有 </strong></font> 在AndroidManifest.xml中<font color = \"red\"><strong> 注册的活动是不能使用的 </strong></font> 。其中<font color = \"red\"><strong> intent-filter里的两行代码尤为重要 </strong></font> 。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这两行代码表示HelloWorldActivity是这个项目的主活动。</p>\n<h3 id=\"MainActivity\"><a href=\"#MainActivity\" class=\"headerlink\" title=\"MainActivity\"></a>MainActivity</h3><p>活动是应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。，所以我们看到的界面，就是MainActivity这个活动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MainActivity 继承自 AppCompatActivity，Activity是一个Android系统提供的活动基类，我们项目中所有活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。</p>\n<p>MainActivity有一个onCreate()方法,这个方法是每一个活动被创建时必定要执行的方法，但是也只有两行代码。并且我们并没有看到HelloWorld字样。</p>\n<p>我们看不到HelloWorld的原因是因为Android程序设计是<font style=\"background:green\" font color = white><strong> 逻辑与视图分离 </strong></font> ，不推荐直接在活动中直接编写界面。更多的做法是<font style=\"background:green\" font color = white><strong> 在布局文件中编写界面，然后再在活动中引入进来 </strong></font> 。在onCreate()方法的第二行调用了<font style=\"background:green\" font color = white><strong> setContentView(R.layout.activity_main)方法 </strong></font> ，这个方法给当前活动引入了一个布局，所以HelloWorld是在这里定义的。</p>\n<p>其中布局文件都是定义在res&#x2F;layout 目录下的，展开layout目录，可以看到：activity_main.xml文件，代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;Hello World!&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用于在布局中显示文字的是一个TextView控件，而我们可以通过android:text&#x3D;”Hello World!”这句代码定义需要显示什么文字。</p>\n"},{"title":"常见dos命令","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqsevz4j21kw0w07ka.jpg"],"abbrlink":"794bccc2","date":"2022-08-25T14:29:04.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 基本Dos命令及计算机发展史\n\n### 一、打开cmd窗口方式\n\n1. 开始 + 系统+命令提示符\n2. **Win键+R 输入cmd打开控制台**\n3. 在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口\n4. 资源管理器的地址栏前面加上cmd路径\n5. **管理员身份运行，选择以管理员身份运行**\n\n### 二、常用的Dos命令\n\n```shell\n#盘符切换\nD:\nC:\nE:\n\n#进入任意目录 cd change directory\n#跨盘：\ncd /d E:\\data\\usr\\root\n#不跨盘\ncd data\n#返回上一级目录\ncd ..\n\n#查看当前目录下所有文件\ndir \nll\nls\n\n#清理屏幕 cls clear screen\ncls\n\n#退出终端 exit\neixt\n\n#查看IP ipconfig\nipconfig\n\n#打开应用 calc 计算器；mspaint 画图软件； notepad 记事本\ncalc \nmspaint\nnotepad\n\n#文件操作\n#创建目录 md make directory\nmd test\n#创建文件\ncd>test.txt\n#删除文件\ndel test.txt\n#移除目录 rd remove directory\nrd test\n\n```\n\n## 计算机语言发展史\n\n### 一、第一代语言\n\n- 机器语言\n  - 计算机的基本计算方式都是基于*二进制*的方式\n  - 二进制：01010110100100101\n  - 这种代码是直接输入给计算机使用的，不经过任何转换\n\n### 二、第二代语言\n\n- 汇编语言\n  - 解决人类无法读懂机器语言的问题\n  - 指令代替二进制\n- 目前应用\n  - 逆向工程\n  - 机器人\n  - 病毒\n  - ...\n\n### 三、第三代语言\n\n- 摩尔定律\n  - 当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上\n- 高级语言\n  - 大体上分为：**面向过程**和**面向对象**两大类\n    - ***c语言***是经典的面向过程的语言，**c++和Java**是典型的面向对象的语言\n  - \n","source":"_posts/常见dos命令.md","raw":"---\ntitle: 常见dos命令\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqsevz4j21kw0w07ka.jpg'\ntags:\n  - 随笔\n  - Dos\nabbrlink: 794bccc2\ndate: 2022-08-25 22:29:04\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 基本Dos命令及计算机发展史\n\n### 一、打开cmd窗口方式\n\n1. 开始 + 系统+命令提示符\n2. **Win键+R 输入cmd打开控制台**\n3. 在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口\n4. 资源管理器的地址栏前面加上cmd路径\n5. **管理员身份运行，选择以管理员身份运行**\n\n### 二、常用的Dos命令\n\n```shell\n#盘符切换\nD:\nC:\nE:\n\n#进入任意目录 cd change directory\n#跨盘：\ncd /d E:\\data\\usr\\root\n#不跨盘\ncd data\n#返回上一级目录\ncd ..\n\n#查看当前目录下所有文件\ndir \nll\nls\n\n#清理屏幕 cls clear screen\ncls\n\n#退出终端 exit\neixt\n\n#查看IP ipconfig\nipconfig\n\n#打开应用 calc 计算器；mspaint 画图软件； notepad 记事本\ncalc \nmspaint\nnotepad\n\n#文件操作\n#创建目录 md make directory\nmd test\n#创建文件\ncd>test.txt\n#删除文件\ndel test.txt\n#移除目录 rd remove directory\nrd test\n\n```\n\n## 计算机语言发展史\n\n### 一、第一代语言\n\n- 机器语言\n  - 计算机的基本计算方式都是基于*二进制*的方式\n  - 二进制：01010110100100101\n  - 这种代码是直接输入给计算机使用的，不经过任何转换\n\n### 二、第二代语言\n\n- 汇编语言\n  - 解决人类无法读懂机器语言的问题\n  - 指令代替二进制\n- 目前应用\n  - 逆向工程\n  - 机器人\n  - 病毒\n  - ...\n\n### 三、第三代语言\n\n- 摩尔定律\n  - 当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上\n- 高级语言\n  - 大体上分为：**面向过程**和**面向对象**两大类\n    - ***c语言***是经典的面向过程的语言，**c++和Java**是典型的面向对象的语言\n  - \n","slug":"常见dos命令","published":1,"updated":"2023-07-31T12:40:09.663Z","layout":"post","link":"","_id":"clktr4qrp002lzsa08uj6f8i2","content":"<h2 id=\"基本Dos命令及计算机发展史\"><a href=\"#基本Dos命令及计算机发展史\" class=\"headerlink\" title=\"基本Dos命令及计算机发展史\"></a>基本Dos命令及计算机发展史</h2><h3 id=\"一、打开cmd窗口方式\"><a href=\"#一、打开cmd窗口方式\" class=\"headerlink\" title=\"一、打开cmd窗口方式\"></a>一、打开cmd窗口方式</h3><ol>\n<li>开始 + 系统+命令提示符</li>\n<li><strong>Win键+R 输入cmd打开控制台</strong></li>\n<li>在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口</li>\n<li>资源管理器的地址栏前面加上cmd路径</li>\n<li><strong>管理员身份运行，选择以管理员身份运行</strong></li>\n</ol>\n<h3 id=\"二、常用的Dos命令\"><a href=\"#二、常用的Dos命令\" class=\"headerlink\" title=\"二、常用的Dos命令\"></a>二、常用的Dos命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">盘符切换</span></span><br><span class=\"line\">D:</span><br><span class=\"line\">C:</span><br><span class=\"line\">E:</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进入任意目录 <span class=\"built_in\">cd</span> change directory</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">跨盘：</span></span><br><span class=\"line\">cd /d E:\\data\\usr\\root</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">不跨盘</span></span><br><span class=\"line\">cd data</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">返回上一级目录</span></span><br><span class=\"line\">cd ..</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看当前目录下所有文件</span></span><br><span class=\"line\">dir </span><br><span class=\"line\">ll</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">清理屏幕 cls clear screen</span></span><br><span class=\"line\">cls</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">退出终端 <span class=\"built_in\">exit</span></span></span><br><span class=\"line\">eixt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看IP ipconfig</span></span><br><span class=\"line\">ipconfig</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打开应用 calc 计算器；mspaint 画图软件； notepad 记事本</span></span><br><span class=\"line\">calc </span><br><span class=\"line\">mspaint</span><br><span class=\"line\">notepad</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">文件操作</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建目录 md make directory</span></span><br><span class=\"line\">md test</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">cd&gt;</span><span class=\"language-bash\">test.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除文件</span></span><br><span class=\"line\">del test.txt</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">移除目录 rd remove directory</span></span><br><span class=\"line\">rd test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机语言发展史\"><a href=\"#计算机语言发展史\" class=\"headerlink\" title=\"计算机语言发展史\"></a>计算机语言发展史</h2><h3 id=\"一、第一代语言\"><a href=\"#一、第一代语言\" class=\"headerlink\" title=\"一、第一代语言\"></a>一、第一代语言</h3><ul>\n<li>机器语言<ul>\n<li>计算机的基本计算方式都是基于<em>二进制</em>的方式</li>\n<li>二进制：01010110100100101</li>\n<li>这种代码是直接输入给计算机使用的，不经过任何转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、第二代语言\"><a href=\"#二、第二代语言\" class=\"headerlink\" title=\"二、第二代语言\"></a>二、第二代语言</h3><ul>\n<li>汇编语言<ul>\n<li>解决人类无法读懂机器语言的问题</li>\n<li>指令代替二进制</li>\n</ul>\n</li>\n<li>目前应用<ul>\n<li>逆向工程</li>\n<li>机器人</li>\n<li>病毒</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、第三代语言\"><a href=\"#三、第三代语言\" class=\"headerlink\" title=\"三、第三代语言\"></a>三、第三代语言</h3><ul>\n<li>摩尔定律<ul>\n<li>当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上</li>\n</ul>\n</li>\n<li><h2 id=\"高级语言-大体上分为：面向过程和面向对象两大类-c语言是经典的面向过程的语言，c-和Java是典型的面向对象的语言\"><a href=\"#高级语言-大体上分为：面向过程和面向对象两大类-c语言是经典的面向过程的语言，c-和Java是典型的面向对象的语言\" class=\"headerlink\" title=\"高级语言- 大体上分为：面向过程和面向对象两大类  - c语言是经典的面向过程的语言，c++和Java是典型的面向对象的语言\"></a>高级语言<br>- 大体上分为：<strong>面向过程</strong>和<strong>面向对象</strong>两大类<br>  - <em><strong>c语言</strong></em>是经典的面向过程的语言，<strong>c++和Java</strong>是典型的面向对象的语言</h2></li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(45deg,#ff9a9e 0%,#fad0c4 99%,#fad0c4 100%)","excerpt":"","more":"<h2 id=\"基本Dos命令及计算机发展史\"><a href=\"#基本Dos命令及计算机发展史\" class=\"headerlink\" title=\"基本Dos命令及计算机发展史\"></a>基本Dos命令及计算机发展史</h2><h3 id=\"一、打开cmd窗口方式\"><a href=\"#一、打开cmd窗口方式\" class=\"headerlink\" title=\"一、打开cmd窗口方式\"></a>一、打开cmd窗口方式</h3><ol>\n<li>开始 + 系统+命令提示符</li>\n<li><strong>Win键+R 输入cmd打开控制台</strong></li>\n<li>在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口</li>\n<li>资源管理器的地址栏前面加上cmd路径</li>\n<li><strong>管理员身份运行，选择以管理员身份运行</strong></li>\n</ol>\n<h3 id=\"二、常用的Dos命令\"><a href=\"#二、常用的Dos命令\" class=\"headerlink\" title=\"二、常用的Dos命令\"></a>二、常用的Dos命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">盘符切换</span></span><br><span class=\"line\">D:</span><br><span class=\"line\">C:</span><br><span class=\"line\">E:</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进入任意目录 <span class=\"built_in\">cd</span> change directory</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">跨盘：</span></span><br><span class=\"line\">cd /d E:\\data\\usr\\root</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">不跨盘</span></span><br><span class=\"line\">cd data</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">返回上一级目录</span></span><br><span class=\"line\">cd ..</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看当前目录下所有文件</span></span><br><span class=\"line\">dir </span><br><span class=\"line\">ll</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">清理屏幕 cls clear screen</span></span><br><span class=\"line\">cls</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">退出终端 <span class=\"built_in\">exit</span></span></span><br><span class=\"line\">eixt</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看IP ipconfig</span></span><br><span class=\"line\">ipconfig</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打开应用 calc 计算器；mspaint 画图软件； notepad 记事本</span></span><br><span class=\"line\">calc </span><br><span class=\"line\">mspaint</span><br><span class=\"line\">notepad</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">文件操作</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建目录 md make directory</span></span><br><span class=\"line\">md test</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">cd&gt;</span><span class=\"language-bash\">test.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除文件</span></span><br><span class=\"line\">del test.txt</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">移除目录 rd remove directory</span></span><br><span class=\"line\">rd test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算机语言发展史\"><a href=\"#计算机语言发展史\" class=\"headerlink\" title=\"计算机语言发展史\"></a>计算机语言发展史</h2><h3 id=\"一、第一代语言\"><a href=\"#一、第一代语言\" class=\"headerlink\" title=\"一、第一代语言\"></a>一、第一代语言</h3><ul>\n<li>机器语言<ul>\n<li>计算机的基本计算方式都是基于<em>二进制</em>的方式</li>\n<li>二进制：01010110100100101</li>\n<li>这种代码是直接输入给计算机使用的，不经过任何转换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、第二代语言\"><a href=\"#二、第二代语言\" class=\"headerlink\" title=\"二、第二代语言\"></a>二、第二代语言</h3><ul>\n<li>汇编语言<ul>\n<li>解决人类无法读懂机器语言的问题</li>\n<li>指令代替二进制</li>\n</ul>\n</li>\n<li>目前应用<ul>\n<li>逆向工程</li>\n<li>机器人</li>\n<li>病毒</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、第三代语言\"><a href=\"#三、第三代语言\" class=\"headerlink\" title=\"三、第三代语言\"></a>三、第三代语言</h3><ul>\n<li>摩尔定律<ul>\n<li>当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上</li>\n</ul>\n</li>\n<li><h2 id=\"高级语言-大体上分为：面向过程和面向对象两大类-c语言是经典的面向过程的语言，c-和Java是典型的面向对象的语言\"><a href=\"#高级语言-大体上分为：面向过程和面向对象两大类-c语言是经典的面向过程的语言，c-和Java是典型的面向对象的语言\" class=\"headerlink\" title=\"高级语言- 大体上分为：面向过程和面向对象两大类  - c语言是经典的面向过程的语言，c++和Java是典型的面向对象的语言\"></a>高级语言<br>- 大体上分为：<strong>面向过程</strong>和<strong>面向对象</strong>两大类<br>  - <em><strong>c语言</strong></em>是经典的面向过程的语言，<strong>c++和Java</strong>是典型的面向对象的语言</h2></li>\n</ul>\n"},{"title":"排序算法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqi081jj21kw0w04cl.jpg"],"abbrlink":"735e5788","date":"2022-08-25T14:42:35.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 冒泡排序\n\n### 代码：\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 冒泡排序的优化\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {              //确定冒泡次数\n            //如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。\n            //冒泡步骤\n            boolean flag = true;\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    flag = false;\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if (flag){\n                break;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 选择排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:40\n * @Description\n */\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,-2,4,5};\n        selectSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void selectSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {          //开始选择排序\n            //初始 min = arr[i]; mindex = i;\n            int min = arr[i];\n            int mindex = i;\n            for (int j = i + 1; j < arr.length - 1 ; j++){\n                //将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标\n                if (min > arr[j]){\n                    min = arr[j];\n                    mindex = j;\n                }\n            }\n            //如果 最小值的下标不等于 i 则交换 这两个元素的值\n            if (mindex != i){\n                arr[mindex] = arr[i];\n                arr[i] = min;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![选择排序](https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png)\n\n---\n\n## 插入排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 18:08\n * @Description\n */\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,5,4,-1};\n        insertSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void insertSort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            //初始化insertdex  和  insertvalue\n            int insertdex = i;\n            int insertvalue = arr[i];\n            while (insertdex > 0 && insertvalue < arr[insertdex - 1]){      //while循环，当insertdex > 0 以及 insertvalue 小于 其前一个值时进入循环\n                // 将 前一个值 赋值给 下标为 insertdex的数组空间内\n                arr[insertdex] = arr[insertdex - 1];\n                // 下标往前移一位\n                insertdex--;\n            }\n            //当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]\n            arr[insertdex] = insertvalue;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![插入排序](https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png)\n\n---\n\n## 快速排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 19:34\n * @Description\n */\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] arr ={1,3,-2,4,5,6};\n        quickSort(arr,0,arr.length - 1);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void quickSort(int[] arr,int left, int right){\n        //递归退出条件\n        if (left >= right){\n            return;\n        }\n        //左指针与右指针\n        int l = left;\n        int r = right;\n        while (l < r){\n            while (l < r && arr[r] >= arr[left])r--;            //右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移\n            while (l < r && arr[l] <= arr[left])l++;            //左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移\n            if (l == r){                                        //当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据\n                int temp = arr[l];\n                arr[l] = arr[left];\n                arr[left] = temp;\n            }else{                                              //两个指针不相等时则交换 两指针内的数据 \n                int temp = arr[r];\n                arr[r] = arr[l];\n                arr[l] = temp;\n            }\n        }\n        quickSort(arr,left,l-1);                           //通过递归，将左边的元素进行快排\n        quickSort(arr,r+1,right);                           //通过递归，将右边的元素进行快排。\n    }\n}\n\n```\n\n### 运行结果\n\n![快速排序](https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png)\n\n---\n\n## 归并排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 23:53\n * @Description\n */\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,4,9,7};\n        int[] temp = new int[arr.length];\n        mergeSort(arr,0, arr.length - 1, temp);\n        System.out.println(Arrays.toString(arr));\n    }\n\n\n    public static void mergeSort(int[] arr, int left, int right, int[] temp){\n        if (left < right){\n            int mid = (left + right) / 2;\n            //分\n            mergeSort(arr,0,mid,temp);          //将左边部分继续分\n            mergeSort(arr,mid+1,right,temp);    //将右边部分继续分\n            //合\n            merge(arr,left,mid,right,temp);\n        }\n    }\n    //合\n    public static void merge(int[] arr, int left, int mid, int right, int[] temp) {\n        int i = left;\n        int j = mid+1;\n        int t = 0;                          //临时数组下标索引\n        //先将两部分合并\n        while (i <= mid && j <= right){\n            if (arr[i] <= arr[j]){\n                temp[t] = arr[i];\n                i++;t++;\n            }else {\n                temp[t] = arr[j];\n                j++;t++;\n            }\n        }\n        //如果左边没有合并完全，则接着i继续合并\n        while (i <= mid){\n            temp[t] = arr[i];\n            t++;i++;\n        }\n        //如果右边没有合并完全，则接着j继续合并\n        while (j <= right){\n            temp[t] = arr[j];\n            t++;j++;\n        }\n        //接着将temp中的数组填充到指定位置\n        t = 0;\n        int templeft = left;\n        while (templeft <= right){\n            arr[templeft] = temp[t];\n            t++;templeft++;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![归并排序](https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png)\n\n---\n\n## 基数排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/17/ 0:45\n * @Description\n */\npublic class RedixSort {\n    public static void main(String[] args) {\n        int[] arr = {10023,3225,302,155,9,3326,33,5987,663,15596};\n        redixSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void redixSort(int[] arr){\n        int[][] bucket = new int[10][arr.length - 1];               //桶里面所存的具体数值\n        int[] bucketElementCounts = new int[10];                    //每个桶所存的元素个数\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if(max < arr[i]) max = arr[i];\n        }\n\n        int maxCount = (max + \"\").length();                         //获取最大数的位数\n        for (int i = 0; i < maxCount; i++) {\n            //把数组中的数都放在桶里面\n            for (int k = 0; k < arr.length; k++) {\n                int value = arr[k] / (int) Math.pow(10, i) % 10;\n\n                bucket[value][bucketElementCounts[value]] = arr[k];\n                bucketElementCounts[value]++;\n            }\n            int index = 0;\n            for (int k = 0; k < bucketElementCounts.length; k++) {\n                if(bucketElementCounts[k] != 0){\n                    for (int x = 0; x < bucketElementCounts[k]; x++) {\n                        arr[index] = bucket[k][x];\n                        index++;\n                    }\n                }\n                bucketElementCounts[k] = 0;\n            }\n        }\n\n    }\n}\n```\n\n### 运行结果\n\n![基数排序](https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png)\n\n---\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqi081jj21kw0w04cl.jpg'\ntags:\n  - Java\n  - 排序算法\nabbrlink: '735e5788'\ndate: 2022-08-25 22:42:35\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 冒泡排序\n\n### 代码：\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 冒泡排序的优化\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:21\n * @Description\n */\npublic class BubbleSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,5,9,4};\n        bubbleSort(arr);\n        System.out.print(\"finish: [\" );\n        for (int x : arr) {\n            System.out.print(x + \"\\t\");\n        }\n        System.out.println(\"]\");\n    }\n\n    public static void bubbleSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {              //确定冒泡次数\n            //如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。\n            //冒泡步骤\n            boolean flag = true;\n            for (int j = 0; j < arr.length - 1 -i; j++){\n                if (arr[j] > arr[j+1])\n                {\n                    flag = false;\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if (flag){\n                break;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![冒泡排序](https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png)\n\n---\n\n## 选择排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:40\n * @Description\n */\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,-2,4,5};\n        selectSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void selectSort(int[] arr){\n        for (int i = 0; i < arr.length - 1; i++) {          //开始选择排序\n            //初始 min = arr[i]; mindex = i;\n            int min = arr[i];\n            int mindex = i;\n            for (int j = i + 1; j < arr.length - 1 ; j++){\n                //将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标\n                if (min > arr[j]){\n                    min = arr[j];\n                    mindex = j;\n                }\n            }\n            //如果 最小值的下标不等于 i 则交换 这两个元素的值\n            if (mindex != i){\n                arr[mindex] = arr[i];\n                arr[i] = min;\n            }\n        }\n    }\n}\n```\n\n### 运行结果\n\n![选择排序](https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png)\n\n---\n\n## 插入排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 18:08\n * @Description\n */\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,5,4,-1};\n        insertSort(arr);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void insertSort(int[] arr) {\n        for (int i = 1; i < arr.length; i++) {\n            //初始化insertdex  和  insertvalue\n            int insertdex = i;\n            int insertvalue = arr[i];\n            while (insertdex > 0 && insertvalue < arr[insertdex - 1]){      //while循环，当insertdex > 0 以及 insertvalue 小于 其前一个值时进入循环\n                // 将 前一个值 赋值给 下标为 insertdex的数组空间内\n                arr[insertdex] = arr[insertdex - 1];\n                // 下标往前移一位\n                insertdex--;\n            }\n            //当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]\n            arr[insertdex] = insertvalue;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![插入排序](https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png)\n\n---\n\n## 快速排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 19:34\n * @Description\n */\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] arr ={1,3,-2,4,5,6};\n        quickSort(arr,0,arr.length - 1);\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n\n    public static void quickSort(int[] arr,int left, int right){\n        //递归退出条件\n        if (left >= right){\n            return;\n        }\n        //左指针与右指针\n        int l = left;\n        int r = right;\n        while (l < r){\n            while (l < r && arr[r] >= arr[left])r--;            //右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移\n            while (l < r && arr[l] <= arr[left])l++;            //左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移\n            if (l == r){                                        //当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据\n                int temp = arr[l];\n                arr[l] = arr[left];\n                arr[left] = temp;\n            }else{                                              //两个指针不相等时则交换 两指针内的数据 \n                int temp = arr[r];\n                arr[r] = arr[l];\n                arr[l] = temp;\n            }\n        }\n        quickSort(arr,left,l-1);                           //通过递归，将左边的元素进行快排\n        quickSort(arr,r+1,right);                           //通过递归，将右边的元素进行快排。\n    }\n}\n\n```\n\n### 运行结果\n\n![快速排序](https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png)\n\n---\n\n## 归并排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 23:53\n * @Description\n */\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] arr = {1,3,2,6,4,9,7};\n        int[] temp = new int[arr.length];\n        mergeSort(arr,0, arr.length - 1, temp);\n        System.out.println(Arrays.toString(arr));\n    }\n\n\n    public static void mergeSort(int[] arr, int left, int right, int[] temp){\n        if (left < right){\n            int mid = (left + right) / 2;\n            //分\n            mergeSort(arr,0,mid,temp);          //将左边部分继续分\n            mergeSort(arr,mid+1,right,temp);    //将右边部分继续分\n            //合\n            merge(arr,left,mid,right,temp);\n        }\n    }\n    //合\n    public static void merge(int[] arr, int left, int mid, int right, int[] temp) {\n        int i = left;\n        int j = mid+1;\n        int t = 0;                          //临时数组下标索引\n        //先将两部分合并\n        while (i <= mid && j <= right){\n            if (arr[i] <= arr[j]){\n                temp[t] = arr[i];\n                i++;t++;\n            }else {\n                temp[t] = arr[j];\n                j++;t++;\n            }\n        }\n        //如果左边没有合并完全，则接着i继续合并\n        while (i <= mid){\n            temp[t] = arr[i];\n            t++;i++;\n        }\n        //如果右边没有合并完全，则接着j继续合并\n        while (j <= right){\n            temp[t] = arr[j];\n            t++;j++;\n        }\n        //接着将temp中的数组填充到指定位置\n        t = 0;\n        int templeft = left;\n        while (templeft <= right){\n            arr[templeft] = temp[t];\n            t++;templeft++;\n        }\n    }\n}\n```\n\n### 运行结果\n\n![归并排序](https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png)\n\n---\n\n## 基数排序\n\n### 代码\n\n```java\npackage com.xiheya.sort;\n\nimport java.util.Arrays;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/17/ 0:45\n * @Description\n */\npublic class RedixSort {\n    public static void main(String[] args) {\n        int[] arr = {10023,3225,302,155,9,3326,33,5987,663,15596};\n        redixSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void redixSort(int[] arr){\n        int[][] bucket = new int[10][arr.length - 1];               //桶里面所存的具体数值\n        int[] bucketElementCounts = new int[10];                    //每个桶所存的元素个数\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if(max < arr[i]) max = arr[i];\n        }\n\n        int maxCount = (max + \"\").length();                         //获取最大数的位数\n        for (int i = 0; i < maxCount; i++) {\n            //把数组中的数都放在桶里面\n            for (int k = 0; k < arr.length; k++) {\n                int value = arr[k] / (int) Math.pow(10, i) % 10;\n\n                bucket[value][bucketElementCounts[value]] = arr[k];\n                bucketElementCounts[value]++;\n            }\n            int index = 0;\n            for (int k = 0; k < bucketElementCounts.length; k++) {\n                if(bucketElementCounts[k] != 0){\n                    for (int x = 0; x < bucketElementCounts[k]; x++) {\n                        arr[index] = bucket[k][x];\n                        index++;\n                    }\n                }\n                bucketElementCounts[k] = 0;\n            }\n        }\n\n    }\n}\n```\n\n### 运行结果\n\n![基数排序](https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png)\n\n---\n","slug":"排序算法","published":1,"updated":"2023-07-31T12:40:09.707Z","layout":"post","link":"","_id":"clktr4qrp002ozsa07afz527z","content":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;finish: [&quot;</span> );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : arr) &#123;</span><br><span class=\"line\">            System.out.print(x + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> -i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"冒泡排序的优化\"><a href=\"#冒泡排序的优化\" class=\"headerlink\" title=\"冒泡排序的优化\"></a>冒泡排序的优化</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;finish: [&quot;</span> );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : arr) &#123;</span><br><span class=\"line\">            System.out.print(x + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;              <span class=\"comment\">//确定冒泡次数</span></span><br><span class=\"line\">            <span class=\"comment\">//如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。</span></span><br><span class=\"line\">            <span class=\"comment\">//冒泡步骤</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> -i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:40</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        selectSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;          <span class=\"comment\">//开始选择排序</span></span><br><span class=\"line\">            <span class=\"comment\">//初始 min = arr[i]; mindex = i;</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mindex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length - <span class=\"number\">1</span> ; j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min &gt; arr[j])&#123;</span><br><span class=\"line\">                    min = arr[j];</span><br><span class=\"line\">                    mindex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果 最小值的下标不等于 i 则交换 这两个元素的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mindex != i)&#123;</span><br><span class=\"line\">                arr[mindex] = arr[i];</span><br><span class=\"line\">                arr[i] = min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png\" alt=\"选择排序\"></p>\n<hr>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 18:08</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        insertSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始化insertdex  和  insertvalue</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">insertdex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">insertvalue</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (insertdex &gt; <span class=\"number\">0</span> &amp;&amp; insertvalue &lt; arr[insertdex - <span class=\"number\">1</span>])&#123;      <span class=\"comment\">//while循环，当insertdex &gt; 0 以及 insertvalue 小于 其前一个值时进入循环</span></span><br><span class=\"line\">                <span class=\"comment\">// 将 前一个值 赋值给 下标为 insertdex的数组空间内</span></span><br><span class=\"line\">                arr[insertdex] = arr[insertdex - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"comment\">// 下标往前移一位</span></span><br><span class=\"line\">                insertdex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]</span></span><br><span class=\"line\">            arr[insertdex] = insertvalue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-3\"><a href=\"#运行结果-3\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png\" alt=\"插入排序\"></p>\n<hr>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 19:34</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr =&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        quickSort(arr,<span class=\"number\">0</span>,arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归退出条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//左指针与右指针</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r &amp;&amp; arr[r] &gt;= arr[left])r--;            <span class=\"comment\">//右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r &amp;&amp; arr[l] &lt;= arr[left])l++;            <span class=\"comment\">//左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == r)&#123;                                        <span class=\"comment\">//当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[l];</span><br><span class=\"line\">                arr[l] = arr[left];</span><br><span class=\"line\">                arr[left] = temp;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;                                              <span class=\"comment\">//两个指针不相等时则交换 两指针内的数据 </span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[r];</span><br><span class=\"line\">                arr[r] = arr[l];</span><br><span class=\"line\">                arr[l] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        quickSort(arr,left,l-<span class=\"number\">1</span>);                           <span class=\"comment\">//通过递归，将左边的元素进行快排</span></span><br><span class=\"line\">        quickSort(arr,r+<span class=\"number\">1</span>,right);                           <span class=\"comment\">//通过递归，将右边的元素进行快排。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-4\"><a href=\"#运行结果-4\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png\" alt=\"快速排序\"></p>\n<hr>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">        mergeSort(arr,<span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, temp);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span>[] temp)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//分</span></span><br><span class=\"line\">            mergeSort(arr,<span class=\"number\">0</span>,mid,temp);          <span class=\"comment\">//将左边部分继续分</span></span><br><span class=\"line\">            mergeSort(arr,mid+<span class=\"number\">1</span>,right,temp);    <span class=\"comment\">//将右边部分继续分</span></span><br><span class=\"line\">            <span class=\"comment\">//合</span></span><br><span class=\"line\">            merge(arr,left,mid,right,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//合</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> right, <span class=\"type\">int</span>[] temp)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;                          <span class=\"comment\">//临时数组下标索引</span></span><br><span class=\"line\">        <span class=\"comment\">//先将两部分合并</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt;= arr[j])&#123;</span><br><span class=\"line\">                temp[t] = arr[i];</span><br><span class=\"line\">                i++;t++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp[t] = arr[j];</span><br><span class=\"line\">                j++;t++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果左边没有合并完全，则接着i继续合并</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid)&#123;</span><br><span class=\"line\">            temp[t] = arr[i];</span><br><span class=\"line\">            t++;i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果右边没有合并完全，则接着j继续合并</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= right)&#123;</span><br><span class=\"line\">            temp[t] = arr[j];</span><br><span class=\"line\">            t++;j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//接着将temp中的数组填充到指定位置</span></span><br><span class=\"line\">        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">templeft</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (templeft &lt;= right)&#123;</span><br><span class=\"line\">            arr[templeft] = temp[t];</span><br><span class=\"line\">            t++;templeft++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-5\"><a href=\"#运行结果-5\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png\" alt=\"归并排序\"></p>\n<hr>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/17/ 0:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedixSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">10023</span>,<span class=\"number\">3225</span>,<span class=\"number\">302</span>,<span class=\"number\">155</span>,<span class=\"number\">9</span>,<span class=\"number\">3326</span>,<span class=\"number\">33</span>,<span class=\"number\">5987</span>,<span class=\"number\">663</span>,<span class=\"number\">15596</span>&#125;;</span><br><span class=\"line\">        redixSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">redixSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>][arr.length - <span class=\"number\">1</span>];               <span class=\"comment\">//桶里面所存的具体数值</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] bucketElementCounts = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];                    <span class=\"comment\">//每个桶所存的元素个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max &lt; arr[i]) max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxCount</span> <span class=\"operator\">=</span> (max + <span class=\"string\">&quot;&quot;</span>).length();                         <span class=\"comment\">//获取最大数的位数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把数组中的数都放在桶里面</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; arr.length; k++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> arr[k] / (<span class=\"type\">int</span>) Math.pow(<span class=\"number\">10</span>, i) % <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                bucket[value][bucketElementCounts[value]] = arr[k];</span><br><span class=\"line\">                bucketElementCounts[value]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bucketElementCounts[k] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; bucketElementCounts[k]; x++) &#123;</span><br><span class=\"line\">                        arr[index] = bucket[k][x];</span><br><span class=\"line\">                        index++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bucketElementCounts[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-6\"><a href=\"#运行结果-6\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png\" alt=\"基数排序\"></p>\n<hr>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a1c4fd 0%,#c2e9fb 100%)","excerpt":"","more":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;finish: [&quot;</span> );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : arr) &#123;</span><br><span class=\"line\">            System.out.print(x + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> -i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"冒泡排序的优化\"><a href=\"#冒泡排序的优化\" class=\"headerlink\" title=\"冒泡排序的优化\"></a>冒泡排序的优化</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;finish: [&quot;</span> );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x : arr) &#123;</span><br><span class=\"line\">            System.out.print(x + <span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;              <span class=\"comment\">//确定冒泡次数</span></span><br><span class=\"line\">            <span class=\"comment\">//如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。</span></span><br><span class=\"line\">            <span class=\"comment\">//冒泡步骤</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> -i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png\" alt=\"冒泡排序\"></p>\n<hr>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:40</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        selectSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;          <span class=\"comment\">//开始选择排序</span></span><br><span class=\"line\">            <span class=\"comment\">//初始 min = arr[i]; mindex = i;</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mindex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length - <span class=\"number\">1</span> ; j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min &gt; arr[j])&#123;</span><br><span class=\"line\">                    min = arr[j];</span><br><span class=\"line\">                    mindex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果 最小值的下标不等于 i 则交换 这两个元素的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mindex != i)&#123;</span><br><span class=\"line\">                arr[mindex] = arr[i];</span><br><span class=\"line\">                arr[i] = min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png\" alt=\"选择排序\"></p>\n<hr>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 18:08</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsertSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        insertSort(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//初始化insertdex  和  insertvalue</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">insertdex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">insertvalue</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (insertdex &gt; <span class=\"number\">0</span> &amp;&amp; insertvalue &lt; arr[insertdex - <span class=\"number\">1</span>])&#123;      <span class=\"comment\">//while循环，当insertdex &gt; 0 以及 insertvalue 小于 其前一个值时进入循环</span></span><br><span class=\"line\">                <span class=\"comment\">// 将 前一个值 赋值给 下标为 insertdex的数组空间内</span></span><br><span class=\"line\">                arr[insertdex] = arr[insertdex - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"comment\">// 下标往前移一位</span></span><br><span class=\"line\">                insertdex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]</span></span><br><span class=\"line\">            arr[insertdex] = insertvalue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-3\"><a href=\"#运行结果-3\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png\" alt=\"插入排序\"></p>\n<hr>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 19:34</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuickSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr =&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        quickSort(arr,<span class=\"number\">0</span>,arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : arr) &#123;</span><br><span class=\"line\">            System.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归退出条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//左指针与右指针</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r &amp;&amp; arr[r] &gt;= arr[left])r--;            <span class=\"comment\">//右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r &amp;&amp; arr[l] &lt;= arr[left])l++;            <span class=\"comment\">//左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l == r)&#123;                                        <span class=\"comment\">//当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[l];</span><br><span class=\"line\">                arr[l] = arr[left];</span><br><span class=\"line\">                arr[left] = temp;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;                                              <span class=\"comment\">//两个指针不相等时则交换 两指针内的数据 </span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[r];</span><br><span class=\"line\">                arr[r] = arr[l];</span><br><span class=\"line\">                arr[l] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        quickSort(arr,left,l-<span class=\"number\">1</span>);                           <span class=\"comment\">//通过递归，将左边的元素进行快排</span></span><br><span class=\"line\">        quickSort(arr,r+<span class=\"number\">1</span>,right);                           <span class=\"comment\">//通过递归，将右边的元素进行快排。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-4\"><a href=\"#运行结果-4\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png\" alt=\"快速排序\"></p>\n<hr>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">        mergeSort(arr,<span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, temp);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span>[] temp)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//分</span></span><br><span class=\"line\">            mergeSort(arr,<span class=\"number\">0</span>,mid,temp);          <span class=\"comment\">//将左边部分继续分</span></span><br><span class=\"line\">            mergeSort(arr,mid+<span class=\"number\">1</span>,right,temp);    <span class=\"comment\">//将右边部分继续分</span></span><br><span class=\"line\">            <span class=\"comment\">//合</span></span><br><span class=\"line\">            merge(arr,left,mid,right,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//合</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> right, <span class=\"type\">int</span>[] temp)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;                          <span class=\"comment\">//临时数组下标索引</span></span><br><span class=\"line\">        <span class=\"comment\">//先将两部分合并</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt;= arr[j])&#123;</span><br><span class=\"line\">                temp[t] = arr[i];</span><br><span class=\"line\">                i++;t++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp[t] = arr[j];</span><br><span class=\"line\">                j++;t++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果左边没有合并完全，则接着i继续合并</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid)&#123;</span><br><span class=\"line\">            temp[t] = arr[i];</span><br><span class=\"line\">            t++;i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果右边没有合并完全，则接着j继续合并</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= right)&#123;</span><br><span class=\"line\">            temp[t] = arr[j];</span><br><span class=\"line\">            t++;j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//接着将temp中的数组填充到指定位置</span></span><br><span class=\"line\">        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">templeft</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (templeft &lt;= right)&#123;</span><br><span class=\"line\">            arr[templeft] = temp[t];</span><br><span class=\"line\">            t++;templeft++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-5\"><a href=\"#运行结果-5\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png\" alt=\"归并排序\"></p>\n<hr>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><h3 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/17/ 0:45</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedixSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">10023</span>,<span class=\"number\">3225</span>,<span class=\"number\">302</span>,<span class=\"number\">155</span>,<span class=\"number\">9</span>,<span class=\"number\">3326</span>,<span class=\"number\">33</span>,<span class=\"number\">5987</span>,<span class=\"number\">663</span>,<span class=\"number\">15596</span>&#125;;</span><br><span class=\"line\">        redixSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">redixSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>][arr.length - <span class=\"number\">1</span>];               <span class=\"comment\">//桶里面所存的具体数值</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] bucketElementCounts = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];                    <span class=\"comment\">//每个桶所存的元素个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(max &lt; arr[i]) max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxCount</span> <span class=\"operator\">=</span> (max + <span class=\"string\">&quot;&quot;</span>).length();                         <span class=\"comment\">//获取最大数的位数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把数组中的数都放在桶里面</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; arr.length; k++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> arr[k] / (<span class=\"type\">int</span>) Math.pow(<span class=\"number\">10</span>, i) % <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                bucket[value][bucketElementCounts[value]] = arr[k];</span><br><span class=\"line\">                bucketElementCounts[value]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bucketElementCounts[k] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; bucketElementCounts[k]; x++) &#123;</span><br><span class=\"line\">                        arr[index] = bucket[k][x];</span><br><span class=\"line\">                        index++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                bucketElementCounts[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果-6\"><a href=\"#运行结果-6\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png\" alt=\"基数排序\"></p>\n<hr>\n"},{"title":"新增系统属性","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqr61sbaj21kw0w0niq.jpg"],"abbrlink":"51d15a97","date":"2022-08-25T02:12:25.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 一、需求描述\n\n```tex\n使用adb命令获取下列属性：\n- 主板SN：\n- IMEI：\n- IMEI2：\n- MEID：\n- WIFI：\n- BT(bluetooth?)：\n- OSVersion：\n- SEVersion：\n- UFSVersion：\n- QCN：\n- MP版本：\n- 写号激活状态：\n- 密钥下载成功状态：\n```\n\n## 二、需求分析\n\n```tex\n- 主板SN：\n- IMEI：\n- IMEI2：\n- MEID：\n- WIFI：\n- BT(bluetooth?)：\n- OSVersion：\n- SEVersion：\n- QCN：\n- MP版本：\n```\n\n- 以上一些属性在现有版本里面可以找到。\n\n```tex\n- UFSVersion：\n- 写号激活状态：\n- 密钥下载成功状态：\n```\n\n- 而这三个属性找不到，就需要自己新增。\n\n## 三、实现\n\n- 在build/buildprop.mk 文件中新增这三个属性\n\n```tex\nADDITIONAL_BUILD_PROPERTIES += persist.urv.ufs.version=false\nADDITIONAL_BUILD_PROPERTIES += persist.urv.writenum.status=false\nADDITIONAL_BUILD_PROPERTIES += persist.urv.keydownload.status=false\n```\n\n- 上述是比较简单的处理方法，就是通过宏新增三个属性并给他赋初值false。\n\n- 还可以在/device/qcom/sepolicy/vendor/common目录下的property_contexts文件给属性申请权限\n\neg：\n\n```tex\npersist.urv.ufs.version                 u:object_r:system_prop:s0\npersist.urv.writenum.status                 u:object_r:system_prop:s0\npersist.urv.keydownload.status                 u:object_r:system_prop:s0\n```\n\n## 四、后续修改\n\n- 可以通过找到对应更新相关状态代码逻辑的地方通过SystemProperties.set(\"persist.sys.white.packagename\" ,value);  方法去赋值  value就是需要赋的值。\n- 系统属性设置的值理论上都是String类型的，但可以通过系统原生的接口SystemProperties.getBoolean（XXX，XX）；SystemProperties.getInt（XXX，XX）；SystemProperties.get（XXX，XX）；分别去返回boolean,Int,String类型的数据\n\n","source":"_posts/新增系统属性.md","raw":"---\ntitle: 新增系统属性\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories:\n  - 资源\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqr61sbaj21kw0w0niq.jpg'\ntags:\n  - Android\n  - 随笔\nabbrlink: 51d15a97\ndate: 2022-08-25 10:12:25\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 一、需求描述\n\n```tex\n使用adb命令获取下列属性：\n- 主板SN：\n- IMEI：\n- IMEI2：\n- MEID：\n- WIFI：\n- BT(bluetooth?)：\n- OSVersion：\n- SEVersion：\n- UFSVersion：\n- QCN：\n- MP版本：\n- 写号激活状态：\n- 密钥下载成功状态：\n```\n\n## 二、需求分析\n\n```tex\n- 主板SN：\n- IMEI：\n- IMEI2：\n- MEID：\n- WIFI：\n- BT(bluetooth?)：\n- OSVersion：\n- SEVersion：\n- QCN：\n- MP版本：\n```\n\n- 以上一些属性在现有版本里面可以找到。\n\n```tex\n- UFSVersion：\n- 写号激活状态：\n- 密钥下载成功状态：\n```\n\n- 而这三个属性找不到，就需要自己新增。\n\n## 三、实现\n\n- 在build/buildprop.mk 文件中新增这三个属性\n\n```tex\nADDITIONAL_BUILD_PROPERTIES += persist.urv.ufs.version=false\nADDITIONAL_BUILD_PROPERTIES += persist.urv.writenum.status=false\nADDITIONAL_BUILD_PROPERTIES += persist.urv.keydownload.status=false\n```\n\n- 上述是比较简单的处理方法，就是通过宏新增三个属性并给他赋初值false。\n\n- 还可以在/device/qcom/sepolicy/vendor/common目录下的property_contexts文件给属性申请权限\n\neg：\n\n```tex\npersist.urv.ufs.version                 u:object_r:system_prop:s0\npersist.urv.writenum.status                 u:object_r:system_prop:s0\npersist.urv.keydownload.status                 u:object_r:system_prop:s0\n```\n\n## 四、后续修改\n\n- 可以通过找到对应更新相关状态代码逻辑的地方通过SystemProperties.set(\"persist.sys.white.packagename\" ,value);  方法去赋值  value就是需要赋的值。\n- 系统属性设置的值理论上都是String类型的，但可以通过系统原生的接口SystemProperties.getBoolean（XXX，XX）；SystemProperties.getInt（XXX，XX）；SystemProperties.get（XXX，XX）；分别去返回boolean,Int,String类型的数据\n\n","slug":"新增系统属性","published":1,"updated":"2023-07-31T12:40:09.668Z","layout":"post","link":"","_id":"clktr4qrq002szsa01va3gnfb","content":"<h2 id=\"一、需求描述\"><a href=\"#一、需求描述\" class=\"headerlink\" title=\"一、需求描述\"></a>一、需求描述</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用adb命令获取下列属性：</span><br><span class=\"line\">- 主板SN：</span><br><span class=\"line\">- IMEI：</span><br><span class=\"line\">- IMEI2：</span><br><span class=\"line\">- MEID：</span><br><span class=\"line\">- WIFI：</span><br><span class=\"line\">- BT(bluetooth?)：</span><br><span class=\"line\">- OSVersion：</span><br><span class=\"line\">- SEVersion：</span><br><span class=\"line\">- UFSVersion：</span><br><span class=\"line\">- QCN：</span><br><span class=\"line\">- MP版本：</span><br><span class=\"line\">- 写号激活状态：</span><br><span class=\"line\">- 密钥下载成功状态：</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、需求分析\"><a href=\"#二、需求分析\" class=\"headerlink\" title=\"二、需求分析\"></a>二、需求分析</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 主板SN：</span><br><span class=\"line\">- IMEI：</span><br><span class=\"line\">- IMEI2：</span><br><span class=\"line\">- MEID：</span><br><span class=\"line\">- WIFI：</span><br><span class=\"line\">- BT(bluetooth?)：</span><br><span class=\"line\">- OSVersion：</span><br><span class=\"line\">- SEVersion：</span><br><span class=\"line\">- QCN：</span><br><span class=\"line\">- MP版本：</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以上一些属性在现有版本里面可以找到。</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- UFSVersion：</span><br><span class=\"line\">- 写号激活状态：</span><br><span class=\"line\">- 密钥下载成功状态：</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>而这三个属性找不到，就需要自己新增。</li>\n</ul>\n<h2 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h2><ul>\n<li>在build&#x2F;buildprop.mk 文件中新增这三个属性</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDITIONAL<span class=\"built_in\">_</span>BUILD<span class=\"built_in\">_</span>PROPERTIES += persist.urv.ufs.version=false</span><br><span class=\"line\">ADDITIONAL<span class=\"built_in\">_</span>BUILD<span class=\"built_in\">_</span>PROPERTIES += persist.urv.writenum.status=false</span><br><span class=\"line\">ADDITIONAL<span class=\"built_in\">_</span>BUILD<span class=\"built_in\">_</span>PROPERTIES += persist.urv.keydownload.status=false</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>上述是比较简单的处理方法，就是通过宏新增三个属性并给他赋初值false。</p>\n</li>\n<li><p>还可以在&#x2F;device&#x2F;qcom&#x2F;sepolicy&#x2F;vendor&#x2F;common目录下的property_contexts文件给属性申请权限</p>\n</li>\n</ul>\n<p>eg：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">persist.urv.ufs.version                 u:object<span class=\"built_in\">_</span>r:system<span class=\"built_in\">_</span>prop:s0</span><br><span class=\"line\">persist.urv.writenum.status                 u:object<span class=\"built_in\">_</span>r:system<span class=\"built_in\">_</span>prop:s0</span><br><span class=\"line\">persist.urv.keydownload.status                 u:object<span class=\"built_in\">_</span>r:system<span class=\"built_in\">_</span>prop:s0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、后续修改\"><a href=\"#四、后续修改\" class=\"headerlink\" title=\"四、后续修改\"></a>四、后续修改</h2><ul>\n<li>可以通过找到对应更新相关状态代码逻辑的地方通过SystemProperties.set(“persist.sys.white.packagename” ,value);  方法去赋值  value就是需要赋的值。</li>\n<li>系统属性设置的值理论上都是String类型的，但可以通过系统原生的接口SystemProperties.getBoolean（XXX，XX）；SystemProperties.getInt（XXX，XX）；SystemProperties.get（XXX，XX）；分别去返回boolean,Int,String类型的数据</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(to right,#ffecd2 0%,#fcb69f 100%)","excerpt":"","more":"<h2 id=\"一、需求描述\"><a href=\"#一、需求描述\" class=\"headerlink\" title=\"一、需求描述\"></a>一、需求描述</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用adb命令获取下列属性：</span><br><span class=\"line\">- 主板SN：</span><br><span class=\"line\">- IMEI：</span><br><span class=\"line\">- IMEI2：</span><br><span class=\"line\">- MEID：</span><br><span class=\"line\">- WIFI：</span><br><span class=\"line\">- BT(bluetooth?)：</span><br><span class=\"line\">- OSVersion：</span><br><span class=\"line\">- SEVersion：</span><br><span class=\"line\">- UFSVersion：</span><br><span class=\"line\">- QCN：</span><br><span class=\"line\">- MP版本：</span><br><span class=\"line\">- 写号激活状态：</span><br><span class=\"line\">- 密钥下载成功状态：</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、需求分析\"><a href=\"#二、需求分析\" class=\"headerlink\" title=\"二、需求分析\"></a>二、需求分析</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 主板SN：</span><br><span class=\"line\">- IMEI：</span><br><span class=\"line\">- IMEI2：</span><br><span class=\"line\">- MEID：</span><br><span class=\"line\">- WIFI：</span><br><span class=\"line\">- BT(bluetooth?)：</span><br><span class=\"line\">- OSVersion：</span><br><span class=\"line\">- SEVersion：</span><br><span class=\"line\">- QCN：</span><br><span class=\"line\">- MP版本：</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以上一些属性在现有版本里面可以找到。</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- UFSVersion：</span><br><span class=\"line\">- 写号激活状态：</span><br><span class=\"line\">- 密钥下载成功状态：</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>而这三个属性找不到，就需要自己新增。</li>\n</ul>\n<h2 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h2><ul>\n<li>在build&#x2F;buildprop.mk 文件中新增这三个属性</li>\n</ul>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDITIONAL<span class=\"built_in\">_</span>BUILD<span class=\"built_in\">_</span>PROPERTIES += persist.urv.ufs.version=false</span><br><span class=\"line\">ADDITIONAL<span class=\"built_in\">_</span>BUILD<span class=\"built_in\">_</span>PROPERTIES += persist.urv.writenum.status=false</span><br><span class=\"line\">ADDITIONAL<span class=\"built_in\">_</span>BUILD<span class=\"built_in\">_</span>PROPERTIES += persist.urv.keydownload.status=false</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>上述是比较简单的处理方法，就是通过宏新增三个属性并给他赋初值false。</p>\n</li>\n<li><p>还可以在&#x2F;device&#x2F;qcom&#x2F;sepolicy&#x2F;vendor&#x2F;common目录下的property_contexts文件给属性申请权限</p>\n</li>\n</ul>\n<p>eg：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">persist.urv.ufs.version                 u:object<span class=\"built_in\">_</span>r:system<span class=\"built_in\">_</span>prop:s0</span><br><span class=\"line\">persist.urv.writenum.status                 u:object<span class=\"built_in\">_</span>r:system<span class=\"built_in\">_</span>prop:s0</span><br><span class=\"line\">persist.urv.keydownload.status                 u:object<span class=\"built_in\">_</span>r:system<span class=\"built_in\">_</span>prop:s0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、后续修改\"><a href=\"#四、后续修改\" class=\"headerlink\" title=\"四、后续修改\"></a>四、后续修改</h2><ul>\n<li>可以通过找到对应更新相关状态代码逻辑的地方通过SystemProperties.set(“persist.sys.white.packagename” ,value);  方法去赋值  value就是需要赋的值。</li>\n<li>系统属性设置的值理论上都是String类型的，但可以通过系统原生的接口SystemProperties.getBoolean（XXX，XX）；SystemProperties.getInt（XXX，XX）；SystemProperties.get（XXX，XX）；分别去返回boolean,Int,String类型的数据</li>\n</ul>\n"},{"title":"第一个Android程序","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqr4nyw5j21kw0w0e07.jpg"],"abbrlink":"c521edc1","date":"2022-08-26T03:40:36.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 创建第一个Android项目\n\n### 创建HelloWorld项目\n\n先在Android上面new一个Project，输入应用名称、公司域名然后选择项目代码存放位置。然后再选择活动界面，给创建的活动和布局命名。然后等待项目创建成功。\n\n### 启动设备（模拟器或者实体设备）\n\n模拟器安装步骤：\n\n1. 下载SDK：目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio。[官网下载](https://developer.android.com/studio/)地址\n\n2. <font color = \"red\"><strong> 安装路径需记住 </strong></font> ：本人安装路径为：E:\\Program Files\\Android\\SDK_Tools\n\n![目录](https://m.360buyimg.com/babel/jfs/t1/87812/3/29255/39841/62b9474fE6fd09a54/b52fbb814d641d1f.png)\n\n3. 双击打开AVD Manager.exe（选择下列文件安装）选择完成之后点install\n\n![下载](https://m.360buyimg.com/babel/jfs/t1/36673/34/16367/135571/62b947d0E35bf8fde/e82391d638b98122.png)\n\n4. 勾选左下角  Accept License，开始安装\n\n![Accept](https://m.360buyimg.com/babel/jfs/t1/216102/34/19510/57309/62b94867E901dfbef/32f93d3c8c72f9c3.png)\n\n5. 耐心等待其下载完成\n\n![下载](https://m.360buyimg.com/babel/jfs/t1/213735/7/20495/57747/62b948a8Ef5d95be8/458f6cb626d76972.png)\n\n6. 配置SDK环境\n\n“右键 我的电脑”—“属性”—“高级系统设置”—“环境变量”—“系统变量”—“新建”\n\nANDROID_SDK_HOME其值为E:\\Program Files\\Android\\SDK_Tools\n\n![环境变量](https://m.360buyimg.com/babel/jfs/t1/14597/4/16956/49620/62b97c9eE81609139/5ae3ef33e9c23834.png)\n\n编辑Path变量，新增如下两项，<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\platform-tools </strong></font> 、<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\tools </strong></font> \n\n![Path](https://m.360buyimg.com/babel/jfs/t1/119511/30/23462/35517/62b97cf2E1900381f/d8be8bb741150705.png)\n\n### 运行第一个项目\n\n![运行](https://m.360buyimg.com/babel/jfs/t1/8552/30/18256/147697/62b954f9Eb9ea1f86/c853c46249cc52c1.png)\n\n![第一个Android项目](https://m.360buyimg.com/babel/jfs/t1/177838/11/25850/13873/62b91a90Ead9d07eb/fe87b0ca60bff876.png)\n\n### 分析第一个Android程序\n\n#### Project目录\n\n![Project目录](https://m.360buyimg.com/babel/jfs/t1/198246/23/25013/22163/62b95440Ea92a2960/08d623ec793aa4a3.png)\n\n\n1. <font color = \"red\"><strong> .gradle和.idea </strong></font> ：Android Studio自动生成的目录，无须关心。\n\n1. <font color = \"red\"><strong> app </strong></font> ：项目中的代码、资源等内容 几乎都是放置在这个目录当中的，后续开发工作也是在这个目录当中进行的。\n\n1. <font color = \"red\"><strong> build </strong></font> ：包含了一些在编译时自动生成的文件。\n\n1. <font color = \"red\"><strong> gradle </strong></font> ：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式无须提前下载gradle，Android Studio会根据本地缓存情况来决定是否需要下载gradle。Android Studio默认没有开启gradle wrapper，如需打开，可点击导航栏 ---> File ---> Settings ---> Build， Execution, Deployment ---> Gradle,进行配置更改.\n\n1. <font color = \"red\"><strong> .gitgnore </strong></font> ：用来指定目录或文件排除在版本控制之外。\n\n1. <font color = \"red\"><strong> build.gradle </strong></font> ：这是项目的全局gradle构建脚本，通常情况下这个文件内容无须更改。\n\n1. <font color = \"red\"><strong> gradle.properties </strong></font> ：这是项目的全局gradle配置文件，在这里配置的属性会影响到项目中所有的gradle编译脚本。\n\n1. <font color = \"red\"><strong> gradlew和gradlew.bat </strong></font> ：这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux和Mac系统中使用的，gradlew.bat是在Windows系统中使用的。\n\n1. <font color = \"red\"><strong> ProjectName.iml </strong></font> ：iml文件是所有Intellij IDEA项目都会自动生成的一个文件（Android Studio基于Intellij IDEA），用于标识这是一个Intellij IDEA项目，我们无需修改。\n\n1. <font color = \"red\"><strong> local.properties </strong></font> ：用于指定本机中的Android SDK路径，一般情况下无需修改，除非本机的SDK位置发生变化。\n\n1. <font color = \"red\"><strong> settings.gradle </strong></font> ：这个文件用于指定项目中所有引入的模块。通常情况下模块的引入是自动完成的，需要手动修改的情况较少。\n\n<font style=\"background:blue\" font color = white> 我们不难发现，除app目录外其他目录均为自动生成的目录，所以app目录才是我们以后工作的重点 </font> \n\n****\n\n#### app目录\n\n![app目录](https://m.360buyimg.com/babel/jfs/t1/126318/30/23870/10698/62b9574eE8636e973/ca6126a62c59951b.png)\n\n1. <font color = \"red\"><strong> build </strong></font> ：与外层build目录相似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容更为繁杂\n1. <font color = \"red\"><strong> libs </strong></font> ：如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下。放在这个目录的jar包将会被自动添加到构建路径当中。\n1. <font color = \"red\"><strong> androidTest </strong></font> ：此处用来编写AndroidTest测试用例，可以对项目进行一个自动化测试。\n1. <font color = \"red\"><strong> java </strong></font> ：java目录是放置所有java代码的地方，展开该目录就可以看到已经创建的目录。\n1. <font color = \"red\"><strong> res  </strong></font> ：项目中所使用到的图片、布局、字符串等资源都要存放在这个目录中。此目录还存在很多子目录：图片存放在drawable目录下，布局放在layout下，字符串放在values目录下。\n1. <font color = \"red\"><strong> AndroidManifest.xml </strong></font> ：这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限说明。\n1. <font color = \"red\"><strong> test </strong></font> ：此处用来编写Unit Test测试用例，是对项目项目进行自动化测试的另一种方式。\n1. **.gitgnore** ：这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitgnore文件类似。\n1. **app.iml** ：Intellij IDEA项目自动生成的文件，无需关心。\n1. **build.gradle** ：是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。\n1. **proguard-rules.pro** ：这个文件用于指定代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。\n","source":"_posts/第一个Android程序.md","raw":"---\ntitle: 第一个Android程序\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqr4nyw5j21kw0w0e07.jpg'\ntags:\n  - Android\n  - 随笔\nabbrlink: c521edc1\ndate: 2022-08-26 11:40:36\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 创建第一个Android项目\n\n### 创建HelloWorld项目\n\n先在Android上面new一个Project，输入应用名称、公司域名然后选择项目代码存放位置。然后再选择活动界面，给创建的活动和布局命名。然后等待项目创建成功。\n\n### 启动设备（模拟器或者实体设备）\n\n模拟器安装步骤：\n\n1. 下载SDK：目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio。[官网下载](https://developer.android.com/studio/)地址\n\n2. <font color = \"red\"><strong> 安装路径需记住 </strong></font> ：本人安装路径为：E:\\Program Files\\Android\\SDK_Tools\n\n![目录](https://m.360buyimg.com/babel/jfs/t1/87812/3/29255/39841/62b9474fE6fd09a54/b52fbb814d641d1f.png)\n\n3. 双击打开AVD Manager.exe（选择下列文件安装）选择完成之后点install\n\n![下载](https://m.360buyimg.com/babel/jfs/t1/36673/34/16367/135571/62b947d0E35bf8fde/e82391d638b98122.png)\n\n4. 勾选左下角  Accept License，开始安装\n\n![Accept](https://m.360buyimg.com/babel/jfs/t1/216102/34/19510/57309/62b94867E901dfbef/32f93d3c8c72f9c3.png)\n\n5. 耐心等待其下载完成\n\n![下载](https://m.360buyimg.com/babel/jfs/t1/213735/7/20495/57747/62b948a8Ef5d95be8/458f6cb626d76972.png)\n\n6. 配置SDK环境\n\n“右键 我的电脑”—“属性”—“高级系统设置”—“环境变量”—“系统变量”—“新建”\n\nANDROID_SDK_HOME其值为E:\\Program Files\\Android\\SDK_Tools\n\n![环境变量](https://m.360buyimg.com/babel/jfs/t1/14597/4/16956/49620/62b97c9eE81609139/5ae3ef33e9c23834.png)\n\n编辑Path变量，新增如下两项，<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\platform-tools </strong></font> 、<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\tools </strong></font> \n\n![Path](https://m.360buyimg.com/babel/jfs/t1/119511/30/23462/35517/62b97cf2E1900381f/d8be8bb741150705.png)\n\n### 运行第一个项目\n\n![运行](https://m.360buyimg.com/babel/jfs/t1/8552/30/18256/147697/62b954f9Eb9ea1f86/c853c46249cc52c1.png)\n\n![第一个Android项目](https://m.360buyimg.com/babel/jfs/t1/177838/11/25850/13873/62b91a90Ead9d07eb/fe87b0ca60bff876.png)\n\n### 分析第一个Android程序\n\n#### Project目录\n\n![Project目录](https://m.360buyimg.com/babel/jfs/t1/198246/23/25013/22163/62b95440Ea92a2960/08d623ec793aa4a3.png)\n\n\n1. <font color = \"red\"><strong> .gradle和.idea </strong></font> ：Android Studio自动生成的目录，无须关心。\n\n1. <font color = \"red\"><strong> app </strong></font> ：项目中的代码、资源等内容 几乎都是放置在这个目录当中的，后续开发工作也是在这个目录当中进行的。\n\n1. <font color = \"red\"><strong> build </strong></font> ：包含了一些在编译时自动生成的文件。\n\n1. <font color = \"red\"><strong> gradle </strong></font> ：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式无须提前下载gradle，Android Studio会根据本地缓存情况来决定是否需要下载gradle。Android Studio默认没有开启gradle wrapper，如需打开，可点击导航栏 ---> File ---> Settings ---> Build， Execution, Deployment ---> Gradle,进行配置更改.\n\n1. <font color = \"red\"><strong> .gitgnore </strong></font> ：用来指定目录或文件排除在版本控制之外。\n\n1. <font color = \"red\"><strong> build.gradle </strong></font> ：这是项目的全局gradle构建脚本，通常情况下这个文件内容无须更改。\n\n1. <font color = \"red\"><strong> gradle.properties </strong></font> ：这是项目的全局gradle配置文件，在这里配置的属性会影响到项目中所有的gradle编译脚本。\n\n1. <font color = \"red\"><strong> gradlew和gradlew.bat </strong></font> ：这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux和Mac系统中使用的，gradlew.bat是在Windows系统中使用的。\n\n1. <font color = \"red\"><strong> ProjectName.iml </strong></font> ：iml文件是所有Intellij IDEA项目都会自动生成的一个文件（Android Studio基于Intellij IDEA），用于标识这是一个Intellij IDEA项目，我们无需修改。\n\n1. <font color = \"red\"><strong> local.properties </strong></font> ：用于指定本机中的Android SDK路径，一般情况下无需修改，除非本机的SDK位置发生变化。\n\n1. <font color = \"red\"><strong> settings.gradle </strong></font> ：这个文件用于指定项目中所有引入的模块。通常情况下模块的引入是自动完成的，需要手动修改的情况较少。\n\n<font style=\"background:blue\" font color = white> 我们不难发现，除app目录外其他目录均为自动生成的目录，所以app目录才是我们以后工作的重点 </font> \n\n****\n\n#### app目录\n\n![app目录](https://m.360buyimg.com/babel/jfs/t1/126318/30/23870/10698/62b9574eE8636e973/ca6126a62c59951b.png)\n\n1. <font color = \"red\"><strong> build </strong></font> ：与外层build目录相似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容更为繁杂\n1. <font color = \"red\"><strong> libs </strong></font> ：如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下。放在这个目录的jar包将会被自动添加到构建路径当中。\n1. <font color = \"red\"><strong> androidTest </strong></font> ：此处用来编写AndroidTest测试用例，可以对项目进行一个自动化测试。\n1. <font color = \"red\"><strong> java </strong></font> ：java目录是放置所有java代码的地方，展开该目录就可以看到已经创建的目录。\n1. <font color = \"red\"><strong> res  </strong></font> ：项目中所使用到的图片、布局、字符串等资源都要存放在这个目录中。此目录还存在很多子目录：图片存放在drawable目录下，布局放在layout下，字符串放在values目录下。\n1. <font color = \"red\"><strong> AndroidManifest.xml </strong></font> ：这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限说明。\n1. <font color = \"red\"><strong> test </strong></font> ：此处用来编写Unit Test测试用例，是对项目项目进行自动化测试的另一种方式。\n1. **.gitgnore** ：这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitgnore文件类似。\n1. **app.iml** ：Intellij IDEA项目自动生成的文件，无需关心。\n1. **build.gradle** ：是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。\n1. **proguard-rules.pro** ：这个文件用于指定代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。\n","slug":"第一个Android程序","published":1,"updated":"2023-07-31T12:40:09.708Z","layout":"post","link":"","_id":"clktr4qsa004izsa08r6z9djc","content":"<h2 id=\"创建第一个Android项目\"><a href=\"#创建第一个Android项目\" class=\"headerlink\" title=\"创建第一个Android项目\"></a>创建第一个Android项目</h2><h3 id=\"创建HelloWorld项目\"><a href=\"#创建HelloWorld项目\" class=\"headerlink\" title=\"创建HelloWorld项目\"></a>创建HelloWorld项目</h3><p>先在Android上面new一个Project，输入应用名称、公司域名然后选择项目代码存放位置。然后再选择活动界面，给创建的活动和布局命名。然后等待项目创建成功。</p>\n<h3 id=\"启动设备（模拟器或者实体设备）\"><a href=\"#启动设备（模拟器或者实体设备）\" class=\"headerlink\" title=\"启动设备（模拟器或者实体设备）\"></a>启动设备（模拟器或者实体设备）</h3><p>模拟器安装步骤：</p>\n<ol>\n<li><p>下载SDK：目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio。<a href=\"https://developer.android.com/studio/\">官网下载</a>地址</p>\n</li>\n<li><p><font color = \"red\"><strong> 安装路径需记住 </strong></font> ：本人安装路径为：E:\\Program Files\\Android\\SDK_Tools</p>\n</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/87812/3/29255/39841/62b9474fE6fd09a54/b52fbb814d641d1f.png\" alt=\"目录\"></p>\n<ol start=\"3\">\n<li>双击打开AVD Manager.exe（选择下列文件安装）选择完成之后点install</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/36673/34/16367/135571/62b947d0E35bf8fde/e82391d638b98122.png\" alt=\"下载\"></p>\n<ol start=\"4\">\n<li>勾选左下角  Accept License，开始安装</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/216102/34/19510/57309/62b94867E901dfbef/32f93d3c8c72f9c3.png\" alt=\"Accept\"></p>\n<ol start=\"5\">\n<li>耐心等待其下载完成</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/213735/7/20495/57747/62b948a8Ef5d95be8/458f6cb626d76972.png\" alt=\"下载\"></p>\n<ol start=\"6\">\n<li>配置SDK环境</li>\n</ol>\n<p>“右键 我的电脑”—“属性”—“高级系统设置”—“环境变量”—“系统变量”—“新建”</p>\n<p>ANDROID_SDK_HOME其值为E:\\Program Files\\Android\\SDK_Tools</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/14597/4/16956/49620/62b97c9eE81609139/5ae3ef33e9c23834.png\" alt=\"环境变量\"></p>\n<p>编辑Path变量，新增如下两项，<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\platform-tools </strong></font> 、<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\tools </strong></font> </p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/119511/30/23462/35517/62b97cf2E1900381f/d8be8bb741150705.png\" alt=\"Path\"></p>\n<h3 id=\"运行第一个项目\"><a href=\"#运行第一个项目\" class=\"headerlink\" title=\"运行第一个项目\"></a>运行第一个项目</h3><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/8552/30/18256/147697/62b954f9Eb9ea1f86/c853c46249cc52c1.png\" alt=\"运行\"></p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/177838/11/25850/13873/62b91a90Ead9d07eb/fe87b0ca60bff876.png\" alt=\"第一个Android项目\"></p>\n<h3 id=\"分析第一个Android程序\"><a href=\"#分析第一个Android程序\" class=\"headerlink\" title=\"分析第一个Android程序\"></a>分析第一个Android程序</h3><h4 id=\"Project目录\"><a href=\"#Project目录\" class=\"headerlink\" title=\"Project目录\"></a>Project目录</h4><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/198246/23/25013/22163/62b95440Ea92a2960/08d623ec793aa4a3.png\" alt=\"Project目录\"></p>\n<ol>\n<li><p><font color = \"red\"><strong> .gradle和.idea </strong></font> ：Android Studio自动生成的目录，无须关心。</p>\n</li>\n<li><p><font color = \"red\"><strong> app </strong></font> ：项目中的代码、资源等内容 几乎都是放置在这个目录当中的，后续开发工作也是在这个目录当中进行的。</p>\n</li>\n<li><p><font color = \"red\"><strong> build </strong></font> ：包含了一些在编译时自动生成的文件。</p>\n</li>\n<li><p><font color = \"red\"><strong> gradle </strong></font> ：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式无须提前下载gradle，Android Studio会根据本地缓存情况来决定是否需要下载gradle。Android Studio默认没有开启gradle wrapper，如需打开，可点击导航栏 —&gt; File —&gt; Settings —&gt; Build， Execution, Deployment —&gt; Gradle,进行配置更改.</p>\n</li>\n<li><p><font color = \"red\"><strong> .gitgnore </strong></font> ：用来指定目录或文件排除在版本控制之外。</p>\n</li>\n<li><p><font color = \"red\"><strong> build.gradle </strong></font> ：这是项目的全局gradle构建脚本，通常情况下这个文件内容无须更改。</p>\n</li>\n<li><p><font color = \"red\"><strong> gradle.properties </strong></font> ：这是项目的全局gradle配置文件，在这里配置的属性会影响到项目中所有的gradle编译脚本。</p>\n</li>\n<li><p><font color = \"red\"><strong> gradlew和gradlew.bat </strong></font> ：这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux和Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p>\n</li>\n<li><p><font color = \"red\"><strong> ProjectName.iml </strong></font> ：iml文件是所有Intellij IDEA项目都会自动生成的一个文件（Android Studio基于Intellij IDEA），用于标识这是一个Intellij IDEA项目，我们无需修改。</p>\n</li>\n<li><p><font color = \"red\"><strong> local.properties </strong></font> ：用于指定本机中的Android SDK路径，一般情况下无需修改，除非本机的SDK位置发生变化。</p>\n</li>\n<li><p><font color = \"red\"><strong> settings.gradle </strong></font> ：这个文件用于指定项目中所有引入的模块。通常情况下模块的引入是自动完成的，需要手动修改的情况较少。</p>\n</li>\n</ol>\n<p><font style=\"background:blue\" font color = white> 我们不难发现，除app目录外其他目录均为自动生成的目录，所以app目录才是我们以后工作的重点 </font> </p>\n<hr>\n<h4 id=\"app目录\"><a href=\"#app目录\" class=\"headerlink\" title=\"app目录\"></a>app目录</h4><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/126318/30/23870/10698/62b9574eE8636e973/ca6126a62c59951b.png\" alt=\"app目录\"></p>\n<ol>\n<li><font color = \"red\"><strong> build </strong></font> ：与外层build目录相似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容更为繁杂</li>\n<li><font color = \"red\"><strong> libs </strong></font> ：如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下。放在这个目录的jar包将会被自动添加到构建路径当中。</li>\n<li><font color = \"red\"><strong> androidTest </strong></font> ：此处用来编写AndroidTest测试用例，可以对项目进行一个自动化测试。</li>\n<li><font color = \"red\"><strong> java </strong></font> ：java目录是放置所有java代码的地方，展开该目录就可以看到已经创建的目录。</li>\n<li><font color = \"red\"><strong> res  </strong></font> ：项目中所使用到的图片、布局、字符串等资源都要存放在这个目录中。此目录还存在很多子目录：图片存放在drawable目录下，布局放在layout下，字符串放在values目录下。</li>\n<li><font color = \"red\"><strong> AndroidManifest.xml </strong></font> ：这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限说明。</li>\n<li><font color = \"red\"><strong> test </strong></font> ：此处用来编写Unit Test测试用例，是对项目项目进行自动化测试的另一种方式。</li>\n<li><strong>.gitgnore</strong> ：这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitgnore文件类似。</li>\n<li><strong>app.iml</strong> ：Intellij IDEA项目自动生成的文件，无需关心。</li>\n<li><strong>build.gradle</strong> ：是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。</li>\n<li><strong>proguard-rules.pro</strong> ：这个文件用于指定代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。</li>\n</ol>\n","site":{"data":{}},"cover":"linear-gradient(to top,#ff9a9e 0%,#fecfef 99%,#fecfef 100%)","excerpt":"","more":"<h2 id=\"创建第一个Android项目\"><a href=\"#创建第一个Android项目\" class=\"headerlink\" title=\"创建第一个Android项目\"></a>创建第一个Android项目</h2><h3 id=\"创建HelloWorld项目\"><a href=\"#创建HelloWorld项目\" class=\"headerlink\" title=\"创建HelloWorld项目\"></a>创建HelloWorld项目</h3><p>先在Android上面new一个Project，输入应用名称、公司域名然后选择项目代码存放位置。然后再选择活动界面，给创建的活动和布局命名。然后等待项目创建成功。</p>\n<h3 id=\"启动设备（模拟器或者实体设备）\"><a href=\"#启动设备（模拟器或者实体设备）\" class=\"headerlink\" title=\"启动设备（模拟器或者实体设备）\"></a>启动设备（模拟器或者实体设备）</h3><p>模拟器安装步骤：</p>\n<ol>\n<li><p>下载SDK：目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio。<a href=\"https://developer.android.com/studio/\">官网下载</a>地址</p>\n</li>\n<li><p><font color = \"red\"><strong> 安装路径需记住 </strong></font> ：本人安装路径为：E:\\Program Files\\Android\\SDK_Tools</p>\n</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/87812/3/29255/39841/62b9474fE6fd09a54/b52fbb814d641d1f.png\" alt=\"目录\"></p>\n<ol start=\"3\">\n<li>双击打开AVD Manager.exe（选择下列文件安装）选择完成之后点install</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/36673/34/16367/135571/62b947d0E35bf8fde/e82391d638b98122.png\" alt=\"下载\"></p>\n<ol start=\"4\">\n<li>勾选左下角  Accept License，开始安装</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/216102/34/19510/57309/62b94867E901dfbef/32f93d3c8c72f9c3.png\" alt=\"Accept\"></p>\n<ol start=\"5\">\n<li>耐心等待其下载完成</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/213735/7/20495/57747/62b948a8Ef5d95be8/458f6cb626d76972.png\" alt=\"下载\"></p>\n<ol start=\"6\">\n<li>配置SDK环境</li>\n</ol>\n<p>“右键 我的电脑”—“属性”—“高级系统设置”—“环境变量”—“系统变量”—“新建”</p>\n<p>ANDROID_SDK_HOME其值为E:\\Program Files\\Android\\SDK_Tools</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/14597/4/16956/49620/62b97c9eE81609139/5ae3ef33e9c23834.png\" alt=\"环境变量\"></p>\n<p>编辑Path变量，新增如下两项，<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\platform-tools </strong></font> 、<font style=\"background:green\" font color = white><strong> %ANDROID_SDK_HOME%\\tools </strong></font> </p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/119511/30/23462/35517/62b97cf2E1900381f/d8be8bb741150705.png\" alt=\"Path\"></p>\n<h3 id=\"运行第一个项目\"><a href=\"#运行第一个项目\" class=\"headerlink\" title=\"运行第一个项目\"></a>运行第一个项目</h3><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/8552/30/18256/147697/62b954f9Eb9ea1f86/c853c46249cc52c1.png\" alt=\"运行\"></p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/177838/11/25850/13873/62b91a90Ead9d07eb/fe87b0ca60bff876.png\" alt=\"第一个Android项目\"></p>\n<h3 id=\"分析第一个Android程序\"><a href=\"#分析第一个Android程序\" class=\"headerlink\" title=\"分析第一个Android程序\"></a>分析第一个Android程序</h3><h4 id=\"Project目录\"><a href=\"#Project目录\" class=\"headerlink\" title=\"Project目录\"></a>Project目录</h4><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/198246/23/25013/22163/62b95440Ea92a2960/08d623ec793aa4a3.png\" alt=\"Project目录\"></p>\n<ol>\n<li><p><font color = \"red\"><strong> .gradle和.idea </strong></font> ：Android Studio自动生成的目录，无须关心。</p>\n</li>\n<li><p><font color = \"red\"><strong> app </strong></font> ：项目中的代码、资源等内容 几乎都是放置在这个目录当中的，后续开发工作也是在这个目录当中进行的。</p>\n</li>\n<li><p><font color = \"red\"><strong> build </strong></font> ：包含了一些在编译时自动生成的文件。</p>\n</li>\n<li><p><font color = \"red\"><strong> gradle </strong></font> ：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式无须提前下载gradle，Android Studio会根据本地缓存情况来决定是否需要下载gradle。Android Studio默认没有开启gradle wrapper，如需打开，可点击导航栏 —&gt; File —&gt; Settings —&gt; Build， Execution, Deployment —&gt; Gradle,进行配置更改.</p>\n</li>\n<li><p><font color = \"red\"><strong> .gitgnore </strong></font> ：用来指定目录或文件排除在版本控制之外。</p>\n</li>\n<li><p><font color = \"red\"><strong> build.gradle </strong></font> ：这是项目的全局gradle构建脚本，通常情况下这个文件内容无须更改。</p>\n</li>\n<li><p><font color = \"red\"><strong> gradle.properties </strong></font> ：这是项目的全局gradle配置文件，在这里配置的属性会影响到项目中所有的gradle编译脚本。</p>\n</li>\n<li><p><font color = \"red\"><strong> gradlew和gradlew.bat </strong></font> ：这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux和Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p>\n</li>\n<li><p><font color = \"red\"><strong> ProjectName.iml </strong></font> ：iml文件是所有Intellij IDEA项目都会自动生成的一个文件（Android Studio基于Intellij IDEA），用于标识这是一个Intellij IDEA项目，我们无需修改。</p>\n</li>\n<li><p><font color = \"red\"><strong> local.properties </strong></font> ：用于指定本机中的Android SDK路径，一般情况下无需修改，除非本机的SDK位置发生变化。</p>\n</li>\n<li><p><font color = \"red\"><strong> settings.gradle </strong></font> ：这个文件用于指定项目中所有引入的模块。通常情况下模块的引入是自动完成的，需要手动修改的情况较少。</p>\n</li>\n</ol>\n<p><font style=\"background:blue\" font color = white> 我们不难发现，除app目录外其他目录均为自动生成的目录，所以app目录才是我们以后工作的重点 </font> </p>\n<hr>\n<h4 id=\"app目录\"><a href=\"#app目录\" class=\"headerlink\" title=\"app目录\"></a>app目录</h4><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/126318/30/23870/10698/62b9574eE8636e973/ca6126a62c59951b.png\" alt=\"app目录\"></p>\n<ol>\n<li><font color = \"red\"><strong> build </strong></font> ：与外层build目录相似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容更为繁杂</li>\n<li><font color = \"red\"><strong> libs </strong></font> ：如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下。放在这个目录的jar包将会被自动添加到构建路径当中。</li>\n<li><font color = \"red\"><strong> androidTest </strong></font> ：此处用来编写AndroidTest测试用例，可以对项目进行一个自动化测试。</li>\n<li><font color = \"red\"><strong> java </strong></font> ：java目录是放置所有java代码的地方，展开该目录就可以看到已经创建的目录。</li>\n<li><font color = \"red\"><strong> res  </strong></font> ：项目中所使用到的图片、布局、字符串等资源都要存放在这个目录中。此目录还存在很多子目录：图片存放在drawable目录下，布局放在layout下，字符串放在values目录下。</li>\n<li><font color = \"red\"><strong> AndroidManifest.xml </strong></font> ：这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限说明。</li>\n<li><font color = \"red\"><strong> test </strong></font> ：此处用来编写Unit Test测试用例，是对项目项目进行自动化测试的另一种方式。</li>\n<li><strong>.gitgnore</strong> ：这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitgnore文件类似。</li>\n<li><strong>app.iml</strong> ：Intellij IDEA项目自动生成的文件，无需关心。</li>\n<li><strong>build.gradle</strong> ：是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。</li>\n<li><strong>proguard-rules.pro</strong> ：这个文件用于指定代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。</li>\n</ol>\n"},{"title":"记一次office无法联网解决方法","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqq4k0okj21kw0w0dra.jpg"],"abbrlink":"eacc0609","date":"2022-08-25T14:43:38.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 登录onedrive显示无法连接服务器解决方法\n\n今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：\n\n1. Cmd + r ：依次输入\n\n```shell\nnetsh int ip reset c:\\resetlog.txt\nnetsh winsock reset\nshutdown -r -t 0\n```\n\n2. 命令行解析：\n   1. netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络\n   2. shutdown -r -t 0 为0s后重启电脑。\n3. 重启电脑后再打开word就可以连上网啦！\n\n","source":"_posts/记一次office无法联网解决方法.md","raw":"---\ntitle: 记一次office无法联网解决方法\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 生活\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqq4k0okj21kw0w0dra.jpg'\ntags: 随笔\nabbrlink: eacc0609\ndate: 2022-08-25 22:43:38\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 登录onedrive显示无法连接服务器解决方法\n\n今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：\n\n1. Cmd + r ：依次输入\n\n```shell\nnetsh int ip reset c:\\resetlog.txt\nnetsh winsock reset\nshutdown -r -t 0\n```\n\n2. 命令行解析：\n   1. netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络\n   2. shutdown -r -t 0 为0s后重启电脑。\n3. 重启电脑后再打开word就可以连上网啦！\n\n","slug":"记一次office无法联网解决方法","published":1,"updated":"2023-07-31T12:40:09.716Z","layout":"post","link":"","_id":"clktr4qsb004jzsa07r9j4u94","content":"<h2 id=\"登录onedrive显示无法连接服务器解决方法\"><a href=\"#登录onedrive显示无法连接服务器解决方法\" class=\"headerlink\" title=\"登录onedrive显示无法连接服务器解决方法\"></a>登录onedrive显示无法连接服务器解决方法</h2><p>今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：</p>\n<ol>\n<li>Cmd + r ：依次输入</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsh int ip reset c:\\resetlog.txt</span><br><span class=\"line\">netsh winsock reset</span><br><span class=\"line\">shutdown -r -t 0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>命令行解析：<ol>\n<li>netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络</li>\n<li>shutdown -r -t 0 为0s后重启电脑。</li>\n</ol>\n</li>\n<li>重启电脑后再打开word就可以连上网啦！</li>\n</ol>\n","site":{"data":{}},"cover":"linear-gradient(to top,#ebc0fd 0%,#d9ded8 100%)","excerpt":"","more":"<h2 id=\"登录onedrive显示无法连接服务器解决方法\"><a href=\"#登录onedrive显示无法连接服务器解决方法\" class=\"headerlink\" title=\"登录onedrive显示无法连接服务器解决方法\"></a>登录onedrive显示无法连接服务器解决方法</h2><p>今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：</p>\n<ol>\n<li>Cmd + r ：依次输入</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netsh int ip reset c:\\resetlog.txt</span><br><span class=\"line\">netsh winsock reset</span><br><span class=\"line\">shutdown -r -t 0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>命令行解析：<ol>\n<li>netsh int ip reset c:\\resetlog.txt 和 netsh winsock reset为重置网络</li>\n<li>shutdown -r -t 0 为0s后重启电脑。</li>\n</ol>\n</li>\n<li>重启电脑后再打开word就可以连上网啦！</li>\n</ol>\n"},{"title":"计算机硬件知识","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqvhfrmj21kw0w0ne1.jpg"],"abbrlink":"c81dbfc9","date":"2022-08-24T14:36:40.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 计算机硬件\n\n### 冯诺依曼体系结构\n\n![冯诺依曼体系结构](https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png)\n\n**冯诺依曼体系结构是现代计算机的基础**\n\n1. 输入数据和程序的**输入设备**\n2. 记忆程序和数据的**存储器**\n3. 完成数据加工处理的**运算器**\n4. 控制程序执行的**控制器**\n5. 输出处理结果的**输出设备**\n\n---\n\n\n**一、中央处理器**（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。\n\nCPU 包括\n\n1. **控制单元**：用于控制和协调其他组件\n2. **算术逻辑单元**：用于完成数值运算\n\n每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）\n\n1 Hz相当于一个脉冲。1KHz = 1024Hz；1MHz = 1024 KHz；\n\n---\n\n**二、存储设备**\n\n- 内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。\n- 存储设备主要有：\n\n1. **磁盘驱动器**                   ->硬盘\n2. **光盘驱动器**                   ->CD和DVD\n3. **USB闪存驱动器**           ->U盘\n\n---\n\n**三、内存**\n\n比特（bit）和字节（byte）\n\n- **一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。**\n- **计算机中最基本的存储单位是字节（byte） **\n\n​\t\t1Byte = 8 bit；\n\n​\t\t1KB = 1024B；\t\t1MB = 1024 KB；\n\n​\t\t1GB = 1024MB；\t1TB = 1024GB\n\n- **一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。**\n- 内存读取速度比硬盘读取速度快好多好多，**而CPU的读取速度比内存又要快好多好多**\n\n---\n\n**计算机输入输出设备**\n\n- 输入设备：鼠标 键盘\n- 输出设备：显示器和打印机\n\n---\n\n**计算机两大鼻鼻祖**\n\n1. 阿兰图灵：计算机科学之父和人工智能之父\n2. 冯诺依曼：计算机之父和博弈论之父\n\n---\n\n**操作系统**\n\n- 操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。\n- 硬件、操作系统、应用程序控制计算机的活动。\n","source":"_posts/计算机硬件知识.md","raw":"---\ntitle: 计算机硬件知识\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\ntags: 硬件\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqqvhfrmj21kw0w0ne1.jpg'\nabbrlink: c81dbfc9\ndate: 2022-08-24 22:36:40\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 计算机硬件\n\n### 冯诺依曼体系结构\n\n![冯诺依曼体系结构](https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png)\n\n**冯诺依曼体系结构是现代计算机的基础**\n\n1. 输入数据和程序的**输入设备**\n2. 记忆程序和数据的**存储器**\n3. 完成数据加工处理的**运算器**\n4. 控制程序执行的**控制器**\n5. 输出处理结果的**输出设备**\n\n---\n\n\n**一、中央处理器**（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。\n\nCPU 包括\n\n1. **控制单元**：用于控制和协调其他组件\n2. **算术逻辑单元**：用于完成数值运算\n\n每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）\n\n1 Hz相当于一个脉冲。1KHz = 1024Hz；1MHz = 1024 KHz；\n\n---\n\n**二、存储设备**\n\n- 内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。\n- 存储设备主要有：\n\n1. **磁盘驱动器**                   ->硬盘\n2. **光盘驱动器**                   ->CD和DVD\n3. **USB闪存驱动器**           ->U盘\n\n---\n\n**三、内存**\n\n比特（bit）和字节（byte）\n\n- **一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。**\n- **计算机中最基本的存储单位是字节（byte） **\n\n​\t\t1Byte = 8 bit；\n\n​\t\t1KB = 1024B；\t\t1MB = 1024 KB；\n\n​\t\t1GB = 1024MB；\t1TB = 1024GB\n\n- **一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。**\n- 内存读取速度比硬盘读取速度快好多好多，**而CPU的读取速度比内存又要快好多好多**\n\n---\n\n**计算机输入输出设备**\n\n- 输入设备：鼠标 键盘\n- 输出设备：显示器和打印机\n\n---\n\n**计算机两大鼻鼻祖**\n\n1. 阿兰图灵：计算机科学之父和人工智能之父\n2. 冯诺依曼：计算机之父和博弈论之父\n\n---\n\n**操作系统**\n\n- 操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。\n- 硬件、操作系统、应用程序控制计算机的活动。\n","slug":"计算机硬件知识","published":1,"updated":"2023-07-31T12:40:09.675Z","layout":"post","link":"","_id":"clktr4qsb004lzsa082d88qin","content":"<h2 id=\"计算机硬件\"><a href=\"#计算机硬件\" class=\"headerlink\" title=\"计算机硬件\"></a>计算机硬件</h2><h3 id=\"冯诺依曼体系结构\"><a href=\"#冯诺依曼体系结构\" class=\"headerlink\" title=\"冯诺依曼体系结构\"></a>冯诺依曼体系结构</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png\" alt=\"冯诺依曼体系结构\"></p>\n<p><strong>冯诺依曼体系结构是现代计算机的基础</strong></p>\n<ol>\n<li>输入数据和程序的<strong>输入设备</strong></li>\n<li>记忆程序和数据的<strong>存储器</strong></li>\n<li>完成数据加工处理的<strong>运算器</strong></li>\n<li>控制程序执行的<strong>控制器</strong></li>\n<li>输出处理结果的<strong>输出设备</strong></li>\n</ol>\n<hr>\n<p><strong>一、中央处理器</strong>（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。</p>\n<p>CPU 包括</p>\n<ol>\n<li><strong>控制单元</strong>：用于控制和协调其他组件</li>\n<li><strong>算术逻辑单元</strong>：用于完成数值运算</li>\n</ol>\n<p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）</p>\n<p>1 Hz相当于一个脉冲。1KHz &#x3D; 1024Hz；1MHz &#x3D; 1024 KHz；</p>\n<hr>\n<p><strong>二、存储设备</strong></p>\n<ul>\n<li>内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。</li>\n<li>存储设备主要有：</li>\n</ul>\n<ol>\n<li><strong>磁盘驱动器</strong>                   -&gt;硬盘</li>\n<li><strong>光盘驱动器</strong>                   -&gt;CD和DVD</li>\n<li><strong>USB闪存驱动器</strong>           -&gt;U盘</li>\n</ol>\n<hr>\n<p><strong>三、内存</strong></p>\n<p>比特（bit）和字节（byte）</p>\n<ul>\n<li><strong>一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。</strong></li>\n<li>**计算机中最基本的存储单位是字节（byte） **</li>\n</ul>\n<p>​\t\t1Byte &#x3D; 8 bit；</p>\n<p>​\t\t1KB &#x3D; 1024B；\t\t1MB &#x3D; 1024 KB；</p>\n<p>​\t\t1GB &#x3D; 1024MB；\t1TB &#x3D; 1024GB</p>\n<ul>\n<li><strong>一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。</strong></li>\n<li>内存读取速度比硬盘读取速度快好多好多，<strong>而CPU的读取速度比内存又要快好多好多</strong></li>\n</ul>\n<hr>\n<p><strong>计算机输入输出设备</strong></p>\n<ul>\n<li>输入设备：鼠标 键盘</li>\n<li>输出设备：显示器和打印机</li>\n</ul>\n<hr>\n<p><strong>计算机两大鼻鼻祖</strong></p>\n<ol>\n<li>阿兰图灵：计算机科学之父和人工智能之父</li>\n<li>冯诺依曼：计算机之父和博弈论之父</li>\n</ol>\n<hr>\n<p><strong>操作系统</strong></p>\n<ul>\n<li>操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。</li>\n<li>硬件、操作系统、应用程序控制计算机的活动。</li>\n</ul>\n","site":{"data":{}},"cover":"linear-gradient(to right bottom,#ADC5CF,#8393BF)","excerpt":"","more":"<h2 id=\"计算机硬件\"><a href=\"#计算机硬件\" class=\"headerlink\" title=\"计算机硬件\"></a>计算机硬件</h2><h3 id=\"冯诺依曼体系结构\"><a href=\"#冯诺依曼体系结构\" class=\"headerlink\" title=\"冯诺依曼体系结构\"></a>冯诺依曼体系结构</h3><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png\" alt=\"冯诺依曼体系结构\"></p>\n<p><strong>冯诺依曼体系结构是现代计算机的基础</strong></p>\n<ol>\n<li>输入数据和程序的<strong>输入设备</strong></li>\n<li>记忆程序和数据的<strong>存储器</strong></li>\n<li>完成数据加工处理的<strong>运算器</strong></li>\n<li>控制程序执行的<strong>控制器</strong></li>\n<li>输出处理结果的<strong>输出设备</strong></li>\n</ol>\n<hr>\n<p><strong>一、中央处理器</strong>（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。</p>\n<p>CPU 包括</p>\n<ol>\n<li><strong>控制单元</strong>：用于控制和协调其他组件</li>\n<li><strong>算术逻辑单元</strong>：用于完成数值运算</li>\n</ol>\n<p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）</p>\n<p>1 Hz相当于一个脉冲。1KHz &#x3D; 1024Hz；1MHz &#x3D; 1024 KHz；</p>\n<hr>\n<p><strong>二、存储设备</strong></p>\n<ul>\n<li>内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。</li>\n<li>存储设备主要有：</li>\n</ul>\n<ol>\n<li><strong>磁盘驱动器</strong>                   -&gt;硬盘</li>\n<li><strong>光盘驱动器</strong>                   -&gt;CD和DVD</li>\n<li><strong>USB闪存驱动器</strong>           -&gt;U盘</li>\n</ol>\n<hr>\n<p><strong>三、内存</strong></p>\n<p>比特（bit）和字节（byte）</p>\n<ul>\n<li><strong>一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。</strong></li>\n<li>**计算机中最基本的存储单位是字节（byte） **</li>\n</ul>\n<p>​\t\t1Byte &#x3D; 8 bit；</p>\n<p>​\t\t1KB &#x3D; 1024B；\t\t1MB &#x3D; 1024 KB；</p>\n<p>​\t\t1GB &#x3D; 1024MB；\t1TB &#x3D; 1024GB</p>\n<ul>\n<li><strong>一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。</strong></li>\n<li>内存读取速度比硬盘读取速度快好多好多，<strong>而CPU的读取速度比内存又要快好多好多</strong></li>\n</ul>\n<hr>\n<p><strong>计算机输入输出设备</strong></p>\n<ul>\n<li>输入设备：鼠标 键盘</li>\n<li>输出设备：显示器和打印机</li>\n</ul>\n<hr>\n<p><strong>计算机两大鼻鼻祖</strong></p>\n<ol>\n<li>阿兰图灵：计算机科学之父和人工智能之父</li>\n<li>冯诺依曼：计算机之父和博弈论之父</li>\n</ol>\n<hr>\n<p><strong>操作系统</strong></p>\n<ul>\n<li>操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。</li>\n<li>硬件、操作系统、应用程序控制计算机的活动。</li>\n</ul>\n"},{"title":"记第公司开发环境搭建","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqlxbtmj21kw0w0aoq.jpg"],"password":"urovo","abstract":"这是机密文件！","abbrlink":"12ce6b69","date":"2022-08-26T03:34:19.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 一.adb安装\n\n1. 点击 [下载连接 ](https://dl.google.com/android/repository/platform-tools-latest-windows.zip?hl=zh-cn)即可下载适用于Windows的SDK Platform-Tools.\n\n2. 下载完成后解压，然后添加路径到环境变量。\n\n**解压路径为：D:\\EdgeDownloads\\platform-tools**（保存下来）\n\n![解压路径](https://m.360buyimg.com/babel/jfs/t1/35970/17/16229/50128/62b57f5aEedce3be3/f77850d02f581624.png)\n\n在环境变量中添加路径：找到图标 “我的电脑”--右击--点击 ”属性“--找到 ”高级系统设置“并点击进入环境变量设置页；点击”环境变量“--系统变量框下 找到“Path”--编辑--新建--将刚才复制的adb路径粘贴上去\n\n![环境变量](https://m.360buyimg.com/babel/jfs/t1/34968/34/16246/66294/62b58029Efe52db27/3c84c1290f3a39df.png)\n\n3. 验证adb是否安装成功。\n\nwin+r 输入cmd启用cmd窗口后输入：adb version 若弹出adb版本信息则adb安装成功。\n\n![安装成功](https://m.360buyimg.com/babel/jfs/t1/217622/5/19070/33510/62b5811bE4b276d67/1adb59476cf2b3db.png)\n\n## 二.JDK安装\n\n1. 点击[下载链接](https://download.oracle.com/java/18/latest/jdk-18_windows-x64_bin.exe) 即可下载JDK（Windows版本）其余版本可在：[Java Downloads | Oracle](https://www.oracle.com/java/technologies/downloads/#jdk18-windows) 此页面下载。\n2. 下载好后双击安装\n\n![安装过程](https://m.360buyimg.com/babel/jfs/t1/224016/16/13063/82679/62b582ecE34b670db/65fc5763fac034ee.png)\n\n根据需求更改安装路径（需记住）：C:\\Program Files\\Java\\jdk1.8.0_202\\\n\n![安装路径](https://m.360buyimg.com/babel/jfs/t1/73197/27/20287/26502/62b58337E9b4aada3/ec12959677015922.png)\n\n3. 安装完成后，在系统环境变量中添加JDK路径。\n\n在系统变量中新增Java_Home变量，其值为刚刚的安装路径：C:\\Program Files\\Java\\jdk1.8.0_202\\\n\n![系统变量](https://m.360buyimg.com/babel/jfs/t1/25209/20/17164/41333/62b583dfE53b1f2cb/be25cd34f2fbcf46.png)\n\n然后双击系统变量中的Path变量添加如下两个值：\n\n%Java_Home%\\bin\n\n%Java_Home%\\jre\\bin\n\n![Path](https://m.360buyimg.com/babel/jfs/t1/194805/18/25873/32389/62b58466Edf252e47/32b820e84845ac46.png)\n\n3. 验证jdk是否安装成功。\n\nwin+r 输入cmd启用cmd窗口后输入：java -version 若弹出java版本信息则java安装成功。\n\n![安装成功](https://m.360buyimg.com/babel/jfs/t1/220338/3/20872/33982/62b585daE026e6fef/8b0313fb4166d714.png)\n\n## 三.git安装\n\n1. 点击 [下载链接](https://github.com/git-for-windows/git/releases/download/v2.36.1.windows.1/Git-2.36.1-64-bit.exe) 即可下载git（Windows版本），或前往([Git - Downloads (git-scm.com)](https://git-scm.com/downloads)) 下载其他版本\n\n2. 下载完成后双击打开一路next~~（不是）~~\n\n![安装步骤01](https://m.360buyimg.com/babel/jfs/t1/28240/39/17697/49484/62b5879cE17933744/c32143ea4b297e77.png)\n\n3. 配置环境变量 \n\n双击系统变量中的Path变量添加如下两个值（Git安装路径）：\n\nE:\\Program Files\\Git\n\nE:\\Program Files\\Git\\git-bash.exe\n\n![环境变量](https://m.360buyimg.com/babel/jfs/t1/36714/16/16257/30239/62b5890cEab9e3bff/b76c9706c23776bc.png)\n\n4. 查看是否安装成功\n\n打开 git bash 输入：git version（若出现版本号则证明安装成功）\n\n![安装成功](https://m.360buyimg.com/babel/jfs/t1/79345/1/19277/14474/62b58963E52b5d30f/af0006c312fac373.png)\n\n## 四.Xshell安装\n\n1. 点击 [下载链接](https://www.xshell.com/zh/downloading/?token=NV9aZnBRYkhnaFBLYXBPRWpMeWNJd0BDTW9sNWh4aE9nc3k2dm14cTJvMHhR) 即可下载Xshell个人免费版。\n2. 下载完成后点击安装。\n3. 个人安装时所遇到的问题：安装后点击打开，弹出以下窗口：应用程序无法正常启动(0xc000007b)，请单击确定关闭应用程序.\n4. 解决办法，点击 [下载链接](https://develope.lanzoug.com/file/?BmAHOQEwUmMDCgA4Cz5TP1FuBz8FHlM4VyJTMFJtWi8JUQIKXFNTYgguUGcHOlEiVSdUFFFgBmxQNlQ8XGMBZQZiBw8BGVJiAzwAIgs2Uz1RZQcrBXRTZlcqU3NSaFoyCWUCMFxeU24IOlA7B2RRY1U6VGRROAY2UGVUYFwmAWYGdQdtAW1SNANnAGALa1NrUTsHMQVoU3dXIFMlUjNaaQk5AmdcM1MoCG5QMAd8UWJVPVR+UTwGZVBjVDZcNwE4BjEHZgE+UjQDNgA0CztTZlE7BzMFa1NgV2hTY1JrWmoJbAJhXDlTMgg9UDYHZVEzVThUMFEgBjNQLVR0XHUBcwZjByIBNVJiA2gAZwtrU2tRPAc6BWtTZld2UyFSZ1o2CWwCM1w8UzYIaFAzB2VRYFU5VGRROwY2UGJUfFwuASYGYAc8AStSOwNkAGALalNkUTsHNAVuU2VXYlNtUihaLgl5AiJcPFM2CGhQMwdmUWhVOVRjUTsGM1BuVHRcdQFpBnYHbQFoUjUDewBnC2xTYFElBzAFb1NlV35TZ1I/Wmw=) 下载DirectX修复工具增强版，下载所需依赖。\n5. 修复完成后即可打开。\n\n## 五.记恢复电脑path环境变量方法.\n\n1. 在系统变量中看是否存在Path一项，如果被删除或者丢失，就可能不存在Path了。\n2. 丢失找回方法：\n3. 点击新建，变量名输入为：Path，变量值输入为C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common。再点击确定即可解决。\n\n![找回Path](https://m.360buyimg.com/babel/jfs/t1/17580/37/17684/44528/62b58b54Eeadc3bda/07524f2f1fc04971.png)\n\n\n\n","source":"_posts/记第公司开发环境搭建.md","raw":"---\ntitle: 记第公司开发环境搭建\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 资源\ncomments: true\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqqlxbtmj21kw0w0aoq.jpg'\ntags: 随笔\npassword: urovo\nabstract: 这是机密文件！\nabbrlink: 12ce6b69\ndate: 2022-08-26 11:34:19\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 一.adb安装\n\n1. 点击 [下载连接 ](https://dl.google.com/android/repository/platform-tools-latest-windows.zip?hl=zh-cn)即可下载适用于Windows的SDK Platform-Tools.\n\n2. 下载完成后解压，然后添加路径到环境变量。\n\n**解压路径为：D:\\EdgeDownloads\\platform-tools**（保存下来）\n\n![解压路径](https://m.360buyimg.com/babel/jfs/t1/35970/17/16229/50128/62b57f5aEedce3be3/f77850d02f581624.png)\n\n在环境变量中添加路径：找到图标 “我的电脑”--右击--点击 ”属性“--找到 ”高级系统设置“并点击进入环境变量设置页；点击”环境变量“--系统变量框下 找到“Path”--编辑--新建--将刚才复制的adb路径粘贴上去\n\n![环境变量](https://m.360buyimg.com/babel/jfs/t1/34968/34/16246/66294/62b58029Efe52db27/3c84c1290f3a39df.png)\n\n3. 验证adb是否安装成功。\n\nwin+r 输入cmd启用cmd窗口后输入：adb version 若弹出adb版本信息则adb安装成功。\n\n![安装成功](https://m.360buyimg.com/babel/jfs/t1/217622/5/19070/33510/62b5811bE4b276d67/1adb59476cf2b3db.png)\n\n## 二.JDK安装\n\n1. 点击[下载链接](https://download.oracle.com/java/18/latest/jdk-18_windows-x64_bin.exe) 即可下载JDK（Windows版本）其余版本可在：[Java Downloads | Oracle](https://www.oracle.com/java/technologies/downloads/#jdk18-windows) 此页面下载。\n2. 下载好后双击安装\n\n![安装过程](https://m.360buyimg.com/babel/jfs/t1/224016/16/13063/82679/62b582ecE34b670db/65fc5763fac034ee.png)\n\n根据需求更改安装路径（需记住）：C:\\Program Files\\Java\\jdk1.8.0_202\\\n\n![安装路径](https://m.360buyimg.com/babel/jfs/t1/73197/27/20287/26502/62b58337E9b4aada3/ec12959677015922.png)\n\n3. 安装完成后，在系统环境变量中添加JDK路径。\n\n在系统变量中新增Java_Home变量，其值为刚刚的安装路径：C:\\Program Files\\Java\\jdk1.8.0_202\\\n\n![系统变量](https://m.360buyimg.com/babel/jfs/t1/25209/20/17164/41333/62b583dfE53b1f2cb/be25cd34f2fbcf46.png)\n\n然后双击系统变量中的Path变量添加如下两个值：\n\n%Java_Home%\\bin\n\n%Java_Home%\\jre\\bin\n\n![Path](https://m.360buyimg.com/babel/jfs/t1/194805/18/25873/32389/62b58466Edf252e47/32b820e84845ac46.png)\n\n3. 验证jdk是否安装成功。\n\nwin+r 输入cmd启用cmd窗口后输入：java -version 若弹出java版本信息则java安装成功。\n\n![安装成功](https://m.360buyimg.com/babel/jfs/t1/220338/3/20872/33982/62b585daE026e6fef/8b0313fb4166d714.png)\n\n## 三.git安装\n\n1. 点击 [下载链接](https://github.com/git-for-windows/git/releases/download/v2.36.1.windows.1/Git-2.36.1-64-bit.exe) 即可下载git（Windows版本），或前往([Git - Downloads (git-scm.com)](https://git-scm.com/downloads)) 下载其他版本\n\n2. 下载完成后双击打开一路next~~（不是）~~\n\n![安装步骤01](https://m.360buyimg.com/babel/jfs/t1/28240/39/17697/49484/62b5879cE17933744/c32143ea4b297e77.png)\n\n3. 配置环境变量 \n\n双击系统变量中的Path变量添加如下两个值（Git安装路径）：\n\nE:\\Program Files\\Git\n\nE:\\Program Files\\Git\\git-bash.exe\n\n![环境变量](https://m.360buyimg.com/babel/jfs/t1/36714/16/16257/30239/62b5890cEab9e3bff/b76c9706c23776bc.png)\n\n4. 查看是否安装成功\n\n打开 git bash 输入：git version（若出现版本号则证明安装成功）\n\n![安装成功](https://m.360buyimg.com/babel/jfs/t1/79345/1/19277/14474/62b58963E52b5d30f/af0006c312fac373.png)\n\n## 四.Xshell安装\n\n1. 点击 [下载链接](https://www.xshell.com/zh/downloading/?token=NV9aZnBRYkhnaFBLYXBPRWpMeWNJd0BDTW9sNWh4aE9nc3k2dm14cTJvMHhR) 即可下载Xshell个人免费版。\n2. 下载完成后点击安装。\n3. 个人安装时所遇到的问题：安装后点击打开，弹出以下窗口：应用程序无法正常启动(0xc000007b)，请单击确定关闭应用程序.\n4. 解决办法，点击 [下载链接](https://develope.lanzoug.com/file/?BmAHOQEwUmMDCgA4Cz5TP1FuBz8FHlM4VyJTMFJtWi8JUQIKXFNTYgguUGcHOlEiVSdUFFFgBmxQNlQ8XGMBZQZiBw8BGVJiAzwAIgs2Uz1RZQcrBXRTZlcqU3NSaFoyCWUCMFxeU24IOlA7B2RRY1U6VGRROAY2UGVUYFwmAWYGdQdtAW1SNANnAGALa1NrUTsHMQVoU3dXIFMlUjNaaQk5AmdcM1MoCG5QMAd8UWJVPVR+UTwGZVBjVDZcNwE4BjEHZgE+UjQDNgA0CztTZlE7BzMFa1NgV2hTY1JrWmoJbAJhXDlTMgg9UDYHZVEzVThUMFEgBjNQLVR0XHUBcwZjByIBNVJiA2gAZwtrU2tRPAc6BWtTZld2UyFSZ1o2CWwCM1w8UzYIaFAzB2VRYFU5VGRROwY2UGJUfFwuASYGYAc8AStSOwNkAGALalNkUTsHNAVuU2VXYlNtUihaLgl5AiJcPFM2CGhQMwdmUWhVOVRjUTsGM1BuVHRcdQFpBnYHbQFoUjUDewBnC2xTYFElBzAFb1NlV35TZ1I/Wmw=) 下载DirectX修复工具增强版，下载所需依赖。\n5. 修复完成后即可打开。\n\n## 五.记恢复电脑path环境变量方法.\n\n1. 在系统变量中看是否存在Path一项，如果被删除或者丢失，就可能不存在Path了。\n2. 丢失找回方法：\n3. 点击新建，变量名输入为：Path，变量值输入为C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common。再点击确定即可解决。\n\n![找回Path](https://m.360buyimg.com/babel/jfs/t1/17580/37/17684/44528/62b58b54Eeadc3bda/07524f2f1fc04971.png)\n\n\n\n","slug":"记第公司开发环境搭建","published":1,"updated":"2023-07-31T12:40:09.712Z","layout":"post","link":"","_id":"clktr4qsc004ozsa09iw6fh3y","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，您输入的密码错误，请检查后重新输入。\" data-whm=\"抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2226750b39d9aecf73ae1b4318eb1bf67190d7e55cc810d7e81295387a717869\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"cover":"linear-gradient(to top,#ff9a9e 0%,#fecfef 99%,#fecfef 100%)","excerpt":"这是机密文件！","more":"这是机密文件！","origin":"<h2 id=\"一-adb安装\"><a href=\"#一-adb安装\" class=\"headerlink\" title=\"一.adb安装\"></a>一.adb安装</h2><ol>\n<li><p>点击 <a href=\"https://dl.google.com/android/repository/platform-tools-latest-windows.zip?hl=zh-cn\">下载连接 </a>即可下载适用于Windows的SDK Platform-Tools.</p>\n</li>\n<li><p>下载完成后解压，然后添加路径到环境变量。</p>\n</li>\n</ol>\n<p><strong>解压路径为：D:\\EdgeDownloads\\platform-tools</strong>（保存下来）</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/35970/17/16229/50128/62b57f5aEedce3be3/f77850d02f581624.png\" alt=\"解压路径\"></p>\n<p>在环境变量中添加路径：找到图标 “我的电脑”–右击–点击 ”属性“–找到 ”高级系统设置“并点击进入环境变量设置页；点击”环境变量“–系统变量框下 找到“Path”–编辑–新建–将刚才复制的adb路径粘贴上去</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/34968/34/16246/66294/62b58029Efe52db27/3c84c1290f3a39df.png\" alt=\"环境变量\"></p>\n<ol start=\"3\">\n<li>验证adb是否安装成功。</li>\n</ol>\n<p>win+r 输入cmd启用cmd窗口后输入：adb version 若弹出adb版本信息则adb安装成功。</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/217622/5/19070/33510/62b5811bE4b276d67/1adb59476cf2b3db.png\" alt=\"安装成功\"></p>\n<h2 id=\"二-JDK安装\"><a href=\"#二-JDK安装\" class=\"headerlink\" title=\"二.JDK安装\"></a>二.JDK安装</h2><ol>\n<li>点击<a href=\"https://download.oracle.com/java/18/latest/jdk-18_windows-x64_bin.exe\">下载链接</a> 即可下载JDK（Windows版本）其余版本可在：<a href=\"https://www.oracle.com/java/technologies/downloads/#jdk18-windows\">Java Downloads | Oracle</a> 此页面下载。</li>\n<li>下载好后双击安装</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/224016/16/13063/82679/62b582ecE34b670db/65fc5763fac034ee.png\" alt=\"安装过程\"></p>\n<p>根据需求更改安装路径（需记住）：C:\\Program Files\\Java\\jdk1.8.0_202\\</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/73197/27/20287/26502/62b58337E9b4aada3/ec12959677015922.png\" alt=\"安装路径\"></p>\n<ol start=\"3\">\n<li>安装完成后，在系统环境变量中添加JDK路径。</li>\n</ol>\n<p>在系统变量中新增Java_Home变量，其值为刚刚的安装路径：C:\\Program Files\\Java\\jdk1.8.0_202\\</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/25209/20/17164/41333/62b583dfE53b1f2cb/be25cd34f2fbcf46.png\" alt=\"系统变量\"></p>\n<p>然后双击系统变量中的Path变量添加如下两个值：</p>\n<p>%Java_Home%\\bin</p>\n<p>%Java_Home%\\jre\\bin</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/194805/18/25873/32389/62b58466Edf252e47/32b820e84845ac46.png\" alt=\"Path\"></p>\n<ol start=\"3\">\n<li>验证jdk是否安装成功。</li>\n</ol>\n<p>win+r 输入cmd启用cmd窗口后输入：java -version 若弹出java版本信息则java安装成功。</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/220338/3/20872/33982/62b585daE026e6fef/8b0313fb4166d714.png\" alt=\"安装成功\"></p>\n<h2 id=\"三-git安装\"><a href=\"#三-git安装\" class=\"headerlink\" title=\"三.git安装\"></a>三.git安装</h2><ol>\n<li><p>点击 <a href=\"https://github.com/git-for-windows/git/releases/download/v2.36.1.windows.1/Git-2.36.1-64-bit.exe\">下载链接</a> 即可下载git（Windows版本），或前往(<a href=\"https://git-scm.com/downloads\">Git - Downloads (git-scm.com)</a>) 下载其他版本</p>\n</li>\n<li><p>下载完成后双击打开一路next<del>（不是）</del></p>\n</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/28240/39/17697/49484/62b5879cE17933744/c32143ea4b297e77.png\" alt=\"安装步骤01\"></p>\n<ol start=\"3\">\n<li>配置环境变量</li>\n</ol>\n<p>双击系统变量中的Path变量添加如下两个值（Git安装路径）：</p>\n<p>E:\\Program Files\\Git</p>\n<p>E:\\Program Files\\Git\\git-bash.exe</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/36714/16/16257/30239/62b5890cEab9e3bff/b76c9706c23776bc.png\" alt=\"环境变量\"></p>\n<ol start=\"4\">\n<li>查看是否安装成功</li>\n</ol>\n<p>打开 git bash 输入：git version（若出现版本号则证明安装成功）</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/79345/1/19277/14474/62b58963E52b5d30f/af0006c312fac373.png\" alt=\"安装成功\"></p>\n<h2 id=\"四-Xshell安装\"><a href=\"#四-Xshell安装\" class=\"headerlink\" title=\"四.Xshell安装\"></a>四.Xshell安装</h2><ol>\n<li>点击 <a href=\"https://www.xshell.com/zh/downloading/?token=NV9aZnBRYkhnaFBLYXBPRWpMeWNJd0BDTW9sNWh4aE9nc3k2dm14cTJvMHhR\">下载链接</a> 即可下载Xshell个人免费版。</li>\n<li>下载完成后点击安装。</li>\n<li>个人安装时所遇到的问题：安装后点击打开，弹出以下窗口：应用程序无法正常启动(0xc000007b)，请单击确定关闭应用程序.</li>\n<li>解决办法，点击 <a href=\"https://develope.lanzoug.com/file/?BmAHOQEwUmMDCgA4Cz5TP1FuBz8FHlM4VyJTMFJtWi8JUQIKXFNTYgguUGcHOlEiVSdUFFFgBmxQNlQ8XGMBZQZiBw8BGVJiAzwAIgs2Uz1RZQcrBXRTZlcqU3NSaFoyCWUCMFxeU24IOlA7B2RRY1U6VGRROAY2UGVUYFwmAWYGdQdtAW1SNANnAGALa1NrUTsHMQVoU3dXIFMlUjNaaQk5AmdcM1MoCG5QMAd8UWJVPVR+UTwGZVBjVDZcNwE4BjEHZgE+UjQDNgA0CztTZlE7BzMFa1NgV2hTY1JrWmoJbAJhXDlTMgg9UDYHZVEzVThUMFEgBjNQLVR0XHUBcwZjByIBNVJiA2gAZwtrU2tRPAc6BWtTZld2UyFSZ1o2CWwCM1w8UzYIaFAzB2VRYFU5VGRROwY2UGJUfFwuASYGYAc8AStSOwNkAGALalNkUTsHNAVuU2VXYlNtUihaLgl5AiJcPFM2CGhQMwdmUWhVOVRjUTsGM1BuVHRcdQFpBnYHbQFoUjUDewBnC2xTYFElBzAFb1NlV35TZ1I/Wmw=\">下载链接</a> 下载DirectX修复工具增强版，下载所需依赖。</li>\n<li>修复完成后即可打开。</li>\n</ol>\n<h2 id=\"五-记恢复电脑path环境变量方法\"><a href=\"#五-记恢复电脑path环境变量方法\" class=\"headerlink\" title=\"五.记恢复电脑path环境变量方法.\"></a>五.记恢复电脑path环境变量方法.</h2><ol>\n<li>在系统变量中看是否存在Path一项，如果被删除或者丢失，就可能不存在Path了。</li>\n<li>丢失找回方法：</li>\n<li>点击新建，变量名输入为：Path，变量值输入为C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common。再点击确定即可解决。</li>\n</ol>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/17580/37/17684/44528/62b58b54Eeadc3bda/07524f2f1fc04971.png\" alt=\"找回Path\"></p>\n","encrypt":true},{"title":"记第一次完成业务需求","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqpnzy1j21kw0w0wtu.jpg"],"password":"urovo","abstract":"这是机密文件！","abbrlink":"55cbdc7c","date":"2022-08-26T03:31:28.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 第一次完成业务需求\n\n### 业务需求\n\nSQ45C：系统上禁用4G网络。\n\nSQ51S：1.新增两个内置apk，apk见附件。 2.OS基于：SQ51S_EN_JANAM_WE__ DS __ R01 _ U _220310 _01\n\n### 一、拉代码\n\n```shell\n#连接服务器命令：\nssh 服务器 \n\n```\n\n- 拉取代码\n\n```bash\nrepo init -u ssh:服务器分支.repo/manifests -b 代码分支\n```\n\n<font color = \"red\"><strong> 拉代码要拉取dev分支下的代码。 </strong></font> \n\n- 同步代码\n\n```bash\n repo sync -c -j16\n```\n\n\n\n### 二、根据业务需求查找commit\n\n根据业务需求前往代码库查找，例如：禁用4G网络则在仓库搜索WIFIONLY\n\n![wifionly](https://m.360buyimg.com/babel/jfs/t1/203157/34/24925/43201/62babe01Eb19a86ec/f38419d34238ddac.png)\n\n---\n\n### 三、根据commit更改代码\n\n![更改代码](https://m.360buyimg.com/babel/jfs/t1/49492/3/19524/22657/62babeddE0b084ed1/683447184811e927.png)\n\n根据服务器上的提交来修改代码完成需求。\n\n### 四、编译代码\n\n```bash\n#编译命令 \nsource build/envsetup.sh 项目名称（比如SQ45C） && setenv && make update-api && make -j8 2>&1 |tee build.log\n```\n\n代码修改完成后进行编译。\n\n---\n\n### 五、刷机测试\n\n\n\n## 过程中遇到的问题\n\n### 拉代码时选错分支\n\n在拉取45c代码时，拉的是bsp分支的代码。\n\n#### 解决方法\n\n切换回dev分支。\n\n```bash\n #repo项目切换分支\n repo forall -c \"git clean -d -f;git reset --hard HEAD\" -j8\n repo init -u ssh:服务器分支 -b 代码分支\n repo sync -c -d -j8\n repo start 代码分支 --all\n```\n\n---\n\n### 刷机报错\n\n```shell\ngungleVersion\nSignature verification failed\nerror:21\n```\n\n#### 解决办法\n\n签名后重新刷入\n\n```shell\njava -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w vendor/urovo/security/PDA/urovo-none-signed/testkey.x509.pem vendor/urovo/security/PDA/urovo-none-signed/testkey.pk8 out/dist/full_k62_t2145eir_v1_ga_ybx_sq45c-ota-2112071830.zip out/dist/sq45c-ota.zip \n\njava -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w testkey.x509.pem<签名证书,保存这公钥> testkey.pk8<签名证书，保存着私钥> base.zip<签名前的os> target.zip<签名后的os>\n\n```\n\n### 无法开机\n\n签名后重新刷入，开机卡第一屏无法正常开机。\n\n#### 解决办法\n\n不使用adb sideload刷入，使用线刷工具刷入刷机包即可正常开机。\n\n### 小tips：\n\n```bash\n#使用vim xxx.java + 行号可以跳到指定行号。\nvim xxx.java + 行号\n```\n\n<font style=\"background:green\" font color = white><strong> 联发科的机器代码路径在：vendor\\mediatek\\proprietary\\packages\\apps\\MtkSettings\\src\\com\\android，修改代码时需注意代码路径。 </strong></font> \n\n---\n\n### 编译通过之后提交代码\n\n```bash\n#在已修改文件的上一级文件夹添加追踪，将文件放入暂存区\ngit add .\n\n#文件被追踪之后即可提交代码。\ngit commit\n\n#提交完代码后可以push到远端。\ngit push caf HEAD:refs/for/+分支路径\n#eg：\ngit push caf HEAD:refs/for/dev/mt6762/SQ45C/11.0.0-100.0.0\n```\n\n### 提交代码格式规范\n\n```bash\n#严格按照所给提示填写，#后面为提示文字\n#产品名称：\nProduct:\n#客户定制：通用为XX\nCustomer:\n#模块：一般填Other\nModule:\n#Bug ID(禅道对应Bug ID,可选)：一般填0000\nBug ID:\n#关键字：一般填修改的关键字\nKey Word:\n#详细描述:与上述一致\nDescription:\n\n\n# 请为您的变更输入提交说明。以 '#' 开始的行将被忽略，而一个空的提交\n# 说明将会终止提交。\n# 位于分支 master\n\n```\n\n![提交代码规范](https://m.360buyimg.com/babel/jfs/t1/19168/33/17319/56325/62be6536E0abbfdaa/78e0b5a553270528.png)\n\n---\n\n### UFS操作\n\n```bash\n#在要执行操作的文件下检出PDA_UFS\ngit checkout PDA_UFS \n\n#把文件pull下来\ngit pull\n\n#\n```\n\nufs参数：\n\n```bash\n#如果忘记了，执行./ufs.sh 即可重新查看\n./ufs.sh\n```\n\n![参数](https://m.360buyimg.com/babel/jfs/t1/26509/31/17694/29285/62be681eE0fc2a695/529f27b2653f482c.png)\n\nufs配置文件：\n\n```bash\n#├── etc\n#│   └── default_Settings_property.xml\n#├── media\n#│   ├── bootanimation.zip\n#│   └── logo.bin\n#└── ufs.prop\n\n#一般配置文件有：etc/default_Settings_property.xml\t此配置文件用于存放数据库信息还有别的一些杂七杂八的信息; etc/app_remove.txt,这里用于配置需要卸载的内置应用包名。\n#media/bootanimation.zip  &  media/logo.bin \t 此目录用于存放定制客户的开机动画。\n#ufs.prop\t\t\t\t\t\t\t\t\t\t 此文件用于存放用户的一些定制属性。\n```\n\n![配置文件](https://m.360buyimg.com/babel/jfs/t1/173612/14/24493/7379/62be68d6E0c6dcb38/25da6fe35a6b0b7f.png)\n\n---\n\n<font style=\"background:blue\" font color = white><strong> 当处理客户定制时，将客户所需的功能对应填写好配置文件。一切准备就绪后可在PDA_UFS根目录下执行.sh可执行文件，随后1-out目录下会生成一个ota更新包，可使用adb将更新包刷入设备。随后开机即可完成定制需求。 </strong></font> \n\n```bash\n#eg：./ufs.sh 0-commit/SQ45C/111 01 O SQ45C 111 false / 11 false\n#SQ45C is mtk project\n#jopenjdk version \"1.8.0_40\"\n#OpenJDK Runtime Environment (build 1.8.0_40-b25)\n#OpenJDK 64-Bit Server VM (build 25.40-b25, mixed mode)\n#CUSIDR: ---/home/ssd7/lcr_work/PDA_UFS/0-commit----- SQ45C/111_d\n#11.220630.01\n#==========================================================\n#Version: 111_V11.220630.01-220630\n#Signed: O\n#Output: SQ45C_O_111_XX_11.220630.01.zip\n#==========================================================\n#**********************************************************\n#...................................................\n#...................................................\n#...................................................\n#...................................................\n#...................................................\n#Tring to sign whole file...\n#================== Success ========================\n#Output: 1-out/SQ45C_O_111_XX_11.220630.01.zip\n#===================================================\n```\n\n- 有道离线词典[下载站](http://download.huzheng.org/zh_CN/)\n\n## 工作中遇到的一些小问题\n\n### adb连接不上设备\n\n1. 已确定驱动正常安装。\n2. 打开cmd命令行执行adb kill-server和adb start-server还是无法得到解决。输入 adb devices报错：\n\n```bash\n# 报错信息\n# * daemon not running. starting it now on port 5037 *\n# ADB server didn't ACK\n# * failed to start daemon *\n```\n\n3. 执行下列命令\n\n```bash\nadb nodaemon server\n#报错：出现下面错误\ncannot bind 'tcp:5037'\n```\n\n4. 查询哪个程序或进程占用了5037端口\n\n```bash\nnetstat -ano | findstr \"5037\"\n#如果5037被占用 会出现占用5037端口程序的一些信息\n  TCP    127.0.0.1:5037         0.0.0.0:0              LISTENING       15256\n  TCP    127.0.0.1:5037         127.0.0.1:58161        ESTABLISHED     15256\n  TCP    127.0.0.1:58161        127.0.0.1:5037         ESTABLISHED     1472\n```\n\n5. 找到占用5037端口的程序或进程之后就好办了，打开任务管理器，结束这个进程。然后再使用adb连接上设备就可以了。\n","source":"_posts/记第一次完成业务需求.md","raw":"---\ntitle: 记第一次完成业务需求\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqpnzy1j21kw0w0wtu.jpg'\ntags:\n  - git\n  - 随笔\npassword: urovo\nabstract: 这是机密文件！\nabbrlink: 55cbdc7c\ndate: 2022-08-26 11:31:28\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 第一次完成业务需求\n\n### 业务需求\n\nSQ45C：系统上禁用4G网络。\n\nSQ51S：1.新增两个内置apk，apk见附件。 2.OS基于：SQ51S_EN_JANAM_WE__ DS __ R01 _ U _220310 _01\n\n### 一、拉代码\n\n```shell\n#连接服务器命令：\nssh 服务器 \n\n```\n\n- 拉取代码\n\n```bash\nrepo init -u ssh:服务器分支.repo/manifests -b 代码分支\n```\n\n<font color = \"red\"><strong> 拉代码要拉取dev分支下的代码。 </strong></font> \n\n- 同步代码\n\n```bash\n repo sync -c -j16\n```\n\n\n\n### 二、根据业务需求查找commit\n\n根据业务需求前往代码库查找，例如：禁用4G网络则在仓库搜索WIFIONLY\n\n![wifionly](https://m.360buyimg.com/babel/jfs/t1/203157/34/24925/43201/62babe01Eb19a86ec/f38419d34238ddac.png)\n\n---\n\n### 三、根据commit更改代码\n\n![更改代码](https://m.360buyimg.com/babel/jfs/t1/49492/3/19524/22657/62babeddE0b084ed1/683447184811e927.png)\n\n根据服务器上的提交来修改代码完成需求。\n\n### 四、编译代码\n\n```bash\n#编译命令 \nsource build/envsetup.sh 项目名称（比如SQ45C） && setenv && make update-api && make -j8 2>&1 |tee build.log\n```\n\n代码修改完成后进行编译。\n\n---\n\n### 五、刷机测试\n\n\n\n## 过程中遇到的问题\n\n### 拉代码时选错分支\n\n在拉取45c代码时，拉的是bsp分支的代码。\n\n#### 解决方法\n\n切换回dev分支。\n\n```bash\n #repo项目切换分支\n repo forall -c \"git clean -d -f;git reset --hard HEAD\" -j8\n repo init -u ssh:服务器分支 -b 代码分支\n repo sync -c -d -j8\n repo start 代码分支 --all\n```\n\n---\n\n### 刷机报错\n\n```shell\ngungleVersion\nSignature verification failed\nerror:21\n```\n\n#### 解决办法\n\n签名后重新刷入\n\n```shell\njava -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w vendor/urovo/security/PDA/urovo-none-signed/testkey.x509.pem vendor/urovo/security/PDA/urovo-none-signed/testkey.pk8 out/dist/full_k62_t2145eir_v1_ga_ybx_sq45c-ota-2112071830.zip out/dist/sq45c-ota.zip \n\njava -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w testkey.x509.pem<签名证书,保存这公钥> testkey.pk8<签名证书，保存着私钥> base.zip<签名前的os> target.zip<签名后的os>\n\n```\n\n### 无法开机\n\n签名后重新刷入，开机卡第一屏无法正常开机。\n\n#### 解决办法\n\n不使用adb sideload刷入，使用线刷工具刷入刷机包即可正常开机。\n\n### 小tips：\n\n```bash\n#使用vim xxx.java + 行号可以跳到指定行号。\nvim xxx.java + 行号\n```\n\n<font style=\"background:green\" font color = white><strong> 联发科的机器代码路径在：vendor\\mediatek\\proprietary\\packages\\apps\\MtkSettings\\src\\com\\android，修改代码时需注意代码路径。 </strong></font> \n\n---\n\n### 编译通过之后提交代码\n\n```bash\n#在已修改文件的上一级文件夹添加追踪，将文件放入暂存区\ngit add .\n\n#文件被追踪之后即可提交代码。\ngit commit\n\n#提交完代码后可以push到远端。\ngit push caf HEAD:refs/for/+分支路径\n#eg：\ngit push caf HEAD:refs/for/dev/mt6762/SQ45C/11.0.0-100.0.0\n```\n\n### 提交代码格式规范\n\n```bash\n#严格按照所给提示填写，#后面为提示文字\n#产品名称：\nProduct:\n#客户定制：通用为XX\nCustomer:\n#模块：一般填Other\nModule:\n#Bug ID(禅道对应Bug ID,可选)：一般填0000\nBug ID:\n#关键字：一般填修改的关键字\nKey Word:\n#详细描述:与上述一致\nDescription:\n\n\n# 请为您的变更输入提交说明。以 '#' 开始的行将被忽略，而一个空的提交\n# 说明将会终止提交。\n# 位于分支 master\n\n```\n\n![提交代码规范](https://m.360buyimg.com/babel/jfs/t1/19168/33/17319/56325/62be6536E0abbfdaa/78e0b5a553270528.png)\n\n---\n\n### UFS操作\n\n```bash\n#在要执行操作的文件下检出PDA_UFS\ngit checkout PDA_UFS \n\n#把文件pull下来\ngit pull\n\n#\n```\n\nufs参数：\n\n```bash\n#如果忘记了，执行./ufs.sh 即可重新查看\n./ufs.sh\n```\n\n![参数](https://m.360buyimg.com/babel/jfs/t1/26509/31/17694/29285/62be681eE0fc2a695/529f27b2653f482c.png)\n\nufs配置文件：\n\n```bash\n#├── etc\n#│   └── default_Settings_property.xml\n#├── media\n#│   ├── bootanimation.zip\n#│   └── logo.bin\n#└── ufs.prop\n\n#一般配置文件有：etc/default_Settings_property.xml\t此配置文件用于存放数据库信息还有别的一些杂七杂八的信息; etc/app_remove.txt,这里用于配置需要卸载的内置应用包名。\n#media/bootanimation.zip  &  media/logo.bin \t 此目录用于存放定制客户的开机动画。\n#ufs.prop\t\t\t\t\t\t\t\t\t\t 此文件用于存放用户的一些定制属性。\n```\n\n![配置文件](https://m.360buyimg.com/babel/jfs/t1/173612/14/24493/7379/62be68d6E0c6dcb38/25da6fe35a6b0b7f.png)\n\n---\n\n<font style=\"background:blue\" font color = white><strong> 当处理客户定制时，将客户所需的功能对应填写好配置文件。一切准备就绪后可在PDA_UFS根目录下执行.sh可执行文件，随后1-out目录下会生成一个ota更新包，可使用adb将更新包刷入设备。随后开机即可完成定制需求。 </strong></font> \n\n```bash\n#eg：./ufs.sh 0-commit/SQ45C/111 01 O SQ45C 111 false / 11 false\n#SQ45C is mtk project\n#jopenjdk version \"1.8.0_40\"\n#OpenJDK Runtime Environment (build 1.8.0_40-b25)\n#OpenJDK 64-Bit Server VM (build 25.40-b25, mixed mode)\n#CUSIDR: ---/home/ssd7/lcr_work/PDA_UFS/0-commit----- SQ45C/111_d\n#11.220630.01\n#==========================================================\n#Version: 111_V11.220630.01-220630\n#Signed: O\n#Output: SQ45C_O_111_XX_11.220630.01.zip\n#==========================================================\n#**********************************************************\n#...................................................\n#...................................................\n#...................................................\n#...................................................\n#...................................................\n#Tring to sign whole file...\n#================== Success ========================\n#Output: 1-out/SQ45C_O_111_XX_11.220630.01.zip\n#===================================================\n```\n\n- 有道离线词典[下载站](http://download.huzheng.org/zh_CN/)\n\n## 工作中遇到的一些小问题\n\n### adb连接不上设备\n\n1. 已确定驱动正常安装。\n2. 打开cmd命令行执行adb kill-server和adb start-server还是无法得到解决。输入 adb devices报错：\n\n```bash\n# 报错信息\n# * daemon not running. starting it now on port 5037 *\n# ADB server didn't ACK\n# * failed to start daemon *\n```\n\n3. 执行下列命令\n\n```bash\nadb nodaemon server\n#报错：出现下面错误\ncannot bind 'tcp:5037'\n```\n\n4. 查询哪个程序或进程占用了5037端口\n\n```bash\nnetstat -ano | findstr \"5037\"\n#如果5037被占用 会出现占用5037端口程序的一些信息\n  TCP    127.0.0.1:5037         0.0.0.0:0              LISTENING       15256\n  TCP    127.0.0.1:5037         127.0.0.1:58161        ESTABLISHED     15256\n  TCP    127.0.0.1:58161        127.0.0.1:5037         ESTABLISHED     1472\n```\n\n5. 找到占用5037端口的程序或进程之后就好办了，打开任务管理器，结束这个进程。然后再使用adb连接上设备就可以了。\n","slug":"记第一次完成业务需求","published":1,"updated":"2023-07-31T12:40:09.710Z","layout":"post","link":"","_id":"clktr4qsd004szsa00dz224dm","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，您输入的密码错误，请检查后重新输入。\" data-whm=\"抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"5ff81624128f4da33b3fa55eca10d9676ad4312bfc251a045c7357e61272a3cd\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"cover":"linear-gradient(to top,#cfd9df 0%,#e2ebf0 100%)","excerpt":"这是机密文件！","more":"这是机密文件！","origin":"<h2 id=\"第一次完成业务需求\"><a href=\"#第一次完成业务需求\" class=\"headerlink\" title=\"第一次完成业务需求\"></a>第一次完成业务需求</h2><h3 id=\"业务需求\"><a href=\"#业务需求\" class=\"headerlink\" title=\"业务需求\"></a>业务需求</h3><p>SQ45C：系统上禁用4G网络。</p>\n<p>SQ51S：1.新增两个内置apk，apk见附件。 2.OS基于：SQ51S_EN_JANAM_WE__ DS __ R01 _ U _220310 _01</p>\n<h3 id=\"一、拉代码\"><a href=\"#一、拉代码\" class=\"headerlink\" title=\"一、拉代码\"></a>一、拉代码</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">连接服务器命令：</span></span><br><span class=\"line\">ssh 服务器 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repo init -u ssh:服务器分支.repo/manifests -b 代码分支</span><br></pre></td></tr></table></figure>\n\n<p><font color = \"red\"><strong> 拉代码要拉取dev分支下的代码。 </strong></font> </p>\n<ul>\n<li>同步代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repo <span class=\"built_in\">sync</span> -c -j16</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、根据业务需求查找commit\"><a href=\"#二、根据业务需求查找commit\" class=\"headerlink\" title=\"二、根据业务需求查找commit\"></a>二、根据业务需求查找commit</h3><p>根据业务需求前往代码库查找，例如：禁用4G网络则在仓库搜索WIFIONLY</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/203157/34/24925/43201/62babe01Eb19a86ec/f38419d34238ddac.png\" alt=\"wifionly\"></p>\n<hr>\n<h3 id=\"三、根据commit更改代码\"><a href=\"#三、根据commit更改代码\" class=\"headerlink\" title=\"三、根据commit更改代码\"></a>三、根据commit更改代码</h3><p><img src=\"https://m.360buyimg.com/babel/jfs/t1/49492/3/19524/22657/62babeddE0b084ed1/683447184811e927.png\" alt=\"更改代码\"></p>\n<p>根据服务器上的提交来修改代码完成需求。</p>\n<h3 id=\"四、编译代码\"><a href=\"#四、编译代码\" class=\"headerlink\" title=\"四、编译代码\"></a>四、编译代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#编译命令 </span></span><br><span class=\"line\"><span class=\"built_in\">source</span> build/envsetup.sh 项目名称（比如SQ45C） &amp;&amp; setenv &amp;&amp; make update-api &amp;&amp; make -j8 2&gt;&amp;1 |<span class=\"built_in\">tee</span> build.log</span><br></pre></td></tr></table></figure>\n\n<p>代码修改完成后进行编译。</p>\n<hr>\n<h3 id=\"五、刷机测试\"><a href=\"#五、刷机测试\" class=\"headerlink\" title=\"五、刷机测试\"></a>五、刷机测试</h3><h2 id=\"过程中遇到的问题\"><a href=\"#过程中遇到的问题\" class=\"headerlink\" title=\"过程中遇到的问题\"></a>过程中遇到的问题</h2><h3 id=\"拉代码时选错分支\"><a href=\"#拉代码时选错分支\" class=\"headerlink\" title=\"拉代码时选错分支\"></a>拉代码时选错分支</h3><p>在拉取45c代码时，拉的是bsp分支的代码。</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>切换回dev分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#repo项目切换分支</span></span><br><span class=\"line\">repo forall -c <span class=\"string\">&quot;git clean -d -f;git reset --hard HEAD&quot;</span> -j8</span><br><span class=\"line\">repo init -u ssh:服务器分支 -b 代码分支</span><br><span class=\"line\">repo <span class=\"built_in\">sync</span> -c -d -j8</span><br><span class=\"line\">repo start 代码分支 --all</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"刷机报错\"><a href=\"#刷机报错\" class=\"headerlink\" title=\"刷机报错\"></a>刷机报错</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gungleVersion</span><br><span class=\"line\">Signature verification failed</span><br><span class=\"line\">error:21</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>签名后重新刷入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w vendor/urovo/security/PDA/urovo-none-signed/testkey.x509.pem vendor/urovo/security/PDA/urovo-none-signed/testkey.pk8 out/dist/full_k62_t2145eir_v1_ga_ybx_sq45c-ota-2112071830.zip out/dist/sq45c-ota.zip </span><br><span class=\"line\"></span><br><span class=\"line\">java -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w testkey.x509.pem&lt;签名证书,保存这公钥&gt; testkey.pk8&lt;签名证书，保存着私钥&gt; base.zip&lt;签名前的os&gt; target.zip&lt;签名后的os&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无法开机\"><a href=\"#无法开机\" class=\"headerlink\" title=\"无法开机\"></a>无法开机</h3><p>签名后重新刷入，开机卡第一屏无法正常开机。</p>\n<h4 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>不使用adb sideload刷入，使用线刷工具刷入刷机包即可正常开机。</p>\n<h3 id=\"小tips：\"><a href=\"#小tips：\" class=\"headerlink\" title=\"小tips：\"></a>小tips：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用vim xxx.java + 行号可以跳到指定行号。</span></span><br><span class=\"line\">vim xxx.java + 行号</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"background:green\" font color = white><strong> 联发科的机器代码路径在：vendor\\mediatek\\proprietary\\packages\\apps\\MtkSettings\\src\\com\\android，修改代码时需注意代码路径。 </strong></font> </p>\n<hr>\n<h3 id=\"编译通过之后提交代码\"><a href=\"#编译通过之后提交代码\" class=\"headerlink\" title=\"编译通过之后提交代码\"></a>编译通过之后提交代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在已修改文件的上一级文件夹添加追踪，将文件放入暂存区</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件被追踪之后即可提交代码。</span></span><br><span class=\"line\">git commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#提交完代码后可以push到远端。</span></span><br><span class=\"line\">git push caf HEAD:refs/for/+分支路径</span><br><span class=\"line\"><span class=\"comment\">#eg：</span></span><br><span class=\"line\">git push caf HEAD:refs/for/dev/mt6762/SQ45C/11.0.0-100.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交代码格式规范\"><a href=\"#提交代码格式规范\" class=\"headerlink\" title=\"提交代码格式规范\"></a>提交代码格式规范</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#严格按照所给提示填写，#后面为提示文字</span></span><br><span class=\"line\"><span class=\"comment\">#产品名称：</span></span><br><span class=\"line\">Product:</span><br><span class=\"line\"><span class=\"comment\">#客户定制：通用为XX</span></span><br><span class=\"line\">Customer:</span><br><span class=\"line\"><span class=\"comment\">#模块：一般填Other</span></span><br><span class=\"line\">Module:</span><br><span class=\"line\"><span class=\"comment\">#Bug ID(禅道对应Bug ID,可选)：一般填0000</span></span><br><span class=\"line\">Bug ID:</span><br><span class=\"line\"><span class=\"comment\">#关键字：一般填修改的关键字</span></span><br><span class=\"line\">Key Word:</span><br><span class=\"line\"><span class=\"comment\">#详细描述:与上述一致</span></span><br><span class=\"line\">Description:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请为您的变更输入提交说明。以 &#x27;#&#x27; 开始的行将被忽略，而一个空的提交</span></span><br><span class=\"line\"><span class=\"comment\"># 说明将会终止提交。</span></span><br><span class=\"line\"><span class=\"comment\"># 位于分支 master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/19168/33/17319/56325/62be6536E0abbfdaa/78e0b5a553270528.png\" alt=\"提交代码规范\"></p>\n<hr>\n<h3 id=\"UFS操作\"><a href=\"#UFS操作\" class=\"headerlink\" title=\"UFS操作\"></a>UFS操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在要执行操作的文件下检出PDA_UFS</span></span><br><span class=\"line\">git checkout PDA_UFS </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#把文件pull下来</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>ufs参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果忘记了，执行./ufs.sh 即可重新查看</span></span><br><span class=\"line\">./ufs.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/26509/31/17694/29285/62be681eE0fc2a695/529f27b2653f482c.png\" alt=\"参数\"></p>\n<p>ufs配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#├── etc</span></span><br><span class=\"line\"><span class=\"comment\">#│   └── default_Settings_property.xml</span></span><br><span class=\"line\"><span class=\"comment\">#├── media</span></span><br><span class=\"line\"><span class=\"comment\">#│   ├── bootanimation.zip</span></span><br><span class=\"line\"><span class=\"comment\">#│   └── logo.bin</span></span><br><span class=\"line\"><span class=\"comment\">#└── ufs.prop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一般配置文件有：etc/default_Settings_property.xml\t此配置文件用于存放数据库信息还有别的一些杂七杂八的信息; etc/app_remove.txt,这里用于配置需要卸载的内置应用包名。</span></span><br><span class=\"line\"><span class=\"comment\">#media/bootanimation.zip  &amp;  media/logo.bin \t 此目录用于存放定制客户的开机动画。</span></span><br><span class=\"line\"><span class=\"comment\">#ufs.prop\t\t\t\t\t\t\t\t\t\t 此文件用于存放用户的一些定制属性。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/173612/14/24493/7379/62be68d6E0c6dcb38/25da6fe35a6b0b7f.png\" alt=\"配置文件\"></p>\n<hr>\n<p><font style=\"background:blue\" font color = white><strong> 当处理客户定制时，将客户所需的功能对应填写好配置文件。一切准备就绪后可在PDA_UFS根目录下执行.sh可执行文件，随后1-out目录下会生成一个ota更新包，可使用adb将更新包刷入设备。随后开机即可完成定制需求。 </strong></font> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#eg：./ufs.sh 0-commit/SQ45C/111 01 O SQ45C 111 false / 11 false</span></span><br><span class=\"line\"><span class=\"comment\">#SQ45C is mtk project</span></span><br><span class=\"line\"><span class=\"comment\">#jopenjdk version &quot;1.8.0_40&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#OpenJDK Runtime Environment (build 1.8.0_40-b25)</span></span><br><span class=\"line\"><span class=\"comment\">#OpenJDK 64-Bit Server VM (build 25.40-b25, mixed mode)</span></span><br><span class=\"line\"><span class=\"comment\">#CUSIDR: ---/home/ssd7/lcr_work/PDA_UFS/0-commit----- SQ45C/111_d</span></span><br><span class=\"line\"><span class=\"comment\">#11.220630.01</span></span><br><span class=\"line\"><span class=\"comment\">#==========================================================</span></span><br><span class=\"line\"><span class=\"comment\">#Version: 111_V11.220630.01-220630</span></span><br><span class=\"line\"><span class=\"comment\">#Signed: O</span></span><br><span class=\"line\"><span class=\"comment\">#Output: SQ45C_O_111_XX_11.220630.01.zip</span></span><br><span class=\"line\"><span class=\"comment\">#==========================================================</span></span><br><span class=\"line\"><span class=\"comment\">#**********************************************************</span></span><br><span class=\"line\"><span class=\"comment\">#...................................................</span></span><br><span class=\"line\"><span class=\"comment\">#...................................................</span></span><br><span class=\"line\"><span class=\"comment\">#...................................................</span></span><br><span class=\"line\"><span class=\"comment\">#...................................................</span></span><br><span class=\"line\"><span class=\"comment\">#...................................................</span></span><br><span class=\"line\"><span class=\"comment\">#Tring to sign whole file...</span></span><br><span class=\"line\"><span class=\"comment\">#================== Success ========================</span></span><br><span class=\"line\"><span class=\"comment\">#Output: 1-out/SQ45C_O_111_XX_11.220630.01.zip</span></span><br><span class=\"line\"><span class=\"comment\">#===================================================</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有道离线词典<a href=\"http://download.huzheng.org/zh_CN/\">下载站</a></li>\n</ul>\n<h2 id=\"工作中遇到的一些小问题\"><a href=\"#工作中遇到的一些小问题\" class=\"headerlink\" title=\"工作中遇到的一些小问题\"></a>工作中遇到的一些小问题</h2><h3 id=\"adb连接不上设备\"><a href=\"#adb连接不上设备\" class=\"headerlink\" title=\"adb连接不上设备\"></a>adb连接不上设备</h3><ol>\n<li>已确定驱动正常安装。</li>\n<li>打开cmd命令行执行adb kill-server和adb start-server还是无法得到解决。输入 adb devices报错：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 报错信息</span></span><br><span class=\"line\"><span class=\"comment\"># * daemon not running. starting it now on port 5037 *</span></span><br><span class=\"line\"><span class=\"comment\"># ADB server didn&#x27;t ACK</span></span><br><span class=\"line\"><span class=\"comment\"># * failed to start daemon *</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行下列命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb nodaemon server</span><br><span class=\"line\"><span class=\"comment\">#报错：出现下面错误</span></span><br><span class=\"line\">cannot <span class=\"built_in\">bind</span> <span class=\"string\">&#x27;tcp:5037&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查询哪个程序或进程占用了5037端口</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr <span class=\"string\">&quot;5037&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#如果5037被占用 会出现占用5037端口程序的一些信息</span></span><br><span class=\"line\">  TCP    127.0.0.1:5037         0.0.0.0:0              LISTENING       15256</span><br><span class=\"line\">  TCP    127.0.0.1:5037         127.0.0.1:58161        ESTABLISHED     15256</span><br><span class=\"line\">  TCP    127.0.0.1:58161        127.0.0.1:5037         ESTABLISHED     1472</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>找到占用5037端口的程序或进程之后就好办了，打开任务管理器，结束这个进程。然后再使用adb连接上设备就可以了。</li>\n</ol>\n","encrypt":true},{"title":"设计模式之创建者模式","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg"],"abbrlink":"f5bc3448","date":"2022-08-25T14:42:54.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## GOF23\n\n### 创建型模式\n\n- 单例模式\n- 工厂模式\n- 抽象工厂模式\n- 建造者模式\n- 原型模式\n\n### 结构性模式\n\n- 适配器模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n- 代理模式\n\n### 行为型模式\n\n- 模板方法模式\n- 命令模式\n- 迭代器模式\n- 观察者模式\n- 中介者模式\n- 备忘录模式\n- 解释器模式\n- 状态模式\n- 策略模式\n- 职责链模式\n- 访问者模式\n\n## 创建型模式\n\n### 单例模式\n\n#### 饿汉单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 16:44\n * @Description\n */\n//饿汉单例模式\npublic class Hungry {\n    //可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n    private byte[] data1 = new byte[1024*1024];\n    private byte[] data2 = new byte[1024*1024];\n    private byte[] data3 = new byte[1024*1024];\n    private byte[] data4 = new byte[1024*1024];\n\n    private Hungry(){\n\n    }\n\n    private final static Hungry HUNGRY = new Hungry();\n\n    public static Hungry getInstance(){\n        return HUNGRY;\n    }\n\n}\n```\n\n##### 存在的问题\n\n 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n\n---\n\n#### 懒汉式单例\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 10:10\n * @Description\n */\npublic class LazyMan {\n    // 1.构造器私有化\n    private LazyMan(){\n\n    }\n    // 2.实例化对象\n    private volatile static LazyMan lazyMan;            //给lazyMan加上volatile可以避免指令重排  保证其原子性操作。\n    //双重检测锁模式的  懒汉式单例   DLC懒汉式\n    public static LazyMan getInstance(){\n        if (lazyMan == null){\n            synchronized (LazyMan.class){\n                if (lazyMan == null){\n                    lazyMan = new LazyMan();            //不是一个原子性操作\n                    /**\n                     *    1.分配内存空间\n                     *    2.执行构造方法，初始化对象\n                     *    3.把这个对象指向这个空间\n                     *    就有可能会出现指令重排现象\n                     *\n                     *    正常：123\n                     *    异常：132\n                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值\n                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象\n                     *\n                     */\n                }\n            }\n        }\n\n        return lazyMan;\n    }\n}\n```\n\n##### 注意点\n\n1. 懒汉模式对象如果不加volatile就会出现指令重排。\n2. 而我们要保证其多线程安全，就需要加上双重锁\n\n```java\nsynchronized (LazyMan.class){\n    if (lazyMan == null){\n        lazyMan = new LazyMan();            //不是一个原子性操作\n    }\n```\n\n---\n\n#### 静态内部类\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:13\n * @Description\n */\npublic class Holder {\n    //1.构造器私有化\n    private Holder(){\n\n    }\n    //从静态内部类里返回HOLDER；\n    public static Holder getInstance(){\n        return InnerClass.HOLDER;\n    }\n    \n    //静态内部类\n    public static class InnerClass{\n        private static final Holder HOLDER = new Holder();\n    }\n}\n```\n\n---\n\n> 单例不安全，因为有反射。反射会破坏单例\n\n所以为了解决这个问题我们使用枚举来实现单例模式。\n\n#### 枚举单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:19\n * @Description\n */\npublic enum EnumSingle {\n    INSTANCE;\n    public EnumSingle getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n因为反射不能破解枚举，所以我们使用枚举来实现单例模式。\n\n---\n\n### 工厂模式\n\n#### 作用\n\n- 实现了创建者和调用者的分离\n- 详细分类：\n  - 简单工厂模式\n  - 工厂方法模式\n  - 抽象工厂模式\n- OOP七大原则\n  - 开闭原则：一个软件的实体应当对扩展开放，对修改关闭。\n  - 依赖倒转原则：要针对接口编程，不要针对实现编程。\n  - 迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。\n- 核心本质\n  - 实例化对象不适用new，用工厂方法代替\n  - 将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦\n- 三种模式：\n  - 简单工厂模式\n    - 用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）\n  - 工厂方法模式\n    - 用来生产同一等级结构中的固定产品（支持增加任意产品）\n  - 抽象工厂模式\n    - 围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。\n\n#### 简单工厂模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.simple;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n//        Car car = new WuLing();\n//        Car car1 = new Tesla();\n        Car car = CarFactory.getCar(\"五菱\");\n        Car car1 = CarFactory.getCar(\"特斯拉\");\n        car.name();\n        car1.name();\n\n    }\n    \n}\n\n/**\n * \n * public interface Car {\n *     void name();\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class Tesla implements Car{\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class CarFactory {\n *     //方法一\n *     public static Car getCar(String car){\n *         if (car.equals(\"五菱\")){\n *             return new WuLing();\n *         }else if (car.equals(\"特斯拉\")){\n *             return new Tesla();\n *         }else {\n *             return null;\n *         }\n *     }\n *     //方法二\n *     public static Car getWuLing(){\n *         return new WuLing();\n *     }\n *     public static Car getTesla(){\n *         return new Tesla();\n *     }\n *\n * }\n */\n```\n\n##### 弊端\n\n> 未实现开闭原则\n\n##### 实现结果\n\n![简单工厂模式](https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png)\n\n---\n\n#### 工厂方法模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.method;\n\nimport com.xiheya.factory.simple.CarFactory;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        Car car = new TeslaFactory().getCar();\n        car.name();\n        Car car1 = new WuLingFactory().getCar();\n        car1.name();\n        Car car2 = new DaZhongFactory().getCar();\n        car2.name();\n    }\n\n}\n\n/**\n * public interface Car {\n *     void name();\n * }\n * \n * public interface CarFactory {\n *     Car getCar();\n * }\n * \n * public class DaZhong implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"DaZhong!\");\n *     }\n * }\n * \n * public class DaZhongFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new DaZhong();\n *     }\n * }\n * \n * public class Tesla implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class TeslaFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new Tesla();\n *     }\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class WuLingFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new WuLing();\n *     }\n * }\n * \n *\n */\n```\n\n##### 弊端\n\n> 虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。\n\n##### 实现结果\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png)\n\n##### 流程图\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png)\n\n---\n\n#### 小结\n\n- 简单工厂模式（静态工厂模式）\n\n  - 虽然某种程度上不符合设计原则，但实际使用最多！\n\n- 工厂方法模式\n\n  - 不修改已有类的前提下，通过新的工厂类实现扩展\n\n- 抽象工厂模式\n\n  - 不可以增加产品，可以增加产品族！\n\n- 应用场景\n\n  - JDK中的Calendar的getInstance方法\n  - JDBC中的Connection对象的获取\n  - Spring中IOC容器创建管理bean对象\n  - 反射中Class对象的newInstance方法\n\n  ---\n\n#### 抽象工厂模式\n\n##### 定义\n\n- 定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类\n- 适用场景\n  - 客户端（应用层）不依赖于产品类实例如何被创建、实现的细节\n  - 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。\n  - 提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现\n- 优点\n  - 具体产品在应用层的代码隔离，无需关心创建的细节\n  - 将一个系列的产品统一到一起创建\n- 缺点\n  - 规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；\n  - 增加了系统的抽象性和理解难度。\n\n##### 代码\n\n```java\npackage com.xiheya.factory.abstract1;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:00\n * @Description\n */\npublic class Client {\n    public static void main(String[] args) {\n        System.out.println(\"==============小米系列产品================\");\n        XiaomiFactory xiaomiFactory = new XiaomiFactory();\n        IPhoneProduct xiaomi = xiaomiFactory.iphoneProduct();\n        xiaomi.callup();\n        xiaomi.sendSMS();\n        IRouterProduct xiaomiRouter = xiaomiFactory.irouterProduct();\n        xiaomiRouter.openWifi();\n        xiaomiRouter.setting();\n\n        System.out.println(\"==============华为系列产品================\");\n        HuaweiFactory huaweiFactory = new HuaweiFactory();\n        IPhoneProduct huawei = huaweiFactory.iphoneProduct();\n        huawei.callup();\n        huawei.sendSMS();\n        IRouterProduct huaweiRouter = huaweiFactory.irouterProduct();\n        huaweiRouter.openWifi();\n        huaweiRouter.setting();\n\n\n    }\n}\n\n\n/**\n * //抽象产品工厂\n * public interface IProductFactory {\n *     //生产手机\n *     IPhoneProduct iphoneProduct();\n *     //生产路由器\n *     IRouterProduct irouterProduct();\n * }\n * \n * //手机产品接口\n * public interface IPhoneProduct {\n *     void start();\n *     void shutdown();\n *     void callup();\n *     void sendSMS();\n * }\n * \n * //路由器产品接口\n * public interface IRouterProduct {\n *     void start();\n *     void shutdown();\n *     void openWifi();\n *     void setting();\n * }\n * \n * \n * //华为工厂\n * public class HuaweiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new HuaweiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new HuaweiRouter();\n *     }\n * }\n * \n * //华为手机\n * public class HuaweiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"Huawei  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"Huawei  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"Huawei   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"Huawei sendSMS\");\n *     }\n * }\n * \n * //华为路由器\n * public class HuaweiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动华为路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭华为路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"华为由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置华为路由器\");\n *     }\n * }\n * \n * //小米工厂\n * public class XiaomiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new XiaomiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new XiaomiRouter();\n *     }\n * }\n * \n * //小米手机\n * public class XiaomiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"xiaomi  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"xiaomi  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"xiaomi   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"xiaomi sendSMS\");\n *     }\n * }\n * \n * //小米路由器\n * public class XiaomiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动小米路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭小米路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"小米路由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置小米路由器\");\n *     }\n * }\n * \n */\n```\n\n##### 运行结果\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png)\n\n---\n\n### 建造者模式\n\n#### 定义\n\n- 建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。\n- 它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 主要作用\n\n在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。\n\n- 用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\n- 例子：\n  - 工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）\n  - 汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））\n\n#### 代码\n\n```java\npackage com.design_patterns.builder;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/19/ 15:15\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //新建一个指挥\n        Director director = new Director();\n        //指挥 工人盖房子\n        Product build = director.build(new Worker());\n        System.out.println(build.toString());\n\n    }\n}\n\n\n/**\n * //抽象的建造者方法：盖房子\n * public abstract class Builder {\n *\n *     abstract void builderA();               //地基\n *     abstract void builderB();               //钢筋工程\n *     abstract void builderC();               //铺电线\n *     abstract void builderD();               //粉刷\n *     //完工：得到产品\n *     abstract Product getProduct();\n * }\n * \n * public class Product {\n *     private String buildA;\n *     private String buildB;\n *     private String buildC;\n *     private String buildD;\n *\n *     public String getBuildA() {\n *         return buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return buildD;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         this.buildA = buildA;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         this.buildB = buildB;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         this.buildC = buildC;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         this.buildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"buildA='\" + buildA + '\\'' +\n *                 \", buildB='\" + buildB + '\\'' +\n *                 \", buildC='\" + buildC + '\\'' +\n *                 \", buildD='\" + buildD + '\\'' +\n *                 '}';\n *     }\n *\n * }\n * \n * //具体的建造者：工人\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();  //工人负责创建产品\n *     }\n *\n *     @Override\n *     void builderA() {\n *         product.setBuildA(\"打好了地基\");\n *         System.out.println(product.getBuildA());\n *     }\n *\n *     @Override\n *     void builderB() {\n *         product.setBuildB(\"铺好了钢筋\");\n *         System.out.println(product.getBuildB());\n *     }\n *\n *     @Override\n *     void builderC() {\n *         product.setBuildC(\"铺好了电线\");\n *         System.out.println(product.getBuildC());\n *     }\n *\n *     @Override\n *     void builderD() {\n *         product.setBuildD(\"粉好了墙壁\");\n *         System.out.println(product.getBuildD());\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n * \n * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。\n * public class Director {\n *\n * //    指挥工人建造房子\n *     public Product build(Builder builder){\n *         builder.builderA();\n *         builder.builderB();\n *         builder.builderC();\n *         builder.builderD();\n *         //建造完成后返回一个房子；\n *         return builder.getProduct();\n *     }\n * }\n * \n * \n */\n```\n\n#### 运行结果\n\n![建造者模式](https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png)\n\n---\n\n* 上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。\n* 通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。\n* 比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。\n\n#### 无指挥类的建造者模式\n\n##### 代码\n\n```java\npackage com.design_patterns.builder.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 20:54\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //服务员\n        Worker worker = new Worker();\n        //链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。\n        Product product = worker.buildA(\"炸鸡\").buildB(\"芬达\").getProduct();\n\n        System.out.println(product.toString());\n    }\n}\n/**\n * //建造者\n * public abstract class Builder {\n *     abstract Builder buildA(String msg);  //汉堡\n *     abstract Builder buildB(String msg);  //薯条\n *     abstract Builder buildC(String msg);  //可乐\n *     abstract Builder buildD(String msg);  //甜点\n *\n *     abstract Product getProduct();\n * }\n *\n * public class Product {\n *     private String BuildA = \"汉堡\";\n *     private String BuildB = \"可乐\";\n *     private String BuildC = \"薯条\";\n *     private String BuildD = \"甜点\";\n *\n *     public String getBuildA() {\n *         return BuildA;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         BuildA = buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return BuildB;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         BuildB = buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return BuildC;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         BuildC = buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return BuildD;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         BuildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"BuildA='\" + BuildA + '\\'' +\n *                 \", BuildB='\" + BuildB + '\\'' +\n *                 \", BuildC='\" + BuildC + '\\'' +\n *                 \", BuildD='\" + BuildD + '\\'' +\n *                 '}';\n *     }\n * }\n *\n * //具体的建造者\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();\n *     }\n *\n *     @Override\n *     Builder buildA(String msg) {\n *         product.setBuildA(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildB(String msg) {\n *         product.setBuildB(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildC(String msg) {\n *         product.setBuildC(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildD(String msg) {\n *         product.setBuildD(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n *\n */\n```\n\n##### 运行结果\n\n![建造者模式2](https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。\n- 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.\n- 具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”\n\n##### 缺点\n\n- 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。\n- 如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。\n\n#### 应用场景\n\n- 需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。\n- 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、\n- 适合于一个具有较多的零件（属性）的产品（对象）的创建过程。\n\n#### 建造者与抽象工厂模式的比较\n\n- 与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。\n- 在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。\n- 如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。\n\n---\n\n### 原型模式\n\n#### 实现步骤\n\n1. 实现一个接口：Cloneable;\n2. 重写一个方法：clone();\n3. 主要用于：Spring Bean：单例模式，原型模式\n4. 原型模式+工厂模式 ===> new <=> 原型模式\n\n#### 浅克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo01;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         return super.clone();\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![原型模式](https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png)\n\n---\n\n#### 深克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo02;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         Object obj = super.clone();\n *         //深克隆，序列化与反序列化\n *         Video v = (Video) obj;\n *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化\n *         return obj;\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![深克隆模式](https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png)\n\n---\n\n#### 浅克隆与深克隆对比\n\n1. 浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。\n2. 深克隆：克隆出来的对象会把原型的属性也克隆出来。\n\n![对比](https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png)\n\n---\n\n","source":"_posts/设计模式之创建者模式.md","raw":"---\ntitle: 设计模式之创建者模式\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg'\ntags:\n  - Java\n  - 设计模式\nabbrlink: f5bc3448\ndate: 2022-08-25 22:42:54\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## GOF23\n\n### 创建型模式\n\n- 单例模式\n- 工厂模式\n- 抽象工厂模式\n- 建造者模式\n- 原型模式\n\n### 结构性模式\n\n- 适配器模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n- 代理模式\n\n### 行为型模式\n\n- 模板方法模式\n- 命令模式\n- 迭代器模式\n- 观察者模式\n- 中介者模式\n- 备忘录模式\n- 解释器模式\n- 状态模式\n- 策略模式\n- 职责链模式\n- 访问者模式\n\n## 创建型模式\n\n### 单例模式\n\n#### 饿汉单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/15/ 16:44\n * @Description\n */\n//饿汉单例模式\npublic class Hungry {\n    //可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n    private byte[] data1 = new byte[1024*1024];\n    private byte[] data2 = new byte[1024*1024];\n    private byte[] data3 = new byte[1024*1024];\n    private byte[] data4 = new byte[1024*1024];\n\n    private Hungry(){\n\n    }\n\n    private final static Hungry HUNGRY = new Hungry();\n\n    public static Hungry getInstance(){\n        return HUNGRY;\n    }\n\n}\n```\n\n##### 存在的问题\n\n 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。\n\n---\n\n#### 懒汉式单例\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 10:10\n * @Description\n */\npublic class LazyMan {\n    // 1.构造器私有化\n    private LazyMan(){\n\n    }\n    // 2.实例化对象\n    private volatile static LazyMan lazyMan;            //给lazyMan加上volatile可以避免指令重排  保证其原子性操作。\n    //双重检测锁模式的  懒汉式单例   DLC懒汉式\n    public static LazyMan getInstance(){\n        if (lazyMan == null){\n            synchronized (LazyMan.class){\n                if (lazyMan == null){\n                    lazyMan = new LazyMan();            //不是一个原子性操作\n                    /**\n                     *    1.分配内存空间\n                     *    2.执行构造方法，初始化对象\n                     *    3.把这个对象指向这个空间\n                     *    就有可能会出现指令重排现象\n                     *\n                     *    正常：123\n                     *    异常：132\n                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值\n                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象\n                     *\n                     */\n                }\n            }\n        }\n\n        return lazyMan;\n    }\n}\n```\n\n##### 注意点\n\n1. 懒汉模式对象如果不加volatile就会出现指令重排。\n2. 而我们要保证其多线程安全，就需要加上双重锁\n\n```java\nsynchronized (LazyMan.class){\n    if (lazyMan == null){\n        lazyMan = new LazyMan();            //不是一个原子性操作\n    }\n```\n\n---\n\n#### 静态内部类\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:13\n * @Description\n */\npublic class Holder {\n    //1.构造器私有化\n    private Holder(){\n\n    }\n    //从静态内部类里返回HOLDER；\n    public static Holder getInstance(){\n        return InnerClass.HOLDER;\n    }\n    \n    //静态内部类\n    public static class InnerClass{\n        private static final Holder HOLDER = new Holder();\n    }\n}\n```\n\n---\n\n> 单例不安全，因为有反射。反射会破坏单例\n\n所以为了解决这个问题我们使用枚举来实现单例模式。\n\n#### 枚举单例模式\n\n##### 代码\n\n```java\npackage com.xiheya.single;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:19\n * @Description\n */\npublic enum EnumSingle {\n    INSTANCE;\n    public EnumSingle getInstance(){\n        return INSTANCE;\n    }\n}\n```\n\n因为反射不能破解枚举，所以我们使用枚举来实现单例模式。\n\n---\n\n### 工厂模式\n\n#### 作用\n\n- 实现了创建者和调用者的分离\n- 详细分类：\n  - 简单工厂模式\n  - 工厂方法模式\n  - 抽象工厂模式\n- OOP七大原则\n  - 开闭原则：一个软件的实体应当对扩展开放，对修改关闭。\n  - 依赖倒转原则：要针对接口编程，不要针对实现编程。\n  - 迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。\n- 核心本质\n  - 实例化对象不适用new，用工厂方法代替\n  - 将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦\n- 三种模式：\n  - 简单工厂模式\n    - 用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）\n  - 工厂方法模式\n    - 用来生产同一等级结构中的固定产品（支持增加任意产品）\n  - 抽象工厂模式\n    - 围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。\n\n#### 简单工厂模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.simple;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n//        Car car = new WuLing();\n//        Car car1 = new Tesla();\n        Car car = CarFactory.getCar(\"五菱\");\n        Car car1 = CarFactory.getCar(\"特斯拉\");\n        car.name();\n        car1.name();\n\n    }\n    \n}\n\n/**\n * \n * public interface Car {\n *     void name();\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class Tesla implements Car{\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class CarFactory {\n *     //方法一\n *     public static Car getCar(String car){\n *         if (car.equals(\"五菱\")){\n *             return new WuLing();\n *         }else if (car.equals(\"特斯拉\")){\n *             return new Tesla();\n *         }else {\n *             return null;\n *         }\n *     }\n *     //方法二\n *     public static Car getWuLing(){\n *         return new WuLing();\n *     }\n *     public static Car getTesla(){\n *         return new Tesla();\n *     }\n *\n * }\n */\n```\n\n##### 弊端\n\n> 未实现开闭原则\n\n##### 实现结果\n\n![简单工厂模式](https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png)\n\n---\n\n#### 工厂方法模式\n\n##### 代码\n\n```java\npackage com.xiheya.factory.method;\n\nimport com.xiheya.factory.simple.CarFactory;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 15:39\n * @Description\n */\npublic class Consumer {\n    public static void main(String[] args) {\n        Car car = new TeslaFactory().getCar();\n        car.name();\n        Car car1 = new WuLingFactory().getCar();\n        car1.name();\n        Car car2 = new DaZhongFactory().getCar();\n        car2.name();\n    }\n\n}\n\n/**\n * public interface Car {\n *     void name();\n * }\n * \n * public interface CarFactory {\n *     Car getCar();\n * }\n * \n * public class DaZhong implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"DaZhong!\");\n *     }\n * }\n * \n * public class DaZhongFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new DaZhong();\n *     }\n * }\n * \n * public class Tesla implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"Tesla!\");\n *     }\n * }\n * \n * public class TeslaFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new Tesla();\n *     }\n * }\n * \n * public class WuLing implements Car {\n *     @Override\n *     public void name() {\n *         System.out.println(\"wuling\");\n *     }\n * }\n * \n * public class WuLingFactory implements CarFactory{\n *     @Override\n *     public Car getCar() {\n *         return new WuLing();\n *     }\n * }\n * \n *\n */\n```\n\n##### 弊端\n\n> 虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。\n\n##### 实现结果\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png)\n\n##### 流程图\n\n![工厂方法模式](https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png)\n\n---\n\n#### 小结\n\n- 简单工厂模式（静态工厂模式）\n\n  - 虽然某种程度上不符合设计原则，但实际使用最多！\n\n- 工厂方法模式\n\n  - 不修改已有类的前提下，通过新的工厂类实现扩展\n\n- 抽象工厂模式\n\n  - 不可以增加产品，可以增加产品族！\n\n- 应用场景\n\n  - JDK中的Calendar的getInstance方法\n  - JDBC中的Connection对象的获取\n  - Spring中IOC容器创建管理bean对象\n  - 反射中Class对象的newInstance方法\n\n  ---\n\n#### 抽象工厂模式\n\n##### 定义\n\n- 定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类\n- 适用场景\n  - 客户端（应用层）不依赖于产品类实例如何被创建、实现的细节\n  - 强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。\n  - 提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现\n- 优点\n  - 具体产品在应用层的代码隔离，无需关心创建的细节\n  - 将一个系列的产品统一到一起创建\n- 缺点\n  - 规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；\n  - 增加了系统的抽象性和理解难度。\n\n##### 代码\n\n```java\npackage com.xiheya.factory.abstract1;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/16/ 17:00\n * @Description\n */\npublic class Client {\n    public static void main(String[] args) {\n        System.out.println(\"==============小米系列产品================\");\n        XiaomiFactory xiaomiFactory = new XiaomiFactory();\n        IPhoneProduct xiaomi = xiaomiFactory.iphoneProduct();\n        xiaomi.callup();\n        xiaomi.sendSMS();\n        IRouterProduct xiaomiRouter = xiaomiFactory.irouterProduct();\n        xiaomiRouter.openWifi();\n        xiaomiRouter.setting();\n\n        System.out.println(\"==============华为系列产品================\");\n        HuaweiFactory huaweiFactory = new HuaweiFactory();\n        IPhoneProduct huawei = huaweiFactory.iphoneProduct();\n        huawei.callup();\n        huawei.sendSMS();\n        IRouterProduct huaweiRouter = huaweiFactory.irouterProduct();\n        huaweiRouter.openWifi();\n        huaweiRouter.setting();\n\n\n    }\n}\n\n\n/**\n * //抽象产品工厂\n * public interface IProductFactory {\n *     //生产手机\n *     IPhoneProduct iphoneProduct();\n *     //生产路由器\n *     IRouterProduct irouterProduct();\n * }\n * \n * //手机产品接口\n * public interface IPhoneProduct {\n *     void start();\n *     void shutdown();\n *     void callup();\n *     void sendSMS();\n * }\n * \n * //路由器产品接口\n * public interface IRouterProduct {\n *     void start();\n *     void shutdown();\n *     void openWifi();\n *     void setting();\n * }\n * \n * \n * //华为工厂\n * public class HuaweiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new HuaweiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new HuaweiRouter();\n *     }\n * }\n * \n * //华为手机\n * public class HuaweiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"Huawei  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"Huawei  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"Huawei   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"Huawei sendSMS\");\n *     }\n * }\n * \n * //华为路由器\n * public class HuaweiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动华为路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭华为路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"华为由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置华为路由器\");\n *     }\n * }\n * \n * //小米工厂\n * public class XiaomiFactory implements IProductFactory{\n *     @Override\n *     public IPhoneProduct iphoneProduct() {\n *         return new XiaomiPhone();\n *     }\n *\n *     @Override\n *     public IRouterProduct irouterProduct() {\n *         return new XiaomiRouter();\n *     }\n * }\n * \n * //小米手机\n * public class XiaomiPhone implements IPhoneProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"xiaomi  start\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"xiaomi  shutdown\");\n *     }\n *\n *     @Override\n *     public void callup() {\n *         System.out.println(\"xiaomi   callup\");\n *     }\n *\n *     @Override\n *     public void sendSMS() {\n *         System.out.println(\"xiaomi sendSMS\");\n *     }\n * }\n * \n * //小米路由器\n * public class XiaomiRouter implements IRouterProduct{\n *     @Override\n *     public void start() {\n *         System.out.println(\"启动小米路由器\");\n *     }\n *\n *     @Override\n *     public void shutdown() {\n *         System.out.println(\"关闭小米路由器\");\n *     }\n *\n *     @Override\n *     public void openWifi() {\n *         System.out.println(\"小米路由器打开WiFi\");\n *     }\n *\n *     @Override\n *     public void setting() {\n *         System.out.println(\"配置小米路由器\");\n *     }\n * }\n * \n */\n```\n\n##### 运行结果\n\n![运行结果](https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png)\n\n##### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png)\n\n---\n\n### 建造者模式\n\n#### 定义\n\n- 建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。\n- 它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 主要作用\n\n在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。\n\n- 用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）\n- 例子：\n  - 工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）\n  - 汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））\n\n#### 代码\n\n```java\npackage com.design_patterns.builder;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/19/ 15:15\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //新建一个指挥\n        Director director = new Director();\n        //指挥 工人盖房子\n        Product build = director.build(new Worker());\n        System.out.println(build.toString());\n\n    }\n}\n\n\n/**\n * //抽象的建造者方法：盖房子\n * public abstract class Builder {\n *\n *     abstract void builderA();               //地基\n *     abstract void builderB();               //钢筋工程\n *     abstract void builderC();               //铺电线\n *     abstract void builderD();               //粉刷\n *     //完工：得到产品\n *     abstract Product getProduct();\n * }\n * \n * public class Product {\n *     private String buildA;\n *     private String buildB;\n *     private String buildC;\n *     private String buildD;\n *\n *     public String getBuildA() {\n *         return buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return buildD;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         this.buildA = buildA;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         this.buildB = buildB;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         this.buildC = buildC;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         this.buildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"buildA='\" + buildA + '\\'' +\n *                 \", buildB='\" + buildB + '\\'' +\n *                 \", buildC='\" + buildC + '\\'' +\n *                 \", buildD='\" + buildD + '\\'' +\n *                 '}';\n *     }\n *\n * }\n * \n * //具体的建造者：工人\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();  //工人负责创建产品\n *     }\n *\n *     @Override\n *     void builderA() {\n *         product.setBuildA(\"打好了地基\");\n *         System.out.println(product.getBuildA());\n *     }\n *\n *     @Override\n *     void builderB() {\n *         product.setBuildB(\"铺好了钢筋\");\n *         System.out.println(product.getBuildB());\n *     }\n *\n *     @Override\n *     void builderC() {\n *         product.setBuildC(\"铺好了电线\");\n *         System.out.println(product.getBuildC());\n *     }\n *\n *     @Override\n *     void builderD() {\n *         product.setBuildD(\"粉好了墙壁\");\n *         System.out.println(product.getBuildD());\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n * \n * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。\n * public class Director {\n *\n * //    指挥工人建造房子\n *     public Product build(Builder builder){\n *         builder.builderA();\n *         builder.builderB();\n *         builder.builderC();\n *         builder.builderD();\n *         //建造完成后返回一个房子；\n *         return builder.getProduct();\n *     }\n * }\n * \n * \n */\n```\n\n#### 运行结果\n\n![建造者模式](https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png)\n\n---\n\n* 上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。\n* 通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。\n* 比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。\n\n#### 无指挥类的建造者模式\n\n##### 代码\n\n```java\npackage com.design_patterns.builder.demo02;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 20:54\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //服务员\n        Worker worker = new Worker();\n        //链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。\n        Product product = worker.buildA(\"炸鸡\").buildB(\"芬达\").getProduct();\n\n        System.out.println(product.toString());\n    }\n}\n/**\n * //建造者\n * public abstract class Builder {\n *     abstract Builder buildA(String msg);  //汉堡\n *     abstract Builder buildB(String msg);  //薯条\n *     abstract Builder buildC(String msg);  //可乐\n *     abstract Builder buildD(String msg);  //甜点\n *\n *     abstract Product getProduct();\n * }\n *\n * public class Product {\n *     private String BuildA = \"汉堡\";\n *     private String BuildB = \"可乐\";\n *     private String BuildC = \"薯条\";\n *     private String BuildD = \"甜点\";\n *\n *     public String getBuildA() {\n *         return BuildA;\n *     }\n *\n *     public void setBuildA(String buildA) {\n *         BuildA = buildA;\n *     }\n *\n *     public String getBuildB() {\n *         return BuildB;\n *     }\n *\n *     public void setBuildB(String buildB) {\n *         BuildB = buildB;\n *     }\n *\n *     public String getBuildC() {\n *         return BuildC;\n *     }\n *\n *     public void setBuildC(String buildC) {\n *         BuildC = buildC;\n *     }\n *\n *     public String getBuildD() {\n *         return BuildD;\n *     }\n *\n *     public void setBuildD(String buildD) {\n *         BuildD = buildD;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Product{\" +\n *                 \"BuildA='\" + BuildA + '\\'' +\n *                 \", BuildB='\" + BuildB + '\\'' +\n *                 \", BuildC='\" + BuildC + '\\'' +\n *                 \", BuildD='\" + BuildD + '\\'' +\n *                 '}';\n *     }\n * }\n *\n * //具体的建造者\n * public class Worker extends Builder{\n *     private Product product;\n *\n *     public Worker() {\n *         product = new Product();\n *     }\n *\n *     @Override\n *     Builder buildA(String msg) {\n *         product.setBuildA(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildB(String msg) {\n *         product.setBuildB(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildC(String msg) {\n *         product.setBuildC(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Builder buildD(String msg) {\n *         product.setBuildD(msg);\n *         return this;\n *     }\n *\n *     @Override\n *     Product getProduct() {\n *         return product;\n *     }\n * }\n *\n */\n```\n\n##### 运行结果\n\n![建造者模式2](https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。\n- 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.\n- 具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”\n\n##### 缺点\n\n- 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。\n- 如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。\n\n#### 应用场景\n\n- 需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。\n- 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、\n- 适合于一个具有较多的零件（属性）的产品（对象）的创建过程。\n\n#### 建造者与抽象工厂模式的比较\n\n- 与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。\n- 在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。\n- 如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。\n\n---\n\n### 原型模式\n\n#### 实现步骤\n\n1. 实现一个接口：Cloneable;\n2. 重写一个方法：clone();\n3. 主要用于：Spring Bean：单例模式，原型模式\n4. 原型模式+工厂模式 ===> new <=> 原型模式\n\n#### 浅克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo01;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         return super.clone();\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![原型模式](https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png)\n\n---\n\n#### 深克隆模式\n\n##### 代码\n\n```java\npackage com.design_patterns.prototype.demo02;\n\nimport java.util.Date;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 21:29\n * @Description\n */\n//客户端\npublic class Bilibili {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        //原型对象 v1\n        Date date = new Date();\n        Video v1 = new Video(\"xiheya\",date);\n        //克隆对象 v2\n        Video v2 =(Video) v1.clone();\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n        date.setTime(123456);\n        System.out.println(\"v1-->\" + v1);\n        System.out.println(\"v1:hashcode-->\" + v1.hashCode());\n        System.out.println(\"v2-->\" + v2);\n        System.out.println(\"v2:hashcode-->\" + v2.hashCode());\n        System.out.println(\"====================================\");\n    }\n}\n/**\n * //原型模式的实现：\n * // 1.实现一个接口：Cloneable;\n * // 2.重写一个方法：clone();\n * // Video\n * public class Video implements Cloneable{\n *     private String name;\n *     private Date creatTime;\n *\n *     @Override\n *     protected Object clone() throws CloneNotSupportedException {\n *         Object obj = super.clone();\n *         //深克隆，序列化与反序列化\n *         Video v = (Video) obj;\n *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化\n *         return obj;\n *     }\n *\n *     public Video() {\n *     }\n *\n *     public Video(String name, Date creatTime) {\n *         this.name = name;\n *         this.creatTime = creatTime;\n *     }\n *\n *     public String getName() {\n *         return name;\n *     }\n *\n *     public void setName(String name) {\n *         this.name = name;\n *     }\n *\n *     public Date getCreatTime() {\n *         return creatTime;\n *     }\n *\n *     public void setCreatTime(Date creatTime) {\n *         this.creatTime = creatTime;\n *     }\n *\n *     @Override\n *     public String toString() {\n *         return \"Video{\" +\n *                 \"name='\" + name + '\\'' +\n *                 \", creatTime=\" + creatTime +\n *                 '}';\n *     }\n * }\n */\n```\n\n##### 结果\n\n![深克隆模式](https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png)\n\n---\n\n#### 浅克隆与深克隆对比\n\n1. 浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。\n2. 深克隆：克隆出来的对象会把原型的属性也克隆出来。\n\n![对比](https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png)\n\n---\n\n","slug":"设计模式之创建者模式","published":1,"updated":"2023-07-31T12:40:09.719Z","layout":"post","link":"","_id":"clktr4qsd004uzsa0evc9ch71","content":"<h2 id=\"GOF23\"><a href=\"#GOF23\" class=\"headerlink\" title=\"GOF23\"></a>GOF23</h2><h3 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h3><ul>\n<li>单例模式</li>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n</ul>\n<h3 id=\"结构性模式\"><a href=\"#结构性模式\" class=\"headerlink\" title=\"结构性模式\"></a>结构性模式</h3><ul>\n<li>适配器模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><ul>\n<li>模板方法模式</li>\n<li>命令模式</li>\n<li>迭代器模式</li>\n<li>观察者模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>解释器模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>职责链模式</li>\n<li>访问者模式</li>\n</ul>\n<h2 id=\"创建型模式-1\"><a href=\"#创建型模式-1\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><h4 id=\"饿汉单例模式\"><a href=\"#饿汉单例模式\" class=\"headerlink\" title=\"饿汉单例模式\"></a>饿汉单例模式</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/15/ 16:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//饿汉单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hungry</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data1 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data2 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data3 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data4 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Hungry</span> <span class=\"variable\">HUNGRY</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hungry</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hungry <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HUNGRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h5><p> 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</p>\n<hr>\n<h4 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 10:10</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构造器私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;            <span class=\"comment\">//给lazyMan加上volatile可以避免指令重排  保证其原子性操作。</span></span><br><span class=\"line\">    <span class=\"comment\">//双重检测锁模式的  懒汉式单例   DLC懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyMan == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lazyMan == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();            <span class=\"comment\">//不是一个原子性操作</span></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     *    1.分配内存空间</span></span><br><span class=\"line\"><span class=\"comment\">                     *    2.执行构造方法，初始化对象</span></span><br><span class=\"line\"><span class=\"comment\">                     *    3.把这个对象指向这个空间</span></span><br><span class=\"line\"><span class=\"comment\">                     *    就有可能会出现指令重排现象</span></span><br><span class=\"line\"><span class=\"comment\">                     *</span></span><br><span class=\"line\"><span class=\"comment\">                     *    正常：123</span></span><br><span class=\"line\"><span class=\"comment\">                     *    异常：132</span></span><br><span class=\"line\"><span class=\"comment\">                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值</span></span><br><span class=\"line\"><span class=\"comment\">                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象</span></span><br><span class=\"line\"><span class=\"comment\">                     *</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><ol>\n<li>懒汉模式对象如果不加volatile就会出现指令重排。</li>\n<li>而我们要保证其多线程安全，就需要加上双重锁</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lazyMan == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();            <span class=\"comment\">//不是一个原子性操作</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><h5 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:13</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Holder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.构造器私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Holder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从静态内部类里返回HOLDER；</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Holder <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.HOLDER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Holder</span> <span class=\"variable\">HOLDER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Holder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>单例不安全，因为有反射。反射会破坏单例</p>\n</blockquote>\n<p>所以为了解决这个问题我们使用枚举来实现单例模式。</p>\n<h4 id=\"枚举单例模式\"><a href=\"#枚举单例模式\" class=\"headerlink\" title=\"枚举单例模式\"></a>枚举单例模式</h4><h5 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:19</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">EnumSingle</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> EnumSingle <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为反射不能破解枚举，所以我们使用枚举来实现单例模式。</p>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>实现了创建者和调用者的分离</li>\n<li>详细分类：<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n</li>\n<li>OOP七大原则<ul>\n<li>开闭原则：一个软件的实体应当对扩展开放，对修改关闭。</li>\n<li>依赖倒转原则：要针对接口编程，不要针对实现编程。</li>\n<li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。</li>\n</ul>\n</li>\n<li>核心本质<ul>\n<li>实例化对象不适用new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</li>\n</ul>\n</li>\n<li>三种模式：<ul>\n<li>简单工厂模式<ul>\n<li>用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）</li>\n</ul>\n</li>\n<li>工厂方法模式<ul>\n<li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li>\n</ul>\n</li>\n<li>抽象工厂模式<ul>\n<li>围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><h5 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.factory.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Car car = new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\">//        Car car1 = new Tesla();</span></span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> CarFactory.getCar(<span class=\"string\">&quot;五菱&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car1</span> <span class=\"operator\">=</span> CarFactory.getCar(<span class=\"string\">&quot;特斯拉&quot;</span>);</span><br><span class=\"line\">        car.name();</span><br><span class=\"line\">        car1.name();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public interface Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void name();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class WuLing implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Tesla implements Car&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class CarFactory &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //方法一</span></span><br><span class=\"line\"><span class=\"comment\"> *     public static Car getCar(String car)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         if (car.equals(&quot;五菱&quot;))&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *             return new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#125;else if (car.equals(&quot;特斯拉&quot;))&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *             return new Tesla();</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#125;else &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *             return null;</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //方法二</span></span><br><span class=\"line\"><span class=\"comment\"> *     public static Car getWuLing()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public static Car getTesla()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new Tesla();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>未实现开闭原则</p>\n</blockquote>\n<h5 id=\"实现结果\"><a href=\"#实现结果\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png\" alt=\"简单工厂模式\"></p>\n<h5 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png\" alt=\"流程图\"></p>\n<hr>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><h5 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.factory.method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.factory.simple.CarFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TeslaFactory</span>().getCar();</span><br><span class=\"line\">        car.name();</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WuLingFactory</span>().getCar();</span><br><span class=\"line\">        car1.name();</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DaZhongFactory</span>().getCar();</span><br><span class=\"line\">        car2.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void name();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public interface CarFactory &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     Car getCar();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class DaZhong implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;DaZhong!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class DaZhongFactory implements CarFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public Car getCar() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new DaZhong();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Tesla implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class TeslaFactory implements CarFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public Car getCar() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new Tesla();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class WuLing implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class WuLingFactory implements CarFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public Car getCar() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"弊端-1\"><a href=\"#弊端-1\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。</p>\n</blockquote>\n<h5 id=\"实现结果-1\"><a href=\"#实现结果-1\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png\" alt=\"工厂方法模式\"></p>\n<h5 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png\" alt=\"工厂方法模式\"></p>\n<hr>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><p>简单工厂模式（静态工厂模式）</p>\n<ul>\n<li>虽然某种程度上不符合设计原则，但实际使用最多！</li>\n</ul>\n</li>\n<li><p>工厂方法模式</p>\n<ul>\n<li>不修改已有类的前提下，通过新的工厂类实现扩展</li>\n</ul>\n</li>\n<li><p>抽象工厂模式</p>\n<ul>\n<li>不可以增加产品，可以增加产品族！</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li>JDK中的Calendar的getInstance方法</li>\n<li>JDBC中的Connection对象的获取</li>\n<li>Spring中IOC容器创建管理bean对象</li>\n<li>反射中Class对象的newInstance方法</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><ul>\n<li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类</li>\n<li>适用场景<ul>\n<li>客户端（应用层）不依赖于产品类实例如何被创建、实现的细节</li>\n<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li>\n<li>提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>\n</ul>\n</li>\n<li>优点<ul>\n<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>\n<li>将一个系列的产品统一到一起创建</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li>\n<li>增加了系统的抽象性和理解难度。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.factory.abstract1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:00</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==============小米系列产品================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">XiaomiFactory</span> <span class=\"variable\">xiaomiFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">IPhoneProduct</span> <span class=\"variable\">xiaomi</span> <span class=\"operator\">=</span> xiaomiFactory.iphoneProduct();</span><br><span class=\"line\">        xiaomi.callup();</span><br><span class=\"line\">        xiaomi.sendSMS();</span><br><span class=\"line\">        <span class=\"type\">IRouterProduct</span> <span class=\"variable\">xiaomiRouter</span> <span class=\"operator\">=</span> xiaomiFactory.irouterProduct();</span><br><span class=\"line\">        xiaomiRouter.openWifi();</span><br><span class=\"line\">        xiaomiRouter.setting();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==============华为系列产品================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">HuaweiFactory</span> <span class=\"variable\">huaweiFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">IPhoneProduct</span> <span class=\"variable\">huawei</span> <span class=\"operator\">=</span> huaweiFactory.iphoneProduct();</span><br><span class=\"line\">        huawei.callup();</span><br><span class=\"line\">        huawei.sendSMS();</span><br><span class=\"line\">        <span class=\"type\">IRouterProduct</span> <span class=\"variable\">huaweiRouter</span> <span class=\"operator\">=</span> huaweiFactory.irouterProduct();</span><br><span class=\"line\">        huaweiRouter.openWifi();</span><br><span class=\"line\">        huaweiRouter.setting();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //抽象产品工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface IProductFactory &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //生产手机</span></span><br><span class=\"line\"><span class=\"comment\"> *     IPhoneProduct iphoneProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> *     //生产路由器</span></span><br><span class=\"line\"><span class=\"comment\"> *     IRouterProduct irouterProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //手机产品接口</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface IPhoneProduct &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void start();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void shutdown();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void callup();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void sendSMS();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //路由器产品接口</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface IRouterProduct &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void start();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void shutdown();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void openWifi();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void setting();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //华为工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * public class HuaweiFactory implements IProductFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new HuaweiPhone();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new HuaweiRouter();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //华为手机</span></span><br><span class=\"line\"><span class=\"comment\"> * public class HuaweiPhone implements IPhoneProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei  start&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei  shutdown&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void callup() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei   callup&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void sendSMS() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei sendSMS&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //华为路由器</span></span><br><span class=\"line\"><span class=\"comment\"> * public class HuaweiRouter implements IRouterProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;启动华为路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;关闭华为路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void openWifi() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;华为由器打开WiFi&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setting() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;配置华为路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //小米工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * public class XiaomiFactory implements IProductFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new XiaomiPhone();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new XiaomiRouter();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //小米手机</span></span><br><span class=\"line\"><span class=\"comment\"> * public class XiaomiPhone implements IPhoneProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi  start&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi  shutdown&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void callup() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi   callup&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void sendSMS() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi sendSMS&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //小米路由器</span></span><br><span class=\"line\"><span class=\"comment\"> * public class XiaomiRouter implements IRouterProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;启动小米路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;关闭小米路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void openWifi() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;小米路由器打开WiFi&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setting() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;配置小米路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png\" alt=\"运行结果\"></p>\n<h5 id=\"流程图-2\"><a href=\"#流程图-2\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。</li>\n<li>它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</li>\n</ul>\n<h4 id=\"主要作用\"><a href=\"#主要作用\" class=\"headerlink\" title=\"主要作用\"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p>\n<ul>\n<li>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li>\n<li>例子：<ul>\n<li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li>\n<li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/19/ 15:15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建一个指挥</span></span><br><span class=\"line\">        <span class=\"type\">Director</span> <span class=\"variable\">director</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Director</span>();</span><br><span class=\"line\">        <span class=\"comment\">//指挥 工人盖房子</span></span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">build</span> <span class=\"operator\">=</span> director.build(<span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>());</span><br><span class=\"line\">        System.out.println(build.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //抽象的建造者方法：盖房子</span></span><br><span class=\"line\"><span class=\"comment\"> * public abstract class Builder &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderA();               //地基</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderB();               //钢筋工程</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderC();               //铺电线</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderD();               //粉刷</span></span><br><span class=\"line\"><span class=\"comment\"> *     //完工：得到产品</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Product getProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Product &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildB() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildC() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildD() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildA = buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildB = buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildC = buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildD = buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Product&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;buildA=&#x27;&quot; + buildA + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, buildB=&#x27;&quot; + buildB + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, buildC=&#x27;&quot; + buildC + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, buildD=&#x27;&quot; + buildD + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //具体的建造者：工人</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Worker extends Builder&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Product product;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Worker() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product = new Product();  //工人负责创建产品</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildA(&quot;打好了地基&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildA());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderB() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildB(&quot;铺好了钢筋&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildB());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderC() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildC(&quot;铺好了电线&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildC());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderD() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildD(&quot;粉好了墙壁&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildD());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Product getProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return product;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Director &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * //    指挥工人建造房子</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Product build(Builder builder)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderA();</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderB();</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderC();</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderD();</span></span><br><span class=\"line\"><span class=\"comment\"> *         //建造完成后返回一个房子；</span></span><br><span class=\"line\"><span class=\"comment\"> *         return builder.getProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png\" alt=\"建造者模式\"></p>\n<hr>\n<ul>\n<li>上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</li>\n<li>通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。</li>\n<li>比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</li>\n</ul>\n<h4 id=\"无指挥类的建造者模式\"><a href=\"#无指挥类的建造者模式\" class=\"headerlink\" title=\"无指挥类的建造者模式\"></a>无指挥类的建造者模式</h4><h5 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.builder.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 20:54</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//服务员</span></span><br><span class=\"line\">        <span class=\"type\">Worker</span> <span class=\"variable\">worker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>();</span><br><span class=\"line\">        <span class=\"comment\">//链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。</span></span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> worker.buildA(<span class=\"string\">&quot;炸鸡&quot;</span>).buildB(<span class=\"string\">&quot;芬达&quot;</span>).getProduct();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(product.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * public abstract class Builder &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildA(String msg);  //汉堡</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildB(String msg);  //薯条</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildC(String msg);  //可乐</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildD(String msg);  //甜点</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Product getProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Product &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildA = &quot;汉堡&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildB = &quot;可乐&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildC = &quot;薯条&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildD = &quot;甜点&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildA = buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildB() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildB = buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildC() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildC = buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildD() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildD = buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Product&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;BuildA=&#x27;&quot; + BuildA + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, BuildB=&#x27;&quot; + BuildB + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, BuildC=&#x27;&quot; + BuildC + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, BuildD=&#x27;&quot; + BuildD + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * //具体的建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Worker extends Builder&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Product product;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Worker() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product = new Product();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildA(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildA(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildB(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildB(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildC(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildC(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildD(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildD(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Product getProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return product;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png\" alt=\"建造者模式2\"></p>\n<hr>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li>\n<li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.</li>\n<li>具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。</li>\n<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。</li>\n</ul>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、</li>\n<li>适合于一个具有较多的零件（属性）的产品（对象）的创建过程。</li>\n</ul>\n<h4 id=\"建造者与抽象工厂模式的比较\"><a href=\"#建造者与抽象工厂模式的比较\" class=\"headerlink\" title=\"建造者与抽象工厂模式的比较\"></a>建造者与抽象工厂模式的比较</h4><ul>\n<li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li>\n<li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li>\n<li>如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</li>\n</ul>\n<hr>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><ol>\n<li>实现一个接口：Cloneable;</li>\n<li>重写一个方法：clone();</li>\n<li>主要用于：Spring Bean：单例模式，原型模式</li>\n<li>原型模式+工厂模式 &#x3D;&#x3D;&#x3D;&gt; new &lt;&#x3D;&gt; 原型模式</li>\n</ol>\n<h4 id=\"浅克隆模式\"><a href=\"#浅克隆模式\" class=\"headerlink\" title=\"浅克隆模式\"></a>浅克隆模式</h4><h5 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.prototype.demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bilibili</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//原型对象 v1</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Video</span>(<span class=\"string\">&quot;xiheya&quot;</span>,date);</span><br><span class=\"line\">        <span class=\"comment\">//克隆对象 v2</span></span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span>(Video) v1.clone();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">        date.setTime(<span class=\"number\">123456</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //原型模式的实现：</span></span><br><span class=\"line\"><span class=\"comment\"> * // 1.实现一个接口：Cloneable;</span></span><br><span class=\"line\"><span class=\"comment\"> * // 2.重写一个方法：clone();</span></span><br><span class=\"line\"><span class=\"comment\"> * // Video</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Video implements Cloneable&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Date creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return super.clone();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getName() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setName(String name) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Date getCreatTime() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Video&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png\" alt=\"原型模式\"></p>\n<hr>\n<h4 id=\"深克隆模式\"><a href=\"#深克隆模式\" class=\"headerlink\" title=\"深克隆模式\"></a>深克隆模式</h4><h5 id=\"代码-10\"><a href=\"#代码-10\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.prototype.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bilibili</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//原型对象 v1</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Video</span>(<span class=\"string\">&quot;xiheya&quot;</span>,date);</span><br><span class=\"line\">        <span class=\"comment\">//克隆对象 v2</span></span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span>(Video) v1.clone();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">        date.setTime(<span class=\"number\">123456</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //原型模式的实现：</span></span><br><span class=\"line\"><span class=\"comment\"> * // 1.实现一个接口：Cloneable;</span></span><br><span class=\"line\"><span class=\"comment\"> * // 2.重写一个方法：clone();</span></span><br><span class=\"line\"><span class=\"comment\"> * // Video</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Video implements Cloneable&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Date creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         Object obj = super.clone();</span></span><br><span class=\"line\"><span class=\"comment\"> *         //深克隆，序列化与反序列化</span></span><br><span class=\"line\"><span class=\"comment\"> *         Video v = (Video) obj;</span></span><br><span class=\"line\"><span class=\"comment\"> *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化</span></span><br><span class=\"line\"><span class=\"comment\"> *         return obj;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getName() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setName(String name) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Date getCreatTime() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Video&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png\" alt=\"深克隆模式\"></p>\n<hr>\n<h4 id=\"浅克隆与深克隆对比\"><a href=\"#浅克隆与深克隆对比\" class=\"headerlink\" title=\"浅克隆与深克隆对比\"></a>浅克隆与深克隆对比</h4><ol>\n<li>浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。</li>\n<li>深克隆：克隆出来的对象会把原型的属性也克隆出来。</li>\n</ol>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png\" alt=\"对比\"></p>\n<hr>\n","site":{"data":{}},"cover":"linear-gradient(120deg,#a6c0fe 0%,#f68084 100%)","excerpt":"","more":"<h2 id=\"GOF23\"><a href=\"#GOF23\" class=\"headerlink\" title=\"GOF23\"></a>GOF23</h2><h3 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h3><ul>\n<li>单例模式</li>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>原型模式</li>\n</ul>\n<h3 id=\"结构性模式\"><a href=\"#结构性模式\" class=\"headerlink\" title=\"结构性模式\"></a>结构性模式</h3><ul>\n<li>适配器模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<h3 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h3><ul>\n<li>模板方法模式</li>\n<li>命令模式</li>\n<li>迭代器模式</li>\n<li>观察者模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>解释器模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>职责链模式</li>\n<li>访问者模式</li>\n</ul>\n<h2 id=\"创建型模式-1\"><a href=\"#创建型模式-1\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><h4 id=\"饿汉单例模式\"><a href=\"#饿汉单例模式\" class=\"headerlink\" title=\"饿汉单例模式\"></a>饿汉单例模式</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/15/ 16:44</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//饿汉单例模式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hungry</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data1 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data2 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data3 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">byte</span>[] data4 = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Hungry</span> <span class=\"variable\">HUNGRY</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hungry</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hungry <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HUNGRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h5><p> 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</p>\n<hr>\n<h4 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 10:10</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构造器私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;            <span class=\"comment\">//给lazyMan加上volatile可以避免指令重排  保证其原子性操作。</span></span><br><span class=\"line\">    <span class=\"comment\">//双重检测锁模式的  懒汉式单例   DLC懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyMan == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lazyMan == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();            <span class=\"comment\">//不是一个原子性操作</span></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     *    1.分配内存空间</span></span><br><span class=\"line\"><span class=\"comment\">                     *    2.执行构造方法，初始化对象</span></span><br><span class=\"line\"><span class=\"comment\">                     *    3.把这个对象指向这个空间</span></span><br><span class=\"line\"><span class=\"comment\">                     *    就有可能会出现指令重排现象</span></span><br><span class=\"line\"><span class=\"comment\">                     *</span></span><br><span class=\"line\"><span class=\"comment\">                     *    正常：123</span></span><br><span class=\"line\"><span class=\"comment\">                     *    异常：132</span></span><br><span class=\"line\"><span class=\"comment\">                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值</span></span><br><span class=\"line\"><span class=\"comment\">                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象</span></span><br><span class=\"line\"><span class=\"comment\">                     *</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h5><ol>\n<li>懒汉模式对象如果不加volatile就会出现指令重排。</li>\n<li>而我们要保证其多线程安全，就需要加上双重锁</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lazyMan == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();            <span class=\"comment\">//不是一个原子性操作</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><h5 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:13</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Holder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.构造器私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Holder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从静态内部类里返回HOLDER；</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Holder <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.HOLDER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//静态内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InnerClass</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Holder</span> <span class=\"variable\">HOLDER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Holder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>单例不安全，因为有反射。反射会破坏单例</p>\n</blockquote>\n<p>所以为了解决这个问题我们使用枚举来实现单例模式。</p>\n<h4 id=\"枚举单例模式\"><a href=\"#枚举单例模式\" class=\"headerlink\" title=\"枚举单例模式\"></a>枚举单例模式</h4><h5 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.single;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:19</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">EnumSingle</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> EnumSingle <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为反射不能破解枚举，所以我们使用枚举来实现单例模式。</p>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>实现了创建者和调用者的分离</li>\n<li>详细分类：<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n</li>\n<li>OOP七大原则<ul>\n<li>开闭原则：一个软件的实体应当对扩展开放，对修改关闭。</li>\n<li>依赖倒转原则：要针对接口编程，不要针对实现编程。</li>\n<li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。</li>\n</ul>\n</li>\n<li>核心本质<ul>\n<li>实例化对象不适用new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</li>\n</ul>\n</li>\n<li>三种模式：<ul>\n<li>简单工厂模式<ul>\n<li>用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）</li>\n</ul>\n</li>\n<li>工厂方法模式<ul>\n<li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li>\n</ul>\n</li>\n<li>抽象工厂模式<ul>\n<li>围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><h5 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.factory.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        Car car = new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\">//        Car car1 = new Tesla();</span></span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> CarFactory.getCar(<span class=\"string\">&quot;五菱&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car1</span> <span class=\"operator\">=</span> CarFactory.getCar(<span class=\"string\">&quot;特斯拉&quot;</span>);</span><br><span class=\"line\">        car.name();</span><br><span class=\"line\">        car1.name();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public interface Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void name();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class WuLing implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Tesla implements Car&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class CarFactory &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //方法一</span></span><br><span class=\"line\"><span class=\"comment\"> *     public static Car getCar(String car)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         if (car.equals(&quot;五菱&quot;))&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *             return new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#125;else if (car.equals(&quot;特斯拉&quot;))&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *             return new Tesla();</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#125;else &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *             return null;</span></span><br><span class=\"line\"><span class=\"comment\"> *         &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //方法二</span></span><br><span class=\"line\"><span class=\"comment\"> *     public static Car getWuLing()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public static Car getTesla()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new Tesla();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"弊端\"><a href=\"#弊端\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>未实现开闭原则</p>\n</blockquote>\n<h5 id=\"实现结果\"><a href=\"#实现结果\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png\" alt=\"简单工厂模式\"></p>\n<h5 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png\" alt=\"流程图\"></p>\n<hr>\n<h4 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h4><h5 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.factory.method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xiheya.factory.simple.CarFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TeslaFactory</span>().getCar();</span><br><span class=\"line\">        car.name();</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WuLingFactory</span>().getCar();</span><br><span class=\"line\">        car1.name();</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DaZhongFactory</span>().getCar();</span><br><span class=\"line\">        car2.name();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void name();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public interface CarFactory &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     Car getCar();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class DaZhong implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;DaZhong!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class DaZhongFactory implements CarFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public Car getCar() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new DaZhong();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Tesla implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class TeslaFactory implements CarFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public Car getCar() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new Tesla();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class WuLing implements Car &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void name() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class WuLingFactory implements CarFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public Car getCar() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new WuLing();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"弊端-1\"><a href=\"#弊端-1\" class=\"headerlink\" title=\"弊端\"></a>弊端</h5><blockquote>\n<p>虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。</p>\n</blockquote>\n<h5 id=\"实现结果-1\"><a href=\"#实现结果-1\" class=\"headerlink\" title=\"实现结果\"></a>实现结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png\" alt=\"工厂方法模式\"></p>\n<h5 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png\" alt=\"工厂方法模式\"></p>\n<hr>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><p>简单工厂模式（静态工厂模式）</p>\n<ul>\n<li>虽然某种程度上不符合设计原则，但实际使用最多！</li>\n</ul>\n</li>\n<li><p>工厂方法模式</p>\n<ul>\n<li>不修改已有类的前提下，通过新的工厂类实现扩展</li>\n</ul>\n</li>\n<li><p>抽象工厂模式</p>\n<ul>\n<li>不可以增加产品，可以增加产品族！</li>\n</ul>\n</li>\n<li><p>应用场景</p>\n<ul>\n<li>JDK中的Calendar的getInstance方法</li>\n<li>JDBC中的Connection对象的获取</li>\n<li>Spring中IOC容器创建管理bean对象</li>\n<li>反射中Class对象的newInstance方法</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h4 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><ul>\n<li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类</li>\n<li>适用场景<ul>\n<li>客户端（应用层）不依赖于产品类实例如何被创建、实现的细节</li>\n<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li>\n<li>提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li>\n</ul>\n</li>\n<li>优点<ul>\n<li>具体产品在应用层的代码隔离，无需关心创建的细节</li>\n<li>将一个系列的产品统一到一起创建</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li>\n<li>增加了系统的抽象性和理解难度。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xiheya.factory.abstract1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/16/ 17:00</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==============小米系列产品================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">XiaomiFactory</span> <span class=\"variable\">xiaomiFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">IPhoneProduct</span> <span class=\"variable\">xiaomi</span> <span class=\"operator\">=</span> xiaomiFactory.iphoneProduct();</span><br><span class=\"line\">        xiaomi.callup();</span><br><span class=\"line\">        xiaomi.sendSMS();</span><br><span class=\"line\">        <span class=\"type\">IRouterProduct</span> <span class=\"variable\">xiaomiRouter</span> <span class=\"operator\">=</span> xiaomiFactory.irouterProduct();</span><br><span class=\"line\">        xiaomiRouter.openWifi();</span><br><span class=\"line\">        xiaomiRouter.setting();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==============华为系列产品================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">HuaweiFactory</span> <span class=\"variable\">huaweiFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">IPhoneProduct</span> <span class=\"variable\">huawei</span> <span class=\"operator\">=</span> huaweiFactory.iphoneProduct();</span><br><span class=\"line\">        huawei.callup();</span><br><span class=\"line\">        huawei.sendSMS();</span><br><span class=\"line\">        <span class=\"type\">IRouterProduct</span> <span class=\"variable\">huaweiRouter</span> <span class=\"operator\">=</span> huaweiFactory.irouterProduct();</span><br><span class=\"line\">        huaweiRouter.openWifi();</span><br><span class=\"line\">        huaweiRouter.setting();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //抽象产品工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface IProductFactory &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //生产手机</span></span><br><span class=\"line\"><span class=\"comment\"> *     IPhoneProduct iphoneProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> *     //生产路由器</span></span><br><span class=\"line\"><span class=\"comment\"> *     IRouterProduct irouterProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //手机产品接口</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface IPhoneProduct &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void start();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void shutdown();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void callup();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void sendSMS();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //路由器产品接口</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface IRouterProduct &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     void start();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void shutdown();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void openWifi();</span></span><br><span class=\"line\"><span class=\"comment\"> *     void setting();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //华为工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * public class HuaweiFactory implements IProductFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new HuaweiPhone();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new HuaweiRouter();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //华为手机</span></span><br><span class=\"line\"><span class=\"comment\"> * public class HuaweiPhone implements IPhoneProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei  start&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei  shutdown&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void callup() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei   callup&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void sendSMS() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;Huawei sendSMS&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //华为路由器</span></span><br><span class=\"line\"><span class=\"comment\"> * public class HuaweiRouter implements IRouterProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;启动华为路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;关闭华为路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void openWifi() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;华为由器打开WiFi&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setting() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;配置华为路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //小米工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * public class XiaomiFactory implements IProductFactory&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new XiaomiPhone();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return new XiaomiRouter();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //小米手机</span></span><br><span class=\"line\"><span class=\"comment\"> * public class XiaomiPhone implements IPhoneProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi  start&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi  shutdown&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void callup() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi   callup&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void sendSMS() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;xiaomi sendSMS&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //小米路由器</span></span><br><span class=\"line\"><span class=\"comment\"> * public class XiaomiRouter implements IRouterProduct&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void start() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;启动小米路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void shutdown() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;关闭小米路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void openWifi() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;小米路由器打开WiFi&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setting() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;配置小米路由器&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png\" alt=\"运行结果\"></p>\n<h5 id=\"流程图-2\"><a href=\"#流程图-2\" class=\"headerlink\" title=\"流程图\"></a>流程图</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。</li>\n<li>它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</li>\n</ul>\n<h4 id=\"主要作用\"><a href=\"#主要作用\" class=\"headerlink\" title=\"主要作用\"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p>\n<ul>\n<li>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li>\n<li>例子：<ul>\n<li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li>\n<li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.builder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/19/ 15:15</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//新建一个指挥</span></span><br><span class=\"line\">        <span class=\"type\">Director</span> <span class=\"variable\">director</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Director</span>();</span><br><span class=\"line\">        <span class=\"comment\">//指挥 工人盖房子</span></span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">build</span> <span class=\"operator\">=</span> director.build(<span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>());</span><br><span class=\"line\">        System.out.println(build.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //抽象的建造者方法：盖房子</span></span><br><span class=\"line\"><span class=\"comment\"> * public abstract class Builder &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderA();               //地基</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderB();               //钢筋工程</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderC();               //铺电线</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract void builderD();               //粉刷</span></span><br><span class=\"line\"><span class=\"comment\"> *     //完工：得到产品</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Product getProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Product &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildB() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildC() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildD() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildA = buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildB = buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildC = buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.buildD = buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Product&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;buildA=&#x27;&quot; + buildA + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, buildB=&#x27;&quot; + buildB + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, buildC=&#x27;&quot; + buildC + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, buildD=&#x27;&quot; + buildD + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //具体的建造者：工人</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Worker extends Builder&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Product product;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Worker() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product = new Product();  //工人负责创建产品</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildA(&quot;打好了地基&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildA());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderB() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildB(&quot;铺好了钢筋&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildB());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderC() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildC(&quot;铺好了电线&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildC());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     void builderD() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildD(&quot;粉好了墙壁&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(product.getBuildD());</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Product getProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return product;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Director &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * //    指挥工人建造房子</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Product build(Builder builder)&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderA();</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderB();</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderC();</span></span><br><span class=\"line\"><span class=\"comment\"> *         builder.builderD();</span></span><br><span class=\"line\"><span class=\"comment\"> *         //建造完成后返回一个房子；</span></span><br><span class=\"line\"><span class=\"comment\"> *         return builder.getProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png\" alt=\"建造者模式\"></p>\n<hr>\n<ul>\n<li>上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</li>\n<li>通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。</li>\n<li>比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</li>\n</ul>\n<h4 id=\"无指挥类的建造者模式\"><a href=\"#无指挥类的建造者模式\" class=\"headerlink\" title=\"无指挥类的建造者模式\"></a>无指挥类的建造者模式</h4><h5 id=\"代码-8\"><a href=\"#代码-8\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.builder.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 20:54</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//服务员</span></span><br><span class=\"line\">        <span class=\"type\">Worker</span> <span class=\"variable\">worker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>();</span><br><span class=\"line\">        <span class=\"comment\">//链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。</span></span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> worker.buildA(<span class=\"string\">&quot;炸鸡&quot;</span>).buildB(<span class=\"string\">&quot;芬达&quot;</span>).getProduct();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(product.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * public abstract class Builder &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildA(String msg);  //汉堡</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildB(String msg);  //薯条</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildC(String msg);  //可乐</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Builder buildD(String msg);  //甜点</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     abstract Product getProduct();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Product &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildA = &quot;汉堡&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildB = &quot;可乐&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildC = &quot;薯条&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String BuildD = &quot;甜点&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildA = buildA;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildB() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildB = buildB;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildC() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildC = buildC;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getBuildD() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return BuildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         BuildD = buildD;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Product&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;BuildA=&#x27;&quot; + BuildA + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, BuildB=&#x27;&quot; + BuildB + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, BuildC=&#x27;&quot; + BuildC + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, BuildD=&#x27;&quot; + BuildD + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * //具体的建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Worker extends Builder&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Product product;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Worker() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product = new Product();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildA(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildA(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildB(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildB(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildC(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildC(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Builder buildD(String msg) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         product.setBuildD(msg);</span></span><br><span class=\"line\"><span class=\"comment\"> *         return this;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     Product getProduct() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return product;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png\" alt=\"建造者模式2\"></p>\n<hr>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li>\n<li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.</li>\n<li>具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。</li>\n<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。</li>\n</ul>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、</li>\n<li>适合于一个具有较多的零件（属性）的产品（对象）的创建过程。</li>\n</ul>\n<h4 id=\"建造者与抽象工厂模式的比较\"><a href=\"#建造者与抽象工厂模式的比较\" class=\"headerlink\" title=\"建造者与抽象工厂模式的比较\"></a>建造者与抽象工厂模式的比较</h4><ul>\n<li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li>\n<li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li>\n<li>如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</li>\n</ul>\n<hr>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><ol>\n<li>实现一个接口：Cloneable;</li>\n<li>重写一个方法：clone();</li>\n<li>主要用于：Spring Bean：单例模式，原型模式</li>\n<li>原型模式+工厂模式 &#x3D;&#x3D;&#x3D;&gt; new &lt;&#x3D;&gt; 原型模式</li>\n</ol>\n<h4 id=\"浅克隆模式\"><a href=\"#浅克隆模式\" class=\"headerlink\" title=\"浅克隆模式\"></a>浅克隆模式</h4><h5 id=\"代码-9\"><a href=\"#代码-9\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.prototype.demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bilibili</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//原型对象 v1</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Video</span>(<span class=\"string\">&quot;xiheya&quot;</span>,date);</span><br><span class=\"line\">        <span class=\"comment\">//克隆对象 v2</span></span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span>(Video) v1.clone();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">        date.setTime(<span class=\"number\">123456</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //原型模式的实现：</span></span><br><span class=\"line\"><span class=\"comment\"> * // 1.实现一个接口：Cloneable;</span></span><br><span class=\"line\"><span class=\"comment\"> * // 2.重写一个方法：clone();</span></span><br><span class=\"line\"><span class=\"comment\"> * // Video</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Video implements Cloneable&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Date creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return super.clone();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getName() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setName(String name) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Date getCreatTime() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Video&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png\" alt=\"原型模式\"></p>\n<hr>\n<h4 id=\"深克隆模式\"><a href=\"#深克隆模式\" class=\"headerlink\" title=\"深克隆模式\"></a>深克隆模式</h4><h5 id=\"代码-10\"><a href=\"#代码-10\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.prototype.demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//客户端</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bilibili</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//原型对象 v1</span></span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Video</span>(<span class=\"string\">&quot;xiheya&quot;</span>,date);</span><br><span class=\"line\">        <span class=\"comment\">//克隆对象 v2</span></span><br><span class=\"line\">        <span class=\"type\">Video</span> <span class=\"variable\">v2</span> <span class=\"operator\">=</span>(Video) v1.clone();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">        date.setTime(<span class=\"number\">123456</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====================================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //原型模式的实现：</span></span><br><span class=\"line\"><span class=\"comment\"> * // 1.实现一个接口：Cloneable;</span></span><br><span class=\"line\"><span class=\"comment\"> * // 2.重写一个方法：clone();</span></span><br><span class=\"line\"><span class=\"comment\"> * // Video</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Video implements Cloneable&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private String name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Date creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         Object obj = super.clone();</span></span><br><span class=\"line\"><span class=\"comment\"> *         //深克隆，序列化与反序列化</span></span><br><span class=\"line\"><span class=\"comment\"> *         Video v = (Video) obj;</span></span><br><span class=\"line\"><span class=\"comment\"> *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化</span></span><br><span class=\"line\"><span class=\"comment\"> *         return obj;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public String getName() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setName(String name) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Date getCreatTime() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.creatTime = creatTime;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public String toString() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         return &quot;Video&#123;&quot; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class=\"line\"><span class=\"comment\"> *                 &#x27;&#125;&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png\" alt=\"深克隆模式\"></p>\n<hr>\n<h4 id=\"浅克隆与深克隆对比\"><a href=\"#浅克隆与深克隆对比\" class=\"headerlink\" title=\"浅克隆与深克隆对比\"></a>浅克隆与深克隆对比</h4><ol>\n<li>浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。</li>\n<li>深克隆：克隆出来的对象会把原型的属性也克隆出来。</li>\n</ol>\n<p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png\" alt=\"对比\"></p>\n<hr>\n"},{"title":"设计模式之结构型模式","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg"],"abbrlink":"eea0cb26","date":"2022-08-25T14:43:05.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n## 结构型模式\n\n### 作用\n\n- 从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。\n\n### 分类\n\n- 适配器模式\n- 代理模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n\n### 适配器模式\n\n- 将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。\n- 角色分析\n  - 目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。\n  - 需要适配的类：需要适配的类或适配者类。\n  - 适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。\n\n#### 优缺点\n\n##### 优点\n\n1. 一个对象适配器可以把多个不同的适配者适配到同一个目标\n2. 可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配\n\n##### 缺点\n\n1. 对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；\n2. 对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。\n\n##### 适用场景\n\n1. 系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。\n2. 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。\n\n#### 代码\n\n以网线适配器为例：\n\n```java\npackage com.design_patterns.adapter;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 23:06\n * @Description\n */\n//客户端类：电脑\npublic class Computer {\n    //我们的电脑需要连接上转接器才可以上网\n    public void net(NetToUsb adapter){\n        //上网的具体实现，找一个转接头\n        adapter.handleRequest();\n    }\n\n    public static void main(String[] args) {\n        //电脑\n        Computer computer = new Computer();\n        //网线\n        Adaptee adaptee = new Adaptee();\n        //适配器\n        Adapter adapter = new Adapter();\n\n        computer.net(adapter);\n        System.out.println(\"==========================\");\n        Adapter2 adapter2 = new Adapter2(adaptee);\n\n        computer.net(adapter2);\n    }\n}\n/**\n * //要被适配的类：网线\n * public class Adaptee {\n *     public void request(){\n *         System.out.println(\"连接网线开始上网\");\n *     }\n * }\n *\n * //接口转换器的抽象实现\n * public interface NetToUsb {\n *     //作用：处理请求  网线---》USB\n *     public void handleRequest();\n * }\n *\n * // 1. 继承（类适配器，单继承有局限性）\n * public class Adapter extends Adaptee implements NetToUsb{\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过类适配器实现的上网功能（继承）\");\n *         super.request();\n *     }\n * }\n * \n * // 2. 组合（对象适配器，常用）\n * public class Adapter2 implements NetToUsb{\n *     private Adaptee adaptee;\n *\n *     public Adapter2(Adaptee adaptee) {\n *         this.adaptee = adaptee;\n *     }\n *\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过对象适配器实现的上网功能（组合）\");\n *         adaptee.request();\n *     }\n * }\n */\n```\n\n#### 结果\n\n![适配器模式](https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png)\n\n#### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png)\n\n---\n\n### 桥接模式\n\n#### 定义\n\n桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。\n\n#### 实例模型\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png)\n\n分析：这个场景中有两个变化的维度：品牌，类型。\n\n#### 代码\n\n```java\npackage com.design_patterns.bridge;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/21/ 15:10\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //\n        Computer computer = new Desktop(new Apple());\n        computer.info();\n        //\n        Computer computer1 = new Laptop(new Lenovo());\n        computer1.info();\n        //\n        Computer computer2 = new Pad(new Apple());\n        computer2.info();\n    }\n}\n/**\n * public interface Brand {\n *\n *     void info();\n * }\n * \n * public class Apple implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"苹果\");\n *     }\n * }\n * \n * public class Lenovo implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"联想\");\n *     }\n * }\n * \n * public abstract class Computer {\n *     //组合 品牌\n *     protected Brand brand;\n *\n *     public Computer(Brand brand) {\n *         this.brand = brand;\n *     }\n *     //自带品牌\n *     public void info(){\n *         brand.info();\n *     }\n * }\n *\n * class Desktop extends Computer {\n *     public Desktop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"台式机\");\n *     }\n * }\n *\n * class Laptop extends Computer {\n *     public Laptop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"笔记本\");\n *     }\n * }\n *\n * class Pad extends Computer {\n *     public Pad(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"平板\");\n *     }\n * }\n */\n```\n\n#### 运行结果\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png)\n\n---\n\n#### 结构图\n\n![结构图](https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。\n- 桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合**开闭原则**，就像一座桥，可以把两个变化的维度连接起来。\n\n##### 缺点\n\n- 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n- 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性\n\n#### 适用场景\n\n1. 如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合\n\n2. 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n3. 虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。\n\n4. 场景\n\n   1. Java语言通过Java虚拟机实现了平台无关性，\n   2. AWT的Peer架构\n   3. JDBC驱动程序也是桥接模式的应用之一。\n\n   \n","source":"_posts/设计模式之结构型模式.md","raw":"---\ntitle: 设计模式之结构型模式\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva4.sinaimg.cn/large/87c01ec7gy1fsnqquygqlj21kw0w04f5.jpg'\ntags:\n  - Java\n  - 设计模式\nabbrlink: eea0cb26\ndate: 2022-08-25 22:43:05\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n## 结构型模式\n\n### 作用\n\n- 从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。\n\n### 分类\n\n- 适配器模式\n- 代理模式\n- 桥接模式\n- 装饰模式\n- 组合模式\n- 外观模式\n- 享元模式\n\n### 适配器模式\n\n- 将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。\n- 角色分析\n  - 目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。\n  - 需要适配的类：需要适配的类或适配者类。\n  - 适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。\n\n#### 优缺点\n\n##### 优点\n\n1. 一个对象适配器可以把多个不同的适配者适配到同一个目标\n2. 可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配\n\n##### 缺点\n\n1. 对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；\n2. 对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。\n\n##### 适用场景\n\n1. 系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。\n2. 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。\n\n#### 代码\n\n以网线适配器为例：\n\n```java\npackage com.design_patterns.adapter;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/20/ 23:06\n * @Description\n */\n//客户端类：电脑\npublic class Computer {\n    //我们的电脑需要连接上转接器才可以上网\n    public void net(NetToUsb adapter){\n        //上网的具体实现，找一个转接头\n        adapter.handleRequest();\n    }\n\n    public static void main(String[] args) {\n        //电脑\n        Computer computer = new Computer();\n        //网线\n        Adaptee adaptee = new Adaptee();\n        //适配器\n        Adapter adapter = new Adapter();\n\n        computer.net(adapter);\n        System.out.println(\"==========================\");\n        Adapter2 adapter2 = new Adapter2(adaptee);\n\n        computer.net(adapter2);\n    }\n}\n/**\n * //要被适配的类：网线\n * public class Adaptee {\n *     public void request(){\n *         System.out.println(\"连接网线开始上网\");\n *     }\n * }\n *\n * //接口转换器的抽象实现\n * public interface NetToUsb {\n *     //作用：处理请求  网线---》USB\n *     public void handleRequest();\n * }\n *\n * // 1. 继承（类适配器，单继承有局限性）\n * public class Adapter extends Adaptee implements NetToUsb{\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过类适配器实现的上网功能（继承）\");\n *         super.request();\n *     }\n * }\n * \n * // 2. 组合（对象适配器，常用）\n * public class Adapter2 implements NetToUsb{\n *     private Adaptee adaptee;\n *\n *     public Adapter2(Adaptee adaptee) {\n *         this.adaptee = adaptee;\n *     }\n *\n *     @Override\n *     public void handleRequest() {\n *         System.out.println(\"我是通过对象适配器实现的上网功能（组合）\");\n *         adaptee.request();\n *     }\n * }\n */\n```\n\n#### 结果\n\n![适配器模式](https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png)\n\n#### 流程图\n\n![流程图](https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png)\n\n---\n\n### 桥接模式\n\n#### 定义\n\n桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。\n\n#### 实例模型\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png)\n\n分析：这个场景中有两个变化的维度：品牌，类型。\n\n#### 代码\n\n```java\npackage com.design_patterns.bridge;\n\n/**\n * @Author {xiheya}\n * @Date: 2022/03/21/ 15:10\n * @Description\n */\npublic class Test {\n    public static void main(String[] args) {\n        //\n        Computer computer = new Desktop(new Apple());\n        computer.info();\n        //\n        Computer computer1 = new Laptop(new Lenovo());\n        computer1.info();\n        //\n        Computer computer2 = new Pad(new Apple());\n        computer2.info();\n    }\n}\n/**\n * public interface Brand {\n *\n *     void info();\n * }\n * \n * public class Apple implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"苹果\");\n *     }\n * }\n * \n * public class Lenovo implements Brand{\n *\n *     @Override\n *     public void info() {\n *         System.out.print(\"联想\");\n *     }\n * }\n * \n * public abstract class Computer {\n *     //组合 品牌\n *     protected Brand brand;\n *\n *     public Computer(Brand brand) {\n *         this.brand = brand;\n *     }\n *     //自带品牌\n *     public void info(){\n *         brand.info();\n *     }\n * }\n *\n * class Desktop extends Computer {\n *     public Desktop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"台式机\");\n *     }\n * }\n *\n * class Laptop extends Computer {\n *     public Laptop(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"笔记本\");\n *     }\n * }\n *\n * class Pad extends Computer {\n *     public Pad(Brand brand) {\n *         super(brand);\n *\n *     }\n *\n *     @Override\n *     public void info() {\n *         super.info();\n *         System.out.println(\"平板\");\n *     }\n * }\n */\n```\n\n#### 运行结果\n\n![桥接模式](https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png)\n\n---\n\n#### 结构图\n\n![结构图](https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png)\n\n---\n\n#### 优缺点\n\n##### 优点\n\n- 桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。\n- 桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合**开闭原则**，就像一座桥，可以把两个变化的维度连接起来。\n\n##### 缺点\n\n- 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。\n- 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性\n\n#### 适用场景\n\n1. 如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合\n\n2. 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。\n\n3. 虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。\n\n4. 场景\n\n   1. Java语言通过Java虚拟机实现了平台无关性，\n   2. AWT的Peer架构\n   3. JDBC驱动程序也是桥接模式的应用之一。\n\n   \n","slug":"设计模式之结构型模式","published":1,"updated":"2023-07-31T12:40:09.714Z","layout":"post","link":"","_id":"clktr4qse004xzsa0bzqefjg8","content":"<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>适配器模式</li>\n<li>代理模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n</ul>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><ul>\n<li>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</li>\n<li>角色分析<ul>\n<li>目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li>\n<li>需要适配的类：需要适配的类或适配者类。</li>\n<li>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li>\n<li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li>\n<li>对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。</li>\n</ol>\n<h5 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h5><ol>\n<li>系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。</li>\n<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>以网线适配器为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 23:06</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//客户端类：电脑</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//我们的电脑需要连接上转接器才可以上网</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">net</span><span class=\"params\">(NetToUsb adapter)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//上网的具体实现，找一个转接头</span></span><br><span class=\"line\">        adapter.handleRequest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//电脑</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//网线</span></span><br><span class=\"line\">        <span class=\"type\">Adaptee</span> <span class=\"variable\">adaptee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adaptee</span>();</span><br><span class=\"line\">        <span class=\"comment\">//适配器</span></span><br><span class=\"line\">        <span class=\"type\">Adapter</span> <span class=\"variable\">adapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        computer.net(adapter);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Adapter2</span> <span class=\"variable\">adapter2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter2</span>(adaptee);</span><br><span class=\"line\"></span><br><span class=\"line\">        computer.net(adapter2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //要被适配的类：网线</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Adaptee &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void request()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;连接网线开始上网&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * //接口转换器的抽象实现</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface NetToUsb &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //作用：处理请求  网线---》USB</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void handleRequest();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * // 1. 继承（类适配器，单继承有局限性）</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Adapter extends Adaptee implements NetToUsb&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void handleRequest() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;我是通过类适配器实现的上网功能（继承）&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.request();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * // 2. 组合（对象适配器，常用）</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Adapter2 implements NetToUsb&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Adaptee adaptee;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Adapter2(Adaptee adaptee) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.adaptee = adaptee;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void handleRequest() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;我是通过对象适配器实现的上网功能（组合）&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         adaptee.request();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png\" alt=\"适配器模式\"></p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。</p>\n<h4 id=\"实例模型\"><a href=\"#实例模型\" class=\"headerlink\" title=\"实例模型\"></a>实例模型</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png\" alt=\"桥接模式\"></p>\n<p>分析：这个场景中有两个变化的维度：品牌，类型。</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/21/ 15:10</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Desktop</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>());</span><br><span class=\"line\">        computer.info();</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Laptop</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Lenovo</span>());</span><br><span class=\"line\">        computer1.info();</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pad</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>());</span><br><span class=\"line\">        computer2.info();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface Brand &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     void info();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Apple implements Brand&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.print(&quot;苹果&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Lenovo implements Brand&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.print(&quot;联想&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public abstract class Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //组合 品牌</span></span><br><span class=\"line\"><span class=\"comment\"> *     protected Brand brand;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Computer(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.brand = brand;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //自带品牌</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         brand.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * class Desktop extends Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Desktop(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super(brand);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;台式机&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * class Laptop extends Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Laptop(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super(brand);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;笔记本&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * class Pad extends Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Pad(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super(brand);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;平板&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png\" alt=\"桥接模式\"></p>\n<hr>\n<h4 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png\" alt=\"结构图\"></p>\n<hr>\n<h4 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。</li>\n<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>，就像一座桥，可以把两个变化的维度连接起来。</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</li>\n</ul>\n<h4 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ol>\n<li><p>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</p>\n</li>\n<li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>\n</li>\n<li><p>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p>\n</li>\n<li><p>场景</p>\n<ol>\n<li>Java语言通过Java虚拟机实现了平台无关性，</li>\n<li>AWT的Peer架构</li>\n<li>JDBC驱动程序也是桥接模式的应用之一。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover":"linear-gradient(to top,#ebc0fd 0%,#d9ded8 100%)","excerpt":"","more":"<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>适配器模式</li>\n<li>代理模式</li>\n<li>桥接模式</li>\n<li>装饰模式</li>\n<li>组合模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n</ul>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><ul>\n<li>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</li>\n<li>角色分析<ul>\n<li>目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li>\n<li>需要适配的类：需要适配的类或适配者类。</li>\n<li>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ol>\n<li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li>\n<li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配</li>\n</ol>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ol>\n<li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li>\n<li>对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。</li>\n</ol>\n<h5 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h5><ol>\n<li>系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。</li>\n<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>以网线适配器为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.adapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/20/ 23:06</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//客户端类：电脑</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//我们的电脑需要连接上转接器才可以上网</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">net</span><span class=\"params\">(NetToUsb adapter)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//上网的具体实现，找一个转接头</span></span><br><span class=\"line\">        adapter.handleRequest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//电脑</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//网线</span></span><br><span class=\"line\">        <span class=\"type\">Adaptee</span> <span class=\"variable\">adaptee</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adaptee</span>();</span><br><span class=\"line\">        <span class=\"comment\">//适配器</span></span><br><span class=\"line\">        <span class=\"type\">Adapter</span> <span class=\"variable\">adapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        computer.net(adapter);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========================&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Adapter2</span> <span class=\"variable\">adapter2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter2</span>(adaptee);</span><br><span class=\"line\"></span><br><span class=\"line\">        computer.net(adapter2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * //要被适配的类：网线</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Adaptee &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void request()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;连接网线开始上网&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * //接口转换器的抽象实现</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface NetToUsb &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //作用：处理请求  网线---》USB</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void handleRequest();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * // 1. 继承（类适配器，单继承有局限性）</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Adapter extends Adaptee implements NetToUsb&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void handleRequest() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;我是通过类适配器实现的上网功能（继承）&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.request();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * // 2. 组合（对象适配器，常用）</span></span><br><span class=\"line\"><span class=\"comment\"> * public class Adapter2 implements NetToUsb&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     private Adaptee adaptee;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Adapter2(Adaptee adaptee) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.adaptee = adaptee;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void handleRequest() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;我是通过对象适配器实现的上网功能（组合）&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *         adaptee.request();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png\" alt=\"适配器模式\"></p>\n<h4 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png\" alt=\"流程图\"></p>\n<hr>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。</p>\n<h4 id=\"实例模型\"><a href=\"#实例模型\" class=\"headerlink\" title=\"实例模型\"></a>实例模型</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png\" alt=\"桥接模式\"></p>\n<p>分析：这个场景中有两个变化的维度：品牌，类型。</p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.design_patterns.bridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> &#123;xiheya&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/03/21/ 15:10</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Desktop</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>());</span><br><span class=\"line\">        computer.info();</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Laptop</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Lenovo</span>());</span><br><span class=\"line\">        computer1.info();</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pad</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>());</span><br><span class=\"line\">        computer2.info();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * public interface Brand &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     void info();</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Apple implements Brand&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.print(&quot;苹果&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public class Lenovo implements Brand&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.print(&quot;联想&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * public abstract class Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //组合 品牌</span></span><br><span class=\"line\"><span class=\"comment\"> *     protected Brand brand;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Computer(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         this.brand = brand;</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     //自带品牌</span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info()&#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         brand.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * class Desktop extends Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Desktop(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super(brand);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;台式机&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * class Laptop extends Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Laptop(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super(brand);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;笔记本&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * class Pad extends Computer &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     public Pad(Brand brand) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super(brand);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     <span class=\"doctag\">@Override</span></span></span><br><span class=\"line\"><span class=\"comment\"> *     public void info() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *         super.info();</span></span><br><span class=\"line\"><span class=\"comment\"> *         System.out.println(&quot;平板&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png\" alt=\"桥接模式\"></p>\n<hr>\n<h4 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png\" alt=\"结构图\"></p>\n<hr>\n<h4 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。</li>\n<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>，就像一座桥，可以把两个变化的维度连接起来。</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</li>\n</ul>\n<h4 id=\"适用场景-1\"><a href=\"#适用场景-1\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ol>\n<li><p>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</p>\n</li>\n<li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>\n</li>\n<li><p>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p>\n</li>\n<li><p>场景</p>\n<ol>\n<li>Java语言通过Java虚拟机实现了平台无关性，</li>\n<li>AWT的Peer架构</li>\n<li>JDBC驱动程序也是桥接模式的应用之一。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"预装APP安装过程","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqxw2orj21kw0w01a9.jpg"],"password":"urovo","abstract":"这是机密文件！","abbrlink":"3e55a450","date":"2022-08-26T03:35:26.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n[TOC]\n\n## 一、将app上传到项目目录\n\n以更新SQ47的ScannerTool为例\n\n进入目录，若有安装目录则直接进入，若没有则新建目录。\n\n```bash\ncd SQ47/vendor/urovo/prebuilt/apps/ScannerTool/\n```\n\n## 二、上传app\n\n可使用Xftp，ftp文件传输工具上传，也可以使用磁盘映射直接拷贝。\n\n## 三、修改配置文件\n\n```bash\ncd SQ47/vendor/urovo/prebuilt/XX\nvim PREBUILT_SQ47_CN_XX_XX.csv\n```\n\n然后找到ScannerTool的包名那一行，更新版本号即可。如图所示：\n\n![ScannerTool](https://m.360buyimg.com/babel/jfs/t1/68572/19/21316/127652/62f9af0fE1ace48d7/9be96eb761f1f84f.png)\n\n==其他软件更新或预装步骤同上==\n","source":"_posts/预装APP安装过程.md","raw":"---\ntitle: 预装APP安装过程\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 技术\ncomments: true\nphotos: 'https://tva1.sinaimg.cn/large/87c01ec7gy1fsnqqxw2orj21kw0w01a9.jpg'\ntags:\n  - 随笔\npassword: urovo\nabstract: 这是机密文件！\nabbrlink: 3e55a450\ndate: 2022-08-26 11:35:26\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n[TOC]\n\n## 一、将app上传到项目目录\n\n以更新SQ47的ScannerTool为例\n\n进入目录，若有安装目录则直接进入，若没有则新建目录。\n\n```bash\ncd SQ47/vendor/urovo/prebuilt/apps/ScannerTool/\n```\n\n## 二、上传app\n\n可使用Xftp，ftp文件传输工具上传，也可以使用磁盘映射直接拷贝。\n\n## 三、修改配置文件\n\n```bash\ncd SQ47/vendor/urovo/prebuilt/XX\nvim PREBUILT_SQ47_CN_XX_XX.csv\n```\n\n然后找到ScannerTool的包名那一行，更新版本号即可。如图所示：\n\n![ScannerTool](https://m.360buyimg.com/babel/jfs/t1/68572/19/21316/127652/62f9af0fE1ace48d7/9be96eb761f1f84f.png)\n\n==其他软件更新或预装步骤同上==\n","slug":"预装APP安装过程","published":1,"updated":"2023-07-31T12:40:09.717Z","layout":"post","link":"","_id":"clktr4qsf0051zsa08mz2gtwo","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉，您输入的密码错误，请检查后重新输入。\" data-whm=\"抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"ecf902325778343057e11be1c72f278516b43994435e50592e4b3cd0e36b270e\">1ffc7d1a99edb7ab7287058947423f9f3ae0e1543b1c5481e9de9dd6fb8de1c89d00fb7aceaa83b09d91a8631b4fffacdda14088534e0d9b9e695415048441cc0799387e4b8c0dabbc7072de37c834b0edce62226d4ec453d528d60d23e1f32f5b194b1b4b1c13a79ffed232256789d941cc1ec985f31e0da3cf5403093e9617c1317fa7831887de6e2ebfa0c0f2b77d539aa3c1c1ba96531ceaa4f6f80044f00a7033954ca297af0fdf5706336c38f40b80ec081c4cbd2746ecd4af40ed92c904cfd0b2b9ebf6e2558a4066688fb7a6b1c519791c2f1af63b7de97fa265129ccc937df790711f7c0d2f6b5de7c71ae34a222b1a6941c881978d6973e97bf8698222996f89006848393ad528f6c20bfe35e9b2363e636763b936dfa876bd5b8557f30f722fd7c12b310af7d0ac1bd0ba8f4abc591be878e54f307f636682443a4b28d92d4843e32589060fd2bad5799d93d9b99ace8439d3b0c68a1e7ac856534ff86700b47e73177896517971cd856232b1159dd70f679009f256b12049aee7268d785df90a16a8ad5a9a2a8309a6fd8d7051b2a7d1263d169f344fd2eb271d68251d272cf3323cbbfbfcafa3f1b29fc9e69d422d87d8d8ce4daa53e12d5df5de523fed9f8341da70f40e340d03624676eded916911adab93bc4d21ce8b91e499065b53df9e232be93846d744af6d811e0cb309b9c82f7c10c0e3de63cdfaba437a115da81342a971f9054a9454df18e269c686ef8df2d7af9e0828c9208d69cc1e150034d4911dd2e6f5d74204bcd4febc62534d46c4d9fea7d15c1e8e28f1548e467b6e6a18cae398d329a97a56234bd2061ba9c6fd8293ad3c19832c89960154ecaa8f3a2f5b584a3166290321609733bac68d970c4a53a49212ac1d33ab1eb7d5b9652de5062908bc9b6f8a307b38cd27fbbd2ca48bc25417a9742557b97ad3456bb0d84a45055172b905021fb7390990a73a476da0e28b8cd46a1f202df919f0eb6950b032253802c870171ceb35b46b3d48c7af3058cb23cf0a8b13dc74455a2e8131bb429fb7741bc2e375cbfaa31704f7ac3280dbe503ab8bdc4692cde8dd71892cf7f9f6631f034b91507f466111333836d890833cf41ddb71e0448262969a0e385814b0e1fa2a2c4f2a05d9cf4e8d54324bd56ec61fd33068b8a7698176413d19c8f6dedaddd2c9c7d6d560bcdfb6376a11b4d146c1cfd733900d3502e1ac28be04658c3d4fb5e36371f320cc53414efe3a1c9e5ba5d7f0d4bbc5a2aa3597886109a01b4398d39f67eebd94fc7375f67140f8b4e5486ac8a5f80480479c37df3fb41ca7f345e547583a1c942f5418c7b7a5c06de15d03973a0e454477255fae2a0daf947d56ccdebaa00f359c8953a33e9132639367de4231756cc06d26017c981ed3b163de3cc484844c18a0e2bd5c1800d34034c6424d9a0e845f93d3327cbe92649b2e7e989e39483b16be28a37f38a9dd4e55d8a3adfa62ffacd50d3098aa50ed2ba827fc06733d7ee7485e0f581c87dd012585e8c857691c3599e012380dba8cd2409a1e5a96e5678dab005e85405ef7a84e73e1059c9820d79b3e02e3843f6860a00dbf43fea847e34cef8c46ec355494245b7fcf6d372946e553f9984fc25d295656566e323780abf92bb42b6248bd1d98def7bf59591b755a9ca451902908ed30e3b1318aad149afd63b12fb0b0cdfdcf964fc49c1950c35def0380a6cb0a6212fcfd32cefd9b35464aeffb979be13a4b298cb1983a45dbc5ff9eeb69a101355695de764fdbaa3cf83f995cf2a4b1c3ed3a4c611ea65a54aeaf3f7e795f136898efe0765cd46150d4970d1043a1c535d1b3e630898707f563bc1ed7f7af27c77db19fc879775ef7ca0f2933686a09c46f9b8f835c0787fdf2945889b9c5ef6a92fbe9e11450af89ba5a9a630888285307a3297dea5358357c26ae080cc11ac8fecf8eb1a84053bee8b90d59ff1c08079d6287b398b416ec99cab571697b830535e6f3123de346880562cbf6487f6c3ba3da68152634ba2380dbbd05b48cc8016a98c1df4375f7d6dd0d3973844009368a5582ba2864fff1cf14edf44a3799a8d9e01b03cf3ccd199829adefaa5daa5268e8114d30531b920b12b7204dc814f2e5cc9490e41f9b9c456015bf1861f604b137c0fc87f16ab41d89881da3ef0cbdde763b6b176e9fa6ef8af520ac38bd744e9c6f2f93419a6d038ba4aa290a9a41f91be821f0e19cc81f9021d5bbc57b0d70a545fc2120240f93d76efd25b56810e30f2cf3fbc31ac4645bad274bd9f2a36e57151dc33c2de9bb34a2f3583dd41ea09606eb23e610</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"cover":"linear-gradient(to top,#ebc0fd 0%,#d9ded8 100%)","excerpt":"这是机密文件！","more":"这是机密文件！","origin":"<p>[TOC]</p>\n<h2 id=\"一、将app上传到项目目录\"><a href=\"#一、将app上传到项目目录\" class=\"headerlink\" title=\"一、将app上传到项目目录\"></a>一、将app上传到项目目录</h2><p>以更新SQ47的ScannerTool为例</p>\n<p>进入目录，若有安装目录则直接进入，若没有则新建目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> SQ47/vendor/urovo/prebuilt/apps/ScannerTool/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、上传app\"><a href=\"#二、上传app\" class=\"headerlink\" title=\"二、上传app\"></a>二、上传app</h2><p>可使用Xftp，ftp文件传输工具上传，也可以使用磁盘映射直接拷贝。</p>\n<h2 id=\"三、修改配置文件\"><a href=\"#三、修改配置文件\" class=\"headerlink\" title=\"三、修改配置文件\"></a>三、修改配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> SQ47/vendor/urovo/prebuilt/XX</span><br><span class=\"line\">vim PREBUILT_SQ47_CN_XX_XX.csv</span><br></pre></td></tr></table></figure>\n\n<p>然后找到ScannerTool的包名那一行，更新版本号即可。如图所示：</p>\n<p><img src=\"https://m.360buyimg.com/babel/jfs/t1/68572/19/21316/127652/62f9af0fE1ace48d7/9be96eb761f1f84f.png\" alt=\"ScannerTool\"></p>\n<p>&#x3D;&#x3D;其他软件更新或预装步骤同上&#x3D;&#x3D;</p>\n","encrypt":true},{"title":"高通方案编译及刷机流程","author":"Rookie_l","avatar":"https://icu007.work/wp-content/uploads/2022/08/head.jpeg","authorLink":"https://hiheya.github.io/","comments":1,"photos":["https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqr61rffj21kw0w04jg.jpg"],"abbrlink":"3b092706","date":"2022-08-24T07:02:53.000Z","authorAbout":null,"authorDesc":null,"keywords":null,"description":null,"_content":"\n[TOC]\n\n## 高通方案编译及刷机流程(以45S为例)\n\n### 1. 编译\n\n```bash\nsource build/envsetup.sh SQ45S && setenv && make update-api && make dist -j16 2>&1 |tee build.log\n```\n\n### 2. 生成刷机包路径\n\n一般都在source/out/dist 以及 source/out/target\n\n### 3. 刷机流程（sideload）\n\n1. 进入recovery模式\n\n```bash\nadb reboot recovery\n```\n\n2. 音量键：+-+-++--，进入recovery界面后选择：Apply update from ADB\n3. 输入：\n\n```bash\nadb sideload 刷机包\n```\n\n4. 等待刷机完成后重启设备。\n","source":"_posts/高通方案编译及刷机流程.md","raw":"---\ntitle: 高通方案编译及刷机流程\nauthor: Rookie_l\navatar: 'https://icu007.work/wp-content/uploads/2022/08/head.jpeg'\nauthorLink: 'https://hiheya.github.io/'\ncategories: 资源\ncomments: true\ntags: 随笔\nphotos: 'https://tva2.sinaimg.cn/large/87c01ec7gy1fsnqr61rffj21kw0w04jg.jpg'\nabbrlink: 3b092706\ndate: 2022-08-24 15:02:53\nauthorAbout:\nauthorDesc:\nkeywords:\ndescription:\n---\n\n[TOC]\n\n## 高通方案编译及刷机流程(以45S为例)\n\n### 1. 编译\n\n```bash\nsource build/envsetup.sh SQ45S && setenv && make update-api && make dist -j16 2>&1 |tee build.log\n```\n\n### 2. 生成刷机包路径\n\n一般都在source/out/dist 以及 source/out/target\n\n### 3. 刷机流程（sideload）\n\n1. 进入recovery模式\n\n```bash\nadb reboot recovery\n```\n\n2. 音量键：+-+-++--，进入recovery界面后选择：Apply update from ADB\n3. 输入：\n\n```bash\nadb sideload 刷机包\n```\n\n4. 等待刷机完成后重启设备。\n","slug":"高通方案编译及刷机流程","published":1,"updated":"2023-07-31T12:40:09.722Z","layout":"post","link":"","_id":"clktr4qsf0054zsa020oef316","content":"<p>[TOC]</p>\n<h2 id=\"高通方案编译及刷机流程-以45S为例\"><a href=\"#高通方案编译及刷机流程-以45S为例\" class=\"headerlink\" title=\"高通方案编译及刷机流程(以45S为例)\"></a>高通方案编译及刷机流程(以45S为例)</h2><h3 id=\"1-编译\"><a href=\"#1-编译\" class=\"headerlink\" title=\"1. 编译\"></a>1. 编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> build/envsetup.sh SQ45S &amp;&amp; setenv &amp;&amp; make update-api &amp;&amp; make dist -j16 2&gt;&amp;1 |<span class=\"built_in\">tee</span> build.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-生成刷机包路径\"><a href=\"#2-生成刷机包路径\" class=\"headerlink\" title=\"2. 生成刷机包路径\"></a>2. 生成刷机包路径</h3><p>一般都在source&#x2F;out&#x2F;dist 以及 source&#x2F;out&#x2F;target</p>\n<h3 id=\"3-刷机流程（sideload）\"><a href=\"#3-刷机流程（sideload）\" class=\"headerlink\" title=\"3. 刷机流程（sideload）\"></a>3. 刷机流程（sideload）</h3><ol>\n<li>进入recovery模式</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb reboot recovery</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>音量键：+-+-++–，进入recovery界面后选择：Apply update from ADB</li>\n<li>输入：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb sideload 刷机包</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>等待刷机完成后重启设备。</li>\n</ol>\n","site":{"data":{}},"cover":"linear-gradient(45deg,#ff9a9e 0%,#fad0c4 99%,#fad0c4 100%)","excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"高通方案编译及刷机流程-以45S为例\"><a href=\"#高通方案编译及刷机流程-以45S为例\" class=\"headerlink\" title=\"高通方案编译及刷机流程(以45S为例)\"></a>高通方案编译及刷机流程(以45S为例)</h2><h3 id=\"1-编译\"><a href=\"#1-编译\" class=\"headerlink\" title=\"1. 编译\"></a>1. 编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> build/envsetup.sh SQ45S &amp;&amp; setenv &amp;&amp; make update-api &amp;&amp; make dist -j16 2&gt;&amp;1 |<span class=\"built_in\">tee</span> build.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-生成刷机包路径\"><a href=\"#2-生成刷机包路径\" class=\"headerlink\" title=\"2. 生成刷机包路径\"></a>2. 生成刷机包路径</h3><p>一般都在source&#x2F;out&#x2F;dist 以及 source&#x2F;out&#x2F;target</p>\n<h3 id=\"3-刷机流程（sideload）\"><a href=\"#3-刷机流程（sideload）\" class=\"headerlink\" title=\"3. 刷机流程（sideload）\"></a>3. 刷机流程（sideload）</h3><ol>\n<li>进入recovery模式</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb reboot recovery</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>音量键：+-+-++–，进入recovery界面后选择：Apply update from ADB</li>\n<li>输入：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb sideload 刷机包</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>等待刷机完成后重启设备。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clktr4qqt0001zsa0cd8a5ug3","category_id":"clktr4qqx0004zsa0cjmketzf","_id":"clktr4qr5000jzsa0g5zf6pg0"},{"post_id":"clktr4qr3000gzsa0bh7oeeei","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qra000qzsa0diw3hk8o"},{"post_id":"clktr4qqw0003zsa08mfv1tus","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrb000vzsa0apavan98"},{"post_id":"clktr4qr5000izsa0dij0cv9l","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrc000yzsa08xrrdlyd"},{"post_id":"clktr4qr7000nzsa08zzybjla","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrd0013zsa051j17i84"},{"post_id":"clktr4qqz0007zsa0959p8tvp","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrd0015zsa0bi7g7f6w"},{"post_id":"clktr4qr9000pzsa07tjk71dt","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qre0017zsa0691xdjvs"},{"post_id":"clktr4qrb000uzsa0hb1da9du","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qre001bzsa05f3o5sih"},{"post_id":"clktr4qr00009zsa07o3a253h","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrg001ezsa0c67k6h5q"},{"post_id":"clktr4qrb000xzsa0d7kdaq5a","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrh001hzsa09hxd8xb0"},{"post_id":"clktr4qrc0012zsa0gqisg4fb","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrh001jzsa09brk202k"},{"post_id":"clktr4qr1000bzsa08le0e4yl","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qri001nzsa027u17hgh"},{"post_id":"clktr4qrd0014zsa0d2tm0p37","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qri001qzsa0288g189q"},{"post_id":"clktr4qrd0016zsa0gb2w9mpa","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrj001uzsa05xwu7o4r"},{"post_id":"clktr4qre001azsa0hxs54o7y","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrk001wzsa0eciqgn8n"},{"post_id":"clktr4qrf001dzsa0ai840pvi","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrk0020zsa00p1ufgbv"},{"post_id":"clktr4qrh001gzsa004rl22m2","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrl0023zsa0d0q9bbnn"},{"post_id":"clktr4qrh001izsa08w1o7v4q","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrl0027zsa00j9ogjky"},{"post_id":"clktr4qri001mzsa028sh5ubt","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrm002bzsa0g7c27jga"},{"post_id":"clktr4qri001pzsa0gzx55bem","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrn002fzsa0hplx7chf"},{"post_id":"clktr4qrj001tzsa0hlsrfufr","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qro002izsa08fb022t7"},{"post_id":"clktr4qrj001vzsa068d0bkg6","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrp002mzsa0aonfam18"},{"post_id":"clktr4qrk001zzsa0dsl63d6l","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrp002pzsa0098o2eza"},{"post_id":"clktr4qrl0026zsa0ab6cdr3j","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrq002tzsa02wu79uz4"},{"post_id":"clktr4qrm002azsa02khmeac3","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrr002vzsa0b10g0pu0"},{"post_id":"clktr4qrn002ezsa0fu8xe8m2","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrr002yzsa0c3t90pu0"},{"post_id":"clktr4qrk0022zsa0c5zz3b9g","category_id":"clktr4qrm0028zsa04oy3ewcs","_id":"clktr4qrr0030zsa0e58p879k"},{"post_id":"clktr4qrn002hzsa0doia9re0","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrr0033zsa04wwcfbil"},{"post_id":"clktr4qrp002lzsa08uj6f8i2","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrs0035zsa06yec073l"},{"post_id":"clktr4qrp002ozsa07afz527z","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qrs0038zsa03ifaej9h"},{"post_id":"clktr4qrq002szsa01va3gnfb","category_id":"clktr4qqx0004zsa0cjmketzf","_id":"clktr4qrs003azsa097x3b8z9"},{"post_id":"clktr4qsa004izsa08r6z9djc","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qsc004pzsa0hzbo5yln"},{"post_id":"clktr4qsb004lzsa082d88qin","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qse004vzsa0d9h3h2di"},{"post_id":"clktr4qsc004ozsa09iw6fh3y","category_id":"clktr4qqx0004zsa0cjmketzf","_id":"clktr4qse004yzsa0esagfqc1"},{"post_id":"clktr4qsd004szsa00dz224dm","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qsf0052zsa012fpbgt0"},{"post_id":"clktr4qsb004jzsa07r9j4u94","category_id":"clktr4qsc004mzsa0a96w03zm","_id":"clktr4qsg0055zsa04m53acfi"},{"post_id":"clktr4qsd004uzsa0evc9ch71","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qsg0058zsa0a7qn8d18"},{"post_id":"clktr4qse004xzsa0bzqefjg8","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qsg005azsa08qdubin1"},{"post_id":"clktr4qsf0051zsa08mz2gtwo","category_id":"clktr4qr2000czsa0f8yebhan","_id":"clktr4qsh005czsa061mchqdi"},{"post_id":"clktr4qsf0054zsa020oef316","category_id":"clktr4qqx0004zsa0cjmketzf","_id":"clktr4qsh005ezsa03vso3p10"}],"PostTag":[{"post_id":"clktr4qqt0001zsa0cd8a5ug3","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qr3000ezsa038qiguc3"},{"post_id":"clktr4qqw0003zsa08mfv1tus","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrb000wzsa05cduatma"},{"post_id":"clktr4qqw0003zsa08mfv1tus","tag_id":"clktr4qr6000lzsa00o4575g6","_id":"clktr4qrc0010zsa01rkpctz7"},{"post_id":"clktr4qqz0007zsa0959p8tvp","tag_id":"clktr4qra000szsa00ivv1dto","_id":"clktr4qre0019zsa06av03g9m"},{"post_id":"clktr4qqz0007zsa0959p8tvp","tag_id":"clktr4qrc0011zsa095ad0jal","_id":"clktr4qrf001czsa0hhnr3et8"},{"post_id":"clktr4qr00009zsa07o3a253h","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qri001lzsa0736a88iz"},{"post_id":"clktr4qr00009zsa07o3a253h","tag_id":"clktr4qr6000lzsa00o4575g6","_id":"clktr4qri001ozsa08n6z1jux"},{"post_id":"clktr4qrh001izsa08w1o7v4q","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrj001szsa038ogge2x"},{"post_id":"clktr4qr1000bzsa08le0e4yl","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrk001yzsa01ku1f8v9"},{"post_id":"clktr4qr1000bzsa08le0e4yl","tag_id":"clktr4qr6000lzsa00o4575g6","_id":"clktr4qrk0021zsa06xb94h4p"},{"post_id":"clktr4qr3000gzsa0bh7oeeei","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrl0025zsa03n9pecka"},{"post_id":"clktr4qr3000gzsa0bh7oeeei","tag_id":"clktr4qr6000lzsa00o4575g6","_id":"clktr4qrm0029zsa0azk62bvj"},{"post_id":"clktr4qr5000izsa0dij0cv9l","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrm002dzsa043848p3b"},{"post_id":"clktr4qr5000izsa0dij0cv9l","tag_id":"clktr4qr6000lzsa00o4575g6","_id":"clktr4qrn002gzsa08lrygkx3"},{"post_id":"clktr4qrm002azsa02khmeac3","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qro002kzsa09qvo1dma"},{"post_id":"clktr4qr7000nzsa08zzybjla","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrp002nzsa0hk6tdig2"},{"post_id":"clktr4qr7000nzsa08zzybjla","tag_id":"clktr4qrm002czsa073n87t0r","_id":"clktr4qrq002rzsa0gbu4cz63"},{"post_id":"clktr4qr9000pzsa07tjk71dt","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrq002uzsa0fbrw2b5w"},{"post_id":"clktr4qr9000pzsa07tjk71dt","tag_id":"clktr4qrm002czsa073n87t0r","_id":"clktr4qrr002xzsa03tmjd5t0"},{"post_id":"clktr4qrb000uzsa0hb1da9du","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrr002zzsa0bz8gedkf"},{"post_id":"clktr4qrb000uzsa0hb1da9du","tag_id":"clktr4qrq002qzsa00pdu681l","_id":"clktr4qrr0032zsa00kv70civ"},{"post_id":"clktr4qrb000xzsa0d7kdaq5a","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrr0034zsa07wt0bkjv"},{"post_id":"clktr4qrb000xzsa0d7kdaq5a","tag_id":"clktr4qrq002qzsa00pdu681l","_id":"clktr4qrs0037zsa0ahhqd9ij"},{"post_id":"clktr4qrc0012zsa0gqisg4fb","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrs0039zsa0henz5bjd"},{"post_id":"clktr4qrc0012zsa0gqisg4fb","tag_id":"clktr4qrq002qzsa00pdu681l","_id":"clktr4qrs003czsa00lpecs8o"},{"post_id":"clktr4qrd0014zsa0d2tm0p37","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrt003dzsa04tsbejf8"},{"post_id":"clktr4qrd0014zsa0d2tm0p37","tag_id":"clktr4qrs0036zsa028yaed03","_id":"clktr4qrt003ezsa0h86f7wwu"},{"post_id":"clktr4qrd0016zsa0gb2w9mpa","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrt003gzsa07fye5zo1"},{"post_id":"clktr4qrd0016zsa0gb2w9mpa","tag_id":"clktr4qrs003bzsa05np4gx3k","_id":"clktr4qrt003hzsa01p1f0l1b"},{"post_id":"clktr4qre001azsa0hxs54o7y","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrt003jzsa0cr532l4t"},{"post_id":"clktr4qre001azsa0hxs54o7y","tag_id":"clktr4qrs003bzsa05np4gx3k","_id":"clktr4qrt003kzsa0ey6k742d"},{"post_id":"clktr4qrf001dzsa0ai840pvi","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrt003mzsa067tddkfl"},{"post_id":"clktr4qrf001dzsa0ai840pvi","tag_id":"clktr4qrs003bzsa05np4gx3k","_id":"clktr4qru003nzsa023o6dr7y"},{"post_id":"clktr4qrh001gzsa004rl22m2","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qru003pzsa023jh0l9z"},{"post_id":"clktr4qrh001gzsa004rl22m2","tag_id":"clktr4qrt003lzsa006en0num","_id":"clktr4qru003qzsa09i563uhm"},{"post_id":"clktr4qri001mzsa028sh5ubt","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qru003szsa093o22np1"},{"post_id":"clktr4qri001mzsa028sh5ubt","tag_id":"clktr4qru003ozsa09x1abg9w","_id":"clktr4qru003tzsa0h5bw8s2t"},{"post_id":"clktr4qri001pzsa0gzx55bem","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qru003vzsa0dfw01s9t"},{"post_id":"clktr4qri001pzsa0gzx55bem","tag_id":"clktr4qru003ozsa09x1abg9w","_id":"clktr4qru003wzsa00b5p8nnj"},{"post_id":"clktr4qrj001tzsa0hlsrfufr","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrv003yzsa0e8fwgvch"},{"post_id":"clktr4qrj001tzsa0hlsrfufr","tag_id":"clktr4qru003ozsa09x1abg9w","_id":"clktr4qrv003zzsa0ezhk9vjf"},{"post_id":"clktr4qrj001vzsa068d0bkg6","tag_id":"clktr4qru003xzsa05t9f681n","_id":"clktr4qrv0041zsa0gka0hxjn"},{"post_id":"clktr4qrk001zzsa0dsl63d6l","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrv0043zsa0050ocbnu"},{"post_id":"clktr4qrk001zzsa0dsl63d6l","tag_id":"clktr4qru003ozsa09x1abg9w","_id":"clktr4qrv0044zsa0cog718m1"},{"post_id":"clktr4qrk0022zsa0c5zz3b9g","tag_id":"clktr4qrv0042zsa06agb57qy","_id":"clktr4qrw0046zsa0glgtgchr"},{"post_id":"clktr4qrl0026zsa0ab6cdr3j","tag_id":"clktr4qrv0045zsa0fu37f5ij","_id":"clktr4qrw0048zsa03zn5fikm"},{"post_id":"clktr4qrl0026zsa0ab6cdr3j","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qrw0049zsa066wc8yjx"},{"post_id":"clktr4qrp002lzsa08uj6f8i2","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qrw004bzsa08oc35ivo"},{"post_id":"clktr4qrp002lzsa08uj6f8i2","tag_id":"clktr4qrw0047zsa01fh8b6gh","_id":"clktr4qrw004czsa02talalub"},{"post_id":"clktr4qrp002ozsa07afz527z","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qrx004ezsa0f90h7sr5"},{"post_id":"clktr4qrp002ozsa07afz527z","tag_id":"clktr4qrw004azsa029wkfb78","_id":"clktr4qrx004fzsa0491yatov"},{"post_id":"clktr4qrq002szsa01va3gnfb","tag_id":"clktr4qrw004dzsa04p97ghgn","_id":"clktr4qrx004gzsa06fke4bpd"},{"post_id":"clktr4qrq002szsa01va3gnfb","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qrx004hzsa0czc60xwx"},{"post_id":"clktr4qsa004izsa08r6z9djc","tag_id":"clktr4qrw004dzsa04p97ghgn","_id":"clktr4qsb004kzsa01dr7g8pj"},{"post_id":"clktr4qsa004izsa08r6z9djc","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qsc004nzsa02ga75byi"},{"post_id":"clktr4qsb004jzsa07r9j4u94","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qsd004rzsa0hjv066g5"},{"post_id":"clktr4qsc004ozsa09iw6fh3y","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qsd004tzsa07x2k6ows"},{"post_id":"clktr4qsd004szsa00dz224dm","tag_id":"clktr4qrv0045zsa0fu37f5ij","_id":"clktr4qse004wzsa05upv5sph"},{"post_id":"clktr4qsd004szsa00dz224dm","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qsf0050zsa0gx8sbpb1"},{"post_id":"clktr4qsb004lzsa082d88qin","tag_id":"clktr4qsc004qzsa0gvzh5i5q","_id":"clktr4qsf0053zsa00bgp135t"},{"post_id":"clktr4qsf0051zsa08mz2gtwo","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qsg0056zsa04kzy9nmu"},{"post_id":"clktr4qsf0054zsa020oef316","tag_id":"clktr4qqy0005zsa0elgeh9ha","_id":"clktr4qsg0059zsa0hou4guh4"},{"post_id":"clktr4qsd004uzsa0evc9ch71","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qsh005bzsa0eaeofhu5"},{"post_id":"clktr4qsd004uzsa0evc9ch71","tag_id":"clktr4qsf004zzsa0382v3ctu","_id":"clktr4qsh005dzsa0cx5fgpi3"},{"post_id":"clktr4qse004xzsa0bzqefjg8","tag_id":"clktr4qr2000dzsa05tepe75l","_id":"clktr4qsh005fzsa0eorj0ftc"},{"post_id":"clktr4qse004xzsa0bzqefjg8","tag_id":"clktr4qsf004zzsa0382v3ctu","_id":"clktr4qsh005gzsa0e0bvcg5g"}],"Tag":[{"name":"随笔","_id":"clktr4qqy0005zsa0elgeh9ha"},{"name":"Java","_id":"clktr4qr2000dzsa05tepe75l"},{"name":"Java基础语法","_id":"clktr4qr6000lzsa00o4575g6"},{"name":"web","_id":"clktr4qra000szsa00ivv1dto"},{"name":"悦读","_id":"clktr4qrc0011zsa095ad0jal"},{"name":"Java异常","_id":"clktr4qrm002czsa073n87t0r"},{"name":"Java数组","_id":"clktr4qrq002qzsa00pdu681l"},{"name":"Java方法","_id":"clktr4qrs0036zsa028yaed03"},{"name":"Java流程控制","_id":"clktr4qrs003bzsa05np4gx3k"},{"name":"Java特性","_id":"clktr4qrt003lzsa006en0num"},{"name":"Java面向对象","_id":"clktr4qru003ozsa09x1abg9w"},{"name":"Markdown","_id":"clktr4qru003xzsa05t9f681n"},{"name":"WP","_id":"clktr4qrv0042zsa06agb57qy"},{"name":"git","_id":"clktr4qrv0045zsa0fu37f5ij"},{"name":"Dos","_id":"clktr4qrw0047zsa01fh8b6gh"},{"name":"排序算法","_id":"clktr4qrw004azsa029wkfb78"},{"name":"Android","_id":"clktr4qrw004dzsa04p97ghgn"},{"name":"硬件","_id":"clktr4qsc004qzsa0gvzh5i5q"},{"name":"设计模式","_id":"clktr4qsf004zzsa0382v3ctu"}]}}